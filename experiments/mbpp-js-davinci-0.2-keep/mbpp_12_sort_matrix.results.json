{
  "name": "mbpp_12_sort_matrix",
  "language": "js",
  "prompt": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum_row = [];\n    for(var i = 0; i < M.length; i++){\n        var sum = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        sum_row.push(sum);\n    }\n    for(var i = 0; i < sum_row.length; i++){\n        for(var j = 0; j < sum_row.length; j++){\n            if(sum_row[i] < sum_row[j]){\n                var temp = sum_row[i];\n                sum_row[i] = sum_row[j];\n                sum_row[j] = temp;\n                var temp_row = M[i];\n                M[i] = M[j];\n                M[j] = temp_row;\n            }\n        }\n    }\n    return M;\n}\nvar M = [[1,2,3],[4,5,6],[7,8,9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var arr = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        arr.push(sum);\n        sum = 0;\n    }\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                var temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                var temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\nvar M = [[1,2,3],[4,5,6],[7,8,9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var sum_arr = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        sum_arr.push(sum);\n        sum = 0;\n    }\n    for(var i = 0; i < sum_arr.length; i++){\n        for(var j = i + 1; j < sum_arr.length; j++){\n            if(sum_arr[i] > sum_arr[j]){\n                var temp = sum_arr[i];\n                sum_arr[i] = sum_arr[j];\n                sum_arr[j] = temp;\n                var temp_arr = M[i];\n                M[i] = M[j];\n                M[j] = temp_arr;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n\tvar sum = [];\n\tfor(var i = 0; i < M.length; i++){\n\t\tsum[i] = 0;\n\t\tfor(var j = 0; j < M[i].length; j++){\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\tfor(var i = 0; i < M.length; i++){\n\t\tfor(var j = i + 1; j < M.length; j++){\n\t\t\tif(sum[i] > sum[j]){\n\t\t\t\tvar temp = sum[i];\n\t\t\t\tsum[i] = sum[j];\n\t\t\t\tsum[j] = temp;\n\t\t\t\tfor(var k = 0; k < M[i].length; k++){\n\t\t\t\t\ttemp = M[i][k];\n\t\t\t\t\tM[i][k] = M[j][k];\n\t\t\t\t\tM[j][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum[i] = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum[i] += M[i][j];\n        }\n    }\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M.length - 1; j++){\n            if(sum[j] > sum[j+1]){\n                var temp = sum[j];\n                sum[j] = sum[j+1];\n                sum[j+1] = temp;\n                var temp2 = M[j];\n                M[j] = M[j+1];\n                M[j+1] = temp2;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    var result = [];\n    for(var i = 0; i < M.length; i++){\n        sum.push(M[i].reduce((a, b) => a + b, 0));\n    }\n    for(var i = 0; i < M.length; i++){\n        var min = Math.min(...sum);\n        var index = sum.indexOf(min);\n        result.push(M[index]);\n        sum[index] = Infinity;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var sum_arr = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        sum_arr.push(sum);\n        sum = 0;\n    }\n    var sorted_arr = sum_arr.sort(function(a,b){return a-b});\n    var sorted_matrix = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            for(var k = 0; k < sum_arr.length; k++){\n                if(sorted_arr[i] === sum_arr[k]){\n                    sorted_matrix.push(M[k]);\n                }\n            }\n        }\n    }\n    return sorted_matrix;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2,\n    3\n  ],\n  [\n    1,\n    2,\n    3\n  ],\n  [\n    1,\n    2,\n    3\n  ],\n  [\n    2,\n    4,\n    5\n  ],\n  [\n    2,\n    4,\n    5\n  ],\n  [\n    2,\n    4,\n    5\n  ],\n  [\n    1,\n    1,\n    1\n  ],\n  [\n    1,\n    1,\n    1\n  ],\n  [\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1,\n    1\n  ],\n  [\n    1,\n    2,\n    3\n  ],\n  [\n    2,\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpbsg28u3n.js:31:10)\n    at Object.<anonymous> (/tmp/tmpbsg28u3n.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ 1, 2, 3 ], [ 1, 2, 3 ],\n    [ 1, 2, 3 ], [ 2, 4, 5 ],\n    [ 2, 4, 5 ], [ 2, 4, 5 ],\n    [ 1, 1, 1 ], [ 1, 1, 1 ],\n    [ 1, 1, 1 ]\n  ],\n  expected: [ [ 1, 1, 1 ], [ 1, 2, 3 ], [ 2, 4, 5 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        var temp = 0;\n        for(var j = 0; j < M[i].length; j++){\n            temp += M[i][j];\n        }\n        sum.push(temp);\n    }\n    for(var i = 0; i < sum.length; i++){\n        for(var j = i + 1; j < sum.length; j++){\n            if(sum[i] > sum[j]){\n                var temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                var temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\nvar M = [[1,2,3],[4,5,6],[7,8,9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i=0;i<M.length;i++){\n        var s = 0;\n        for(var j=0;j<M[i].length;j++){\n            s += M[i][j];\n        }\n        sum.push(s);\n    }\n    var sorted = false;\n    while(!sorted){\n        sorted = true;\n        for(var i=0;i<sum.length-1;i++){\n            if(sum[i]>sum[i+1]){\n                var temp = sum[i];\n                sum[i] = sum[i+1];\n                sum[i+1] = temp;\n                var temp = M[i];\n                M[i] = M[i+1];\n                M[i+1] = temp;\n                sorted = false;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var sums = [];\n    var new_matrix = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        sums.push(sum);\n        sum = 0;\n    }\n    var sorted_sums = sums.slice().sort(function(a, b){return a - b});\n    for(var i = 0; i < sorted_sums.length; i++){\n        for(var j = 0; j < sums.length; j++){\n            if(sorted_sums[i] == sums[j]){\n                new_matrix.push(M[j]);\n                sums[j] = -1;\n            }\n        }\n    }\n    return new_matrix;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var arr = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        arr.push(sum);\n        sum = 0;\n    }\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                var temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                var temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var sum_arr = [];\n    var sorted_matrix = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        sum_arr.push(sum);\n        sum = 0;\n    }\n    var sorted_sum_arr = sum_arr.sort(function(a, b){return a - b});\n    for(var k = 0; k < sorted_sum_arr.length; k++){\n        for(var l = 0; l < sum_arr.length; l++){\n            if(sorted_sum_arr[k] == sum_arr[l]){\n                sorted_matrix.push(M[l]);\n            }\n        }\n    }\n    return sorted_matrix;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2,\n    3\n  ],\n  [\n    2,\n    4,\n    5\n  ],\n  [\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1,\n    1\n  ],\n  [\n    1,\n    2,\n    3\n  ],\n  [\n    2,\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp4higjvh4.js:29:10)\n    at Object.<anonymous> (/tmp/tmp4higjvh4.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2, 3 ], [ 2, 4, 5 ], [ 1, 1, 1 ] ],\n  expected: [ [ 1, 1, 1 ], [ 1, 2, 3 ], [ 2, 4, 5 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    var sorted = [];\n    for(var i = 0; i < M.length; i++){\n        sum.push(M[i].reduce((a, b) => a + b, 0));\n    }\n    for(var j = 0; j < sum.length; j++){\n        for(var k = 0; k < sum.length; k++){\n            if(sum[j] < sum[k]){\n                var temp = sum[j];\n                sum[j] = sum[k];\n                sum[k] = temp;\n                var temp2 = M[j];\n                M[j] = M[k];\n                M[k] = temp2;\n            }\n        }\n    }\n    return M;\n}\nvar M = [[1,2,3],[4,5,6],[7,8,9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum.push(M[i].reduce(function(a, b){\n            return a + b;\n        }));\n    }\n    for(var i = 0; i < sum.length; i++){\n        for(var j = i + 1; j < sum.length; j++){\n            if(sum[i] > sum[j]){\n                var temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                var temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var arr = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        arr.push(sum);\n        sum = 0;\n    }\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                var temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                var temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum[i] = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum[i] += M[i][j];\n        }\n    }\n    for(var i = 0; i < M.length; i++){\n        for(var j = i + 1; j < M.length; j++){\n            if(sum[i] > sum[j]){\n                var temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                var temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n            }\n        }\n    }\n    return M;\n}\nvar M = [[1,2,3],[4,5,6],[7,8,9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n\tvar sum = [];\n\tfor(var i = 0; i < M.length; i++){\n\t\tsum[i] = 0;\n\t\tfor(var j = 0; j < M[i].length; j++){\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor(var i = 0; i < M.length; i++){\n\t\tfor(var j = i + 1; j < M.length; j++){\n\t\t\tif(sum[i] > sum[j]){\n\t\t\t\tvar temp = sum[i];\n\t\t\t\tsum[i] = sum[j];\n\t\t\t\tsum[j] = temp;\n\t\t\t\t\n\t\t\t\tvar temp = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var sum_array = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        sum_array.push(sum);\n        sum = 0;\n    }\n    for(var i = 0; i < sum_array.length; i++){\n        for(var j = i + 1; j < sum_array.length; j++){\n            if(sum_array[i] > sum_array[j]){\n                var temp = sum_array[i];\n                sum_array[i] = sum_array[j];\n                sum_array[j] = temp;\n                var temp_array = M[i];\n                M[i] = M[j];\n                M[j] = temp_array;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var sum_array = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        sum_array.push(sum);\n        sum = 0;\n    }\n    var sorted_array = sum_array.sort(function(a,b){return a-b});\n    var sorted_matrix = [];\n    for(var i = 0; i < sorted_array.length; i++){\n        for(var j = 0; j < sum_array.length; j++){\n            if(sorted_array[i] == sum_array[j]){\n                sorted_matrix.push(M[j]);\n                sum_array[j] = -1;\n                break;\n            }\n        }\n    }\n    return sorted_matrix;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2,\n    3\n  ],\n  [\n    2,\n    4,\n    5\n  ],\n  [\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1,\n    1\n  ],\n  [\n    1,\n    2,\n    3\n  ],\n  [\n    2,\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpjwq__juk.js:31:10)\n    at Object.<anonymous> (/tmp/tmpjwq__juk.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2, 3 ], [ 2, 4, 5 ], [ 1, 1, 1 ] ],\n  expected: [ [ 1, 1, 1 ], [ 1, 2, 3 ], [ 2, 4, 5 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        var sum_row = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum_row += M[i][j];\n        }\n        sum.push(sum_row);\n    }\n    var sorted = false;\n    while(!sorted){\n        sorted = true;\n        for(var i = 0; i < sum.length - 1; i++){\n            if(sum[i] > sum[i + 1]){\n                var temp = sum[i];\n                sum[i] = sum[i + 1];\n                sum[i + 1] = temp;\n                var temp_row = M[i];\n                M[i] = M[i + 1];\n                M[i + 1] = temp_row;\n                sorted = false;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var arr = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        arr.push(sum);\n        sum = 0;\n    }\n    var sorted = arr.sort(function(a, b){return a - b});\n    var sorted_matrix = [];\n    for(var i = 0; i < sorted.length; i++){\n        for(var j = 0; j < arr.length; j++){\n            if(sorted[i] == arr[j]){\n                sorted_matrix.push(M[j]);\n                arr[j] = -1;\n            }\n        }\n    }\n    return sorted_matrix;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2,\n    3\n  ],\n  [\n    2,\n    4,\n    5\n  ],\n  [\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1,\n    1\n  ],\n  [\n    1,\n    2,\n    3\n  ],\n  [\n    2,\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp5wneigx9.js:30:10)\n    at Object.<anonymous> (/tmp/tmp5wneigx9.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2, 3 ], [ 2, 4, 5 ], [ 1, 1, 1 ] ],\n  expected: [ [ 1, 1, 1 ], [ 1, 2, 3 ], [ 2, 4, 5 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum.push(M[i].reduce(function(a, b){\n            return a + b;\n        }));\n    }\n    var sorted = [];\n    for(var i = 0; i < M.length; i++){\n        var min = Math.min.apply(null, sum);\n        var index = sum.indexOf(min);\n        sorted.push(M[index]);\n        sum[index] = Infinity;\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum.push(M[i].reduce(function(a, b){\n            return a + b;\n        }));\n    }\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M.length - 1; j++){\n            if(sum[j] > sum[j + 1]){\n                var temp = sum[j];\n                sum[j] = sum[j + 1];\n                sum[j + 1] = temp;\n                var temp2 = M[j];\n                M[j] = M[j + 1];\n                M[j + 1] = temp2;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum[i] = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum[i] += M[i][j];\n        }\n    }\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M.length; j++){\n            if(sum[i] < sum[j]){\n                var temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                var temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i=0; i<M.length; i++){\n        sum[i] = 0;\n        for(var j=0; j<M[i].length; j++){\n            sum[i] += M[i][j];\n        }\n    }\n    for(var i=0; i<M.length; i++){\n        for(var j=i+1; j<M.length; j++){\n            if(sum[i] > sum[j]){\n                var temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                var temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum_row = [];\n    for(var i = 0; i < M.length; i++){\n        var sum = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        sum_row.push(sum);\n    }\n    for(var i = 0; i < sum_row.length; i++){\n        for(var j = i + 1; j < sum_row.length; j++){\n            if(sum_row[i] > sum_row[j]){\n                var temp = sum_row[i];\n                sum_row[i] = sum_row[j];\n                sum_row[j] = temp;\n                var temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var sum_array = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        sum_array.push(sum);\n        sum = 0;\n    }\n    var sorted_array = sum_array.sort(function(a, b){return a - b});\n    var sorted_matrix = [];\n    for(var i = 0; i < sorted_array.length; i++){\n        for(var j = 0; j < sum_array.length; j++){\n            if(sorted_array[i] == sum_array[j]){\n                sorted_matrix.push(M[j]);\n                sum_array[j] = -1;\n                break;\n            }\n        }\n    }\n    return sorted_matrix;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2,\n    3\n  ],\n  [\n    2,\n    4,\n    5\n  ],\n  [\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1,\n    1\n  ],\n  [\n    1,\n    2,\n    3\n  ],\n  [\n    2,\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp5w_2dkxc.js:31:10)\n    at Object.<anonymous> (/tmp/tmp5w_2dkxc.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2, 3 ], [ 2, 4, 5 ], [ 1, 1, 1 ] ],\n  expected: [ [ 1, 1, 1 ], [ 1, 2, 3 ], [ 2, 4, 5 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    var sorted_matrix = [];\n    for(var i = 0; i < M.length; i++){\n        var sum_row = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum_row += M[i][j];\n        }\n        sum.push(sum_row);\n    }\n    var sorted_sum = sum.slice().sort(function(a,b){return a-b});\n    for(var i = 0; i < sorted_sum.length; i++){\n        for(var j = 0; j < sum.length; j++){\n            if(sorted_sum[i] == sum[j]){\n                sorted_matrix.push(M[j]);\n                sum[j] = -1;\n                break;\n            }\n        }\n    }\n    return sorted_matrix;\n}\nvar M = [[1,2,3],[4,5,6],[7,8,9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var arr = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        arr.push(sum);\n        sum = 0;\n    }\n    for(var i = 0; i < arr.length; i++){\n        for(var j = 0; j < arr.length; j++){\n            if(arr[i] < arr[j]){\n                var temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                var temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sums = [];\n    for(var i = 0; i < M.length; i++){\n        var sum = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    for(var i = 0; i < sums.length; i++){\n        for(var j = i + 1; j < sums.length; j++){\n            if(sums[i] > sums[j]){\n                var temp = sums[i];\n                sums[i] = sums[j];\n                sums[j] = temp;\n                var temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var arr = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        arr.push(sum);\n        sum = 0;\n    }\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                var temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                var temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\nvar M = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var arr = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        arr.push(sum);\n        sum = 0;\n    }\n    for(var k = 0; k < arr.length; k++){\n        for(var l = k + 1; l < arr.length; l++){\n            if(arr[k] > arr[l]){\n                var temp = arr[k];\n                arr[k] = arr[l];\n                arr[l] = temp;\n                var temp_arr = M[k];\n                M[k] = M[l];\n                M[l] = temp_arr;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        var sum_row = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum_row += M[i][j];\n        }\n        sum.push(sum_row);\n    }\n    var sorted_matrix = [];\n    var sorted_sum = sum.sort(function(a, b){return a - b});\n    for(var i = 0; i < sorted_sum.length; i++){\n        for(var j = 0; j < sum.length; j++){\n            if(sorted_sum[i] == sum[j]){\n                sorted_matrix.push(M[j]);\n                sum[j] = -1;\n                break;\n            }\n        }\n    }\n    return sorted_matrix;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2,\n    3\n  ],\n  [\n    2,\n    4,\n    5\n  ],\n  [\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1,\n    1\n  ],\n  [\n    1,\n    2,\n    3\n  ],\n  [\n    2,\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpktvfgnpg.js:30:10)\n    at Object.<anonymous> (/tmp/tmpktvfgnpg.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2, 3 ], [ 2, 4, 5 ], [ 1, 1, 1 ] ],\n  expected: [ [ 1, 1, 1 ], [ 1, 2, 3 ], [ 2, 4, 5 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum[i] = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum[i] += M[i][j];\n        }\n    }\n    for(var i = 0; i < M.length; i++){\n        for(var j = i + 1; j < M.length; j++){\n            if(sum[i] > sum[j]){\n                var temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123594,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sums = [];\n    for(var i = 0; i < M.length; i++){\n        var sum = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    var sorted = false;\n    while(!sorted){\n        sorted = true;\n        for(var i = 0; i < sums.length - 1; i++){\n            if(sums[i] > sums[i + 1]){\n                var temp = sums[i];\n                sums[i] = sums[i + 1];\n                sums[i + 1] = temp;\n                var temp2 = M[i];\n                M[i] = M[i + 1];\n                M[i + 1] = temp2;\n                sorted = false;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123594,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var sum_array = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        sum_array.push(sum);\n        sum = 0;\n    }\n    var temp = 0;\n    for(var i = 0; i < sum_array.length; i++){\n        for(var j = i + 1; j < sum_array.length; j++){\n            if(sum_array[i] > sum_array[j]){\n                temp = sum_array[i];\n                sum_array[i] = sum_array[j];\n                sum_array[j] = temp;\n                temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n            }\n        }\n    }\n    return M;\n}\nvar M = [[1,2,3],[4,5,6],[7,8,9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123595,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        var s = 0;\n        for(var j = 0; j < M[i].length; j++){\n            s += M[i][j];\n        }\n        sum.push(s);\n    }\n    for(var i = 0; i < sum.length; i++){\n        for(var j = i + 1; j < sum.length; j++){\n            if(sum[i] > sum[j]){\n                var temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                var temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\nvar M = [[1,2,3],[4,5,6],[7,8,9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum_row = [];\n    for(var i=0; i<M.length; i++){\n        var sum = 0;\n        for(var j=0; j<M[i].length; j++){\n            sum += M[i][j];\n        }\n        sum_row.push(sum);\n    }\n    for(var i=0; i<sum_row.length; i++){\n        for(var j=i+1; j<sum_row.length; j++){\n            if(sum_row[i] > sum_row[j]){\n                var temp = sum_row[i];\n                sum_row[i] = sum_row[j];\n                sum_row[j] = temp;\n                var temp_row = M[i];\n                M[i] = M[j];\n                M[j] = temp_row;\n            }\n        }\n    }\n    return M;\n}\nvar M = [[1,2,3],[4,5,6],[7,8,9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sums = [];\n    for(var i = 0; i < M.length; i++){\n        var sum = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    var sorted_sums = sums.slice().sort(function(a, b){return a - b});\n    var sorted_M = [];\n    for(var i = 0; i < sorted_sums.length; i++){\n        var index = sums.indexOf(sorted_sums[i]);\n        sorted_M.push(M[index]);\n    }\n    return sorted_M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum[i] = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum[i] += M[i][j];\n        }\n    }\n    for(var i = 0; i < M.length; i++){\n        for(var j = i + 1; j < M.length; j++){\n            if(sum[i] > sum[j]){\n                var temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                var temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sums = [];\n    for(var i = 0; i < M.length; i++){\n        var sum = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    for(var i = 0; i < sums.length; i++){\n        for(var j = i + 1; j < sums.length; j++){\n            if(sums[i] > sums[j]){\n                var temp = sums[i];\n                sums[i] = sums[j];\n                sums[j] = temp;\n                var temp_row = M[i];\n                M[i] = M[j];\n                M[j] = temp_row;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n\tvar sums = [];\n\tfor(var i = 0; i < M.length; i++){\n\t\tsums.push(M[i].reduce(function(a, b){\n\t\t\treturn a + b;\n\t\t}));\n\t}\n\tvar sorted = [];\n\tfor(var i = 0; i < M.length; i++){\n\t\tvar min = Math.min.apply(null, sums);\n\t\tvar index = sums.indexOf(min);\n\t\tsorted.push(M[index]);\n\t\tsums[index] = Infinity;\n\t}\n\treturn sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum[i] = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum[i] += M[i][j];\n        }\n    }\n    for(var i = 0; i < M.length; i++){\n        for(var j = i + 1; j < M.length; j++){\n            if(sum[i] > sum[j]){\n                var temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123594,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        var sum_row = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum_row += M[i][j];\n        }\n        sum.push(sum_row);\n    }\n    for(var i = 0; i < sum.length; i++){\n        for(var j = i + 1; j < sum.length; j++){\n            if(sum[i] > sum[j]){\n                var temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                var temp_row = M[i];\n                M[i] = M[j];\n                M[j] = temp_row;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123595,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        var temp = 0;\n        for(var j = 0; j < M[i].length; j++){\n            temp += M[i][j];\n        }\n        sum.push(temp);\n    }\n    var temp = 0;\n    for(var i = 0; i < sum.length; i++){\n        for(var j = i+1; j < sum.length; j++){\n            if(sum[i] > sum[j]){\n                temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n            }\n        }\n    }\n    return M;\n}\nvar M = [[1,2,3],[4,5,6],[7,8,9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n\tvar sum_row = [];\n\tvar sorted_matrix = [];\n\tvar temp = 0;\n\tfor(var i = 0; i < M.length; i++){\n\t\tfor(var j = 0; j < M[i].length; j++){\n\t\t\ttemp += M[i][j];\n\t\t}\n\t\tsum_row.push(temp);\n\t\ttemp = 0;\n\t}\n\tfor(var i = 0; i < sum_row.length; i++){\n\t\tfor(var j = 0; j < sum_row.length; j++){\n\t\t\tif(sum_row[i] < sum_row[j]){\n\t\t\t\ttemp = sum_row[i];\n\t\t\t\tsum_row[i] = sum_row[j];\n\t\t\t\tsum_row[j] = temp;\n\t\t\t\ttemp = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var arr = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        arr.push(sum);\n        sum = 0;\n    }\n    for(var i = 0; i < arr.length; i++){\n        for(var j = 0; j < arr.length; j++){\n            if(arr[i] < arr[j]){\n                var temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                var temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum_rows = [];\n    for(var i = 0; i < M.length; i++){\n        var sum = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        sum_rows.push(sum);\n    }\n    var sorted_rows = [];\n    for(var i = 0; i < sum_rows.length; i++){\n        var min = sum_rows[0];\n        var index = 0;\n        for(var j = 0; j < sum_rows.length; j++){\n            if(sum_rows[j] < min){\n                min = sum_rows[j];\n                index = j;\n            }\n        }\n        sorted_rows.push(M[index]);\n        sum_rows[index] = Number.MAX_VALUE;\n    }\n    return sorted_rows;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n\tvar rows = M.length;\n\tvar cols = M[0].length;\n\tvar sums = [];\n\tfor(var i = 0; i < rows; i++){\n\t\tvar sum = 0;\n\t\tfor(var j = 0; j < cols; j++){\n\t\t\tsum += M[i][j];\n\t\t}\n\t\tsums.push(sum);\n\t}\n\tvar sorted_sums = sums.sort(function(a, b){return a - b;});\n\tvar sorted_matrix = [];\n\tfor(var i = 0; i < rows; i++){\n\t\tvar row = [];\n\t\tfor(var j = 0; j < cols; j++){\n\t\t\trow.push(M[sorted_sums.indexOf(sums[i])][j]);\n\t\t}\n\t\tsorted_matrix.push(row);\n\t}\n\treturn sorted_matrix;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2,\n    3\n  ],\n  [\n    2,\n    4,\n    5\n  ],\n  [\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1,\n    1\n  ],\n  [\n    1,\n    2,\n    3\n  ],\n  [\n    2,\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpuu8cwuit.js:30:10)\n    at Object.<anonymous> (/tmp/tmpuu8cwuit.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2, 3 ], [ 2, 4, 5 ], [ 1, 1, 1 ] ],\n  expected: [ [ 1, 1, 1 ], [ 1, 2, 3 ], [ 2, 4, 5 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum[i] = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum[i] += M[i][j];\n        }\n    }\n    for(var i = 0; i < M.length; i++){\n        for(var j = i + 1; j < M.length; j++){\n            if(sum[i] > sum[j]){\n                var temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                var temp1 = M[i];\n                M[i] = M[j];\n                M[j] = temp1;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n\tvar sum = [];\n\tfor(var i = 0; i < M.length; i++){\n\t\tvar row_sum = 0;\n\t\tfor(var j = 0; j < M[i].length; j++){\n\t\t\trow_sum += M[i][j];\n\t\t}\n\t\tsum.push(row_sum);\n\t}\n\tfor(var i = 0; i < sum.length; i++){\n\t\tfor(var j = i + 1; j < sum.length; j++){\n\t\t\tif(sum[i] > sum[j]){\n\t\t\t\tvar temp = sum[i];\n\t\t\t\tsum[i] = sum[j];\n\t\t\t\tsum[j] = temp;\n\t\t\t\tvar temp_row = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp_row;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum.push(M[i].reduce((a,b) => a + b, 0));\n    }\n    var sorted = [];\n    for(var i = 0; i < M.length; i++){\n        var min = Math.min.apply(null, sum);\n        var index = sum.indexOf(min);\n        sorted.push(M[index]);\n        sum[index] = Infinity;\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sums = [];\n    for(var i = 0; i < M.length; i++){\n        var sum = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    var sorted = false;\n    while(!sorted){\n        sorted = true;\n        for(var i = 0; i < sums.length - 1; i++){\n            if(sums[i] > sums[i + 1]){\n                var temp = sums[i];\n                sums[i] = sums[i + 1];\n                sums[i + 1] = temp;\n                var temp = M[i];\n                M[i] = M[i + 1];\n                M[i + 1] = temp;\n                sorted = false;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum[i] = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum[i] += M[i][j];\n        }\n    }\n    var sorted = false;\n    while(!sorted){\n        sorted = true;\n        for(var i = 0; i < sum.length - 1; i++){\n            if(sum[i] > sum[i + 1]){\n                sorted = false;\n                var temp = sum[i];\n                sum[i] = sum[i + 1];\n                sum[i + 1] = temp;\n                var temp_row = M[i];\n                M[i] = M[i + 1];\n                M[i + 1] = temp_row;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var arr = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        arr.push(sum);\n        sum = 0;\n    }\n    var temp = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var arr = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        arr.push(sum);\n        sum = 0;\n    }\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                var temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                var temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var rows = M.length;\n    var cols = M[0].length;\n    var sums = [];\n    for(var i = 0; i < rows; i++){\n        var sum = 0;\n        for(var j = 0; j < cols; j++){\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    var sorted = false;\n    while(!sorted){\n        sorted = true;\n        for(var i = 0; i < rows - 1; i++){\n            if(sums[i] > sums[i + 1]){\n                var temp = sums[i];\n                sums[i] = sums[i + 1];\n                sums[i + 1] = temp;\n                var temp2 = M[i];\n                M[i] = M[i + 1];\n                M[i + 1] = temp2;\n                sorted = false;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var arr = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        arr.push(sum);\n        sum = 0;\n    }\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                var temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                var temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var arr = [];\n    var arr2 = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        arr.push(sum);\n        sum = 0;\n    }\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                var temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    for(var i = 0; i < arr.length; i++){\n        for(var j = 0; j < M.length; j++){\n            for(var k = 0; k < M[j].length; k++){\n                sum += M[j][k];\n            }\n            if(sum == arr[i]){\n                arr2.push(M[j]);\n            }\n            sum = 0;\n        }\n    }\n    return arr2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var sum_array = [];\n    var sorted_matrix = [];\n    var sorted_sum_array = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        sum_array.push(sum);\n        sum = 0;\n    }\n    sorted_sum_array = sum_array.slice().sort(function(a,b){return a - b});\n    for(var i = 0; i < sorted_sum_array.length; i++){\n        for(var j = 0; j < sum_array.length; j++){\n            if(sorted_sum_array[i] == sum_array[j]){\n                sorted_matrix.push(M[j]);\n                sum_array[j] = -1;\n            }\n        }\n    }\n    return sorted_matrix;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        var sum_row = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum_row += M[i][j];\n        }\n        sum.push(sum_row);\n    }\n    var sorted = false;\n    while(!sorted){\n        sorted = true;\n        for(var i = 0; i < sum.length - 1; i++){\n            if(sum[i] > sum[i + 1]){\n                var temp = sum[i];\n                sum[i] = sum[i + 1];\n                sum[i + 1] = temp;\n                var temp_row = M[i];\n                M[i] = M[i + 1];\n                M[i + 1] = temp_row;\n                sorted = false;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var sum_arr = [];\n    var sorted_matrix = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        sum_arr.push(sum);\n        sum = 0;\n    }\n    sum_arr.sort(function(a, b){return a - b});\n    for(var i = 0; i < sum_arr.length; i++){\n        for(var j = 0; j < M.length; j++){\n            var sum_row = 0;\n            for(var k = 0; k < M[j].length; k++){\n                sum_row += M[j][k];\n            }\n            if(sum_row == sum_arr[i]){\n                sorted_matrix.push(M[j]);\n            }\n        }\n    }\n    return sorted_matrix;\n}\nvar M = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var matrix = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        matrix.push(sum);\n        sum = 0;\n    }\n    for(var i = 0; i < matrix.length; i++){\n        for(var j = i + 1; j < matrix.length; j++){\n            if(matrix[i] > matrix[j]){\n                var temp = matrix[i];\n                matrix[i] = matrix[j];\n                matrix[j] = temp;\n                var temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\nvar M = [[1,2,3],[4,5,6],[7,8,9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123595,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum.push(M[i].reduce((a, b) => a + b, 0));\n    }\n    var sorted = [];\n    for(var i = 0; i < M.length; i++){\n        var min = Math.min(...sum);\n        var index = sum.indexOf(min);\n        sorted.push(M[index]);\n        sum.splice(index, 1);\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1,\n    1\n  ],\n  [\n    1,\n    2,\n    3\n  ],\n  [\n    1,\n    2,\n    3\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1,\n    1\n  ],\n  [\n    1,\n    2,\n    3\n  ],\n  [\n    2,\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpgkefcjfu.js:22:10)\n    at Object.<anonymous> (/tmp/tmpgkefcjfu.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 1, 1 ], [ 1, 2, 3 ], [ 1, 2, 3 ] ],\n  expected: [ [ 1, 1, 1 ], [ 1, 2, 3 ], [ 2, 4, 5 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var arr = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        arr.push(sum);\n        sum = 0;\n    }\n    for(var i = 0; i < arr.length; i++){\n        for(var j = 0; j < arr.length; j++){\n            if(arr[i] < arr[j]){\n                var temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                var temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\nvar M = [[1,2,3],[4,5,6],[7,8,9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var arr = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        arr.push(sum);\n        sum = 0;\n    }\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                var temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                var temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    var result = [];\n    for(var i = 0; i < M.length; i++){\n        var sum_row = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum_row += M[i][j];\n        }\n        sum.push(sum_row);\n    }\n    for(var i = 0; i < sum.length; i++){\n        var min = Math.min.apply(null, sum);\n        var index = sum.indexOf(min);\n        result.push(M[index]);\n        sum.splice(index, 1);\n        M.splice(index, 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1,\n    1\n  ],\n  [\n    1,\n    2,\n    3\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1,\n    1\n  ],\n  [\n    1,\n    2,\n    3\n  ],\n  [\n    2,\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpwvggcr91.js:27:10)\n    at Object.<anonymous> (/tmp/tmpwvggcr91.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 1, 1 ], [ 1, 2, 3 ] ],\n  expected: [ [ 1, 1, 1 ], [ 1, 2, 3 ], [ 2, 4, 5 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        var sum_row = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum_row += M[i][j];\n        }\n        sum.push(sum_row);\n    }\n    var sorted = [];\n    for(var i = 0; i < sum.length; i++){\n        var min = Math.min.apply(null, sum);\n        var index = sum.indexOf(min);\n        sorted.push(M[index]);\n        sum[index] = Infinity;\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var arr = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        arr.push(sum);\n        sum = 0;\n    }\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                var temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                var temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var rows = M.length;\n    var cols = M[0].length;\n    var sums = [];\n    for(var i = 0; i < rows; i++){\n        var sum = 0;\n        for(var j = 0; j < cols; j++){\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    for(var i = 0; i < rows; i++){\n        for(var j = i + 1; j < rows; j++){\n            if(sums[i] > sums[j]){\n                var temp = sums[i];\n                sums[i] = sums[j];\n                sums[j] = temp;\n                var temp_row = M[i];\n                M[i] = M[j];\n                M[j] = temp_row;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum.push(M[i].reduce(function(a, b){\n            return a + b;\n        }));\n    }\n    var result = [];\n    for(var i = 0; i < M.length; i++){\n        var min = Math.min.apply(null, sum);\n        var index = sum.indexOf(min);\n        result.push(M[index]);\n        sum[index] = Infinity;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var arr = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        arr.push(sum);\n        sum = 0;\n    }\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                var temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                var temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var sum_arr = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        sum_arr.push(sum);\n        sum = 0;\n    }\n    var sorted_arr = sum_arr.sort(function(a, b){return a - b});\n    var sorted_matrix = [];\n    for(var i = 0; i < sorted_arr.length; i++){\n        for(var j = 0; j < sum_arr.length; j++){\n            if(sorted_arr[i] == sum_arr[j]){\n                sorted_matrix.push(M[j]);\n                sum_arr[j] = -1;\n                break;\n            }\n        }\n    }\n    return sorted_matrix;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2,\n    3\n  ],\n  [\n    2,\n    4,\n    5\n  ],\n  [\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1,\n    1\n  ],\n  [\n    1,\n    2,\n    3\n  ],\n  [\n    2,\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp3x1m76_s.js:31:10)\n    at Object.<anonymous> (/tmp/tmp3x1m76_s.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2, 3 ], [ 2, 4, 5 ], [ 1, 1, 1 ] ],\n  expected: [ [ 1, 1, 1 ], [ 1, 2, 3 ], [ 2, 4, 5 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum_row = [];\n    for(var i = 0; i < M.length; i++){\n        sum_row[i] = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum_row[i] += M[i][j];\n        }\n    }\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M.length - 1; j++){\n            if(sum_row[j] > sum_row[j+1]){\n                var temp = sum_row[j];\n                sum_row[j] = sum_row[j+1];\n                sum_row[j+1] = temp;\n                var temp_row = M[j];\n                M[j] = M[j+1];\n                M[j+1] = temp_row;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum.push(M[i].reduce(function(a,b){\n            return a + b;\n        }));\n    }\n    var sorted = [];\n    for(var i = 0; i < M.length; i++){\n        var min = Math.min.apply(null, sum);\n        var index = sum.indexOf(min);\n        sorted.push(M[index]);\n        sum[index] = Infinity;\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var sum_arr = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        sum_arr.push(sum);\n        sum = 0;\n    }\n    for(var i = 0; i < sum_arr.length; i++){\n        for(var j = i + 1; j < sum_arr.length; j++){\n            if(sum_arr[i] > sum_arr[j]){\n                var temp = sum_arr[i];\n                sum_arr[i] = sum_arr[j];\n                sum_arr[j] = temp;\n                var temp_arr = M[i];\n                M[i] = M[j];\n                M[j] = temp_arr;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var n = M.length;\n    var m = M[0].length;\n    var sums = [];\n    for (var i = 0; i < n; i++) {\n        var sum = 0;\n        for (var j = 0; j < m; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    for (var i = 0; i < n; i++) {\n        for (var j = i + 1; j < n; j++) {\n            if (sums[i] > sums[j]) {\n                var temp = sums[i];\n                sums[i] = sums[j];\n                sums[j] = temp;\n                for (var k = 0; k < m; k++) {\n                    temp = M[i][k];\n                    M[i][k] = M[j][k];\n                    M[j][k] = temp;\n                }\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    let N = M.length;\n    let sum = [];\n    for(let i = 0; i < N; i++){\n        let s = 0;\n        for(let j = 0; j < N; j++){\n            s += M[i][j];\n        }\n        sum.push(s);\n    }\n    for(let i = 0; i < N; i++){\n        for(let j = i + 1; j < N; j++){\n            if(sum[i] > sum[j]){\n                let temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                for(let k = 0; k < N; k++){\n                    let t = M[i][k];\n                    M[i][k] = M[j][k];\n                    M[j][k] = t;\n                }\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var arr = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        arr.push(sum);\n        sum = 0;\n    }\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                var temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                var temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for (var i = 0; i < M.length; i++) {\n        sum[i] = 0;\n        for (var j = 0; j < M[i].length; j++) {\n            sum[i] += M[i][j];\n        }\n    }\n    for (var i = 0; i < sum.length; i++) {\n        for (var j = i + 1; j < sum.length; j++) {\n            if (sum[i] > sum[j]) {\n                var temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                var temp1 = M[i];\n                M[i] = M[j];\n                M[j] = temp1;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n\tvar sum = 0;\n\tvar sum_arr = [];\n\tfor(var i = 0; i < M.length; i++){\n\t\tfor(var j = 0; j < M[i].length; j++){\n\t\t\tsum += M[i][j];\n\t\t}\n\t\tsum_arr.push(sum);\n\t\tsum = 0;\n\t}\n\tfor(var i = 0; i < sum_arr.length; i++){\n\t\tfor(var j = i + 1; j < sum_arr.length; j++){\n\t\t\tif(sum_arr[i] > sum_arr[j]){\n\t\t\t\tvar temp = sum_arr[i];\n\t\t\t\tsum_arr[i] = sum_arr[j];\n\t\t\t\tsum_arr[j] = temp;\n\t\t\t\tvar temp_arr = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp_arr;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sums = [];\n    for(var i = 0; i < M.length; i++){\n        var sum = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    var sorted = false;\n    while(!sorted){\n        sorted = true;\n        for(var i = 0; i < sums.length - 1; i++){\n            if(sums[i] > sums[i + 1]){\n                var temp = sums[i];\n                sums[i] = sums[i + 1];\n                sums[i + 1] = temp;\n                var temp2 = M[i];\n                M[i] = M[i + 1];\n                M[i + 1] = temp2;\n                sorted = false;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123594,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum[i] = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum[i] += M[i][j];\n        }\n    }\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M.length - 1; j++){\n            if(sum[j] > sum[j + 1]){\n                var temp = sum[j];\n                sum[j] = sum[j + 1];\n                sum[j + 1] = temp;\n                var temp_arr = M[j];\n                M[j] = M[j + 1];\n                M[j + 1] = temp_arr;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    var result = [];\n    for(var i = 0; i < M.length; i++){\n        var sum_row = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum_row += M[i][j];\n        }\n        sum.push(sum_row);\n    }\n    for(var i = 0; i < sum.length; i++){\n        var min = sum[i];\n        var index = i;\n        for(var j = i; j < sum.length; j++){\n            if(sum[j] < min){\n                min = sum[j];\n                index = j;\n            }\n        }\n        var temp = sum[i];\n        sum[i] = sum[index];\n        sum[index] = temp;\n        var temp_row = M[i];\n        M[i] = M[index];\n        M[index] = temp_row;\n    }\n    return M;\n}\nvar M = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum[i] = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum[i] += M[i][j];\n        }\n    }\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M.length - 1; j++){\n            if(sum[j] > sum[j + 1]){\n                var temp = sum[j];\n                sum[j] = sum[j + 1];\n                sum[j + 1] = temp;\n                var temp2 = M[j];\n                M[j] = M[j + 1];\n                M[j + 1] = temp2;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123595,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var sum_arr = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        sum_arr.push(sum);\n        sum = 0;\n    }\n    for(var i = 0; i < sum_arr.length; i++){\n        for(var j = 0; j < sum_arr.length; j++){\n            if(sum_arr[i] < sum_arr[j]){\n                var temp = sum_arr[i];\n                sum_arr[i] = sum_arr[j];\n                sum_arr[j] = temp;\n                var temp_arr = M[i];\n                M[i] = M[j];\n                M[j] = temp_arr;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum_row = [];\n    for(var i = 0; i < M.length; i++){\n        sum_row[i] = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum_row[i] += M[i][j];\n        }\n    }\n    for(var i = 0; i < M.length; i++){\n        for(var j = i + 1; j < M.length; j++){\n            if(sum_row[i] > sum_row[j]){\n                var temp = sum_row[i];\n                sum_row[i] = sum_row[j];\n                sum_row[j] = temp;\n                var temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n            }\n        }\n    }\n    return M;\n}\nvar M = [[1,2,3],[4,5,6],[7,8,9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum[i] = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum[i] += M[i][j];\n        }\n    }\n    for(var i = 0; i < M.length; i++){\n        for(var j = i + 1; j < M.length; j++){\n            if(sum[i] > sum[j]){\n                var temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                var temp_arr = M[i];\n                M[i] = M[j];\n                M[j] = temp_arr;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum[i] = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum[i] += M[i][j];\n        }\n    }\n    for(var i = 0; i < M.length; i++){\n        for(var j = i + 1; j < M.length; j++){\n            if(sum[i] > sum[j]){\n                var temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123594,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var sum_array = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        sum_array.push(sum);\n        sum = 0;\n    }\n    var sorted_array = sum_array.sort(function(a, b){return a - b});\n    var sorted_matrix = [];\n    for(var i = 0; i < sorted_array.length; i++){\n        for(var j = 0; j < M.length; j++){\n            var sum = 0;\n            for(var k = 0; k < M[j].length; k++){\n                sum += M[j][k];\n            }\n            if(sum == sorted_array[i]){\n                sorted_matrix.push(M[j]);\n            }\n        }\n    }\n    return sorted_matrix;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n\tvar result = [];\n\tvar sum = 0;\n\tfor(var i = 0; i < M.length; i++){\n\t\tfor(var j = 0; j < M[i].length; j++){\n\t\t\tsum += M[i][j];\n\t\t}\n\t\tresult.push(sum);\n\t\tsum = 0;\n\t}\n\tfor(var i = 0; i < result.length; i++){\n\t\tfor(var j = i + 1; j < result.length; j++){\n\t\t\tif(result[i] > result[j]){\n\t\t\t\tvar temp = result[i];\n\t\t\t\tresult[i] = result[j];\n\t\t\t\tresult[j] = temp;\n\t\t\t\tvar temp2 = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp2;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum_row = [];\n    for(var i = 0; i < M.length; i++){\n        sum_row[i] = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum_row[i] += M[i][j];\n        }\n    }\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M.length - 1; j++){\n            if(sum_row[j] > sum_row[j+1]){\n                var temp = sum_row[j];\n                sum_row[j] = sum_row[j+1];\n                sum_row[j+1] = temp;\n                var temp_arr = M[j];\n                M[j] = M[j+1];\n                M[j+1] = temp_arr;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        var sum_row = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum_row += M[i][j];\n        }\n        sum.push(sum_row);\n    }\n    var sorted = false;\n    while(!sorted){\n        sorted = true;\n        for(var i = 0; i < sum.length - 1; i++){\n            if(sum[i] > sum[i + 1]){\n                var temp = sum[i];\n                sum[i] = sum[i + 1];\n                sum[i + 1] = temp;\n                var temp_row = M[i];\n                M[i] = M[i + 1];\n                M[i + 1] = temp_row;\n                sorted = false;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var rows = M.length;\n    var cols = M[0].length;\n    var sums = [];\n    for(var i = 0; i < rows; i++){\n        var sum = 0;\n        for(var j = 0; j < cols; j++){\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    for(var i = 0; i < rows; i++){\n        for(var j = i + 1; j < rows; j++){\n            if(sums[i] > sums[j]){\n                var temp = sums[i];\n                sums[i] = sums[j];\n                sums[j] = temp;\n                for(var k = 0; k < cols; k++){\n                    temp = M[i][k];\n                    M[i][k] = M[j][k];\n                    M[j][k] = temp;\n                }\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum[i] = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum[i] += M[i][j];\n        }\n    }\n    for(var i = 0; i < M.length; i++){\n        for(var j = i + 1; j < M.length; j++){\n            if(sum[i] > sum[j]){\n                var temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                var temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n            }\n        }\n    }\n    return M;\n}\nvar M = [[1,2,3],[4,5,6],[7,8,9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var rows = M.length;\n    var cols = M[0].length;\n    var sums = [];\n    for(var i = 0; i < rows; i++){\n        var sum = 0;\n        for(var j = 0; j < cols; j++){\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    for(var i = 0; i < rows; i++){\n        for(var j = i + 1; j < rows; j++){\n            if(sums[i] > sums[j]){\n                var temp = sums[i];\n                sums[i] = sums[j];\n                sums[j] = temp;\n                for(var k = 0; k < cols; k++){\n                    temp = M[i][k];\n                    M[i][k] = M[j][k];\n                    M[j][k] = temp;\n                }\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum_row = [];\n    for(var i=0; i<M.length; i++){\n        sum_row[i] = 0;\n        for(var j=0; j<M[i].length; j++){\n            sum_row[i] += M[i][j];\n        }\n    }\n    for(var i=0; i<M.length; i++){\n        for(var j=i+1; j<M.length; j++){\n            if(sum_row[i] > sum_row[j]){\n                var temp = sum_row[i];\n                sum_row[i] = sum_row[j];\n                sum_row[j] = temp;\n                var temp_row = M[i];\n                M[i] = M[j];\n                M[j] = temp_row;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        var sum_row = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum_row += M[i][j];\n        }\n        sum.push(sum_row);\n    }\n    for(var i = 0; i < sum.length; i++){\n        for(var j = i + 1; j < sum.length; j++){\n            if(sum[i] > sum[j]){\n                var temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                var temp_row = M[i];\n                M[i] = M[j];\n                M[j] = temp_row;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123595,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum_row = [];\n    for(var i = 0; i < M.length; i++){\n        sum_row[i] = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum_row[i] += M[i][j];\n        }\n    }\n    for(var i = 0; i < M.length; i++){\n        for(var j = i + 1; j < M.length; j++){\n            if(sum_row[i] > sum_row[j]){\n                var temp = sum_row[i];\n                sum_row[i] = sum_row[j];\n                sum_row[j] = temp;\n                var temp_row = M[i];\n                M[i] = M[j];\n                M[j] = temp_row;\n            }\n        }\n    }\n    return M;\n}\nvar M = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var arr = [];\n    for (var i = 0; i < M.length; i++) {\n        for (var j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        arr.push(sum);\n        sum = 0;\n    }\n    var sorted = arr.slice().sort(function(a,b){return a - b});\n    var result = [];\n    for (var i = 0; i < sorted.length; i++) {\n        for (var j = 0; j < arr.length; j++) {\n            if (sorted[i] === arr[j]) {\n                result.push(M[j]);\n                arr[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        var sum_row = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum_row += M[i][j];\n        }\n        sum.push(sum_row);\n    }\n    var sorted_matrix = [];\n    for(var i = 0; i < sum.length; i++){\n        var min = Math.min.apply(null, sum);\n        var index = sum.indexOf(min);\n        sorted_matrix.push(M[index]);\n        sum[index] = Infinity;\n    }\n    return sorted_matrix;\n}\n\nvar M = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum.push(0);\n        for(var j = 0; j < M[i].length; j++){\n            sum[i] += M[i][j];\n        }\n    }\n    for(var i = 0; i < M.length; i++){\n        for(var j = i + 1; j < M.length; j++){\n            if(sum[i] > sum[j]){\n                var temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                var temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    let sums = [];\n    for(let i = 0; i < M.length; i++){\n        let sum = 0;\n        for(let j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    let sorted = false;\n    while(!sorted){\n        sorted = true;\n        for(let i = 0; i < sums.length - 1; i++){\n            if(sums[i] > sums[i + 1]){\n                sorted = false;\n                let temp = sums[i];\n                sums[i] = sums[i + 1];\n                sums[i + 1] = temp;\n                let temp2 = M[i];\n                M[i] = M[i + 1];\n                M[i + 1] = temp2;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var result = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        result.push(sum);\n        sum = 0;\n    }\n    for(var i = 0; i < result.length; i++){\n        for(var j = i + 1; j < result.length; j++){\n            if(result[i] > result[j]){\n                var temp = result[i];\n                result[i] = result[j];\n                result[j] = temp;\n                var temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n  var sum = [];\n  for(var i = 0; i < M.length; i++){\n    sum.push(M[i].reduce(function(a,b){return a+b}));\n  }\n  for(var i = 0; i < M.length; i++){\n    for(var j = i + 1; j < M.length; j++){\n      if(sum[i] > sum[j]){\n        var temp = sum[i];\n        sum[i] = sum[j];\n        sum[j] = temp;\n        var temp = M[i];\n        M[i] = M[j];\n        M[j] = temp;\n      }\n    }\n  }\n  return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var arr = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        arr.push(sum);\n        sum = 0;\n    }\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                var temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                var temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n\tvar sum = [];\n\tvar result = [];\n\tfor(var i = 0; i < M.length; i++){\n\t\tvar sum_row = 0;\n\t\tfor(var j = 0; j < M[i].length; j++){\n\t\t\tsum_row += M[i][j];\n\t\t}\n\t\tsum.push(sum_row);\n\t}\n\tfor(var i = 0; i < sum.length; i++){\n\t\tvar min = sum[i];\n\t\tvar index = i;\n\t\tfor(var j = i + 1; j < sum.length; j++){\n\t\t\tif(sum[j] < min){\n\t\t\t\tmin = sum[j];\n\t\t\t\tindex = j;\n\t\t\t}\n\t\t}\n\t\tvar temp = sum[i];\n\t\tsum[i] = sum[index];\n\t\tsum[index] = temp;\n\t\tvar temp_row = M[i];\n\t\tM[i] = M[index];\n\t\tM[index] = temp_row;\n\t}\n\treturn M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n\tvar sum = [];\n\tvar temp = [];\n\tfor(var i = 0; i < M.length; i++){\n\t\tsum[i] = 0;\n\t\tfor(var j = 0; j < M[i].length; j++){\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\tfor(var i = 0; i < M.length; i++){\n\t\tfor(var j = i; j < M.length; j++){\n\t\t\tif(sum[i] > sum[j]){\n\t\t\t\ttemp = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp;\n\t\t\t\ttemp = sum[i];\n\t\t\t\tsum[i] = sum[j];\n\t\t\t\tsum[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n\tvar sum = 0;\n\tvar arr = [];\n\tfor(var i = 0; i < M.length; i++){\n\t\tfor(var j = 0; j < M[i].length; j++){\n\t\t\tsum += M[i][j];\n\t\t}\n\t\tarr.push(sum);\n\t\tsum = 0;\n\t}\n\tvar temp = 0;\n\tfor(var i = 0; i < arr.length; i++){\n\t\tfor(var j = i + 1; j < arr.length; j++){\n\t\t\tif(arr[i] > arr[j]){\n\t\t\t\ttemp = arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = temp;\n\t\t\t\ttemp = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var sum_arr = [];\n    var new_arr = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        sum_arr.push(sum);\n        sum = 0;\n    }\n    for(var i = 0; i < sum_arr.length; i++){\n        for(var j = 0; j < sum_arr.length; j++){\n            if(sum_arr[i] < sum_arr[j]){\n                var temp = sum_arr[i];\n                sum_arr[i] = sum_arr[j];\n                sum_arr[j] = temp;\n                var temp_arr = M[i];\n                M[i] = M[j];\n                M[j] = temp_arr;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var arr = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        arr.push(sum);\n        sum = 0;\n    }\n    var temp = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum.push(M[i].reduce((a,b) => a + b));\n    }\n    var sorted = [];\n    for(var i = 0; i < M.length; i++){\n        var min = Math.min(...sum);\n        var index = sum.indexOf(min);\n        sorted.push(M[index]);\n        sum[index] = Infinity;\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n\tvar sum = [];\n\tvar result = [];\n\tfor(var i = 0; i < M.length; i++){\n\t\tvar sum_row = 0;\n\t\tfor(var j = 0; j < M[i].length; j++){\n\t\t\tsum_row += M[i][j];\n\t\t}\n\t\tsum.push(sum_row);\n\t}\n\tfor(var i = 0; i < sum.length; i++){\n\t\tvar min = sum[i];\n\t\tvar index = i;\n\t\tfor(var j = i; j < sum.length; j++){\n\t\t\tif(sum[j] < min){\n\t\t\t\tmin = sum[j];\n\t\t\t\tindex = j;\n\t\t\t}\n\t\t}\n\t\tvar temp = sum[i];\n\t\tsum[i] = sum[index];\n\t\tsum[index] = temp;\n\t\tvar temp2 = M[i];\n\t\tM[i] = M[index];\n\t\tM[index] = temp2;\n\t}\n\treturn M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sums = [];\n    for(var i = 0; i < M.length; i++){\n        var sum = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    var sorted_sums = sums.slice().sort(function(a,b){return a-b});\n    var sorted_matrix = [];\n    for(var i = 0; i < sorted_sums.length; i++){\n        var index = sums.indexOf(sorted_sums[i]);\n        sorted_matrix.push(M[index]);\n    }\n    return sorted_matrix;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123595,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var matrix = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        matrix.push(sum);\n        sum = 0;\n    }\n    var sorted = matrix.slice().sort(function(a,b){return a-b});\n    var result = [];\n    for(var i = 0; i < sorted.length; i++){\n        for(var j = 0; j < matrix.length; j++){\n            if(sorted[i] == matrix[j]){\n                result.push(M[j]);\n                matrix[j] = -1;\n            }\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var N = [];\n    for(var i=0;i<M.length;i++){\n        var sum = 0;\n        for(var j=0;j<M[i].length;j++){\n            sum += M[i][j];\n        }\n        N.push(sum);\n    }\n    var temp = 0;\n    for(var i=0;i<N.length;i++){\n        for(var j=i+1;j<N.length;j++){\n            if(N[i]>N[j]){\n                temp = N[i];\n                N[i] = N[j];\n                N[j] = temp;\n                temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n            }\n        }\n    }\n    return M;\n}\nvar M = [[1,2,3],[4,5,6],[7,8,9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum.push(M[i].reduce((a,b) => a + b, 0));\n    }\n    var sorted = [];\n    for(var i = 0; i < M.length; i++){\n        var min = Math.min(...sum);\n        var index = sum.indexOf(min);\n        sorted.push(M[index]);\n        sum.splice(index, 1);\n        M.splice(index, 1);\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1,\n    1\n  ],\n  [\n    1,\n    2,\n    3\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1,\n    1\n  ],\n  [\n    1,\n    2,\n    3\n  ],\n  [\n    2,\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpa1435f90.js:23:10)\n    at Object.<anonymous> (/tmp/tmpa1435f90.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 1, 1 ], [ 1, 2, 3 ] ],\n  expected: [ [ 1, 1, 1 ], [ 1, 2, 3 ], [ 2, 4, 5 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        var s = 0;\n        for(var j = 0; j < M[i].length; j++){\n            s += M[i][j];\n        }\n        sum.push(s);\n    }\n    for(var i = 0; i < sum.length; i++){\n        for(var j = i + 1; j < sum.length; j++){\n            if(sum[i] > sum[j]){\n                var temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                var temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sums = [];\n    for(var i = 0; i < M.length; i++){\n        var sum = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    for(var i = 0; i < M.length; i++){\n        for(var j = i + 1; j < M.length; j++){\n            if(sums[i] > sums[j]){\n                var temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n                var temp = sums[i];\n                sums[i] = sums[j];\n                sums[j] = temp;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var sum_arr = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        sum_arr.push(sum);\n        sum = 0;\n    }\n    var sorted_arr = sum_arr.slice().sort(function(a,b){return a - b});\n    var sorted_matrix = [];\n    for(var i = 0; i < sorted_arr.length; i++){\n        for(var j = 0; j < sum_arr.length; j++){\n            if(sorted_arr[i] == sum_arr[j]){\n                sorted_matrix.push(M[j]);\n                sum_arr[j] = -1;\n                break;\n            }\n        }\n    }\n    return sorted_matrix;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    var sorted = [];\n    for(var i = 0; i < M.length; i++){\n        sum.push(M[i].reduce(function(a,b){\n            return a+b;\n        }));\n    }\n    for(var i = 0; i < M.length; i++){\n        var min = Math.min.apply(null, sum);\n        var index = sum.indexOf(min);\n        sorted.push(M[index]);\n        sum[index] = Infinity;\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var arr = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        arr.push(sum);\n        sum = 0;\n    }\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                var temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                var temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum.push(M[i].reduce((a, b) => a + b, 0));\n    }\n    var sorted_matrix = [];\n    for(var i = 0; i < M.length; i++){\n        var min = Math.min(...sum);\n        var index = sum.indexOf(min);\n        sorted_matrix.push(M[index]);\n        sum.splice(index, 1);\n    }\n    return sorted_matrix;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1,\n    1\n  ],\n  [\n    1,\n    2,\n    3\n  ],\n  [\n    1,\n    2,\n    3\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1,\n    1\n  ],\n  [\n    1,\n    2,\n    3\n  ],\n  [\n    2,\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpl7jra18g.js:22:10)\n    at Object.<anonymous> (/tmp/tmpl7jra18g.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 1, 1 ], [ 1, 2, 3 ], [ 1, 2, 3 ] ],\n  expected: [ [ 1, 1, 1 ], [ 1, 2, 3 ], [ 2, 4, 5 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum.push(M[i].reduce(function(a, b){\n            return a + b;\n        }));\n    }\n    var sorted = [];\n    for(var i = 0; i < M.length; i++){\n        var min = Math.min.apply(null, sum);\n        var index = sum.indexOf(min);\n        sorted.push(M[index]);\n        sum.splice(index, 1);\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1,\n    1\n  ],\n  [\n    1,\n    2,\n    3\n  ],\n  [\n    1,\n    2,\n    3\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1,\n    1\n  ],\n  [\n    1,\n    2,\n    3\n  ],\n  [\n    2,\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpa6wa8n27.js:24:10)\n    at Object.<anonymous> (/tmp/tmpa6wa8n27.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 1, 1 ], [ 1, 2, 3 ], [ 1, 2, 3 ] ],\n  expected: [ [ 1, 1, 1 ], [ 1, 2, 3 ], [ 2, 4, 5 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var arr = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        arr.push(sum);\n        sum = 0;\n    }\n    var temp = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n            }\n        }\n    }\n    return M;\n}\nvar M = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var rows = M.length;\n    var cols = M[0].length;\n    var sums = [];\n    for(var i = 0; i < rows; i++){\n        var sum = 0;\n        for(var j = 0; j < cols; j++){\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    var sorted = false;\n    while(!sorted){\n        sorted = true;\n        for(var i = 0; i < rows - 1; i++){\n            if(sums[i] > sums[i + 1]){\n                var temp = sums[i];\n                sums[i] = sums[i + 1];\n                sums[i + 1] = temp;\n                var temp2 = M[i];\n                M[i] = M[i + 1];\n                M[i + 1] = temp2;\n                sorted = false;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    var result = [];\n    for(var i = 0; i < M.length; i++){\n        var sum_row = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum_row += M[i][j];\n        }\n        sum.push(sum_row);\n    }\n    for(var i = 0; i < sum.length; i++){\n        var min = sum[i];\n        var index = i;\n        for(var j = i + 1; j < sum.length; j++){\n            if(sum[j] < min){\n                min = sum[j];\n                index = j;\n            }\n        }\n        var temp = sum[i];\n        sum[i] = sum[index];\n        sum[index] = temp;\n        var temp_row = M[i];\n        M[i] = M[index];\n        M[index] = temp_row;\n    }\n    return M;\n}\nvar M = [[1,2,3],[4,5,6],[7,8,9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum_rows = [];\n    for(var i = 0; i < M.length; i++){\n        sum_rows[i] = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum_rows[i] += M[i][j];\n        }\n    }\n    for(var i = 0; i < M.length; i++){\n        for(var j = i + 1; j < M.length; j++){\n            if(sum_rows[i] > sum_rows[j]){\n                var temp = sum_rows[i];\n                sum_rows[i] = sum_rows[j];\n                sum_rows[j] = temp;\n                for(var k = 0; k < M[i].length; k++){\n                    temp = M[i][k];\n                    M[i][k] = M[j][k];\n                    M[j][k] = temp;\n                }\n            }\n        }\n    }\n    return M;\n}\nvar M = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    var temp = [];\n    for(var i = 0; i < M.length; i++){\n        sum[i] = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum[i] += M[i][j];\n        }\n    }\n    for(var i = 0; i < M.length; i++){\n        for(var j = i + 1; j < M.length; j++){\n            if(sum[i] > sum[j]){\n                temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n                temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n            }\n        }\n    }\n    return M;\n}\nvar M = [[1,2,3],[4,5,6],[7,8,9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var arr = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        arr.push(sum);\n        sum = 0;\n    }\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                var temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                var temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\nvar M = [[1,2,3],[4,5,6],[7,8,9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum[i] = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum[i] += M[i][j];\n        }\n    }\n    for(var i = 0; i < M.length; i++){\n        for(var j = i + 1; j < M.length; j++){\n            if(sum[i] > sum[j]){\n                var temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123594,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var sum_array = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        sum_array.push(sum);\n        sum = 0;\n    }\n    for(var i = 0; i < sum_array.length; i++){\n        for(var j = i+1; j < sum_array.length; j++){\n            if(sum_array[i] > sum_array[j]){\n                var temp = sum_array[i];\n                sum_array[i] = sum_array[j];\n                sum_array[j] = temp;\n                var temp_array = M[i];\n                M[i] = M[j];\n                M[j] = temp_array;\n            }\n        }\n    }\n    return M;\n}\nvar M = [[1,2,3],[4,5,6],[7,8,9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum.push(M[i].reduce((a,b) => a + b, 0));\n    }\n    var sorted = [];\n    for(var i = 0; i < M.length; i++){\n        var min = Math.min(...sum);\n        var index = sum.indexOf(min);\n        sorted.push(M[index]);\n        sum[index] = Infinity;\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123595,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum[i] = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum[i] += M[i][j];\n        }\n    }\n    for(var i = 0; i < M.length; i++){\n        for(var j = i + 1; j < M.length; j++){\n            if(sum[i] > sum[j]){\n                var temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                var temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n            }\n        }\n    }\n    return M;\n}\nvar M = [[1,2,3],[4,5,6],[7,8,9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum[i] = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum[i] += M[i][j];\n        }\n    }\n    for(var i = 0; i < M.length; i++){\n        for(var j = i + 1; j < M.length; j++){\n            if(sum[i] > sum[j]){\n                var temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123594,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    var result = [];\n    for(var i = 0; i < M.length; i++){\n        sum.push(M[i].reduce((a,b) => a + b, 0));\n    }\n    for(var i = 0; i < M.length; i++){\n        var min = Math.min(...sum);\n        var index = sum.indexOf(min);\n        result.push(M[index]);\n        sum.splice(index, 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1,\n    1\n  ],\n  [\n    1,\n    2,\n    3\n  ],\n  [\n    1,\n    2,\n    3\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1,\n    1\n  ],\n  [\n    1,\n    2,\n    3\n  ],\n  [\n    2,\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpby8ntqsp.js:22:10)\n    at Object.<anonymous> (/tmp/tmpby8ntqsp.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 1, 1 ], [ 1, 2, 3 ], [ 1, 2, 3 ] ],\n  expected: [ [ 1, 1, 1 ], [ 1, 2, 3 ], [ 2, 4, 5 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum_row = [];\n    for(var i = 0; i < M.length; i++){\n        sum_row[i] = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum_row[i] += M[i][j];\n        }\n    }\n    for(var i = 0; i < M.length; i++){\n        for(var j = i + 1; j < M.length; j++){\n            if(sum_row[i] > sum_row[j]){\n                var temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n                var temp = sum_row[i];\n                sum_row[i] = sum_row[j];\n                sum_row[j] = temp;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum.push(M[i].reduce(function(a,b){return a+b;}));\n    }\n    var sorted = sum.slice().sort(function(a,b){return a-b;});\n    var sorted_matrix = [];\n    for(var i = 0; i < sorted.length; i++){\n        var index = sum.indexOf(sorted[i]);\n        sorted_matrix.push(M[index]);\n    }\n    return sorted_matrix;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var sum_arr = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        sum_arr.push(sum);\n        sum = 0;\n    }\n    for(var i = 0; i < sum_arr.length; i++){\n        for(var j = i + 1; j < sum_arr.length; j++){\n            if(sum_arr[i] > sum_arr[j]){\n                var temp = sum_arr[i];\n                sum_arr[i] = sum_arr[j];\n                sum_arr[j] = temp;\n                var temp_arr = M[i];\n                M[i] = M[j];\n                M[j] = temp_arr;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum.push(0);\n        for(var j = 0; j < M[i].length; j++){\n            sum[i] += M[i][j];\n        }\n    }\n    for(var i = 0; i < M.length; i++){\n        for(var j = i + 1; j < M.length; j++){\n            if(sum[i] > sum[j]){\n                var temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n                var temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    var temp = [];\n    for(var i = 0; i < M.length; i++){\n        var sum_row = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum_row += M[i][j];\n        }\n        sum.push(sum_row);\n    }\n    for(var i = 0; i < sum.length; i++){\n        for(var j = i + 1; j < sum.length; j++){\n            if(sum[i] > sum[j]){\n                var temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n\tvar sum_row = [];\n\tfor(var i = 0; i < M.length; i++){\n\t\tvar sum = 0;\n\t\tfor(var j = 0; j < M[i].length; j++){\n\t\t\tsum += M[i][j];\n\t\t}\n\t\tsum_row.push(sum);\n\t}\n\tfor(var i = 0; i < sum_row.length; i++){\n\t\tfor(var j = i + 1; j < sum_row.length; j++){\n\t\t\tif(sum_row[i] > sum_row[j]){\n\t\t\t\tvar temp = sum_row[i];\n\t\t\t\tsum_row[i] = sum_row[j];\n\t\t\t\tsum_row[j] = temp;\n\t\t\t\tvar temp_row = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp_row;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n\tvar sum = [];\n\tfor(var i = 0; i < M.length; i++){\n\t\tsum[i] = 0;\n\t\tfor(var j = 0; j < M[i].length; j++){\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\tfor(var i = 0; i < M.length; i++){\n\t\tfor(var j = i + 1; j < M.length; j++){\n\t\t\tif(sum[i] > sum[j]){\n\t\t\t\tvar temp = sum[i];\n\t\t\t\tsum[i] = sum[j];\n\t\t\t\tsum[j] = temp;\n\t\t\t\tvar temp2 = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp2;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    var result = [];\n    for(var i = 0; i < M.length; i++){\n        var sum_row = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum_row += M[i][j];\n        }\n        sum.push(sum_row);\n    }\n    var sorted_sum = sum.slice().sort(function(a,b){return a-b});\n    for(var i = 0; i < sorted_sum.length; i++){\n        var index = sum.indexOf(sorted_sum[i]);\n        result.push(M[index]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum.push(M[i].reduce(function(a,b){\n            return a + b;\n        }));\n    }\n    var sorted = [];\n    for(var i = 0; i < M.length; i++){\n        var min = Math.min.apply(null, sum);\n        var index = sum.indexOf(min);\n        sorted.push(M[index]);\n        sum[index] = Infinity;\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum.push(M[i].reduce((a, b) => a + b, 0));\n    }\n    var sorted = [];\n    for(var i = 0; i < M.length; i++){\n        var min = Math.min(...sum);\n        var index = sum.indexOf(min);\n        sorted.push(M[index]);\n        sum[index] = Infinity;\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum_rows = [];\n    for(var i = 0; i < M.length; i++){\n        sum_rows[i] = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum_rows[i] += M[i][j];\n        }\n    }\n    for(var i = 0; i < M.length; i++){\n        for(var j = i + 1; j < M.length; j++){\n            if(sum_rows[i] > sum_rows[j]){\n                var temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n                var temp = sum_rows[i];\n                sum_rows[i] = sum_rows[j];\n                sum_rows[j] = temp;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var rows = M.length;\n    var cols = M[0].length;\n    var sums = [];\n    for(var i = 0; i < rows; i++){\n        var sum = 0;\n        for(var j = 0; j < cols; j++){\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    var sorted = false;\n    while(!sorted){\n        sorted = true;\n        for(var i = 0; i < rows - 1; i++){\n            if(sums[i] > sums[i+1]){\n                sorted = false;\n                var temp = sums[i];\n                sums[i] = sums[i+1];\n                sums[i+1] = temp;\n                var temp = M[i];\n                M[i] = M[i+1];\n                M[i+1] = temp;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum[i] = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum[i] += M[i][j];\n        }\n    }\n    for(var i = 0; i < M.length; i++){\n        for(var j = i + 1; j < M.length; j++){\n            if(sum[i] > sum[j]){\n                var temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123594,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var sum_arr = [];\n    var result = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        sum_arr.push(sum);\n        sum = 0;\n    }\n    for(var i = 0; i < sum_arr.length; i++){\n        for(var j = i + 1; j < sum_arr.length; j++){\n            if(sum_arr[i] > sum_arr[j]){\n                var temp = sum_arr[i];\n                sum_arr[i] = sum_arr[j];\n                sum_arr[j] = temp;\n                var temp_arr = M[i];\n                M[i] = M[j];\n                M[j] = temp_arr;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var arr = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        arr.push(sum);\n        sum = 0;\n    }\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                var temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                var temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var rows = M.length;\n    var cols = M[0].length;\n    var sums = [];\n    for(var i = 0; i < rows; i++){\n        var sum = 0;\n        for(var j = 0; j < cols; j++){\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    var sorted_sums = sums.slice().sort(function(a,b){return a-b;});\n    var sorted_M = [];\n    for(var i = 0; i < rows; i++){\n        var index = sums.indexOf(sorted_sums[i]);\n        sorted_M.push(M[index]);\n        sums[index] = -1;\n    }\n    return sorted_M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum[i] = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum[i] += M[i][j];\n        }\n    }\n    for(var i = 0; i < M.length; i++){\n        for(var j = i + 1; j < M.length; j++){\n            if(sum[i] > sum[j]){\n                var temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                var temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\nvar M = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123594,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var sum_arr = [];\n    var sorted_matrix = [];\n    var sorted_arr = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        sum_arr.push(sum);\n        sum = 0;\n    }\n    sorted_arr = sum_arr.sort(function(a,b){\n        return a - b;\n    });\n    for(var i = 0; i < sorted_arr.length; i++){\n        for(var j = 0; j < M.length; j++){\n            var sum = 0;\n            for(var k = 0; k < M[j].length; k++){\n                sum += M[j][k];\n            }\n            if(sum === sorted_arr[i]){\n                sorted_matrix.push(M[j]);\n            }\n        }\n    }\n    return sorted_matrix;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum[i] = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum[i] += M[i][j];\n        }\n    }\n    for(var i = 0; i < M.length; i++){\n        for(var j = i + 1; j < M.length; j++){\n            if(sum[i] > sum[j]){\n                var temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                var temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum.push(M[i].reduce(function(a, b){\n            return a + b;\n        }));\n    }\n    var sorted = [];\n    for(var i = 0; i < M.length; i++){\n        var min = Math.min.apply(null, sum);\n        var index = sum.indexOf(min);\n        sorted.push(M[index]);\n        sum[index] = Infinity;\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    let sum = 0;\n    let sum_arr = [];\n    for(let i = 0; i < M.length; i++){\n        for(let j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        sum_arr.push(sum);\n        sum = 0;\n    }\n    for(let i = 0; i < sum_arr.length; i++){\n        for(let j = i + 1; j < sum_arr.length; j++){\n            if(sum_arr[i] > sum_arr[j]){\n                let temp = sum_arr[i];\n                sum_arr[i] = sum_arr[j];\n                sum_arr[j] = temp;\n                let temp_arr = M[i];\n                M[i] = M[j];\n                M[j] = temp_arr;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var arr = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        arr.push(sum);\n        sum = 0;\n    }\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                var temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                var temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum[i] = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum[i] += M[i][j];\n        }\n    }\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M.length; j++){\n            if(sum[i] < sum[j]){\n                var temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n                var temp2 = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var rows = M.length;\n    var cols = M[0].length;\n    var sums = [];\n    for (var i = 0; i < rows; i++){\n        var sum = 0;\n        for (var j = 0; j < cols; j++){\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    var sorted_sums = sums.sort(function(a, b){return a - b});\n    var sorted_M = [];\n    for (var i = 0; i < rows; i++){\n        var row = [];\n        for (var j = 0; j < cols; j++){\n            row.push(0);\n        }\n        sorted_M.push(row);\n    }\n    for (var i = 0; i < rows; i++){\n        var sum = sorted_sums[i];\n        var index = sums.indexOf(sum);\n        sums[index] = -1;\n        for (var j = 0; j < cols; j++){\n            sorted_M[i][j] = M[index][j];\n        }\n    }\n    return sorted_M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2,\n    3\n  ],\n  [\n    2,\n    4,\n    5\n  ],\n  [\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1,\n    1\n  ],\n  [\n    1,\n    2,\n    3\n  ],\n  [\n    2,\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmptzngvwb6.js:38:10)\n    at Object.<anonymous> (/tmp/tmptzngvwb6.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2, 3 ], [ 2, 4, 5 ], [ 1, 1, 1 ] ],\n  expected: [ [ 1, 1, 1 ], [ 1, 2, 3 ], [ 2, 4, 5 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        var sum_row = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum_row += M[i][j];\n        }\n        sum.push(sum_row);\n    }\n    for(var i = 0; i < sum.length; i++){\n        for(var j = 0; j < sum.length - 1; j++){\n            if(sum[j] > sum[j + 1]){\n                var temp = sum[j];\n                sum[j] = sum[j + 1];\n                sum[j + 1] = temp;\n                var temp_row = M[j];\n                M[j] = M[j + 1];\n                M[j + 1] = temp_row;\n            }\n        }\n    }\n    return M;\n}\nvar M = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sums = [];\n    for(var i = 0; i < M.length; i++){\n        var sum = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    var sorted = false;\n    while(!sorted){\n        sorted = true;\n        for(var i = 0; i < sums.length - 1; i++){\n            if(sums[i] > sums[i + 1]){\n                sorted = false;\n                var temp = sums[i];\n                sums[i] = sums[i + 1];\n                sums[i + 1] = temp;\n                var temp2 = M[i];\n                M[i] = M[i + 1];\n                M[i + 1] = temp2;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum[i] = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum[i] += M[i][j];\n        }\n    }\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M.length - i - 1; j++){\n            if(sum[j] > sum[j + 1]){\n                var temp = sum[j];\n                sum[j] = sum[j + 1];\n                sum[j + 1] = temp;\n                var temp_arr = M[j];\n                M[j] = M[j + 1];\n                M[j + 1] = temp_arr;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var arr = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        arr.push(sum);\n        sum = 0;\n    }\n    var sorted = arr.slice().sort(function(a,b){return a-b});\n    var indexes = [];\n    for(var i = 0; i < sorted.length; i++){\n        indexes.push(arr.indexOf(sorted[i]));\n        arr[arr.indexOf(sorted[i])] = -1;\n    }\n    var result = [];\n    for(var i = 0; i < indexes.length; i++){\n        result.push(M[indexes[i]]);\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var sum_arr = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        sum_arr.push(sum);\n        sum = 0;\n    }\n    var temp = 0;\n    for(var i = 0; i < sum_arr.length; i++){\n        for(var j = i + 1; j < sum_arr.length; j++){\n            if(sum_arr[i] > sum_arr[j]){\n                temp = sum_arr[i];\n                sum_arr[i] = sum_arr[j];\n                sum_arr[j] = temp;\n                temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum[i] = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum[i] += M[i][j];\n        }\n    }\n    for(var i = 0; i < M.length; i++){\n        for(var j = i + 1; j < M.length; j++){\n            if(sum[i] > sum[j]){\n                var temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                var temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum.push(M[i].reduce(function(a,b){return a+b},0));\n    }\n    var sorted = [];\n    for(var i = 0; i < M.length; i++){\n        var min = Math.min.apply(null,sum);\n        var index = sum.indexOf(min);\n        sorted.push(M[index]);\n        sum.splice(index,1);\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1,\n    1\n  ],\n  [\n    1,\n    2,\n    3\n  ],\n  [\n    1,\n    2,\n    3\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1,\n    1\n  ],\n  [\n    1,\n    2,\n    3\n  ],\n  [\n    2,\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmphcxrrm7c.js:22:10)\n    at Object.<anonymous> (/tmp/tmphcxrrm7c.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 1, 1 ], [ 1, 2, 3 ], [ 1, 2, 3 ] ],\n  expected: [ [ 1, 1, 1 ], [ 1, 2, 3 ], [ 2, 4, 5 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var sum_arr = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        sum_arr.push(sum);\n        sum = 0;\n    }\n    var sorted_arr = sum_arr.sort(function(a, b){return a - b});\n    var sorted_matrix = [];\n    for(var i = 0; i < sorted_arr.length; i++){\n        for(var j = 0; j < sum_arr.length; j++){\n            if(sorted_arr[i] == sum_arr[j]){\n                sorted_matrix.push(M[j]);\n            }\n        }\n    }\n    return sorted_matrix;\n}\nvar M = [[4, 5, 6], [3, 2, 1], [7, 8, 9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2,\n    3\n  ],\n  [\n    2,\n    4,\n    5\n  ],\n  [\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1,\n    1\n  ],\n  [\n    1,\n    2,\n    3\n  ],\n  [\n    2,\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpvfq8dzky.js:29:10)\n    at Object.<anonymous> (/tmp/tmpvfq8dzky.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2, 3 ], [ 2, 4, 5 ], [ 1, 1, 1 ] ],\n  expected: [ [ 1, 1, 1 ], [ 1, 2, 3 ], [ 2, 4, 5 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var sums = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        sums.push(sum);\n        sum = 0;\n    }\n    var sorted_sums = sums.sort();\n    var sorted_matrix = [];\n    for(var i = 0; i < sorted_sums.length; i++){\n        for(var j = 0; j < sums.length; j++){\n            if(sorted_sums[i] == sums[j]){\n                sorted_matrix.push(M[j]);\n            }\n        }\n    }\n    return sorted_matrix;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2,\n    3\n  ],\n  [\n    2,\n    4,\n    5\n  ],\n  [\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1,\n    1\n  ],\n  [\n    1,\n    2,\n    3\n  ],\n  [\n    2,\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp626y15mh.js:29:10)\n    at Object.<anonymous> (/tmp/tmp626y15mh.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2, 3 ], [ 2, 4, 5 ], [ 1, 1, 1 ] ],\n  expected: [ [ 1, 1, 1 ], [ 1, 2, 3 ], [ 2, 4, 5 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    var result = [];\n    for(var i = 0; i < M.length; i++){\n        var sum_row = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum_row += M[i][j];\n        }\n        sum.push(sum_row);\n    }\n    for(var i = 0; i < M.length; i++){\n        var min = sum[i];\n        var index = i;\n        for(var j = i; j < M.length; j++){\n            if(sum[j] < min){\n                min = sum[j];\n                index = j;\n            }\n        }\n        var temp = sum[i];\n        sum[i] = sum[index];\n        sum[index] = temp;\n        var temp_row = M[i];\n        M[i] = M[index];\n        M[index] = temp_row;\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var arr = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        arr.push(sum);\n        sum = 0;\n    }\n    var sorted = arr.slice().sort();\n    var result = [];\n    for(var i = 0; i < sorted.length; i++){\n        for(var j = 0; j < arr.length; j++){\n            if(sorted[i] == arr[j]){\n                result.push(M[j]);\n                arr[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    2,\n    4,\n    5\n  ],\n  [\n    1,\n    1,\n    1\n  ],\n  [\n    1,\n    2,\n    3\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1,\n    1\n  ],\n  [\n    1,\n    2,\n    3\n  ],\n  [\n    2,\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpmqqsrift.js:31:10)\n    at Object.<anonymous> (/tmp/tmpmqqsrift.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 2, 4, 5 ], [ 1, 1, 1 ], [ 1, 2, 3 ] ],\n  expected: [ [ 1, 1, 1 ], [ 1, 2, 3 ], [ 2, 4, 5 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n\tvar sum = 0;\n\tvar arr = [];\n\tfor(var i = 0; i < M.length; i++){\n\t\tfor(var j = 0; j < M[i].length; j++){\n\t\t\tsum += M[i][j];\n\t\t}\n\t\tarr.push(sum);\n\t\tsum = 0;\n\t}\n\tvar temp = 0;\n\tfor(var i = 0; i < arr.length; i++){\n\t\tfor(var j = i + 1; j < arr.length; j++){\n\t\t\tif(arr[i] > arr[j]){\n\t\t\t\ttemp = arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = temp;\n\t\t\t\ttemp = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var arr = [];\n    var result = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        arr.push(sum);\n        sum = 0;\n    }\n    for(var i = 0; i < arr.length; i++){\n        for(var j = 0; j < arr.length - 1; j++){\n            if(arr[j] > arr[j + 1]){\n                var temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n                var temp2 = M[j];\n                M[j] = M[j + 1];\n                M[j + 1] = temp2;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var sum_arr = [];\n    var sorted_matrix = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        sum_arr.push(sum);\n        sum = 0;\n    }\n    for(var i = 0; i < sum_arr.length; i++){\n        for(var j = i + 1; j < sum_arr.length; j++){\n            if(sum_arr[i] > sum_arr[j]){\n                var temp = sum_arr[i];\n                sum_arr[i] = sum_arr[j];\n                sum_arr[j] = temp;\n                var temp_arr = M[i];\n                M[i] = M[j];\n                M[j] = temp_arr;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var arr = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        arr.push(sum);\n        sum = 0;\n    }\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                var temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                var temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n\tvar sum = [];\n\tfor(var i = 0; i < M.length; i++){\n\t\tvar temp = 0;\n\t\tfor(var j = 0; j < M[i].length; j++){\n\t\t\ttemp += M[i][j];\n\t\t}\n\t\tsum.push(temp);\n\t}\n\tfor(var i = 0; i < sum.length; i++){\n\t\tfor(var j = i + 1; j < sum.length; j++){\n\t\t\tif(sum[i] > sum[j]){\n\t\t\t\tvar temp = sum[i];\n\t\t\t\tsum[i] = sum[j];\n\t\t\t\tsum[j] = temp;\n\t\t\t\tvar temp2 = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp2;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum.push(M[i].reduce(function(a,b){return a+b;}));\n    }\n    var temp = [];\n    for(var i = 0; i < M.length; i++){\n        var min = Math.min.apply(null, sum);\n        var index = sum.indexOf(min);\n        temp.push(M[index]);\n        sum[index] = Infinity;\n    }\n    return temp;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        var row_sum = 0;\n        for(var j = 0; j < M[i].length; j++){\n            row_sum += M[i][j];\n        }\n        sum.push(row_sum);\n    }\n    for(var i = 0; i < sum.length; i++){\n        for(var j = i + 1; j < sum.length; j++){\n            if(sum[i] > sum[j]){\n                var temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                var temp_row = M[i];\n                M[i] = M[j];\n                M[j] = temp_row;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var arr = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        arr.push(sum);\n        sum = 0;\n    }\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                var temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                var temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum[i] = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum[i] += M[i][j];\n        }\n    }\n    for(var i = 0; i < M.length; i++){\n        for(var j = i + 1; j < M.length; j++){\n            if(sum[i] > sum[j]){\n                var temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                var temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i=0;i<M.length;i++){\n        sum[i] = 0;\n        for(var j=0;j<M[i].length;j++){\n            sum[i] += M[i][j];\n        }\n    }\n    for(var i=0;i<M.length;i++){\n        for(var j=i+1;j<M.length;j++){\n            if(sum[i]>sum[j]){\n                var temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                var temp1 = M[i];\n                M[i] = M[j];\n                M[j] = temp1;\n            }\n        }\n    }\n    return M;\n}\nvar M = [[1,2,3],[4,5,6],[7,8,9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var sum_arr = [];\n    for(var i = 0; i < M.length; i++){\n        sum = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        sum_arr.push(sum);\n    }\n    for(var i = 0; i < sum_arr.length; i++){\n        for(var j = i + 1; j < sum_arr.length; j++){\n            if(sum_arr[i] > sum_arr[j]){\n                var temp = sum_arr[i];\n                sum_arr[i] = sum_arr[j];\n                sum_arr[j] = temp;\n                var temp_arr = M[i];\n                M[i] = M[j];\n                M[j] = temp_arr;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum.push(M[i].reduce(function(a, b){\n            return a + b;\n        }));\n    }\n    var sorted_matrix = [];\n    for(var i = 0; i < M.length; i++){\n        var min = Math.min.apply(null, sum);\n        var index = sum.indexOf(min);\n        sorted_matrix.push(M[index]);\n        sum[index] = Infinity;\n    }\n    return sorted_matrix;\n}\n\nvar M = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var sum_arr = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        sum_arr.push(sum);\n        sum = 0;\n    }\n    for(var i = 0; i < sum_arr.length; i++){\n        for(var j = i + 1; j < sum_arr.length; j++){\n            if(sum_arr[i] > sum_arr[j]){\n                var temp = sum_arr[i];\n                sum_arr[i] = sum_arr[j];\n                sum_arr[j] = temp;\n                var temp_arr = M[i];\n                M[i] = M[j];\n                M[j] = temp_arr;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var sums = [];\n    var sorted = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        sums.push(sum);\n        sum = 0;\n    }\n    var sorted_sums = sums.sort(function(a,b){return a-b});\n    for(var i = 0; i < sorted_sums.length; i++){\n        for(var j = 0; j < sums.length; j++){\n            if(sorted_sums[i] == sums[j]){\n                sorted.push(M[j]);\n            }\n        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2,\n    3\n  ],\n  [\n    2,\n    4,\n    5\n  ],\n  [\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1,\n    1\n  ],\n  [\n    1,\n    2,\n    3\n  ],\n  [\n    2,\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpdou4_s4c.js:29:10)\n    at Object.<anonymous> (/tmp/tmpdou4_s4c.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2, 3 ], [ 2, 4, 5 ], [ 1, 1, 1 ] ],\n  expected: [ [ 1, 1, 1 ], [ 1, 2, 3 ], [ 2, 4, 5 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum[i] = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum[i] += M[i][j];\n        }\n    }\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M.length - 1; j++){\n            if(sum[j] > sum[j + 1]){\n                var temp = sum[j];\n                sum[j] = sum[j + 1];\n                sum[j + 1] = temp;\n                var temp2 = M[j];\n                M[j] = M[j + 1];\n                M[j + 1] = temp2;\n            }\n        }\n    }\n    return M;\n}\nvar M = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum_row = [];\n    for(var i = 0; i < M.length; i++){\n        sum_row[i] = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum_row[i] += M[i][j];\n        }\n    }\n    for(var i = 0; i < M.length; i++){\n        for(var j = i + 1; j < M.length; j++){\n            if(sum_row[i] > sum_row[j]){\n                var temp = sum_row[i];\n                sum_row[i] = sum_row[j];\n                sum_row[j] = temp;\n                var temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum[i] = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum[i] += M[i][j];\n        }\n    }\n    for(var i = 0; i < M.length; i++){\n        for(var j = i + 1; j < M.length; j++){\n            if(sum[i] > sum[j]){\n                var temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123594,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum.push(M[i].reduce(function(a, b){\n            return a + b;\n        }));\n    }\n    var sorted = [];\n    for(var i = 0; i < M.length; i++){\n        var min = Math.min.apply(null, sum);\n        var index = sum.indexOf(min);\n        sorted.push(M[index]);\n        sum[index] = Infinity;\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum.push(M[i].reduce(function(a, b){\n            return a + b;\n        }));\n    }\n    var sorted = [];\n    for(var i = 0; i < M.length; i++){\n        var min = Math.min.apply(null, sum);\n        var index = sum.indexOf(min);\n        sorted.push(M[index]);\n        sum[index] = Infinity;\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var arr = [];\n    for(var i = 0; i < M.length; i++){\n        sum = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        arr.push(sum);\n    }\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                var temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                var temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum[i] = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum[i] += M[i][j];\n        }\n    }\n    for(var i = 0; i < sum.length; i++){\n        for(var j = i + 1; j < sum.length; j++){\n            if(sum[i] > sum[j]){\n                var temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum[i] = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum[i] += M[i][j];\n        }\n    }\n    var temp;\n    for(var i = 0; i < M.length; i++){\n        for(var j = i + 1; j < M.length; j++){\n            if(sum[i] > sum[j]){\n                temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var arr = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        arr.push(sum);\n        sum = 0;\n    }\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                var temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                var temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var sum_arr = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        sum_arr.push(sum);\n        sum = 0;\n    }\n    for(var i = 0; i < sum_arr.length; i++){\n        for(var j = i + 1; j < sum_arr.length; j++){\n            if(sum_arr[i] > sum_arr[j]){\n                var temp = sum_arr[i];\n                sum_arr[i] = sum_arr[j];\n                sum_arr[j] = temp;\n                var temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    var result = [];\n    for(var i = 0; i < M.length; i++){\n        var sum_row = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum_row += M[i][j];\n        }\n        sum.push(sum_row);\n    }\n    for(var i = 0; i < sum.length; i++){\n        var min = sum[i];\n        var index = i;\n        for(var j = i + 1; j < sum.length; j++){\n            if(sum[j] < min){\n                min = sum[j];\n                index = j;\n            }\n        }\n        var temp = sum[i];\n        sum[i] = sum[index];\n        sum[index] = temp;\n        result.push(M[index]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1,\n    1\n  ],\n  [\n    1,\n    1,\n    1\n  ],\n  [\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1,\n    1\n  ],\n  [\n    1,\n    2,\n    3\n  ],\n  [\n    2,\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpqt6dzmw_.js:34:10)\n    at Object.<anonymous> (/tmp/tmpqt6dzmw_.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 1, 1 ], [ 1, 1, 1 ], [ 1, 1, 1 ] ],\n  expected: [ [ 1, 1, 1 ], [ 1, 2, 3 ], [ 2, 4, 5 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var temp = 0;\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        M[i].push(sum);\n        sum = 0;\n    }\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M.length-1; j++){\n            if(M[j][M[j].length-1] > M[j+1][M[j+1].length-1]){\n                temp = M[j];\n                M[j] = M[j+1];\n                M[j+1] = temp;\n            }\n        }\n    }\n    for(var i = 0; i < M.length; i++){\n        M[i].pop();\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum.push(M[i].reduce(function(a, b){\n            return a + b;\n        }));\n    }\n    var sorted = [];\n    for(var i = 0; i < M.length; i++){\n        var index = sum.indexOf(Math.min.apply(null, sum));\n        sorted.push(M[index]);\n        sum[index] = Infinity;\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = 0;\n    var arr = [];\n    for(var i = 0; i < M.length; i++){\n        for(var j = 0; j < M[i].length; j++){\n            sum += M[i][j];\n        }\n        arr.push(sum);\n        sum = 0;\n    }\n    var temp;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n            }\n        }\n    }\n    return M;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1666123597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M){\n    var sum = [];\n    for(var i = 0; i < M.length; i++){\n        sum[i] = 0;\n        for(var j = 0; j < M[i].length; j++){\n            sum[i] += M[i][j];\n        }\n    }\n    for(var i = 0; i < M.length; i++){\n        for(var j = i + 1; j < M.length; j++){\n            if(sum[i] > sum[j]){\n                var temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                var temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n            }\n        }\n    }\n    return M;\n}\nvar M = [[1,2,3],[4,5,6],[7,8,9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}