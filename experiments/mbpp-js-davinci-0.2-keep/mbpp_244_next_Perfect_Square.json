{
  "name": "mbpp_244_next_Perfect_Square",
  "language": "js",
  "prompt": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var i=1;\n    while(i<N){\n        i++;\n    }\n    if(i*i==N){\n        return i*i;\n    }\n    else{\n        return (i+1)*(i+1);\n    }\n}",
    "    if(N<0){\n        return \"Invalid Input\";\n    }\n    else{\n        var x=Math.sqrt(N);\n        if(x%1==0){\n            return (x+1)*(x+1);\n        }\n        else{\n            return \"Not a perfect square\";\n        }\n    }\n}",
    "    var i = 1;\n    while(i*i<=N){\n        i++;\n    }\n    return i*i;\n}\nvar N = 5;\nvar result = next_Perfect_Square(N);",
    "    var i=1;\n    while(i*i<=N){\n        i++;\n    }\n    return i*i;\n}",
    "    var i = 1;\n    while(i*i<N){\n        i++;\n    }\n    return i*i;\n}",
    "    var x = N;\n    var y = 1;\n    var epsilon = 0.000001;\n    while(x - y > epsilon){\n        x = (x + y)/2;\n        y = N/x;\n    }\n    return Math.floor(x);\n}",
    "    var i = 1;\n    while(i*i<N){\n        i++;\n    }\n    return i*i;\n}",
    "    var num = Math.sqrt(N);\n    if(Number.isInteger(num)){\n        return (num+1)*(num+1);\n    }\n    else{\n        return \"Not a perfect square\";\n    }\n}\n",
    "    var i=1;\n    while(i*i<=N){\n        i++;\n    }\n    return i*i;\n}",
    "    var i = 1;\n    while(true){\n        if(i*i > N){\n            return i*i;\n        }\n        i++;\n    }\n}",
    "    var i = 1;\n    while(i*i <= N){\n        i++;\n    }\n    return i*i;\n}",
    "    var i = 1;\n    while(i*i<=N){\n        i++;\n    }\n    return i*i;\n}\n",
    "    var i=1;\n    while(i*i<N){\n        i++;\n    }\n    return i*i;\n}",
    "    var num = N;\n    while(true){\n        if(Math.sqrt(num) % 1 === 0){\n            return num;\n        }\n        num++;\n    }\n}",
    "    var i=1;\n    while(i*i<N){\n        i++;\n    }\n    return i*i;\n}",
    "    var i=1;\n    while(i<N){\n        i++;\n    }\n    if(i*i>N){\n        return i*i;\n    }\n}",
    "    var i = 1;\n    while(i*i<N){\n        i++;\n    }\n    return i*i;\n}",
    "    var i=1;\n    while(i<N){\n        i++;\n    }\n    var next_Perfect_Square=i*i;\n    return next_Perfect_Square;\n}",
    "    var i = 1;\n    while(i*i <= N){\n        i++;\n    }\n    return i*i;\n}",
    "    var i = 1;\n    while(i*i<N){\n        i++;\n    }\n    return i*i;\n}"
  ]
}