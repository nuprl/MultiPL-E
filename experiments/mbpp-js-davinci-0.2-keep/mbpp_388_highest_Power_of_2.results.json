{
  "name": "mbpp_388_highest_Power_of_2",
  "language": "js",
  "prompt": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_388_highest_Power_of_2.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    var p = 1;\n    while(p <= n){\n        i++;\n        p = p * 2;\n    }\n    return p/2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    if(n<=0){\n        return 0;\n    }\n    else{\n        return Math.pow(2,Math.floor(Math.log(n)/Math.log(2)));\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0,pow=1;\n    while(pow<=n){\n        i++;\n        pow=Math.pow(2,i);\n    }\n    return pow/2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    if(n<1){\n        return 0;\n    }\n    var res = 1;\n    while(res<=n){\n        res = res*2;\n    }\n    return res/2;\n}\nvar n = int(input(\"Enter the number: \"));\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "/tmp/tmpaqveb3cr.js:12\nvar n = int(input(\"Enter the number: \"));\n        ^\n\nReferenceError: int is not defined\n    at Object.<anonymous> (/tmp/tmpaqveb3cr.js:12:9)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "ReferenceError"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i) <= n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    var p=1;\n    while(p<=n){\n        p=p*2;\n        i++;\n    }\n    return p/2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nhighest_Power_of_2(32);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    var j=1;\n    while(j<=n){\n        i=j;\n        j=j*2;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i) <= n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return i-1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpupfe9_3s.js:14:10)\n    at Object.<anonymous> (/tmp/tmpupfe9_3s.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i) <= n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i) <= n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nhighest_Power_of_2(10);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i) <= n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nhighest_Power_of_2(100);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    var num = 1;\n    while(num<=n){\n        num = Math.pow(2, i);\n        i++;\n    }\n    return num/2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while (Math.pow(2, i) <= n){\n        i++;\n    }\n    return Math.pow(2, i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 1;\n    while(i<=n){\n        i = i*2;\n    }\n    return i/2;\n}\nhighest_Power_of_2(10);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 1;\n    while(i<n){\n        i = i*2;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpkdvbbmkb.js:14:10)\n    at Object.<anonymous> (/tmp/tmpkdvbbmkb.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=1;\n    while(i<=n){\n        i=i*2;\n    }\n    return i/2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=1;\n    while(i<=n){\n        i=i*2;\n    }\n    return i/2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i) <= n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i) <= n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    var power=1;\n    while(power<=n){\n        i++;\n        power=Math.pow(2,i);\n    }\n    return power/2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 1;\n    while(i<n){\n        i = i*2;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpkdvbbmkb.js:14:10)\n    at Object.<anonymous> (/tmp/tmpkdvbbmkb.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i) <= n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i) <= n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 1;\n    while(i < n){\n        i = i * 2;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmp987mvsmd.js:14:10)\n    at Object.<anonymous> (/tmp/tmp987mvsmd.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i) <= n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i) <= n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i) <= n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i) <= n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while (Math.pow(2, i) <= n) {\n        i++;\n    }\n    return Math.pow(2, i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n  var i=0;\n  while(Math.pow(2,i)<=n){\n    i++;\n  }\n  return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    var p=1;\n    while(p<=n){\n        p=p*2;\n        i++;\n    }\n    return p/2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=1;\n    while(i<=n){\n        i=i*2;\n    }\n    return i/2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i) <= n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    var num=0;\n    while(num<=n){\n        num=Math.pow(2,i);\n        i++;\n    }\n    return num/2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i) <= n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 1;\n    while(i<=n){\n        i = i*2;\n    }\n    return i/2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i) <= n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    if(n<=1){\n        return 1;\n    }\n    else{\n        return 2*highest_Power_of_2(n/2);\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmp944ow6ql.js:15:10)\n    at Object.<anonymous> (/tmp/tmp944ow6ql.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=1;\n    while(i<=n){\n        i=i*2;\n    }\n    return i/2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 1;\n    while(i<=n){\n        i = i*2;\n    }\n    return i/2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i) <= n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i) <= n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    var j=1;\n    while(j<=n){\n        i++;\n        j=j*2;\n    }\n    return j/2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nhighest_Power_of_2(100);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2, i) <= n){\n        i++;\n    }\n    return Math.pow(2, i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    if(n<=0){\n        return 0;\n    }\n    else{\n        return Math.pow(2,Math.floor(Math.log2(n)));\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 1;\n    while(i<=n){\n        i = i*2;\n    }\n    return i/2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i) <= n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 1;\n    while(i < n){\n        i = i * 2;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmp987mvsmd.js:14:10)\n    at Object.<anonymous> (/tmp/tmp987mvsmd.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i) <= n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    if(n<=0){\n        return 0;\n    }\n    else{\n        return Math.pow(2,Math.floor(Math.log2(n)));\n    }\n}\nhighest_Power_of_2(10);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i) <= n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nhighest_Power_of_2(10);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 1;\n    while(i<n){\n        i = i*2;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpkdvbbmkb.js:14:10)\n    at Object.<anonymous> (/tmp/tmpkdvbbmkb.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2, i) <= n){\n        i++;\n    }\n    return Math.pow(2, i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    var p=1;\n    while(p<=n){\n        p=p*2;\n        i++;\n    }\n    return p/2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i) <= n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=1;\n    while(i<=n){\n        i=i*2;\n    }\n    return i/2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    if(n<=0){\n        return 0;\n    }\n    else{\n        var i=0;\n        while(Math.pow(2,i)<=n){\n            i++;\n        }\n        return Math.pow(2,i-1);\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=1;\n    while(i<n){\n        i=i*2;\n    }\n    return i/2;\n}\nhighest_Power_of_2(10);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely deep-equal\n\n32\n    at test (/tmp/tmprho8gtmn.js:18:10)\n    at Object.<anonymous> (/tmp/tmprho8gtmn.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected: 32,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 1;\n    while(i < n){\n        i = i * 2;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmp987mvsmd.js:14:10)\n    at Object.<anonymous> (/tmp/tmp987mvsmd.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    if(n<=0){\n        return 0;\n    }\n    else{\n        return Math.pow(2,Math.floor(Math.log2(n)));\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=1;\n    while(i<=n){\n        i=i*2;\n    }\n    return i/2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 1;\n    while(i < n){\n        i = i * 2;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmp987mvsmd.js:14:10)\n    at Object.<anonymous> (/tmp/tmp987mvsmd.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    var j=1;\n    while(j<=n){\n        i=j;\n        j=j*2;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    if(n<=1){\n        return n;\n    }\n    else{\n        return highest_Power_of_2(n/2);\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.625\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpru14y7a6.js:15:10)\n    at Object.<anonymous> (/tmp/tmpru14y7a6.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.625,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i) <= n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    return Math.pow(2,Math.floor(Math.log(n)/Math.log(2)));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while (Math.pow(2, i) <= n){\n        i++;\n    }\n    return Math.pow(2, i-1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}