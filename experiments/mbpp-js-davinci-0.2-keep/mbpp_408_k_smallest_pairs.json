{
  "name": "mbpp_408_k_smallest_pairs",
  "language": "js",
  "prompt": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_408_k_smallest_pairs.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var pairs = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            pairs.push([nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    return pairs.slice(0, k);\n}\n",
    "    var arr = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            arr.push([nums1[i], nums2[j]]);\n        }\n    }\n    arr.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    var result = [];\n    for(var i = 0; i < k; i++){\n        result.push(arr[i]);\n    }\n    return result;\n}\n",
    "    let res = [];\n    let len1 = nums1.length;\n    let len2 = nums2.length;\n    if(len1 === 0 || len2 === 0 || k === 0){\n        return res;\n    }\n    let index = new Array(len1).fill(0);\n    while(k > 0){\n        let min_val = Number.MAX_SAFE_INTEGER;\n        let min_index = -1;\n        for(let i = 0; i < len1; i++){\n            if(index[i] >= len2){\n                continue;\n            }\n            if(nums1[i] + nums2[index[i]] < min_val){\n                min_val = nums1[i] + nums2[index[i]];\n                min_index = i;\n            }\n        }\n        if(min_index === -1){\n            break;\n        }\n        res.push([nums1[min_index], nums2[index[min_index]]]);\n        index[min_index]++;\n        k--;\n    }\n    return res;\n}\n",
    "    var result = [];\n    var len1 = nums1.length;\n    var len2 = nums2.length;\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    while(count < k){\n        if(i < len1 && j < len2){\n            if(nums1[i] < nums2[j]){\n                result.push([nums1[i], nums2[j]]);\n                i++;\n            }else{\n                result.push([nums1[i], nums2[j]]);\n                j++;\n            }\n        }else if(i < len1){\n            result.push([nums1[i], nums2[j-1]]);\n            i++;\n        }else if(j < len2){\n            result.push([nums1[i-1], nums2[j]]);\n            j++;\n        }\n        count++;\n    }\n    return result;\n}\n\nvar nums1 = [1,7,11];\nvar nums2 = [2,4,6];\nvar k = 3;",
    "    var result = [];\n    var len1 = nums1.length;\n    var len2 = nums2.length;\n    var len = len1 * len2;\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    var temp = [];\n    while(count < k && i < len1 && j < len2){\n        if(nums1[i] < nums2[j]){\n            temp.push(nums1[i]);\n            temp.push(nums2[j]);\n            result.push(temp);\n            temp = [];\n            i++;\n            count++;\n        }else if(nums1[i] > nums2[j]){\n            temp.push(nums1[i]);\n            temp.push(nums2[j]);\n            result.push(temp);\n            temp = [];\n            j++;\n            count++;\n        }else{\n            temp.push(nums1[i]);\n            temp.push(nums2[j]);\n            result.push(temp);\n            temp = [];\n            i++;\n            j++;\n            count++;\n        }\n    }\n    return result;\n}\n\nvar nums1 = [1,2,3];\nvar nums2 = [4,5,6];\nvar k = 3;",
    "    let pairs = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            pairs.push([nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return pairs.slice(0, k);\n}\n",
    "    var result = [];\n    var len1 = nums1.length;\n    var len2 = nums2.length;\n    var i = 0;\n    var j = 0;\n    while(i < len1 && j < len2 && k > 0){\n        var sum = nums1[i] + nums2[j];\n        if(sum < 0){\n            result.push([nums1[i], nums2[j]]);\n            i++;\n            k--;\n        }else{\n            result.push([nums1[i], nums2[j]]);\n            j++;\n            k--;\n        }\n    }\n    return result;\n}\n",
    "    let res = [];\n    let len1 = nums1.length;\n    let len2 = nums2.length;\n    if(len1 == 0 || len2 == 0 || k == 0) return res;\n    let index = new Array(len1).fill(0);\n    while(k-- > 0){\n        let min_val = Infinity;\n        let min_index = -1;\n        for(let i = 0; i < len1; i++){\n            if(index[i] >= len2) continue;\n            if(nums1[i] + nums2[index[i]] < min_val){\n                min_val = nums1[i] + nums2[index[i]];\n                min_index = i;\n            }\n        }\n        if(min_index == -1) break;\n        res.push([nums1[min_index], nums2[index[min_index]]]);\n        index[min_index]++;\n    }\n    return res;\n}\n",
    "    var res = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            res.push([nums1[i], nums2[j]]);\n        }\n    }\n    res.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    return res.slice(0, k);\n}\n",
    "    let pairs = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            pairs.push([nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return pairs.slice(0, k);\n}\n",
    "    let result = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return result.slice(0, k);\n}\n",
    "    var result = [];\n    var len1 = nums1.length;\n    var len2 = nums2.length;\n    if(len1 === 0 || len2 === 0 || k === 0){\n        return result;\n    }\n    var index = new Array(len1).fill(0);\n    while(k > 0){\n        var min_val = Number.MAX_VALUE;\n        var min_index = -1;\n        for(var i = 0; i < len1; i++){\n            if(index[i] >= len2){\n                continue;\n            }\n            if(nums1[i] + nums2[index[i]] < min_val){\n                min_val = nums1[i] + nums2[index[i]];\n                min_index = i;\n            }\n        }\n        if(min_index === -1){\n            break;\n        }\n        result.push([nums1[min_index], nums2[index[min_index]]]);\n        index[min_index]++;\n        k--;\n    }\n    return result;\n}\n",
    "    var result = [];\n    var len1 = nums1.length;\n    var len2 = nums2.length;\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    while(count < k && i < len1 && j < len2){\n        var sum = nums1[i] + nums2[j];\n        if(result.length === 0){\n            result.push([nums1[i], nums2[j]]);\n            count++;\n        }else{\n            var len = result.length;\n            var flag = false;\n            for(var m = 0; m < len; m++){\n                var temp = result[m][0] + result[m][1];\n                if(sum < temp){\n                    result.splice(m, 0, [nums1[i], nums2[j]]);\n                    flag = true;\n                    break;\n                }\n            }\n            if(!flag){\n                result.push([nums1[i], nums2[j]]);\n            }\n            count++;\n        }\n        if(j < len2 - 1){\n            j++;\n        }else{\n            i++;\n            j = 0;\n        }\n    }\n    return result;\n}\n",
    "    let pairs = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            pairs.push([nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return pairs.slice(0, k);\n}\n",
    "    let result = [];\n    let len1 = nums1.length;\n    let len2 = nums2.length;\n    let i = 0;\n    let j = 0;\n    while(i < len1 && j < len2 && k > 0){\n        if(nums1[i] < nums2[j]){\n            result.push([nums1[i], nums2[j]]);\n            i++;\n        }else{\n            result.push([nums1[i], nums2[j]]);\n            j++;\n        }\n        k--;\n    }\n    while(i < len1 && k > 0){\n        result.push([nums1[i], nums2[j-1]]);\n        i++;\n        k--;\n    }\n    while(j < len2 && k > 0){\n        result.push([nums1[i-1], nums2[j]]);\n        j++;\n        k--;\n    }\n    return result;\n}\n",
    "    let pairs = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            pairs.push([nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return pairs.slice(0, k);\n}\n",
    "    let result = [];\n    let len1 = nums1.length;\n    let len2 = nums2.length;\n    let index = [];\n    for(let i = 0; i < len1; i++){\n        index.push(0);\n    }\n    while(k > 0){\n        let min = Infinity;\n        let minIndex = -1;\n        for(let i = 0; i < len1; i++){\n            if(index[i] < len2 && nums1[i] + nums2[index[i]] < min){\n                min = nums1[i] + nums2[index[i]];\n                minIndex = i;\n            }\n        }\n        if(minIndex == -1) break;\n        result.push([nums1[minIndex], nums2[index[minIndex]]]);\n        index[minIndex]++;\n        k--;\n    }\n    return result;\n}\n",
    "    let result = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return result.slice(0, k);\n}\n",
    "    let result = [];\n    let len1 = nums1.length;\n    let len2 = nums2.length;\n    if(len1 === 0 || len2 === 0 || k === 0) return result;\n    let index = new Array(len1).fill(0);\n    while(k > 0){\n        let min_val = Infinity;\n        let min_index = -1;\n        for(let i = 0; i < len1; i++){\n            if(index[i] >= len2) continue;\n            if(nums1[i] + nums2[index[i]] < min_val){\n                min_val = nums1[i] + nums2[index[i]];\n                min_index = i;\n            }\n        }\n        if(min_index === -1) break;\n        result.push([nums1[min_index], nums2[index[min_index]]]);\n        index[min_index]++;\n        k--;\n    }\n    return result;\n}\n",
    "    var res = [];\n    var len1 = nums1.length;\n    var len2 = nums2.length;\n    if(len1 === 0 || len2 === 0 || k === 0){\n        return res;\n    }\n    var index = new Array(len1).fill(0);\n    while(k > 0){\n        var min_val = Number.MAX_VALUE;\n        var min_index = -1;\n        for(var i = 0; i < len1; i++){\n            if(index[i] >= len2){\n                continue;\n            }\n            if(nums1[i] + nums2[index[i]] < min_val){\n                min_val = nums1[i] + nums2[index[i]];\n                min_index = i;\n            }\n        }\n        if(min_index === -1){\n            break;\n        }\n        res.push([nums1[min_index], nums2[index[min_index]]]);\n        index[min_index]++;\n        k--;\n    }\n    return res;\n}\n"
  ]
}