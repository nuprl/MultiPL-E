{
  "name": "mbpp_743_rotate_right",
  "language": "js",
  "prompt": "//Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfunction rotate_right(list, m){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var n = list.length;\n    var r = m % n;\n    var result = [];\n    for(var i = 0; i < n; i++){\n        result[i] = list[(i + r) % n];\n    }\n    return result;\n}\n",
    "    var temp = list.slice(list.length - m, list.length);\n    var temp2 = list.slice(0, list.length - m);\n    return temp.concat(temp2);\n}\n",
    "    return list.slice(m, list.length).concat(list.slice(0, m));\n}\n",
    "    var temp = list.slice(list.length - m, list.length);\n    var temp2 = list.slice(0, list.length - m);\n    return temp.concat(temp2);\n}\n",
    "    var len = list.length;\n    var mod = m % len;\n    var result = [];\n    for(var i = 0; i < len; i++){\n        result[i] = list[(i + mod) % len];\n    }\n    return result;\n}\n",
    "    for(var i=0; i<m; i++){\n        var temp = list.pop();\n        list.unshift(temp);\n    }\n    return list;\n}\n",
    "    var new_list = [];\n    for(var i = 0; i < list.length; i++){\n        new_list[(i + m) % list.length] = list[i];\n    }\n    return new_list;\n}",
    "  var new_list = [];\n  for(var i = 0; i < list.length; i++){\n    new_list[(i + m) % list.length] = list[i];\n  }\n  return new_list;\n}\n",
    "    return list.slice(m).concat(list.slice(0, m));\n}\n",
    "    var new_list = [];\n    for(var i = 0; i < list.length; i++){\n        new_list.push(list[(i + m) % list.length]);\n    }\n    return new_list;\n}\n",
    "    var rotated_list = [];\n    for(var i = 0; i < list.length; i++){\n        rotated_list[(i + m) % list.length] = list[i];\n    }\n    return rotated_list;\n}\n",
    "  var temp = list.slice(list.length-m, list.length);\n  var temp2 = list.slice(0, list.length-m);\n  return temp.concat(temp2);\n}\n",
    "    for(var i=0; i<m; i++){\n        var last = list.pop();\n        list.unshift(last);\n    }\n    return list;\n}\n",
    "  var len = list.length;\n  var new_list = [];\n  for(var i = 0; i < len; i++){\n    new_list[(i + m) % len] = list[i];\n  }\n  return new_list;\n}\n",
    "    var result = [];\n    for(var i = 0; i < list.length; i++){\n        result[(i + m) % list.length] = list[i];\n    }\n    return result;\n}\n",
    "  var n = list.length;\n  var r = m % n;\n  var g_c_d = gcd(r, n);\n  for (var i = 0; i < g_c_d; i++){\n    var temp = list[n - i - 1];\n    var j = n - i - 1;\n    while (true){\n      var k = j - r;\n      if (k < 0){\n        k = k + n;\n      }\n      if (k == n - i - 1){\n        break;\n      }\n      list[j] = list[k];\n      j = k;\n    }\n    list[j] = temp;\n  }\n  return list;\n}\n",
    "    var temp = list.slice(list.length - m);\n    var temp2 = list.slice(0, list.length - m);\n    return temp.concat(temp2);\n}\n",
    "    var i;\n    for(i=0; i<m; i++){\n        list.unshift(list.pop());\n    }\n    return list;\n}\n",
    "    var n = list.length;\n    var r = m % n;\n    var temp = list.slice(n-r, n);\n    var temp2 = list.slice(0, n-r);\n    return temp.concat(temp2);\n}\n",
    "    for(let i = 0; i < m; i++){\n        let last = list.pop();\n        list.unshift(last);\n    }\n    return list;\n}\n"
  ]
}