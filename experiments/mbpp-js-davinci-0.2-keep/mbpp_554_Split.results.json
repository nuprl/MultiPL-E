{
  "name": "mbpp_554_Split",
  "language": "js",
  "prompt": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_554_Split.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 1){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 1){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for (var i = 0; i < list.length; i++){\n        if (list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i=0; i<list.length; i++){\n        if(list[i]%2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for (var i = 0; i < list.length; i++){\n        if (list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for (var i = 0; i < list.length; i++){\n        if (list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(odd);\n}\nSplit([1,2,3,4,5,6,7,8,9]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n[ 1, 3, 5 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  5\n]\n    at test (/tmp/tmptun5vldc.js:22:10)\n    at Object.<anonymous> (/tmp/tmptun5vldc.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 1, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    var even = [];\n    for (var i = 0; i < list.length; i++){\n        if (list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(odd);\n    console.log(even);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123070,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n[ 2, 4, 6, 8, 10 ]\n[ 1, 3, 5 ]\n[ 2, 4, 6 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  5\n]\n    at test (/tmp/tmpzy389rl6.js:23:10)\n    at Object.<anonymous> (/tmp/tmpzy389rl6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 1, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for (var i = 0; i < list.length; i++){\n        if (list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var oddList = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for (var i = 0; i < list.length; i++){\n        if (list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for (var i = 0; i < list.length; i++){\n        if (list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i=0; i<list.length; i++){\n        if(list[i]%2!=0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(odd);\n}\nSplit([1,2,3,4,5,6,7,8,9]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n[ 1, 3, 5 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  5\n]\n    at test (/tmp/tmptun5vldc.js:22:10)\n    at Object.<anonymous> (/tmp/tmptun5vldc.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 1, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2!=0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for (var i = 0; i < list.length; i++){\n        if (list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2!=0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for (var i = 0; i < list.length; i++){\n        if (list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2!=0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for (var i = 0; i < list.length; i++){\n        if (list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 !== 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Even: \" + even);\n    console.log(\"Odd: \" + odd);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123070,
      "stdout": "Even: 2,4,6,8,10\nOdd: 1,3,5,7,9\nEven: 2,4,6\nOdd: 1,3,5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  5\n]\n    at test (/tmp/tmpycq9olzd.js:22:10)\n    at Object.<anonymous> (/tmp/tmpycq9olzd.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 1, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 !== 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for (var i = 0; i < list.length; i++){\n        if (list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Odd: \" + odd);\n    console.log(\"Even: \" + even);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123070,
      "stdout": "Odd: 1,3,5,7,9\nEven: 2,4,6,8,10\nOdd: 1,3,5\nEven: 2,4,6\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  5\n]\n    at test (/tmp/tmphy94qbfv.js:23:10)\n    at Object.<anonymous> (/tmp/tmphy94qbfv.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 1, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for (var i = 0; i < list.length; i++){\n        if (list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    var even = [];\n    for (var i = 0; i < list.length; i++){\n        if (list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(odd);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123070,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n[ 1, 3, 5 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  5\n]\n    at test (/tmp/tmpsxutw64g.js:22:10)\n    at Object.<anonymous> (/tmp/tmpsxutw64g.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 1, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Odd: \" + odd);\n    console.log(\"Even: \" + even);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123070,
      "stdout": "Odd: 1,3,5,7,9\nEven: 2,4,6,8,10\nOdd: 1,3,5\nEven: 2,4,6\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  5\n]\n    at test (/tmp/tmphy94qbfv.js:23:10)\n    at Object.<anonymous> (/tmp/tmphy94qbfv.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 1, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i=0; i<list.length; i++){\n        if(list[i]%2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for (var i = 0; i < list.length; i++){\n        if (list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for (var i = 0; i < list.length; i++){\n        if (list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for (var i = 0; i < list.length; i++){\n        if (list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i=0; i<list.length; i++){\n        if(list[i]%2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i=0; i<list.length; i++){\n        if(list[i]%2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for (var i = 0; i < list.length; i++){\n        if (list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nvar list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 1){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Odd: \" + odd);\n    console.log(\"Even: \" + even);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123070,
      "stdout": "Odd: 1,3,5,7,9\nEven: 2,4,6,8,10\nOdd: 1,3,5\nEven: 2,4,6\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  5\n]\n    at test (/tmp/tmphy94qbfv.js:23:10)\n    at Object.<anonymous> (/tmp/tmphy94qbfv.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 1, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Odd: \" + odd);\n    console.log(\"Even: \" + even);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123070,
      "stdout": "Odd: 1,3,5,7,9\nEven: 2,4,6,8,10\nOdd: 1,3,5\nEven: 2,4,6\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  5\n]\n    at test (/tmp/tmphy94qbfv.js:23:10)\n    at Object.<anonymous> (/tmp/tmphy94qbfv.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 1, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Odd: \" + odd);\n    console.log(\"Even: \" + even);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123070,
      "stdout": "Odd: 1,3,5,7,9\nEven: 2,4,6,8,10\nOdd: 1,3,5\nEven: 2,4,6\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  5\n]\n    at test (/tmp/tmphy94qbfv.js:23:10)\n    at Object.<anonymous> (/tmp/tmphy94qbfv.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 1, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2!=0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 1){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for (var i = 0; i < list.length; i++){\n        if (list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 1){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for (var i = 0; i < list.length; i++){\n        if (list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i]%2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for (var i = 0; i < list.length; i++){\n        if (list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(odd);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123070,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n[ 1, 3, 5 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  5\n]\n    at test (/tmp/tmpdypc7mt2.js:22:10)\n    at Object.<anonymous> (/tmp/tmpdypc7mt2.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 1, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for (var i = 0; i < list.length; i++){\n        if (list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i=0; i<list.length; i++){\n        if(list[i]%2!=0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i=0; i<list.length; i++){\n        if(list[i]%2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list){\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 != 0){\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}