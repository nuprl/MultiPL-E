{
  "name": "mbpp_722_filter_data",
  "language": "js",
  "prompt": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_722_filter_data.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    return Object.entries(students).filter(([name, [height, weight]]) => height > h && weight > w).map(([name, [height, weight]]) => ({name, height, weight}));\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp7l_5dh8c.js:11:10)\n    at Object.<anonymous> (/tmp/tmp7l_5dh8c.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    return Object.keys(students).filter(function(key){\n        return students[key][0] > h && students[key][1] > w;\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpd6kbhjx2.js:13:10)\n    at Object.<anonymous> (/tmp/tmpd6kbhjx2.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    return Object.keys(students).filter(key => students[key][0] > h && students[key][1] > w)\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp2zaift8_.js:11:10)\n    at Object.<anonymous> (/tmp/tmp2zaift8_.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp4nox44bx.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4nox44bx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp4nox44bx.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4nox44bx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let [key, value] of Object.entries(students)) {\n        if (value[0] > h && value[1] > w) {\n            result[key] = value;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpq6xorbfr.js:17:10)\n    at Object.<anonymous> (/tmp/tmpq6xorbfr.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let [key, value] of Object.entries(students)){\n        if (value[0] > h && value[1] > w){\n            result[key] = value;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpu5h93i3u.js:17:10)\n    at Object.<anonymous> (/tmp/tmpu5h93i3u.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let filtered = {};\n    for (let student in students){\n        if (students[student][0] > h && students[student][1] > w){\n            filtered[student] = students[student];\n        }\n    }\n    return filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp0cposnbc.js:17:10)\n    at Object.<anonymous> (/tmp/tmp0cposnbc.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let [key, value] of Object.entries(students)) {\n        if (value[0] > h && value[1] > w) {\n            result[key] = value;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpq6xorbfr.js:17:10)\n    at Object.<anonymous> (/tmp/tmpq6xorbfr.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp4nox44bx.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4nox44bx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    var filtered = {};\n    for(var key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            filtered[key] = students[key];\n        }\n    }\n    return filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpqzhx5kqq.js:17:10)\n    at Object.<anonymous> (/tmp/tmpqzhx5kqq.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let filtered = {};\n    for (let key in students){\n        if (students[key][0] >= h && students[key][1] >= w){\n            filtered[key] = students[key];\n        }\n    }\n    return filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let student in students){\n        if(students[student][0] > h && students[student][1] > w){\n            result[student] = students[student];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpexd2xjcl.js:17:10)\n    at Object.<anonymous> (/tmp/tmpexd2xjcl.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp4nox44bx.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4nox44bx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp4nox44bx.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4nox44bx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    return Object.entries(students).filter(student => student[1][0] > h && student[1][1] > w).map(student => student[0]);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp178ygmfv.js:11:10)\n    at Object.<anonymous> (/tmp/tmp178ygmfv.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    return Object.entries(students).filter(([name, [height, weight]]) => height >= h && weight >= w).map(([name, [height, weight]]) => name);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Cierra Vega'\n]\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpt7b6z9gr.js:11:10)\n    at Object.<anonymous> (/tmp/tmpt7b6z9gr.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Cierra Vega' ],\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp4nox44bx.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4nox44bx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    return Object.entries(students).filter(([key, value]) => value[0] > h && value[1] > w).map(([key, value]) => key);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpy2ilh1pk.js:11:10)\n    at Object.<anonymous> (/tmp/tmpy2ilh1pk.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n  let result = {};\n  for (let key in students){\n    if (students[key][0] > h && students[key][1] > w){\n      result[key] = students[key];\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpt42iaxhp.js:17:10)\n    at Object.<anonymous> (/tmp/tmpt42iaxhp.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp4nox44bx.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4nox44bx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    return Object.entries(students).filter(student => student[1][0] > h && student[1][1] > w);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpf9k13pjc.js:11:10)\n    at Object.<anonymous> (/tmp/tmpf9k13pjc.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    return Object.entries(students).filter(([name, [height, weight]]) => height > h && weight > w);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpek78q_0o.js:11:10)\n    at Object.<anonymous> (/tmp/tmpek78q_0o.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let filtered = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            filtered[key] = students[key];\n        }\n    }\n    return filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkslfjf4s.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkslfjf4s.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    return Object.keys(students).filter(function(key){\n        return students[key][0] >= h && students[key][1] >= w;\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Cierra Vega'\n]\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpmbnnqa63.js:13:10)\n    at Object.<anonymous> (/tmp/tmpmbnnqa63.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Cierra Vega' ],\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n  let result = {};\n  for(let key in students){\n    if(students[key][0] > h && students[key][1] > w){\n      result[key] = students[key];\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpzdb2yeud.js:17:10)\n    at Object.<anonymous> (/tmp/tmpzdb2yeud.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let res = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            res[key] = students[key];\n        }\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp4aqc81_q.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4aqc81_q.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp4nox44bx.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4nox44bx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    var result = {};\n    for (var key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpnspn5hhu.js:17:10)\n    at Object.<anonymous> (/tmp/tmpnspn5hhu.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    var result = {};\n    for(var key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp_eppbe0p.js:17:10)\n    at Object.<anonymous> (/tmp/tmp_eppbe0p.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let filtered = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            filtered[key] = students[key];\n        }\n    }\n    return filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkslfjf4s.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkslfjf4s.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    return Object.entries(students).filter(student => student[1][0] >= h && student[1][1] >= w).map(student => student[0])\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Cierra Vega'\n]\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp7_bc54ue.js:11:10)\n    at Object.<anonymous> (/tmp/tmp7_bc54ue.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Cierra Vega' ],\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    return Object.keys(students).filter(function(key){\n        return students[key][0] > h && students[key][1] > w;\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpd6kbhjx2.js:13:10)\n    at Object.<anonymous> (/tmp/tmpd6kbhjx2.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    return Object.keys(students).filter(key => students[key][0] > h && students[key][1] > w);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpjsuwtiyn.js:11:10)\n    at Object.<anonymous> (/tmp/tmpjsuwtiyn.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    return Object.entries(students).filter(student => student[1][0] > h && student[1][1] > w).map(student => student[0]);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp178ygmfv.js:11:10)\n    at Object.<anonymous> (/tmp/tmp178ygmfv.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp4nox44bx.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4nox44bx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    return Object.entries(students).filter(([name, [height, weight]]) => height > h && weight > w).map(([name, [height, weight]]) => name);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmprqap52mf.js:11:10)\n    at Object.<anonymous> (/tmp/tmprqap52mf.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let filtered = {};\n    for (let student in students){\n        if (students[student][0] >= h && students[student][1] >= w){\n            filtered[student] = students[student];\n        }\n    }\n    return filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    return Object.entries(students).filter(([name, [height, weight]]) => height > h && weight > w).map(([name, [height, weight]]) => name);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmprqap52mf.js:11:10)\n    at Object.<anonymous> (/tmp/tmprqap52mf.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let res = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            res[key] = students[key];\n        }\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp4aqc81_q.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4aqc81_q.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    return Object.entries(students).filter(([name, [height, weight]]) => height > h && weight > w).map(([name, [height, weight]]) => `${name} ${height} ${weight}`);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp0hxto8ff.js:11:10)\n    at Object.<anonymous> (/tmp/tmp0hxto8ff.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    var result = {};\n    for (var key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpnspn5hhu.js:17:10)\n    at Object.<anonymous> (/tmp/tmpnspn5hhu.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp4nox44bx.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4nox44bx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n  return Object.entries(students).filter(([name, [height, weight]]) => height > h && weight > w).map(([name, [height, weight]]) => name);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpu5w0hpo1.js:11:10)\n    at Object.<anonymous> (/tmp/tmpu5w0hpo1.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let filtered = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            filtered[key] = students[key];\n        }\n    }\n    return filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmprb1ax15i.js:17:10)\n    at Object.<anonymous> (/tmp/tmprb1ax15i.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let filtered = {}\n    for (let [key, value] of Object.entries(students)){\n        if (value[0] > h && value[1] > w){\n            filtered[key] = value\n        }\n    }\n    return filtered\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpa4xh2skf.js:17:10)\n    at Object.<anonymous> (/tmp/tmpa4xh2skf.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp4nox44bx.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4nox44bx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let filtered = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            filtered[key] = students[key];\n        }\n    }\n    return filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmprb1ax15i.js:17:10)\n    at Object.<anonymous> (/tmp/tmprb1ax15i.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp4nox44bx.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4nox44bx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] >= h && students[key][1] >= w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp4nox44bx.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4nox44bx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let [key, value] of Object.entries(students)) {\n        if (value[0] > h && value[1] > w) {\n            result[key] = value;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpq6xorbfr.js:17:10)\n    at Object.<anonymous> (/tmp/tmpq6xorbfr.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp4nox44bx.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4nox44bx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    var result = {};\n    for(var key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp_eppbe0p.js:17:10)\n    at Object.<anonymous> (/tmp/tmp_eppbe0p.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    return Object.keys(students).filter(key => students[key][0] > h && students[key][1] > w)\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp2zaift8_.js:11:10)\n    at Object.<anonymous> (/tmp/tmp2zaift8_.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp4nox44bx.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4nox44bx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = [];\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result.push(key);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmposlssh_z.js:17:10)\n    at Object.<anonymous> (/tmp/tmposlssh_z.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp4nox44bx.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4nox44bx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    return Object.entries(students).filter(student => student[1][0] > h && student[1][1] > w).map(student => student[0]);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp178ygmfv.js:11:10)\n    at Object.<anonymous> (/tmp/tmp178ygmfv.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let [key, value] of Object.entries(students)){\n        if (value[0] > h && value[1] > w){\n            result[key] = value;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpu5h93i3u.js:17:10)\n    at Object.<anonymous> (/tmp/tmpu5h93i3u.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    return Object.keys(students).filter(key => students[key][0] > h && students[key][1] > w);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpjsuwtiyn.js:11:10)\n    at Object.<anonymous> (/tmp/tmpjsuwtiyn.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let filtered = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            filtered[key] = students[key];\n        }\n    }\n    return filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkslfjf4s.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkslfjf4s.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = [];\n    for (let [key, value] of Object.entries(students)) {\n        if (value[0] > h && value[1] > w) {\n            result.push(key);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpw1sm6am6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpw1sm6am6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp4nox44bx.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4nox44bx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let [key, value] of Object.entries(students)){\n        if(value[0] > h && value[1] > w){\n            result[key] = value;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmppd0tk2ux.js:17:10)\n    at Object.<anonymous> (/tmp/tmppd0tk2ux.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp4nox44bx.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4nox44bx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    return Object.entries(students).filter(([name, [height, weight]]) => height >= h && weight >= w).map(([name, [height, weight]]) => ({name, height, weight}))\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  {\n    height: 6.2,\n    name: 'Cierra Vega',\n    weight: 70\n  }\n]\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp96k3wk65.js:11:10)\n    at Object.<anonymous> (/tmp/tmp96k3wk65.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ { name: 'Cierra Vega', height: 6.2, weight: 70 } ],\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] >= h && students[key][1] >= w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp4nox44bx.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4nox44bx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let [key, value] of Object.entries(students)) {\n        if (value[0] > h && value[1] > w){\n            result[key] = value;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpa3ue8x6k.js:17:10)\n    at Object.<anonymous> (/tmp/tmpa3ue8x6k.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = [];\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result.push(key);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpotac761s.js:17:10)\n    at Object.<anonymous> (/tmp/tmpotac761s.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp4nox44bx.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4nox44bx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp4nox44bx.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4nox44bx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp4nox44bx.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4nox44bx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    return Object.keys(students).filter(function(key){\n        return students[key][0] > h && students[key][1] > w;\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpd6kbhjx2.js:13:10)\n    at Object.<anonymous> (/tmp/tmpd6kbhjx2.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp4nox44bx.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4nox44bx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp4nox44bx.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4nox44bx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] >= h && students[key][1] >= w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    return Object.entries(students).filter(student => student[1][0] > h && student[1][1] > w);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpf9k13pjc.js:11:10)\n    at Object.<anonymous> (/tmp/tmpf9k13pjc.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp4nox44bx.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4nox44bx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = [];\n    for (let [key, value] of Object.entries(students)){\n        if (value[0] > h && value[1] > w){\n            result.push(key);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpnccv9_ff.js:17:10)\n    at Object.<anonymous> (/tmp/tmpnccv9_ff.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    return Object.keys(students).filter(function(key){\n        return students[key][0] > h && students[key][1] > w;\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpd6kbhjx2.js:13:10)\n    at Object.<anonymous> (/tmp/tmpd6kbhjx2.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let [key, value] of Object.entries(students)) {\n        if (value[0] > h && value[1] > w) {\n            result[key] = value;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpq6xorbfr.js:17:10)\n    at Object.<anonymous> (/tmp/tmpq6xorbfr.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    return Object.keys(students).filter(key => students[key][0] > h && students[key][1] > w);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpjsuwtiyn.js:11:10)\n    at Object.<anonymous> (/tmp/tmpjsuwtiyn.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    return Object.keys(students).filter(key => students[key][0] > h && students[key][1] > w);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpjsuwtiyn.js:11:10)\n    at Object.<anonymous> (/tmp/tmpjsuwtiyn.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let new_students = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            new_students[key] = students[key];\n        }\n    }\n    return new_students;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmph01m27xm.js:17:10)\n    at Object.<anonymous> (/tmp/tmph01m27xm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n  let result = {};\n  for (let key in students){\n    if (students[key][0] > h && students[key][1] > w){\n      result[key] = students[key];\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpt42iaxhp.js:17:10)\n    at Object.<anonymous> (/tmp/tmpt42iaxhp.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp4nox44bx.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4nox44bx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let filtered = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            filtered[key] = students[key];\n        }\n    }\n    return filtered;\n}\n\nlet students = {\n    \"John\": [1.8, 80],\n    \"Bob\": [1.9, 90],\n    \"Tom\": [1.7, 70],\n    \"Nick\": [1.6, 60],\n    \"Kate\": [1.8, 90]\n};\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp5gz_5k_k.js:25:10)\n    at Object.<anonymous> (/tmp/tmp5gz_5k_k.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp4nox44bx.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4nox44bx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    return Object.keys(students).filter(key => students[key][0] > h && students[key][1] > w);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpjsuwtiyn.js:11:10)\n    at Object.<anonymous> (/tmp/tmpjsuwtiyn.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let res = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            res[key] = students[key];\n        }\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp9vgj1tg5.js:17:10)\n    at Object.<anonymous> (/tmp/tmp9vgj1tg5.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nlet students = {\n    'John': [1.8, 80],\n    'Ann': [1.7, 60],\n    'Pete': [1.9, 90],\n    'Mary': [1.6, 50]\n};\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp7lkr8f7r.js:24:10)\n    at Object.<anonymous> (/tmp/tmp7lkr8f7r.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    return Object.keys(students).filter(key => students[key][0] > h && students[key][1] > w);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpjsuwtiyn.js:11:10)\n    at Object.<anonymous> (/tmp/tmpjsuwtiyn.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] >= h && students[key][1] >= w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp4nox44bx.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4nox44bx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let filtered = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            filtered[key] = students[key];\n        }\n    }\n    return filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmprb1ax15i.js:17:10)\n    at Object.<anonymous> (/tmp/tmprb1ax15i.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] >= h && students[key][1] >= w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp4nox44bx.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4nox44bx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = [];\n    for(let i in students){\n        if(students[i][0] > h && students[i][1] > w){\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmps55cnmxt.js:17:10)\n    at Object.<anonymous> (/tmp/tmps55cnmxt.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp4nox44bx.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4nox44bx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let filtered = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            filtered[key] = students[key];\n        }\n    }\n    return filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkslfjf4s.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkslfjf4s.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    return Object.entries(students).filter(([name, [height, weight]]) => height > h && weight > w).map(([name, [height, weight]]) => name);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmprqap52mf.js:11:10)\n    at Object.<anonymous> (/tmp/tmprqap52mf.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    return Object.keys(students).filter(key => students[key][0] > h && students[key][1] > w);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpjsuwtiyn.js:11:10)\n    at Object.<anonymous> (/tmp/tmpjsuwtiyn.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp4nox44bx.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4nox44bx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let filtered = {};\n    for (let student in students){\n        if (students[student][0] > h && students[student][1] > w){\n            filtered[student] = students[student];\n        }\n    }\n    return filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp0cposnbc.js:17:10)\n    at Object.<anonymous> (/tmp/tmp0cposnbc.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    return Object.entries(students).filter(x => x[1][0] > h && x[1][1] > w).map(x => x[0]);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpvwrh1mg0.js:11:10)\n    at Object.<anonymous> (/tmp/tmpvwrh1mg0.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp4nox44bx.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4nox44bx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp4nox44bx.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4nox44bx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp4nox44bx.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4nox44bx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nlet students = {\n    \"John\": [1.8, 80],\n    \"Bob\": [1.9, 90],\n    \"Nick\": [1.7, 60],\n    \"Tom\": [1.6, 70],\n    \"Anna\": [1.5, 50]\n};\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpryo_d97c.js:25:10)\n    at Object.<anonymous> (/tmp/tmpryo_d97c.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let [key, value] of Object.entries(students)){\n        if (value[0] > h && value[1] > w){\n            result[key] = value;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpu5h93i3u.js:17:10)\n    at Object.<anonymous> (/tmp/tmpu5h93i3u.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp4nox44bx.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4nox44bx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let new_students = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            new_students[key] = students[key];\n        }\n    }\n    return new_students;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmph01m27xm.js:17:10)\n    at Object.<anonymous> (/tmp/tmph01m27xm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    return Object.keys(students).filter(key => students[key][0] > h && students[key][1] > w);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpjsuwtiyn.js:11:10)\n    at Object.<anonymous> (/tmp/tmpjsuwtiyn.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = [];\n    for (let [key, value] of Object.entries(students)){\n        if (value[0] > h && value[1] > w){\n            result.push(key);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpnccv9_ff.js:17:10)\n    at Object.<anonymous> (/tmp/tmpnccv9_ff.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp4nox44bx.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4nox44bx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let newObj = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            newObj[key] = students[key];\n        }\n    }\n    return newObj;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpwoa_4xrq.js:17:10)\n    at Object.<anonymous> (/tmp/tmpwoa_4xrq.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    return Object.keys(students).filter(key => students[key][0] > h && students[key][1] > w);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpjsuwtiyn.js:11:10)\n    at Object.<anonymous> (/tmp/tmpjsuwtiyn.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let filtered = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            filtered[key] = students[key];\n        }\n    }\n    return filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkslfjf4s.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkslfjf4s.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let [key, value] of Object.entries(students)){\n        if (value[0] > h && value[1] > w){\n            result[key] = value;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpu5h93i3u.js:17:10)\n    at Object.<anonymous> (/tmp/tmpu5h93i3u.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    return Object.entries(students).filter(s => s[1][0] > h && s[1][1] > w).map(s => s[0]);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpdrip4kpi.js:11:10)\n    at Object.<anonymous> (/tmp/tmpdrip4kpi.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp4nox44bx.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4nox44bx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let student in students){\n        if (students[student][0] > h && students[student][1] > w){\n            result[student] = students[student];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpvnnr16ze.js:17:10)\n    at Object.<anonymous> (/tmp/tmpvnnr16ze.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    return Object.entries(students).filter(student => student[1][0] > h && student[1][1] > w);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpf9k13pjc.js:11:10)\n    at Object.<anonymous> (/tmp/tmpf9k13pjc.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp4nox44bx.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4nox44bx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    return Object.entries(students).filter(s => s[1][0] > h && s[1][1] > w).map(s => s[0]);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpdrip4kpi.js:11:10)\n    at Object.<anonymous> (/tmp/tmpdrip4kpi.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    return Object.entries(students).filter(student => student[1][0] > h && student[1][1] > w).map(student => student[0]);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp178ygmfv.js:11:10)\n    at Object.<anonymous> (/tmp/tmp178ygmfv.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmp4nox44bx.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4nox44bx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] >= h && students[key][1] >= w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let filtered = {};\n    for (let [key, value] of Object.entries(students)){\n        if (value[0] > h && value[1] > w){\n            filtered[key] = value;\n        }\n    }\n    return filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpixb6e1qs.js:17:10)\n    at Object.<anonymous> (/tmp/tmpixb6e1qs.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    return Object.keys(students).filter(function(key){\n        return students[key][0] > h && students[key][1] > w;\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpd6kbhjx2.js:13:10)\n    at Object.<anonymous> (/tmp/tmpd6kbhjx2.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
      "timestamp": 1665517598,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely deep-equal\n\n{\n  'Cierra Vega': [\n    6.2,\n    70\n  ]\n}\n    at test (/tmp/tmpkvgh5pw6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkvgh5pw6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: { 'Cierra Vega': [ 6.2, 70 ] },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    }
  ]
}