{
  "name": "mbpp_167_next_power_of_2",
  "language": "js",
  "prompt": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_167_next_power_of_2.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i = 0;\n    while(Math.pow(2, i) < n){\n        i++;\n    }\n    return Math.pow(2, i);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    return Math.pow(2,Math.ceil(Math.log(n)/Math.log(2)));\n}\nnext_power_of_2(7);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmptg035xfs.js:12:10)\n    at Object.<anonymous> (/tmp/tmptg035xfs.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i = 1;\n    while(i<n){\n        i *= 2;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<n){\n        i++;\n    }\n    return Math.pow(2,i);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<n){\n        i++;\n    }\n    return Math.pow(2,i);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nnext_power_of_2(5)\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i = 1;\n    while(i < n){\n        i = i * 2;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n   \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n   \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i=1;\n    while(i<n){\n        i=i*2;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nnext_power_of_2(5)\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<n){\n        i++;\n    }\n    return Math.pow(2,i);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i=1;\n    while(i<n){\n        i=i*2;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'Not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nnext_power_of_2(5)\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while( n != 0)\n    {\n        n  >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'Not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'Not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'Not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'Not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while( n != 0)\n    {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i = 0;\n    var power = 1;\n    while(power < n){\n        power *= 2;\n        i++;\n    }\n    return power;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while( n != 0)\n    {\n        n  >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'Not a number'; \n   \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'Not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<n){\n        i++;\n    }\n    return Math.pow(2,i);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i=1;\n    while(i<n){\n        i=i*2;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i=1;\n    while(i<n){\n        i=i*2;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'Not a number'; \n   \n    while (n !== 0) { \n        n  >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'Not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'Not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'Not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n   \n    while (n !== 0) { \n        n  >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n   \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nnext_power_of_2(5);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i = 1;\n    while(i<n){\n        i = i*2;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'Not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i = 1;\n    while(i < n){\n        i *= 2;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i = 1;\n    while(i < n){\n        i = i * 2;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i = 1;\n    while(i < n){\n        i *= 2;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n   \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'Not a number'; \n  \n    // Iterate the loop till n becomes  \n    // 0 or becomes 1. \n    while (n != 1) { \n        n  = n / 2; \n        count++; \n    } \n  \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'Not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    if(n<=1){\n        return 2;\n    }\n    else{\n        var i=1;\n        while(i<n){\n            i=i*2;\n        }\n        return i;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpoh6nxmsf.js:19:10)\n    at Object.<anonymous> (/tmp/tmpoh6nxmsf.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i=1;\n    while(i<n){\n        i=i*2;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'Not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while( n != 0){\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i = 1;\n    while(i < n){\n        i *= 2;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i=1;\n    while(i<n){\n        i=i*2;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i=1;\n    while(i<n){\n        i=i*2;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while( n != 0)\n    {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'Not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i = 1;\n    while(i < n){\n        i *= 2;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'Not a number'; \n   \n    while (n !== 0) { \n        n  >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<n){\n        i++;\n    }\n    return Math.pow(2,i);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i = 1;\n    while(i<n){\n        i = i*2;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while( n != 0)\n    {\n        n  >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nnext_power_of_2(5);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'Not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    if(n<=0){\n        return 0;\n    }\n    else{\n        return Math.pow(2,Math.ceil(Math.log2(n)));\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpncj80x8a.js:15:10)\n    at Object.<anonymous> (/tmp/tmpncj80x8a.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<n){\n        i++;\n    }\n    return Math.pow(2,i);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i=1;\n    while(i<n){\n        i=i*2;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<n){\n        i++;\n    }\n    return Math.pow(2,i);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i = 1;\n    while(i<n){\n        i = i*2;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nnext_power_of_2(5);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while( n != 0)\n    {\n        n  >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<n){\n        i++;\n    }\n    return Math.pow(2,i);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i = 1;\n    while(i<n){\n        i = i*2;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i = 1;\n    while(i < n){\n        i *= 2;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    if(n<=0){\n        return 0;\n    }\n    else if(n==1){\n        return 1;\n    }\n    else{\n        var i=1;\n        while(i<n){\n            i=i*2;\n        }\n        return i;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpyfrd4yoi.js:22:10)\n    at Object.<anonymous> (/tmp/tmpyfrd4yoi.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i = 1;\n    while(i < n){\n        i *= 2;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i = 1;\n    while(i < n){\n        i = i * 2;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i=1;\n    while(i<n){\n        i=i*2;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'Not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'Not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i) < n){\n        i++;\n    }\n    return Math.pow(2,i);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n        return 'Not a number'; \n  \n    // First n in the below condition \n    // is for the case where n is 0 \n    if (n && !(n & (n - 1))) \n        return n; \n  \n    while( n != 0) \n    { \n        n >>= 1; \n        count += 1; \n    } \n  \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<n){\n        i++;\n    }\n    return Math.pow(2,i);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n   \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<n){\n        i++;\n    }\n    return Math.pow(2,i);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    if(n<=0){\n        return 0;\n    }\n    else{\n        var i=0;\n        while(Math.pow(2,i)<n){\n            i++;\n        }\n        return Math.pow(2,i);\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmplk0fboqs.js:19:10)\n    at Object.<anonymous> (/tmp/tmplk0fboqs.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'Not a number'; \n   \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nnext_power_of_2(5);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i = 0;\n    while(n > Math.pow(2,i)){\n        i++;\n    }\n    return Math.pow(2,i);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'Not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while( n != 0)\n    {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i=0;\n    while(n>Math.pow(2,i)){\n        i++;\n    }\n    return Math.pow(2,i);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<n){\n        i++;\n    }\n    return Math.pow(2,i);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i=1;\n    while(i<n){\n        i=i*2;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n   \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'Not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i=1;\n    while(i<n){\n        i=i*2;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'Not a number'; \n   \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<n){\n        i++;\n    }\n    return Math.pow(2,i);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    if(n<=0){\n        return 0;\n    }\n    else{\n        return Math.pow(2,Math.ceil(Math.log(n)/Math.log(2)));\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpcgs8ehz7.js:15:10)\n    at Object.<anonymous> (/tmp/tmpcgs8ehz7.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<n){\n        i++;\n    }\n    return Math.pow(2,i);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i = 1;\n    while(i<n){\n        i *= 2;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n        return 'Not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    return Math.pow(2, Math.ceil(Math.log(n) / Math.log(2)));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpy8kl9k5s.js:10:10)\n    at Object.<anonymous> (/tmp/tmpy8kl9k5s.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'Not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'Not a number'; \n   \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'Not a number'; \n   \n    n = (n > 0) ? n : -n; \n   \n    if (n && !(n & (n - 1))) \n        return n; \n   \n    while( n != 0) \n    { \n        n >>= 1; \n        count += 1; \n    } \n   \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'Not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<n){\n        i++;\n    }\n    return Math.pow(2,i);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    if(n<0){\n        return \"Enter a positive number\"\n    }\n    else{\n        var i=0;\n        while(Math.pow(2,i)<n){\n            i++;\n        }\n        return Math.pow(2,i);\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    if(n<=0){\n        return 0;\n    }\n    else{\n        return Math.pow(2,Math.ceil(Math.log(n)/Math.log(2)));\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpcgs8ehz7.js:15:10)\n    at Object.<anonymous> (/tmp/tmpcgs8ehz7.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n        return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i=1;\n    while(i<n){\n        i=i*2;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n   \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'Not a number'; \n   \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n   \n    while (n !== 0) { \n        n  >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i = 1;\n    while(i<n){\n        i = i*2;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n   \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<n){\n        i++;\n    }\n    return Math.pow(2,i);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'Not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    if(n<=0){\n        return 0;\n    }\n    else{\n        n--;\n        n |= n >> 1;\n        n |= n >> 2;\n        n |= n >> 4;\n        n |= n >> 8;\n        n |= n >> 16;\n        n++;\n        return n;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpr7y3aklo.js:22:10)\n    at Object.<anonymous> (/tmp/tmpr7y3aklo.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i=1;\n    while(i<n){\n        i=i*2;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'Not a number'; \n   \n    while (n !== 0) { \n        n  >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i=1;\n    while(i<n){\n        i=i*2;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n   \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i=1;\n    while(i<n){\n        i=i*2;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    if(n<=0){\n        return 1;\n    }\n    else{\n        return Math.pow(2,Math.ceil(Math.log(n)/Math.log(2)));\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<n){\n        i++;\n    }\n    return Math.pow(2,i);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i=1;\n    while(i<n){\n        i=i*2;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i = 1;\n    while(i < n){\n        i *= 2;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'Not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'Not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<n){\n        i++;\n    }\n    return Math.pow(2,i);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<n){\n        i++;\n    }\n    return Math.pow(2,i);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'Not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i=1;\n    while(i<n){\n        i=i*2;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    if(n<=0){\n        return 0;\n    }\n    else{\n        return Math.pow(2,Math.ceil(Math.log2(n)));\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpncj80x8a.js:15:10)\n    at Object.<anonymous> (/tmp/tmpncj80x8a.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    if(n<=0){\n        return 0;\n    }\n    else{\n        var i=1;\n        while(i<n){\n            i=i*2;\n        }\n        return i;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpod_h9et3.js:19:10)\n    at Object.<anonymous> (/tmp/tmpod_h9et3.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'Not a number'; \n   \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    return Math.pow(2, Math.ceil(Math.log(n) / Math.log(2))); \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmp9jnz611d.js:13:10)\n    at Object.<anonymous> (/tmp/tmp9jnz611d.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<n){\n        i++;\n    }\n    return Math.pow(2,i);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<n){\n        i++;\n    }\n    return Math.pow(2,i);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i = 0;\n    while(Math.pow(2,i)<n){\n        i++;\n    }\n    return Math.pow(2,i);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<n){\n        i++;\n    }\n    return Math.pow(2,i);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i=1;\n    while(i<n){\n        i=i*2;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n   \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n   \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n   \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n   \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<n){\n        i++;\n    }\n    return Math.pow(2,i);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i=0;\n    while(Math.pow(2,i)<n){\n        i++;\n    }\n    return Math.pow(2,i);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var i = 1;\n    while(i < n){\n        i = i * 2;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n){\n    var count = 0;\n    if (typeof n !== 'number') \n          return 'not a number'; \n  \n    while (n !== 0) { \n        n >>= 1; \n        count += 1; \n    } \n    return 1 << count; \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}