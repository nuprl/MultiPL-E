{
  "name": "mbpp_607_find_literals",
  "language": "js",
  "prompt": "//Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nfunction find_literals(text, pattern){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_607_find_literals.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_literals;\n  assert.deepEqual(candidate(\"The quick brown fox jumps over the lazy dog.\", \"fox\"),[\"fox\", 16, 19]);\n  assert.deepEqual(candidate(\"Its been a very crazy procedure right\", \"crazy\"),[\"crazy\", 16, 21]);\n  assert.deepEqual(candidate(\"Hardest choices required strongest will\", \"will\"),[\"will\", 35, 39]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "\tvar start = 0;\n\tvar end = 0;\n\tvar match = \"\";\n\tfor (var i = 0; i < text.length; i++){\n\t\tif (text[i] == pattern[0]){\n\t\t\tstart = i;\n\t\t\tfor (var j = 0; j < pattern.length; j++){\n\t\t\t\tif (text[i+j] == pattern[j]){\n\t\t\t\t\tmatch += text[i+j];\n\t\t\t\t\tend = i+j;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tmatch = \"\";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (match == pattern){\n\t\t\t\treturn [match, start, end];\n\t\t\t}\n\t\t}\n\t}\n\treturn \"\";\n}\n",
    "    var start = 0;\n    var end = 0;\n    var match = \"\";\n    var found = false;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start = i;\n            end = i;\n            match = text[i];\n            for(var j = 1; j < pattern.length; j++){\n                if(text[i+j] == pattern[j]){\n                    end = i+j;\n                    match += text[i+j];\n                }\n                else{\n                    break;\n                }\n            }\n            if(match == pattern){\n                found = true;\n                break;\n            }\n        }\n    }\n    if(found){\n        return [match, start, end];\n    }\n    else{\n        return null;\n    }\n}\n",
    "    var match = text.match(pattern);\n    if(match){\n        return {\n            match: match[0],\n            start: match.index,\n            end: match.index + match[0].length\n        };\n    }\n    return null;\n}\n",
    "    var match = text.match(pattern);\n    if(match){\n        return {\n            match: match[0],\n            start: match.index,\n            end: match.index + match[0].length\n        };\n    }\n    return null;\n}\n",
    "\tvar match = text.match(pattern);\n\treturn match;\n}\n",
    "\tvar match = text.match(pattern);\n\treturn match;\n}\n",
    "\tvar match = text.match(pattern);\n\tif(match){\n\t\treturn {\n\t\t\tmatch: match[0],\n\t\t\tstart: match.index,\n\t\t\tend: match.index + match[0].length\n\t\t};\n\t}\n\treturn null;\n}\n",
    "  var result = [];\n  var start = 0;\n  var end = 0;\n  for(var i = 0; i < text.length; i++){\n    if(text[i] === pattern[0]){\n      start = i;\n      for(var j = 0; j < pattern.length; j++){\n        if(text[i + j] === pattern[j]){\n          end = i + j;\n        }\n      }\n    }\n  }\n  result.push(text.slice(start, end + 1));\n  result.push(start);\n  result.push(end);\n  return result;\n}\n",
    "\tvar start_index = text.indexOf(pattern);\n\tvar end_index = start_index + pattern.length;\n\treturn [text.substring(start_index, end_index), start_index, end_index];\n}\n",
    "\tvar result = [];\n\tvar start = 0;\n\tvar end = 0;\n\tvar i = 0;\n\twhile(i < text.length){\n\t\tif(text[i] == pattern[0]){\n\t\t\tstart = i;\n\t\t\tfor(var j = 0; j < pattern.length; j++){\n\t\t\t\tif(text[i] == pattern[j]){\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(j == pattern.length){\n\t\t\t\tend = i;\n\t\t\t\tresult.push(text.substring(start, end));\n\t\t\t\tresult.push(start);\n\t\t\t\tresult.push(end);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\n",
    "    var start = 0;\n    var end = 0;\n    var match = \"\";\n    var found = false;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start = i;\n            for(var j = 0; j < pattern.length; j++){\n                if(text[i + j] == pattern[j]){\n                    match += text[i + j];\n                    end = i + j;\n                    found = true;\n                }\n                else{\n                    found = false;\n                    break;\n                }\n            }\n            if(found){\n                break;\n            }\n        }\n    }\n    return [match, start, end];\n}\n",
    "    var result = {};\n    var match = text.match(pattern);\n    if(match){\n        result.match = match[0];\n        result.start = match.index;\n        result.end = match.index + match[0].length;\n    }\n    return result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var i = 0;\n    while(i < text.length){\n        if(text[i] == pattern[0]){\n            start = i;\n            var j = 0;\n            while(j < pattern.length){\n                if(text[i] == pattern[j]){\n                    i++;\n                    j++;\n                }\n                else{\n                    break;\n                }\n            }\n            if(j == pattern.length){\n                end = i;\n                result.push([start, end]);\n            }\n        }\n        else{\n            i++;\n        }\n    }\n    return result;\n}\n",
    "    var result = {};\n    var match = text.match(pattern);\n    if(match){\n        result.match = match[0];\n        result.start = match.index;\n        result.end = match.index + match[0].length;\n    }\n    return result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var match = false;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start = i;\n            for(var j = 0; j < pattern.length; j++){\n                if(text[i + j] == pattern[j]){\n                    match = true;\n                }\n                else{\n                    match = false;\n                    break;\n                }\n            }\n            if(match){\n                end = i + j;\n                result.push([start, end]);\n            }\n        }\n    }\n    return result;\n}\n",
    "\tvar result = [];\n\tvar start = 0;\n\tvar end = 0;\n\tvar found = false;\n\tfor(var i = 0; i < text.length; i++){\n\t\tif(text[i] == pattern[0]){\n\t\t\tstart = i;\n\t\t\tend = i;\n\t\t\tfor(var j = 1; j < pattern.length; j++){\n\t\t\t\tif(text[i+j] == pattern[j]){\n\t\t\t\t\tend = i + j;\n\t\t\t\t\tfound = true;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(found){\n\t\t\t\tresult.push({\n\t\t\t\t\tstart: start,\n\t\t\t\t\tend: end,\n\t\t\t\t\tsubstring: text.substring(start, end+1)\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n",
    "\tvar match = text.match(pattern);\n\tif(match){\n\t\treturn {\n\t\t\tmatch: match[0],\n\t\t\tstart: match.index,\n\t\t\tend: match.index + match[0].length\n\t\t};\n\t}\n\treturn null;\n}\n",
    "    var start_index = text.indexOf(pattern);\n    var end_index = start_index + pattern.length;\n    var result = text.substring(start_index, end_index);\n    return [result, start_index, end_index];\n}\n",
    "    var result = {};\n    var match = text.match(pattern);\n    if(match){\n        result.match = match[0];\n        result.start = match.index;\n        result.end = match.index + match[0].length;\n    }\n    return result;\n}\n\nvar text = \"This is a test. This is a programming test. This is a programming test in any language.\";\nvar pattern = /test/;\nvar result = find_literals(text, pattern);",
    "    var start = 0;\n    var end = 0;\n    var match = \"\";\n    var found = false;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start = i;\n            for(var j = 0; j < pattern.length; j++){\n                if(text[i+j] != pattern[j]){\n                    break;\n                }\n                if(j == pattern.length - 1){\n                    end = i + j;\n                    found = true;\n                }\n            }\n        }\n        if(found){\n            break;\n        }\n    }\n    if(found){\n        for(var i = start; i <= end; i++){\n            match += text[i];\n        }\n    }\n    return [match, start, end];\n}\n",
    "    var result = [];\n    var match = pattern.exec(text);\n    while(match){\n        result.push(match[0]);\n        match = pattern.exec(text);\n    }\n    return result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var i = 0;\n    while(i < text.length){\n        if(text[i] == pattern[0]){\n            start = i;\n            end = i;\n            for(var j = 1; j < pattern.length; j++){\n                if(text[i+j] == pattern[j]){\n                    end++;\n                }\n                else{\n                    break;\n                }\n            }\n            if(end - start == pattern.length - 1){\n                result.push([text.substring(start, end+1), start, end+1]);\n            }\n        }\n        i++;\n    }\n    return result;\n}\n",
    "\tvar start = text.search(pattern);\n\tvar end = start + pattern.length;\n\treturn [text.substring(start, end), start, end];\n}\n",
    "    var match = text.match(pattern);\n    if(match){\n        return {\n            match: match[0],\n            start: match.index,\n            end: match.index + match[0].length\n        };\n    }\n    return null;\n}\n",
    "    var result = {\n        start: -1,\n        end: -1,\n        match: \"\"\n    };\n    var i = 0;\n    while(i < text.length){\n        var j = 0;\n        while(j < pattern.length && i < text.length){\n            if(text[i] == pattern[j]){\n                i++;\n                j++;\n            }\n            else{\n                break;\n            }\n        }\n        if(j == pattern.length){\n            result.start = i - j;\n            result.end = i - 1;\n            result.match = text.substring(result.start, result.end + 1);\n            return result;\n        }\n        else{\n            i++;\n        }\n    }\n    return result;\n}\n",
    "    var result = {\n        start: 0,\n        end: 0,\n        match: \"\"\n    };\n    var i = 0;\n    var j = 0;\n    var found = false;\n    while(i < text.length && j < pattern.length){\n        if(text[i] == pattern[j]){\n            if(!found){\n                result.start = i;\n                found = true;\n            }\n            result.match += text[i];\n            i++;\n            j++;\n        }\n        else{\n            if(found){\n                result.end = i;\n                break;\n            }\n            i++;\n        }\n    }\n    if(found){\n        result.end = i;\n    }\n    return result;\n}\n",
    "\tvar i = 0;\n\tvar j = 0;\n\tvar k = 0;\n\tvar match = false;\n\tvar start = 0;\n\tvar end = 0;\n\tvar sub = \"\";\n\twhile(i < text.length){\n\t\tif(text[i] == pattern[j]){\n\t\t\tif(j == 0){\n\t\t\t\tstart = i;\n\t\t\t}\n\t\t\tif(j == pattern.length - 1){\n\t\t\t\tend = i;\n\t\t\t\tmatch = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\tif(match){\n\t\tfor(k = start; k <= end; k++){\n\t\t\tsub += text[k];\n\t\t}\n\t\treturn [sub, start, end];\n\t}\n\telse{\n\t\treturn null;\n\t}\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var match = false;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start = i;\n            for(var j = 0; j < pattern.length; j++){\n                if(text[i] == pattern[j]){\n                    i++;\n                    match = true;\n                }\n                else{\n                    match = false;\n                    break;\n                }\n            }\n            if(match){\n                end = i;\n                result.push(text.substring(start, end));\n                result.push(start);\n                result.push(end);\n                return result;\n            }\n        }\n    }\n    return result;\n}\n",
    "  var start = 0;\n  var end = 0;\n  var match = '';\n  for(var i = 0; i < text.length; i++){\n    if(text[i] === pattern[0]){\n      start = i;\n      for(var j = 0; j < pattern.length; j++){\n        if(text[i+j] === pattern[j]){\n          match += pattern[j];\n          end = i+j;\n        }\n        else{\n          match = '';\n          break;\n        }\n      }\n    }\n  }\n  return [match, start, end];\n}\n",
    "    var start = 0;\n    var end = 0;\n    var match = \"\";\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start = i;\n            for(var j = 0; j < pattern.length; j++){\n                if(text[i+j] == pattern[j]){\n                    match += text[i+j];\n                    end = i+j;\n                }\n                else{\n                    match = \"\";\n                    break;\n                }\n            }\n        }\n    }\n    return [match, start, end];\n}\n",
    "    var start_index = text.indexOf(pattern);\n    var end_index = start_index + pattern.length;\n    return {\n        match: text.substring(start_index, end_index),\n        start_index: start_index,\n        end_index: end_index\n    }\n}\n",
    "\tvar regex = new RegExp(pattern);\n\tvar match = regex.exec(text);\n\tif (match){\n\t\treturn {\n\t\t\tmatch: match[0],\n\t\t\tstart: match.index,\n\t\t\tend: match.index + match[0].length\n\t\t};\n\t}\n\treturn null;\n}\n",
    "    var match = text.match(pattern);\n    return match;\n}\n",
    "\tvar result = {};\n\tvar match = text.match(pattern);\n\tif(match){\n\t\tresult.match = match[0];\n\t\tresult.start = match.index;\n\t\tresult.end = match.index + match[0].length;\n\t}\n\treturn result;\n}\n",
    "    var start = 0;\n    var end = 0;\n    var match = \"\";\n    var found = false;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start = i;\n            for(var j = 0; j < pattern.length; j++){\n                if(text[i+j] == pattern[j]){\n                    match += pattern[j];\n                    end = i+j;\n                    found = true;\n                }\n                else{\n                    match = \"\";\n                    found = false;\n                    break;\n                }\n            }\n        }\n        if(found){\n            break;\n        }\n    }\n    return {\n        match: match,\n        start: start,\n        end: end\n    };\n}\n",
    "    var result = {};\n    var start = text.search(pattern);\n    if(start > -1){\n        result.start = start;\n        result.end = start + pattern.length;\n        result.match = text.substring(start, result.end);\n    }\n    return result;\n}\n",
    "  var match = text.match(pattern);\n  if(match){\n    return {\n      match: match[0],\n      start: match.index,\n      end: match.index + match[0].length\n    };\n  }\n  return null;\n}\n",
    "    var result = {\n        start: 0,\n        end: 0,\n        match: ''\n    };\n    var match = text.match(pattern);\n    if(match){\n        result.start = match.index;\n        result.end = match.index + match[0].length;\n        result.match = match[0];\n    }\n    return result;\n}\n",
    "    var start = 0;\n    var end = 0;\n    var match = \"\";\n    var found = false;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start = i;\n            for(var j = 0; j < pattern.length; j++){\n                if(text[i+j] == pattern[j]){\n                    match += pattern[j];\n                    end = i+j;\n                }\n                else{\n                    match = \"\";\n                    break;\n                }\n            }\n            if(match == pattern){\n                found = true;\n                break;\n            }\n        }\n    }\n    if(found){\n        return {\n            match: match,\n            start: start,\n            end: end\n        }\n    }\n    else{\n        return {\n            match: \"\",\n            start: -1,\n            end: -1\n        }\n    }\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var match = false;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start = i;\n            end = i;\n            for(var j = 1; j < pattern.length; j++){\n                if(text[i+j] == pattern[j]){\n                    end = i+j;\n                    match = true;\n                }\n                else{\n                    match = false;\n                    break;\n                }\n            }\n            if(match){\n                result.push([text.substring(start, end+1), start, end]);\n            }\n        }\n    }\n    return result;\n}\n",
    "\tvar start = text.search(pattern);\n\tvar end = start + pattern.length;\n\treturn [text.slice(start, end), start, end];\n}\n",
    "    var result = {\n        start: 0,\n        end: 0,\n        match: ''\n    };\n    var i = 0;\n    var j = 0;\n    while(i < text.length){\n        if(text[i] == pattern[j]){\n            if(j == 0){\n                result.start = i;\n            }\n            result.match += text[i];\n            i++;\n            j++;\n        }\n        else{\n            if(j == pattern.length){\n                result.end = i;\n                return result;\n            }\n            else{\n                i++;\n            }\n        }\n    }\n    return result;\n}\n",
    "    var result = [];\n    var start_index = 0;\n    var end_index = 0;\n    var match = text.match(pattern);\n    if(match){\n        start_index = text.indexOf(match[0]);\n        end_index = start_index + match[0].length;\n    }\n    result.push(match[0], start_index, end_index);\n    return result;\n}\n",
    "    var match = text.match(pattern);\n    if(match){\n        return {\n            match: match[0],\n            start: match.index,\n            end: match.index + match[0].length\n        };\n    }\n    return null;\n}\n",
    "\tvar result = {};\n\tvar start = 0;\n\tvar end = 0;\n\tvar match = false;\n\tfor(var i = 0; i < text.length; i++){\n\t\tif(text[i] === pattern[0]){\n\t\t\tstart = i;\n\t\t\tfor(var j = 0; j < pattern.length; j++){\n\t\t\t\tif(text[i+j] !== pattern[j]){\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif(j === pattern.length - 1){\n\t\t\t\t\tend = i+j;\n\t\t\t\t\tmatch = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(match){\n\t\tresult.match = text.slice(start, end+1);\n\t\tresult.start = start;\n\t\tresult.end = end;\n\t}\n\treturn result;\n}\n",
    "    var result = [];\n    var startIndex = 0;\n    var endIndex = 0;\n    var match = pattern.exec(text);\n    while(match != null){\n        result.push(match[0]);\n        startIndex = match.index;\n        endIndex = startIndex + match[0].length;\n        match = pattern.exec(text);\n    }\n    return result;\n}\n",
    "\tvar result = [];\n\tvar start = 0;\n\tvar end = 0;\n\tvar match = false;\n\tvar i = 0;\n\tvar j = 0;\n\tvar k = 0;\n\tvar l = 0;\n\tvar m = 0;\n\tvar n = 0;\n\tvar o = 0;\n\tvar p = 0;\n\tvar q = 0;\n\tvar r = 0;\n\tvar s = 0;\n\tvar t = 0;\n\tvar u = 0;\n\tvar v = 0;\n\tvar w = 0;\n\tvar x = 0;\n\tvar y = 0;\n\tvar z = 0;\n\tvar a = 0;\n\tvar b = 0;\n\tvar c = 0;\n\tvar d = 0;\n\tvar e = 0;\n\tvar f = 0;\n\tvar g = 0;\n\tvar h = 0;\n\tvar i = 0;\n\tvar j = 0;\n\tvar k = 0;\n\tvar l = 0;\n\tvar m = 0;\n\tvar n = 0;\n\tvar o = 0;\n\tvar p = 0;\n\tvar q = 0;\n\tvar r = 0;\n\tvar s = 0;\n\tvar t = 0;\n\tvar u = 0;\n\tvar v = 0;\n\tvar w = 0;\n\tvar x = 0;\n\tvar y = 0;\n\tvar z = 0;\n\tvar a = 0;\n\tvar b = 0;\n\tvar c = 0;\n\tvar d = 0;\n\tvar e = 0;\n\tvar f = 0;\n\tvar g = 0;\n\tvar h = 0;\n\tvar i = 0;\n\tvar j = 0;\n\tvar k = 0;\n\tvar l = 0;\n\tvar m = 0;\n\tvar n = 0;\n\tvar o = 0;\n\tvar p = 0;\n\tvar q = 0;\n\tvar r = 0;\n\tvar s = 0;\n\tvar t = 0;\n\tvar u = 0;\n\tvar v = 0;\n\tvar w = 0;\n\tvar x = 0;\n\tvar y = 0;\n\t",
    "    var match = text.match(pattern);\n    if(match){\n        return {\n            match: match[0],\n            start: match.index,\n            end: match.index + match[0].length\n        }\n    }\n    return null;\n}\n",
    "    var match = text.match(pattern);\n    return match;\n}\n",
    "  var start = 0;\n  var end = 0;\n  var match = \"\";\n  for(var i = 0; i < text.length; i++){\n    if(text[i] == pattern[0]){\n      start = i;\n      for(var j = 0; j < pattern.length; j++){\n        if(text[i+j] == pattern[j]){\n          match += pattern[j];\n          end = i+j;\n        }\n        else{\n          match = \"\";\n          break;\n        }\n      }\n    }\n  }\n  return [match, start, end];\n}\n",
    "    var match = text.match(pattern);\n    if(match){\n        return {\n            match: match[0],\n            start: match.index,\n            end: match.index + match[0].length\n        };\n    }\n    return null;\n}\n",
    "\tvar result = [];\n\tvar start = 0;\n\tvar end = 0;\n\tvar found = false;\n\tvar i = 0;\n\tvar j = 0;\n\tvar k = 0;\n\tvar l = 0;\n\tvar m = 0;\n\tvar n = 0;\n\tvar o = 0;\n\tvar p = 0;\n\tvar q = 0;\n\tvar r = 0;\n\tvar s = 0;\n\tvar t = 0;\n\tvar u = 0;\n\tvar v = 0;\n\tvar w = 0;\n\tvar x = 0;\n\tvar y = 0;\n\tvar z = 0;\n\tvar a = 0;\n\tvar b = 0;\n\tvar c = 0;\n\tvar d = 0;\n\tvar e = 0;\n\tvar f = 0;\n\tvar g = 0;\n\tvar h = 0;\n\tvar i = 0;\n\tvar j = 0;\n\tvar k = 0;\n\tvar l = 0;\n\tvar m = 0;\n\tvar n = 0;\n\tvar o = 0;\n\tvar p = 0;\n\tvar q = 0;\n\tvar r = 0;\n\tvar s = 0;\n\tvar t = 0;\n\tvar u = 0;\n\tvar v = 0;\n\tvar w = 0;\n\tvar x = 0;\n\tvar y = 0;\n\tvar z = 0;\n\tvar a = 0;\n\tvar b = 0;\n\tvar c = 0;\n\tvar d = 0;\n\tvar e = 0;\n\tvar f = 0;\n\tvar g = 0;\n\tvar h = 0;\n\tvar i = 0;\n\tvar j = 0;\n\tvar k = 0;\n\tvar l = 0;\n\tvar m = 0;\n\tvar n = 0;\n\tvar o = 0;\n\tvar p = 0;\n\tvar q = 0;\n\tvar r = 0;\n\tvar s = 0;\n\tvar t = 0;\n\tvar u = 0;\n\tvar v = 0;\n\tvar w = 0;\n\tvar x = 0;\n\tvar y = 0;\n\t",
    "    var result = {};\n    var start = 0;\n    var end = 0;\n    var match = false;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start = i;\n            for(var j = 0; j < pattern.length; j++){\n                if(text[i+j] == pattern[j]){\n                    match = true;\n                }\n                else{\n                    match = false;\n                    break;\n                }\n            }\n            if(match){\n                end = i+j;\n                break;\n            }\n        }\n    }\n    if(match){\n        result.match = text.substring(start, end);\n        result.start = start;\n        result.end = end;\n    }\n    else{\n        result.match = null;\n        result.start = null;\n        result.end = null;\n    }\n    return result;\n}\n",
    "    var match = text.match(pattern);\n    if (match){\n        return {\n            match: match[0],\n            start: match.index,\n            end: match.index + match[0].length\n        }\n    }\n    return null;\n}\n",
    "    var pattern_length = pattern.length;\n    var text_length = text.length;\n    var result = [];\n    for(var i = 0; i < text_length; i++){\n        for(var j = 0; j < pattern_length; j++){\n            if(text[i+j] != pattern[j]){\n                break;\n            }\n            if(j == pattern_length - 1){\n                result.push([i, i+j]);\n            }\n        }\n    }\n    return result;\n}\n",
    "    var match = text.match(pattern);\n    var start = text.indexOf(match);\n    var end = start + match.length;\n    return {match: match, start: start, end: end};\n}\n",
    "    var result = {\n        start: 0,\n        end: 0,\n        match: ''\n    };\n    var pattern_index = 0;\n    var text_index = 0;\n    var text_length = text.length;\n    var pattern_length = pattern.length;\n    var match_length = 0;\n    var match_start = 0;\n    var match_end = 0;\n    var match = '';\n    var match_found = false;\n    var pattern_char = '';\n    var text_char = '';\n    while(text_index < text_length){\n        pattern_char = pattern[pattern_index];\n        text_char = text[text_index];\n        if(pattern_char === text_char){\n            if(!match_found){\n                match_start = text_index;\n                match_found = true;\n            }\n            match_length++;\n            match += text_char;\n            pattern_index++;\n            text_index++;\n        }else{\n            if(match_found){\n                match_end = text_index;\n                break;\n            }\n            text_index++;\n        }\n    }\n    if(match_length === pattern_length){\n        result.start = match_start;\n        result.end = match_end;\n        result.match = match;\n    }\n    return result;\n}\n",
    "    var result = {\n        start: 0,\n        end: 0,\n        match: \"\"\n    };\n    var match = text.match(pattern);\n    if(match){\n        result.start = match.index;\n        result.end = match.index + match[0].length;\n        result.match = match[0];\n    }\n    return result;\n}\n",
    "    var result = {};\n    var index = text.indexOf(pattern);\n    if(index != -1){\n        result.start = index;\n        result.end = index + pattern.length;\n        result.match = text.substring(index, index + pattern.length);\n    }\n    return result;\n}\n",
    "    var result = [];\n    var i = 0;\n    while(i < text.length){\n        var match = pattern.exec(text.substring(i));\n        if(match){\n            result.push(match[0]);\n            i += match[0].length;\n        }else{\n            i++;\n        }\n    }\n    return result;\n}\n",
    "\tvar start = 0;\n\tvar end = 0;\n\tvar match = \"\";\n\tvar found = false;\n\tfor(var i = 0; i < text.length; i++){\n\t\tif(text[i] == pattern[0]){\n\t\t\tstart = i;\n\t\t\tfor(var j = 0; j < pattern.length; j++){\n\t\t\t\tif(text[i+j] == pattern[j]){\n\t\t\t\t\tmatch += pattern[j];\n\t\t\t\t\tif(match == pattern){\n\t\t\t\t\t\tend = i+j;\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tmatch = \"\";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(found){\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn [match, start, end];\n}\n",
    "    var match = text.match(pattern);\n    return match;\n}\n",
    "    var result = {};\n    var match = text.match(pattern);\n    if(match){\n        result.match = match[0];\n        result.start = match.index;\n        result.end = match.index + match[0].length;\n    }\n    return result;\n}\n\nvar text = \"This is a test\";\nvar pattern = /is/;\nvar result = find_literals(text, pattern);",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var m = 0;\n    var n = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var l = 0;\n    var o = 0;\n    var A = 0;\n    var B = 0;\n    var C = 0;\n    var D = 0;\n    var E = 0;\n    var F = 0;\n    var G = 0;\n    var H = 0;\n    var I = 0;\n    var J = 0;\n    var K = 0;\n    var L = 0;\n    var M = 0;\n    var N = 0;\n    var O = 0;\n    var P = 0;\n    var Q = 0;\n    var R = 0;\n    var S = 0;\n    var T = 0;\n    var U = 0;\n    var V = 0;\n    var W = 0;\n    var X = 0;\n    var Y = 0;\n    var Z = 0;\n    var _ = 0;\n    var $ = 0;\n    var space = 0;\n    var dot = 0;\n    var comma = 0;\n    var colon = 0;\n    var semi_colon = 0;\n    var question_mark = 0;\n    var exclamation_mark = 0;\n    var hyphen = 0;\n    var plus = 0;\n    var equals = 0;\n    var open_bracket = 0;\n    var close_bracket = 0;\n    var open_brace = 0;\n    var close_brace",
    "    var start = 0;\n    var end = 0;\n    var match = \"\";\n    var found = false;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start = i;\n            for(var j = 0; j < pattern.length; j++){\n                if(text[i + j] == pattern[j]){\n                    match += pattern[j];\n                    end = i + j;\n                    found = true;\n                }\n                else{\n                    found = false;\n                    break;\n                }\n            }\n            if(found){\n                break;\n            }\n        }\n    }\n    return [match, start, end];\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var i = 0;\n    while(i < text.length){\n        if(text[i] == pattern[0]){\n            start = i;\n            end = i;\n            var j = 0;\n            while(j < pattern.length){\n                if(text[i] == pattern[j]){\n                    end = i;\n                    i++;\n                    j++;\n                }\n                else{\n                    break;\n                }\n            }\n            if(j == pattern.length){\n                result.push([start, end]);\n            }\n        }\n        else{\n            i++;\n        }\n    }\n    return result;\n}\n",
    "    var result = [];\n    var match = text.match(pattern);\n    if(match){\n        result.push(match[0]);\n        result.push(match.index);\n        result.push(match.index + match[0].length);\n    }\n    return result;\n}\n",
    "\tvar result = [];\n\tvar start = 0;\n\tvar end = 0;\n\tvar match = \"\";\n\tfor(var i = 0; i < text.length; i++){\n\t\tif(text[i] == pattern[0]){\n\t\t\tstart = i;\n\t\t\tfor(var j = 0; j < pattern.length; j++){\n\t\t\t\tif(text[i+j] == pattern[j]){\n\t\t\t\t\tmatch += text[i+j];\n\t\t\t\t\tend = i+j;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tmatch = \"\";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(match != \"\"){\n\t\t\t\tresult.push(match);\n\t\t\t\tresult.push(start);\n\t\t\t\tresult.push(end);\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n",
    "    var start = text.search(pattern);\n    var end = start + pattern.length;\n    return [text.substring(start, end), start, end];\n}\n",
    "    var start = 0;\n    var end = 0;\n    var match = \"\";\n    var found = false;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] === pattern[0]){\n            start = i;\n            for(var j = 0; j < pattern.length; j++){\n                if(text[i + j] === pattern[j]){\n                    match += pattern[j];\n                    end = i + j;\n                    found = true;\n                }\n                else{\n                    match = \"\";\n                    found = false;\n                    break;\n                }\n            }\n        }\n    }\n    if(found){\n        return {\n            match: match,\n            start: start,\n            end: end\n        };\n    }\n    else{\n        return null;\n    }\n}\n",
    "  var result = [];\n  var start = 0;\n  var end = 0;\n  var match = false;\n  for(var i = 0; i < text.length; i++){\n    if(text[i] === pattern[0]){\n      start = i;\n      for(var j = 0; j < pattern.length; j++){\n        if(text[i+j] === pattern[j]){\n          match = true;\n        }else{\n          match = false;\n          break;\n        }\n      }\n      if(match){\n        end = i + j;\n        result.push(text.substring(start, end));\n      }\n    }\n  }\n  return result;\n}\n",
    "    var index = 0;\n    var match = \"\";\n    var start = 0;\n    var end = 0;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[index]){\n            if(match == \"\"){\n                start = i;\n            }\n            match += text[i];\n            index++;\n            if(index == pattern.length){\n                end = i;\n                return [match, start, end];\n            }\n        }\n        else{\n            match = \"\";\n            index = 0;\n        }\n    }\n    return [match, start, end];\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start = i;\n            for(var j = 0; j < pattern.length; j++){\n                if(text[i+j] != pattern[j]){\n                    break;\n                }\n                end = i+j;\n            }\n            if(end == start + pattern.length - 1){\n                result.push([start, end]);\n            }\n        }\n    }\n    return result;\n}\n",
    "\tvar index = text.search(pattern);\n\tvar result = text.match(pattern);\n\treturn [result, index, index + result.length - 1];\n}\n",
    "    var start_index = text.indexOf(pattern);\n    var end_index = start_index + pattern.length;\n    var match = text.substring(start_index, end_index);\n    return [match, start_index, end_index];\n}\n",
    "\tvar match = text.match(pattern);\n\treturn match;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var match = false;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start = i;\n            for(var j = 0; j < pattern.length; j++){\n                if(text[i+j] == pattern[j]){\n                    match = true;\n                }else{\n                    match = false;\n                    break;\n                }\n            }\n            if(match){\n                end = start + pattern.length - 1;\n                result.push([start, end]);\n            }\n        }\n    }\n    return result;\n}\n",
    "\tvar result = {};\n\tvar match = text.match(pattern);\n\tif(match){\n\t\tresult.match = match[0];\n\t\tresult.start = match.index;\n\t\tresult.end = match.index + match[0].length;\n\t}\n\treturn result;\n}\n",
    "    var start = 0;\n    var end = 0;\n    var match = \"\";\n    var found = false;\n    var i = 0;\n    while(i < text.length){\n        if(text[i] === pattern[0]){\n            start = i;\n            var j = 0;\n            while(j < pattern.length){\n                if(text[i] === pattern[j]){\n                    match += text[i];\n                    i++;\n                    j++;\n                }\n                else{\n                    match = \"\";\n                    i = start + 1;\n                    break;\n                }\n            }\n            if(match === pattern){\n                end = i;\n                found = true;\n                break;\n            }\n        }\n        else{\n            i++;\n        }\n    }\n    if(found){\n        return {\n            match: match,\n            start: start,\n            end: end\n        };\n    }\n    else{\n        return null;\n    }\n}\n",
    "    let result = [];\n    let start = 0;\n    let end = 0;\n    let i = 0;\n    while(i < text.length){\n        if(text[i] === pattern[0]){\n            start = i;\n            let j = 1;\n            while(j < pattern.length && text[i+j] === pattern[j]){\n                j++;\n            }\n            if(j === pattern.length){\n                end = i + j;\n                result.push([start, end]);\n            }\n        }\n        i++;\n    }\n    return result;\n}\n",
    "    var i = 0;\n    var j = 0;\n    var match = false;\n    var start = 0;\n    var end = 0;\n    var match_text = \"\";\n    while(i < text.length){\n        if(text[i] == pattern[j]){\n            if(!match){\n                match = true;\n                start = i;\n            }\n            match_text += text[i];\n            j++;\n            if(j == pattern.length){\n                end = i;\n                return [match_text, start, end];\n            }\n        }\n        else{\n            match = false;\n            match_text = \"\";\n            j = 0;\n        }\n        i++;\n    }\n    return [match_text, start, end];\n}\n",
    "\tvar start = 0;\n\tvar end = 0;\n\tvar match = \"\";\n\tvar i = 0;\n\tvar j = 0;\n\tvar k = 0;\n\tvar found = false;\n\tfor(i = 0; i < text.length; i++){\n\t\tif(text[i] == pattern[j]){\n\t\t\tstart = i;\n\t\t\tend = i;\n\t\t\tmatch = text[i];\n\t\t\tfor(j = 1; j < pattern.length; j++){\n\t\t\t\tif(text[i+j] == pattern[j]){\n\t\t\t\t\tend++;\n\t\t\t\t\tmatch += text[i+j];\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(match == pattern){\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tif(found){\n\t\treturn {\n\t\t\tmatch: match,\n\t\t\tstart: start,\n\t\t\tend: end\n\t\t};\n\t}\n\telse{\n\t\treturn {\n\t\t\tmatch: \"\",\n\t\t\tstart: -1,\n\t\t\tend: -1\n\t\t};\n\t}\n}\n",
    "\tvar start_index = 0;\n\tvar end_index = 0;\n\tvar match = \"\";\n\tfor(var i = 0; i < text.length; i++){\n\t\tif(text[i] == pattern[0]){\n\t\t\tstart_index = i;\n\t\t\tfor(var j = 0; j < pattern.length; j++){\n\t\t\t\tif(text[i+j] == pattern[j]){\n\t\t\t\t\tmatch += pattern[j];\n\t\t\t\t\tend_index = i+j;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tmatch = \"\";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn [match, start_index, end_index];\n}\n",
    "    var result = [];\n    var match = text.match(pattern);\n    if(match){\n        result.push(match[0]);\n        result.push(match.index);\n        result.push(match.index + match[0].length);\n    }\n    return result;\n}\n",
    "    var result = {};\n    var match = text.match(pattern);\n    if(match){\n        result.match = match[0];\n        result.start = match.index;\n        result.end = match.index + match[0].length;\n    }\n    return result;\n}\n",
    "    var result = {};\n    var match = text.match(pattern);\n    if(match){\n        result.match = match[0];\n        result.start = match.index;\n        result.end = match.index + match[0].length;\n    }\n    return result;\n}\n",
    "\tvar result = [];\n\tvar start = 0;\n\tvar end = 0;\n\tvar match = pattern.exec(text);\n\twhile(match != null){\n\t\tresult.push(match[0]);\n\t\tstart = match.index;\n\t\tend = start + match[0].length;\n\t\tmatch = pattern.exec(text);\n\t}\n\treturn result;\n}\n",
    "    var result = {};\n    var i = 0;\n    var j = 0;\n    var start = 0;\n    var end = 0;\n    var match = false;\n    while(i < text.length){\n        if(text[i] === pattern[j]){\n            if(j === 0){\n                start = i;\n            }\n            if(j === pattern.length - 1){\n                end = i;\n                match = true;\n                break;\n            }\n            i++;\n            j++;\n        } else {\n            i++;\n            j = 0;\n        }\n    }\n    if(match){\n        result.match = text.substring(start, end + 1);\n        result.start = start;\n        result.end = end;\n    } else {\n        result.match = null;\n        result.start = null;\n        result.end = null;\n    }\n    return result;\n}\n",
    "    let result = [];\n    let start = 0;\n    let end = 0;\n    let match = false;\n    for(let i = 0; i < text.length; i++){\n        for(let j = 0; j < pattern.length; j++){\n            if(text[i] === pattern[j]){\n                match = true;\n                start = i;\n                end = i + pattern.length;\n                result.push(text.substring(start, end));\n            }\n        }\n    }\n    return result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var match = pattern.exec(text);\n    while(match != null){\n        result.push(match[0]);\n        start = match.index;\n        end = start + match[0].length;\n        match = pattern.exec(text);\n    }\n    return {\n        result: result,\n        start: start,\n        end: end\n    };\n}\n",
    "    let result = [];\n    let start = 0;\n    let end = 0;\n    let match = false;\n    let i = 0;\n    while(i < text.length){\n        if(text[i] === pattern[0]){\n            start = i;\n            end = i;\n            match = true;\n            for(let j = 1; j < pattern.length; j++){\n                if(text[i+j] !== pattern[j]){\n                    match = false;\n                    break;\n                }\n                end++;\n            }\n            if(match){\n                result.push({\n                    match: text.substring(start, end+1),\n                    start: start,\n                    end: end\n                });\n            }\n        }\n        i++;\n    }\n    return result;\n}\n",
    "    var start = text.search(pattern);\n    var end = start + pattern.length;\n    return [text.substring(start, end), start, end];\n}\n",
    "\tvar i = 0;\n\tvar j = 0;\n\tvar k = 0;\n\tvar start = 0;\n\tvar end = 0;\n\tvar match = false;\n\tvar match_string = \"\";\n\tvar match_start = 0;\n\tvar match_end = 0;\n\twhile(i < text.length){\n\t\tif(text[i] == pattern[j]){\n\t\t\tif(match == false){\n\t\t\t\tmatch_start = i;\n\t\t\t}\n\t\t\tmatch = true;\n\t\t\tmatch_string += text[i];\n\t\t\tj++;\n\t\t\ti++;\n\t\t}\n\t\telse{\n\t\t\tmatch = false;\n\t\t\tmatch_string = \"\";\n\t\t\tj = 0;\n\t\t\ti++;\n\t\t}\n\t\tif(j == pattern.length){\n\t\t\tmatch_end = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn [match_string, match_start, match_end];\n}\n",
    "    var result = [];\n    var index = 0;\n    var start = 0;\n    var end = 0;\n    var match = '';\n    while(index < text.length){\n        if(text[index] === pattern[0]){\n            start = index;\n            match = '';\n            for(var i = 0; i < pattern.length; i++){\n                if(text[index + i] === pattern[i]){\n                    match += pattern[i];\n                }\n                else{\n                    break;\n                }\n            }\n            if(match === pattern){\n                end = index + pattern.length - 1;\n                result.push({\n                    match: match,\n                    start: start,\n                    end: end\n                });\n            }\n        }\n        index++;\n    }\n    return result;\n}\n",
    "    var start = 0;\n    var end = 0;\n    var match = \"\";\n    var match_index = 0;\n    var match_length = 0;\n    var match_found = false;\n    var pattern_length = pattern.length;\n    var text_length = text.length;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var match_found = false;\n    for(i = 0; i < text_length; i++){\n        for(j = 0; j < pattern_length; j++){\n            if(text[i + j] == pattern[j]){\n                match_found = true;\n            }else{\n                match_found = false;\n                break;\n            }\n        }\n        if(match_found){\n            start = i;\n            end = i + pattern_length;\n            match = text.substring(start, end);\n            break;\n        }\n    }\n    return {\n        match: match,\n        start: start,\n        end: end\n    };\n}\n",
    "    var match = text.match(pattern);\n    if(match){\n        return {\n            match: match[0],\n            start: match.index,\n            end: match.index + match[0].length\n        }\n    }\n    return null;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var i = 0;\n    while(i < text.length){\n        if(text[i] == pattern[0]){\n            start = i;\n            for(var j = 0; j < pattern.length; j++){\n                if(text[i+j] == pattern[j]){\n                    end = i+j;\n                }\n                else{\n                    break;\n                }\n            }\n            if(end == i+pattern.length-1){\n                result.push({\n                    'substring': text.substring(start, end+1),\n                    'start': start,\n                    'end': end\n                });\n            }\n        }\n        i++;\n    }\n    return result;\n}\n",
    "    var match = text.match(pattern);\n    if(match){\n        return {\n            match: match[0],\n            start: match.index,\n            end: match.index + match[0].length\n        };\n    }\n    return null;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var match = false;\n    var match_index = 0;\n    var match_length = 0;\n    var match_start = 0;\n    var match_end = 0;\n    var match_found = false;\n    var match_count = 0;\n    var match_string = \"\";\n    var match_array = [];\n    var match_array_index = 0;\n    var match_array_length = 0;\n    var match_array_start = 0;\n    var match_array_end = 0;\n    var match_array_found = false;\n    var match_array_count = 0;\n    var match_array_string = \"\";\n    var match_array_string_length = 0;\n    var match_array_string_start = 0;\n    var match_array_string_end = 0;\n    var match_array_string_found = false;\n    var match_array_string_count = 0;\n    var match_array_string_string = \"\";\n    var match_array_string_string_length = 0;\n    var match_array_string_string_start = 0;\n    var match_array_string_string_end = 0;\n    var match_array_string_string_found = false;\n    var match_array_string_string_count = 0;\n    var match_array_string_string_string = \"\";\n    var match_array_string_string_string_length = 0;\n    var match_array_string_string_string_start = 0;\n    var match_array_string_string_string_end = 0;\n    var match_array_string_string_string_found = false;\n    var match_array_string_string_string_count = 0;\n    var match_array_string_string_string_string = \"\";\n    var match_array_string_string_string_string_length = 0;\n    var match_array_string_string_string_string_start = 0;\n    var match_array_string",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var found = false;\n    var match = \"\";\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start = i;\n            end = i;\n            match = text[i];\n            found = true;\n            for(var j = 1; j < pattern.length; j++){\n                if(text[i+j] == pattern[j]){\n                    end = i+j;\n                    match += text[i+j];\n                }\n                else{\n                    found = false;\n                    break;\n                }\n            }\n            if(found){\n                result.push({match: match, start: start, end: end});\n            }\n        }\n    }\n    return result;\n}\n",
    "    var result = {};\n    var match = text.match(pattern);\n    if(match){\n        result.match = match[0];\n        result.start = match.index;\n        result.end = match.index + match[0].length;\n    }\n    return result;\n}\n",
    "    var result = {};\n    var match = text.match(pattern);\n    result.match = match[0];\n    result.start = match.index;\n    result.end = match.index + match[0].length;\n    return result;\n}\n",
    "\tvar match = text.match(pattern);\n\treturn match;\n}\n",
    "    var result = {};\n    var start = text.search(pattern);\n    if(start == -1){\n        return null;\n    }\n    result.start = start;\n    result.end = start + pattern.length;\n    result.match = text.substring(start, result.end);\n    return result;\n}\n",
    "    var result = [];\n    var i = 0;\n    while(i < text.length){\n        var match = text.substr(i).match(pattern);\n        if(match){\n            result.push({\n                match: match[0],\n                start: i + match.index,\n                end: i + match.index + match[0].length - 1\n            });\n            i += match.index + match[0].length;\n        } else {\n            i++;\n        }\n    }\n    return result;\n}\n",
    "\tvar i = 0;\n\tvar j = 0;\n\tvar start_index = 0;\n\tvar end_index = 0;\n\tvar match = false;\n\twhile(i < text.length){\n\t\tif(text[i] === pattern[j]){\n\t\t\tif(j === 0){\n\t\t\t\tstart_index = i;\n\t\t\t}\n\t\t\ti++;\n\t\t\tj++;\n\t\t\tif(j === pattern.length){\n\t\t\t\tend_index = i;\n\t\t\t\tmatch = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t\tj = 0;\n\t\t}\n\t}\n\tif(match){\n\t\treturn {\n\t\t\tmatch: text.substring(start_index, end_index),\n\t\t\tstart_index: start_index,\n\t\t\tend_index: end_index\n\t\t};\n\t}\n\telse{\n\t\treturn null;\n\t}\n}\n",
    "    var start_index = text.indexOf(pattern);\n    var end_index = start_index + pattern.length;\n    return [pattern, start_index, end_index];\n}\n",
    "\tvar index = 0;\n\tvar result = [];\n\twhile(index < text.length){\n\t\tvar match = pattern.exec(text);\n\t\tif(match){\n\t\t\tresult.push(match[0]);\n\t\t\tindex = match.index + match[0].length;\n\t\t}\n\t\telse{\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn result;\n}\n",
    "    var start_index = text.indexOf(pattern);\n    var end_index = start_index + pattern.length;\n    return {\n        match: text.substring(start_index, end_index),\n        start_index: start_index,\n        end_index: end_index\n    };\n}\n",
    "    var match = text.match(pattern);\n    return match;\n}\n",
    "    var start = 0;\n    var end = 0;\n    var match = \"\";\n    var found = false;\n    var i = 0;\n    while(i < text.length){\n        if(text[i] == pattern[0]){\n            start = i;\n            match = text[i];\n            for(var j = 1; j < pattern.length; j++){\n                if(text[i+j] == pattern[j]){\n                    match += text[i+j];\n                }\n                else{\n                    break;\n                }\n            }\n            if(match == pattern){\n                end = i + pattern.length - 1;\n                found = true;\n                break;\n            }\n        }\n        i++;\n    }\n    return {\n        match: match,\n        start: start,\n        end: end,\n        found: found\n    };\n}\n",
    "    var match = text.match(pattern);\n    if(match){\n        return {\n            match: match[0],\n            start: match.index,\n            end: match.index + match[0].length\n        }\n    }\n    return null;\n}\n",
    "    var start = 0;\n    var end = 0;\n    var match = \"\";\n    var found = false;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start = i;\n            end = i;\n            match = text[i];\n            for(var j = 1; j < pattern.length; j++){\n                if(text[i+j] == pattern[j]){\n                    match += text[i+j];\n                    end = i+j;\n                }\n                else{\n                    break;\n                }\n            }\n            if(match == pattern){\n                found = true;\n                break;\n            }\n        }\n    }\n    if(found){\n        return {\n            match: match,\n            start: start,\n            end: end\n        }\n    }\n    else{\n        return null;\n    }\n}\n",
    "  var result = {};\n  var match = text.match(pattern);\n  if(match){\n    result.match = match[0];\n    result.start = match.index;\n    result.end = match.index + match[0].length;\n  }\n  return result;\n}\n",
    "    var start = 0;\n    var end = 0;\n    var result = \"\";\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start = i;\n            for(var j = 0; j < pattern.length; j++){\n                if(text[i] == pattern[j]){\n                    i++;\n                    end = i;\n                }\n                else{\n                    break;\n                }\n            }\n            if(end - start == pattern.length){\n                result = text.substring(start, end);\n                break;\n            }\n        }\n    }\n    return result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var index = 0;\n    var found = false;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n   ",
    "    var match = text.match(pattern);\n    return {\n        match: match[0],\n        start: match.index,\n        end: match.index + match[0].length\n    };\n}\n",
    "\tvar start_index = text.indexOf(pattern);\n\tvar end_index = start_index + pattern.length;\n\treturn [text.slice(start_index, end_index), start_index, end_index];\n}\n",
    "    var match = text.match(pattern);\n    return match;\n}\n",
    "    var start = 0;\n    var end = 0;\n    var match = \"\";\n    var match_start = 0;\n    var match_end = 0;\n    var match_found = false;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] === pattern[start]){\n            match_start = i;\n            match_found = true;\n            for(var j = 0; j < pattern.length; j++){\n                if(text[i+j] === pattern[j]){\n                    match += text[i+j];\n                    match_end = i+j;\n                }\n                else{\n                    match_found = false;\n                    match = \"\";\n                    break;\n                }\n            }\n        }\n        if(match_found){\n            break;\n        }\n    }\n    return [match, match_start, match_end];\n}\n",
    "\tvar result = {};\n\tvar index = text.indexOf(pattern);\n\tif(index != -1){\n\t\tresult.match = pattern;\n\t\tresult.start = index;\n\t\tresult.end = index + pattern.length;\n\t}\n\treturn result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var index = 0;\n    var match = \"\";\n    var found = false;\n    var found_index = 0;\n    var found_end = 0;\n    var found_match = \"\";\n    var found_start = 0;\n    var found_end = 0;\n    var found_length = 0;\n    var found_match_length = 0;\n    var found_match_index = 0;\n    var found_match_end = 0;\n    var found_match_start = 0;\n    var found_match_end = 0;\n    var found_match_length = 0;\n    var found_match_index = 0;\n    var found_match_end = 0;\n    var found_match_start = 0;\n    var found_match_end = 0;\n    var found_match_length = 0;\n    var found_match_index = 0;\n    var found_match_end = 0;\n    var found_match_start = 0;\n    var found_match_end = 0;\n    var found_match_length = 0;\n    var found_match_index = 0;\n    var found_match_end = 0;\n    var found_match_start = 0;\n    var found_match_end = 0;\n    var found_match_length = 0;\n    var found_match_index = 0;\n    var found_match_end = 0;\n    var found_match_start = 0;\n    var found_match_end = 0;\n    var found_match_length = 0;\n    var found_match_index = 0;\n    var found_match_end = 0;\n    var found_match_start = 0;\n    var found_match_end = 0;\n    var found_match_length = 0;\n    var found_match_index = 0;\n    var found_match_end = 0;\n    var found_match_start = 0;\n    var found_match_end = 0;\n    var found_match_length = 0;\n    var found_match_index = 0;\n    var found_match_end = 0",
    "    var index = text.indexOf(pattern);\n    if(index === -1){\n        return null;\n    }\n    return {\n        start: index,\n        end: index + pattern.length,\n        match: text.substring(index, index + pattern.length)\n    };\n}\n",
    "  var pattern_index = 0;\n  var text_index = 0;\n  var match_start = 0;\n  var match_end = 0;\n  var match_found = false;\n  while(text_index < text.length){\n    if(text[text_index] == pattern[pattern_index]){\n      if(!match_found){\n        match_start = text_index;\n        match_found = true;\n      }\n      pattern_index++;\n      if(pattern_index == pattern.length){\n        match_end = text_index;\n        break;\n      }\n    }\n    else{\n      pattern_index = 0;\n      match_found = false;\n    }\n    text_index++;\n  }\n  if(match_found){\n    return {\n      match: text.substring(match_start, match_end + 1),\n      start: match_start,\n      end: match_end\n    };\n  }\n  else{\n    return null;\n  }\n}\n",
    "\tvar match = text.match(pattern);\n\tif(match){\n\t\treturn {\n\t\t\tmatch: match[0],\n\t\t\tstart: match.index,\n\t\t\tend: match.index + match[0].length\n\t\t};\n\t}\n\treturn null;\n}\n",
    "    var result = [];\n    var index = 0;\n    while(index < text.length){\n        var match = pattern.exec(text);\n        if(match){\n            result.push(match[0]);\n            index = match.index + 1;\n        }else{\n            break;\n        }\n    }\n    return result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var match = false;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] === pattern[0]){\n            start = i;\n            match = true;\n            for(var j = 0; j < pattern.length; j++){\n                if(text[i+j] !== pattern[j]){\n                    match = false;\n                    break;\n                }\n            }\n            if(match){\n                end = i + j;\n                result.push([start, end]);\n            }\n        }\n    }\n    return result;\n}\n",
    "  var match = text.match(pattern);\n  if(match){\n    return {\n      match: match[0],\n      start: match.index,\n      end: match.index + match[0].length\n    };\n  }\n  return null;\n}\n",
    "\tvar start = 0;\n\tvar end = 0;\n\tvar match = \"\";\n\tvar match_found = false;\n\tvar pattern_index = 0;\n\tvar pattern_length = pattern.length;\n\tvar text_length = text.length;\n\tfor(var i = 0; i < text_length; i++){\n\t\tif(text[i] == pattern[pattern_index]){\n\t\t\tif(!match_found){\n\t\t\t\tstart = i;\n\t\t\t\tmatch_found = true;\n\t\t\t}\n\t\t\tmatch += text[i];\n\t\t\tpattern_index++;\n\t\t\tif(pattern_index == pattern_length){\n\t\t\t\tend = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tmatch_found = false;\n\t\t\tmatch = \"\";\n\t\t\tpattern_index = 0;\n\t\t}\n\t}\n\treturn {match: match, start: start, end: end};\n}\n",
    "    var result = {};\n    var start = text.indexOf(pattern);\n    var end = start + pattern.length;\n    result.match = text.substring(start, end);\n    result.start = start;\n    result.end = end;\n    return result;\n}\n",
    "    var result = {};\n    var start = 0;\n    var end = 0;\n    var match = false;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start = i;\n            for(var j = 0; j < pattern.length; j++){\n                if(text[i+j] == pattern[j]){\n                    match = true;\n                }\n                else{\n                    match = false;\n                    break;\n                }\n            }\n            if(match){\n                end = i+j;\n                result.start = start;\n                result.end = end;\n                result.match = text.substring(start, end);\n                return result;\n            }\n        }\n    }\n    return result;\n}\n",
    "    var start = text.search(pattern);\n    var end = start + pattern.length;\n    return [text.substring(start, end), start, end];\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var match = false;\n    var i = 0;\n    var j = 0;\n    while(i < text.length){\n        if(text[i] == pattern[j]){\n            if(!match){\n                start = i;\n                match = true;\n            }\n            j++;\n            if(j == pattern.length){\n                end = i;\n                result.push({\n                    start: start,\n                    end: end,\n                    match: text.substring(start, end + 1)\n                });\n                j = 0;\n                match = false;\n            }\n        }\n        else{\n            j = 0;\n            match = false;\n        }\n        i++;\n    }\n    return result;\n}\n",
    "\tvar result = {};\n\tvar match = text.match(pattern);\n\tif(match){\n\t\tresult.match = match[0];\n\t\tresult.start = match.index;\n\t\tresult.end = match.index + match[0].length;\n\t}\n\treturn result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var match = false;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start = i;\n            end = i;\n            for(var j = 1; j < pattern.length; j++){\n                if(text[i+j] == pattern[j]){\n                    end++;\n                    match = true;\n                }else{\n                    match = false;\n                    break;\n                }\n            }\n            if(match){\n                result.push([start, end]);\n            }\n        }\n    }\n    return result;\n}\n",
    "\tvar result = {};\n\tvar start = text.search(pattern);\n\tvar end = start + pattern.length;\n\tresult.match = text.substring(start, end);\n\tresult.start = start;\n\tresult.end = end;\n\treturn result;\n}\n",
    "    var result = {};\n    var start = 0;\n    var end = 0;\n    var match = text.match(pattern);\n    if(match){\n        start = match.index;\n        end = start + match[0].length;\n    }\n    result.match = match;\n    result.start = start;\n    result.end = end;\n    return result;\n}\n",
    "    var result = [];\n    var match = text.match(pattern);\n    if(match){\n        result.push(match[0]);\n        result.push(match.index);\n        result.push(match.index + match[0].length);\n    }\n    return result;\n}\n",
    "    var index = 0;\n    var result = [];\n    while(index < text.length){\n        var match = pattern.exec(text);\n        if(match){\n            result.push(match[0]);\n            index = match.index + match[0].length;\n        }\n        else{\n            break;\n        }\n    }\n    return result;\n}\n",
    "\tvar result = [];\n\tvar start = 0;\n\tvar end = 0;\n\tvar index = 0;\n\tvar match = false;\n\tvar match_start = 0;\n\tvar match_end = 0;\n\tvar match_index = 0;\n\tvar match_found = false;\n\tvar match_text = \"\";\n\tvar match_length = 0;\n\tvar match_count = 0;\n\tvar match_index_array = [];\n\tvar match_start_array = [];\n\tvar match_end_array = [];\n\tvar match_text_array = [];\n\tvar match_length_array = [];\n\tvar match_count_array = [];\n\tvar match_index_array_index = 0;\n\tvar match_start_array_index = 0;\n\tvar match_end_array_index = 0;\n\tvar match_text_array_index = 0;\n\tvar match_length_array_index = 0;\n\tvar match_count_array_index = 0;\n\tvar match_index_array_length = 0;\n\tvar match_start_array_length = 0;\n\tvar match_end_array_length = 0;\n\tvar match_text_array_length = 0;\n\tvar match_length_array_length = 0;\n\tvar match_count_array_length = 0;\n\tvar match_index_array_index_end = 0;\n\tvar match_start_array_index_end = 0;\n\tvar match_end_array_index_end = 0;\n\tvar match_text_array_index_end = 0;\n\tvar match_length_array_index_end = 0;\n\tvar match_count_array_index_end = 0;\n\tvar match_index_array_index_start = 0;\n\tvar match_start_array_index_start = 0;\n\tvar match_end_array_index_start = 0;\n\tvar match_text_array_index_start = 0;\n\tvar match_length_array_index_start = 0;\n\tvar match_count_array_index_start = 0;\n\tvar match_index_array_index_end_start = 0;\n\t",
    "    var result = [];\n    var start_index = 0;\n    var end_index = 0;\n    var match = false;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start_index = i;\n            for(var j = 0; j < pattern.length; j++){\n                if(text[i+j] == pattern[j]){\n                    match = true;\n                }\n                else{\n                    match = false;\n                    break;\n                }\n            }\n            if(match){\n                end_index = i+j;\n                result.push(text.substring(start_index, end_index));\n                result.push(start_index);\n                result.push(end_index);\n                return result;\n            }\n        }\n    }\n    return result;\n}\n",
    "\tvar result = [];\n\tvar start = 0;\n\tvar end = 0;\n\tvar match = text.match(pattern);\n\tif (match){\n\t\tstart = text.indexOf(match[0]);\n\t\tend = start + match[0].length;\n\t}\n\tresult.push(match[0], start, end);\n\treturn result;\n}\n",
    "    var result = {\n        'start': null,\n        'end': null,\n        'match': null\n    };\n    var i = 0;\n    var j = 0;\n    var match = false;\n    var start = 0;\n    var end = 0;\n    var match_string = '';\n    for(i = 0; i < text.length; i++){\n        if(text[i] === pattern[j]){\n            if(match === false){\n                start = i;\n            }\n            match = true;\n            match_string += text[i];\n            j++;\n        }\n        else{\n            if(match === true){\n                end = i - 1;\n                match = false;\n                j = 0;\n                match_string = '';\n            }\n        }\n    }\n    if(match === true){\n        end = i - 1;\n    }\n    result.start = start;\n    result.end = end;\n    result.match = match_string;\n    return result;\n}\n",
    "    var start = 0;\n    var end = 0;\n    var match = \"\";\n    var index = 0;\n    var found = false;\n    while(!found && index < text.length){\n        if(text[index] === pattern[0]){\n            start = index;\n            match += text[index];\n            for(var i = 1; i < pattern.length; i++){\n                if(text[index + i] === pattern[i]){\n                    match += text[index + i];\n                    end = index + i;\n                }else{\n                    match = \"\";\n                    break;\n                }\n            }\n            if(match.length === pattern.length){\n                found = true;\n            }\n        }\n        index++;\n    }\n    return {\n        match: match,\n        start: start,\n        end: end\n    };\n}\n",
    "    var start_index = text.indexOf(pattern);\n    var end_index = start_index + pattern.length;\n    return {\n        match: text.substring(start_index, end_index),\n        start_index: start_index,\n        end_index: end_index\n    }\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var match = false;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start = i;\n            for(var j = 0; j < pattern.length; j++){\n                if(text[i+j] == pattern[j]){\n                    match = true;\n                }else{\n                    match = false;\n                    break;\n                }\n            }\n            if(match){\n                end = i + j;\n                result.push([start, end]);\n            }\n        }\n    }\n    return result;\n}\n",
    "    var start = 0;\n    var end = 0;\n    var match = \"\";\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start = i;\n            end = i;\n            match = text[i];\n            for(var j = 1; j < pattern.length; j++){\n                if(text[i+j] == pattern[j]){\n                    match += text[i+j];\n                    end++;\n                }\n                else{\n                    break;\n                }\n            }\n            if(match == pattern){\n                return [match, start, end];\n            }\n        }\n    }\n    return null;\n}\n",
    "    var match = text.match(pattern);\n    return match;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var found = false;\n    var found_index = 0;\n    var found_end = 0;\n    var found_start = 0;\n    var found_string = \"\";\n    var found_string_array = [];\n    var found_string_array_index = 0;\n    var found_string_array_end = 0;\n    var found_string_array_start = 0;\n    var found_string_array_string = \"\";\n    var found_string_array_string_array = [];\n    var found_string_array_string_array_index = 0;\n    var found_string_array_string_array_end = 0;\n    var found_string_array_string_array_start = 0;\n    var found_string_array_string_array_string = \"\";\n    var found_string_array_string_array_string_array = [];\n    var found_string_array_string_array_string_array_index = 0;\n    var found_string_array_string_array_string_array_end = 0;\n    var found_string_array_string_array_string_array_start = 0;\n    var found_string_array_string_array_string_array_string = \"\";\n    var found_string_array_string_array_string_array_string_array = [];\n    var found_string_array_string_array_string_array_string_array_index = 0;\n    var found_string_array_string_array_string_array_string_array_end = 0;\n    var found_string_array_string_array_string_array_string_array_start = 0;\n    var found_string_array_string_array_string_array_string_array_string = \"\";\n    var found_string_array_string_array_string_array_string_array_string_array = [];\n    var found_string_array_string_array_string_array_string_array_string_array_index = 0;\n    var found_",
    "    var match = text.match(pattern);\n    if(match){\n        return {\n            match: match[0],\n            start: match.index,\n            end: match.index + match[0].length\n        };\n    }\n    return null;\n}\n",
    "    var result = [];\n    var index = 0;\n    while(index < text.length){\n        var match = pattern.exec(text);\n        if(match){\n            result.push(match[0]);\n            index = match.index + match[0].length;\n        }else{\n            break;\n        }\n    }\n    return result;\n}\n",
    "    var result = {\n        start: 0,\n        end: 0,\n        match: ''\n    };\n    var index = 0;\n    var pattern_index = 0;\n    var match_length = 0;\n    var match_start = 0;\n    var match_end = 0;\n    var match_string = '';\n    while(index < text.length){\n        if(text[index] === pattern[pattern_index]){\n            if(match_length === 0){\n                match_start = index;\n            }\n            match_length++;\n            match_end = index;\n            match_string += text[index];\n            pattern_index++;\n            if(pattern_index === pattern.length){\n                result.start = match_start;\n                result.end = match_end;\n                result.match = match_string;\n                return result;\n            }\n        }\n        else{\n            match_length = 0;\n            match_start = 0;\n            match_end = 0;\n            match_string = '';\n            pattern_index = 0;\n        }\n        index++;\n    }\n    return result;\n}\n",
    "    var result = {};\n    var match = text.match(pattern);\n    result.match = match[0];\n    result.start = match.index;\n    result.end = match.index + match[0].length;\n    return result;\n}\n",
    "    var match = text.match(pattern);\n    return {\n        match: match[0],\n        start: match.index,\n        end: match.index + match[0].length\n    };\n}\n",
    "  var result = [];\n  var start = 0;\n  var end = 0;\n  var index = 0;\n  var found = false;\n  while(index < text.length){\n    if(text[index] === pattern[0]){\n      start = index;\n      end = index;\n      found = true;\n      for(var i = 1; i < pattern.length; i++){\n        if(text[index + i] !== pattern[i]){\n          found = false;\n          break;\n        }\n        end++;\n      }\n      if(found){\n        result.push([start, end]);\n      }\n    }\n    index++;\n  }\n  return result;\n}\n",
    "    var result = {};\n    var match = text.match(pattern);\n    if(match){\n        result.match = match[0];\n        result.start = match.index;\n        result.end = match.index + match[0].length;\n    }\n    return result;\n}\n",
    "    var match = text.match(pattern);\n    return match;\n}\n",
    "    var result = {};\n    var start = 0;\n    var end = 0;\n    var match = text.match(pattern);\n    if(match){\n        start = match.index;\n        end = start + match[0].length;\n    }\n    result.match = match;\n    result.start = start;\n    result.end = end;\n    return result;\n}\n",
    "\tvar result = [];\n\tvar start = 0;\n\tvar end = 0;\n\tvar match = false;\n\tvar index = 0;\n\twhile(index < text.length){\n\t\tif(text[index] === pattern[0]){\n\t\t\tstart = index;\n\t\t\tend = index;\n\t\t\tmatch = true;\n\t\t\tfor(var i = 1; i < pattern.length; i++){\n\t\t\t\tif(text[index + i] !== pattern[i]){\n\t\t\t\t\tmatch = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tend++;\n\t\t\t}\n\t\t\tif(match){\n\t\t\t\tresult.push([start, end]);\n\t\t\t}\n\t\t}\n\t\tindex++;\n\t}\n\treturn result;\n}\n",
    "    var match = text.match(pattern);\n    return match;\n}\n",
    "\tvar result = {};\n\tvar start = text.indexOf(pattern);\n\tvar end = start + pattern.length;\n\tresult.match = text.substring(start, end);\n\tresult.start = start;\n\tresult.end = end;\n\treturn result;\n}\n",
    "\tvar match = text.match(pattern);\n\tif(match){\n\t\treturn {\n\t\t\tmatch: match[0],\n\t\t\tstart: match.index,\n\t\t\tend: match.index + match[0].length\n\t\t}\n\t}\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var match = text.match(pattern);\n    if(match){\n        start = text.indexOf(match[0]);\n        end = start + match[0].length;\n        result.push(match[0], start, end);\n    }\n    return result;\n}\n",
    "    var match = text.match(pattern);\n    if(match){\n        return {\n            match: match[0],\n            start: match.index,\n            end: match.index + match[0].length\n        };\n    }\n    return null;\n}\n",
    "    var start_index = text.search(pattern);\n    var end_index = start_index + pattern.length;\n    var match = text.slice(start_index, end_index);\n    return [match, start_index, end_index];\n}\n",
    "    var match = text.match(pattern);\n    return {\n        match: match,\n        start: match.index,\n        end: match.index + match[0].length\n    }\n}\n",
    "\tvar result = [];\n\tvar start = 0;\n\tvar end = 0;\n\tvar match = null;\n\tvar regex = new RegExp(pattern, \"g\");\n\twhile(match = regex.exec(text)){\n\t\tresult.push(match[0]);\n\t\tstart = match.index;\n\t\tend = regex.lastIndex;\n\t}\n\treturn {\n\t\t\"match\": result,\n\t\t\"start\": start,\n\t\t\"end\": end\n\t};\n}\n",
    "    var result = {};\n    var start = text.search(pattern);\n    var end = start + pattern.length;\n    result.substring = text.substring(start, end);\n    result.start = start;\n    result.end = end;\n    return result;\n}\n",
    "    var start_index = text.indexOf(pattern);\n    var end_index = start_index + pattern.length;\n    return {\n        match: text.substring(start_index, end_index),\n        start_index: start_index,\n        end_index: end_index\n    };\n}\n",
    "\tvar match = text.match(pattern);\n\treturn match;\n}\n",
    "    var result = {};\n    var match = text.match(pattern);\n    if(match){\n        result.match = match[0];\n        result.start = match.index;\n        result.end = match.index + match[0].length;\n    }\n    return result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var count = 0;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[count]){\n            if(count == 0){\n                start = i;\n            }\n            count++;\n            if(count == pattern.length){\n                end = i;\n                result.push([start, end]);\n                count = 0;\n            }\n        }\n        else{\n            count = 0;\n        }\n    }\n    return result;\n}\n",
    "\tvar result = {};\n\tvar match = text.match(pattern);\n\tif(match){\n\t\tresult.match = match[0];\n\t\tresult.start = match.index;\n\t\tresult.end = match.index + match[0].length;\n\t}\n\treturn result;\n}\n",
    "    var start = 0;\n    var end = 0;\n    var match = \"\";\n    for(var i = 0; i < text.length; i++){\n        if(text[i] === pattern[0]){\n            start = i;\n            for(var j = 0; j < pattern.length; j++){\n                if(text[i+j] === pattern[j]){\n                    match += text[i+j];\n                    end = i+j;\n                }\n                else{\n                    match = \"\";\n                    break;\n                }\n            }\n        }\n    }\n    return {match: match, start: start, end: end};\n}\n",
    "\tvar result = {\n\t\tmatch: \"\",\n\t\tstart: 0,\n\t\tend: 0\n\t};\n\tvar match = text.match(pattern);\n\tif(match){\n\t\tresult.match = match[0];\n\t\tresult.start = match.index;\n\t\tresult.end = match.index + match[0].length;\n\t}\n\treturn result;\n}\n",
    "\tvar start_index = text.indexOf(pattern);\n\tvar end_index = start_index + pattern.length;\n\treturn [text.substring(start_index, end_index), start_index, end_index];\n}\n",
    "    var start = 0;\n    var end = 0;\n    var match = \"\";\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start = i;\n            for(var j = 0; j < pattern.length; j++){\n                if(text[i+j] == pattern[j]){\n                    match += pattern[j];\n                    end = i+j;\n                }\n                else{\n                    match = \"\";\n                    break;\n                }\n            }\n        }\n    }\n    return [match, start, end];\n}\n",
    "\tvar start = text.search(pattern);\n\tvar end = start + pattern.length;\n\treturn [text.substring(start, end), start, end];\n}\n",
    "\tvar result = {};\n\tvar start = text.indexOf(pattern);\n\tvar end = start + pattern.length;\n\tresult.match = text.substring(start, end);\n\tresult.start = start;\n\tresult.end = end;\n\treturn result;\n}\n",
    "    var match = text.match(pattern);\n    return match;\n}\n",
    "    var pattern_index = 0;\n    var text_index = 0;\n    var match_start = 0;\n    var match_end = 0;\n    var found = false;\n    while(text_index < text.length){\n        if(text[text_index] == pattern[pattern_index]){\n            if(!found){\n                match_start = text_index;\n                found = true;\n            }\n            pattern_index++;\n            if(pattern_index == pattern.length){\n                match_end = text_index;\n                break;\n            }\n        }\n        else{\n            pattern_index = 0;\n            found = false;\n        }\n        text_index++;\n    }\n    if(found){\n        return {\n            match: text.substring(match_start, match_end + 1),\n            start: match_start,\n            end: match_end\n        };\n    }\n    else{\n        return {\n            match: null,\n            start: null,\n            end: null\n        };\n    }\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var match = false;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start = i;\n            for(var j = 0; j < pattern.length; j++){\n                if(text[i+j] == pattern[j]){\n                    match = true;\n                }\n                else{\n                    match = false;\n                    break;\n                }\n            }\n            if(match){\n                end = i + j;\n                result.push(text.substring(start, end));\n            }\n        }\n    }\n    return result;\n}\n",
    "\tvar result = [];\n\tvar index = 0;\n\tvar start_index = 0;\n\tvar end_index = 0;\n\twhile(index < text.length){\n\t\tif(text[index] == pattern[0]){\n\t\t\tstart_index = index;\n\t\t\tend_index = index;\n\t\t\tfor(var i = 0; i < pattern.length; i++){\n\t\t\t\tif(text[index] == pattern[i]){\n\t\t\t\t\tend_index++;\n\t\t\t\t\tindex++;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(end_index - start_index == pattern.length){\n\t\t\t\tresult.push(text.substring(start_index, end_index));\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn result;\n}\n",
    "    var result = {};\n    var match = text.match(pattern);\n    if(match){\n        result.match = match[0];\n        result.start = match.index;\n        result.end = match.index + match[0].length;\n    }\n    return result;\n}\n",
    "    var match = text.match(pattern);\n    if(match){\n        return {\n            match: match[0],\n            start: match.index,\n            end: match.index + match[0].length\n        }\n    }\n    return null;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var i = 0;\n    while(i < text.length){\n        if(text[i] == pattern[0]){\n            start = i;\n            var j = 0;\n            while(j < pattern.length){\n                if(text[i] == pattern[j]){\n                    i++;\n                    j++;\n                }\n                else{\n                    break;\n                }\n            }\n            if(j == pattern.length){\n                end = i;\n                result.push([start, end]);\n            }\n        }\n        else{\n            i++;\n        }\n    }\n    return result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var index = 0;\n    var match = false;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n   ",
    "\tvar start = text.search(pattern);\n\tvar end = start + pattern.length;\n\treturn [text.substring(start, end), start, end];\n}\n",
    "    var start = 0;\n    var end = 0;\n    var match = \"\";\n    var found = false;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start = i;\n            end = i;\n            match = text[i];\n            found = true;\n            for(var j = 1; j < pattern.length; j++){\n                if(text[i+j] == pattern[j]){\n                    match += text[i+j];\n                    end = i+j;\n                }\n                else{\n                    found = false;\n                    break;\n                }\n            }\n            if(found){\n                return [match, start, end];\n            }\n        }\n    }\n    return [match, start, end];\n}\n",
    "    var result = [];\n    var start_index = 0;\n    var end_index = 0;\n    var match_index = 0;\n    var match_length = 0;\n    var match_string = \"\";\n    var pattern_length = pattern.length;\n    var text_length = text.length;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var found = false;\n    for(i = 0; i < text_length; i++){\n        if(text[i] == pattern[0]){\n            start_index = i;\n            for(j = 0; j < pattern_length; j++){\n                if(text[i+j] == pattern[j]){\n                    found = true;\n                }\n                else{\n                    found = false;\n                    break;\n                }\n            }\n            if(found){\n                end_index = i + j;\n                match_index = i;\n                match_length = j;\n                match_string = text.substring(match_index, match_index + match_length);\n                result.push({\n                    match_string: match_string,\n                    match_index: match_index,\n                    match_length: match_length\n                });\n            }\n        }\n    }\n    return result;\n}\n",
    "    var match = text.match(pattern);\n    if(match){\n        return {\n            match: match[0],\n            start: match.index,\n            end: match.index + match[0].length\n        }\n    }\n    return null;\n}\n",
    "\tvar result = [];\n\tvar index = 0;\n\twhile(index < text.length){\n\t\tvar match = pattern.exec(text);\n\t\tif(match){\n\t\t\tresult.push(match[0]);\n\t\t\tindex = match.index + match[0].length;\n\t\t}\n\t\telse{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\n",
    "    let start = text.indexOf(pattern);\n    let end = start + pattern.length;\n    return [text.slice(start, end), start, end];\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var i = 0;\n    var j = 0;\n    var found = false;\n    while(i < text.length){\n        if(text[i] === pattern[j]){\n            if(!found){\n                start = i;\n                found = true;\n            }\n            j++;\n            if(j === pattern.length){\n                end = i;\n                result.push([start, end]);\n                j = 0;\n                found = false;\n            }\n        }\n        else{\n            j = 0;\n            found = false;\n        }\n        i++;\n    }\n    return result;\n}\n",
    "\tvar result = {};\n\tvar start_index = 0;\n\tvar end_index = 0;\n\tvar match = \"\";\n\tvar i = 0;\n\tvar j = 0;\n\tvar k = 0;\n\tvar found = false;\n\tvar found_index = 0;\n\tvar found_end_index = 0;\n\tvar found_match = \"\";\n\tvar found_match_index = 0;\n\tvar found_match_end_index = 0;\n\tvar found_match_start_index = 0;\n\tvar found_match_end_index = 0;\n\tvar found_match_length = 0;\n\tvar found_match_end_index = 0;\n\tvar found_match_length = 0;\n\tvar found_match_end_index = 0;\n\tvar found_match_length = 0;\n\tvar found_match_end_index = 0;\n\tvar found_match_length = 0;\n\tvar found_match_end_index = 0;\n\tvar found_match_length = 0;\n\tvar found_match_end_index = 0;\n\tvar found_match_length = 0;\n\tvar found_match_end_index = 0;\n\tvar found_match_length = 0;\n\tvar found_match_end_index = 0;\n\tvar found_match_length = 0;\n\tvar found_match_end_index = 0;\n\tvar found_match_length = 0;\n\tvar found_match_end_index = 0;\n\tvar found_match_length = 0;\n\tvar found_match_end_index = 0;\n\tvar found_match_length = 0;\n\tvar found_match_end_index = 0;\n\tvar found_match_length = 0;\n\tvar found_match_end_index = 0;\n\tvar found_match_length = 0;\n\tvar found_match_end_index = 0;\n\tvar found_match_length = 0;\n\tvar found_match_end_index = 0;\n\tvar found_match_length = 0;\n\tvar found_match_end_index = 0;\n\tvar found_match_length = 0;\n\t",
    "  var match = text.match(pattern);\n  return match;\n}\n",
    "\tvar result = [];\n\tvar start = 0;\n\tvar end = 0;\n\tvar match = false;\n\tvar index = 0;\n\tvar pattern_index = 0;\n\tvar pattern_length = pattern.length;\n\tvar text_length = text.length;\n\twhile(index < text_length){\n\t\tif(text[index] === pattern[pattern_index]){\n\t\t\tif(!match){\n\t\t\t\tstart = index;\n\t\t\t\tmatch = true;\n\t\t\t}\n\t\t\tpattern_index++;\n\t\t\tif(pattern_index === pattern_length){\n\t\t\t\tend = index + 1;\n\t\t\t\tresult.push([start, end]);\n\t\t\t\tmatch = false;\n\t\t\t\tpattern_index = 0;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tmatch = false;\n\t\t\tpattern_index = 0;\n\t\t}\n\t\tindex++;\n\t}\n\treturn result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var match = false;\n    var i = 0;\n    var j = 0;\n    while(i < text.length){\n        if(text[i] === pattern[j]){\n            if(!match){\n                start = i;\n                match = true;\n            }\n            j++;\n            if(j === pattern.length){\n                end = i;\n                result.push([start, end]);\n                j = 0;\n                match = false;\n            }\n        }\n        else{\n            j = 0;\n            match = false;\n        }\n        i++;\n    }\n    return result;\n}\n",
    "    var result = {};\n    var start = text.indexOf(pattern);\n    var end = start + pattern.length;\n    result.match = text.substring(start, end);\n    result.start = start;\n    result.end = end;\n    return result;\n}\n",
    "    var result = {\n        start: -1,\n        end: -1,\n        match: null\n    };\n    var match = pattern.exec(text);\n    if(match){\n        result.start = match.index;\n        result.end = match.index + match[0].length;\n        result.match = match[0];\n    }\n    return result;\n}\n"
  ]
}