{
  "name": "mbpp_607_find_literals",
  "language": "js",
  "prompt": "//Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nfunction find_literals(text, pattern){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_607_find_literals.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_literals;\n  assert.deepEqual(candidate(\"The quick brown fox jumps over the lazy dog.\", \"fox\"),[\"fox\", 16, 19]);\n  assert.deepEqual(candidate(\"Its been a very crazy procedure right\", \"crazy\"),[\"crazy\", 16, 21]);\n  assert.deepEqual(candidate(\"Hardest choices required strongest will\", \"will\"),[\"will\", 35, 39]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "\tvar start = 0;\n\tvar end = 0;\n\tvar match = \"\";\n\tfor (var i = 0; i < text.length; i++){\n\t\tif (text[i] == pattern[0]){\n\t\t\tstart = i;\n\t\t\tfor (var j = 0; j < pattern.length; j++){\n\t\t\t\tif (text[i+j] == pattern[j]){\n\t\t\t\t\tmatch += text[i+j];\n\t\t\t\t\tend = i+j;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tmatch = \"\";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (match == pattern){\n\t\t\t\treturn [match, start, end];\n\t\t\t}\n\t\t}\n\t}\n\treturn \"\";\n}\n",
    "    var start = 0;\n    var end = 0;\n    var match = \"\";\n    var found = false;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start = i;\n            end = i;\n            match = text[i];\n            for(var j = 1; j < pattern.length; j++){\n                if(text[i+j] == pattern[j]){\n                    end = i+j;\n                    match += text[i+j];\n                }\n                else{\n                    break;\n                }\n            }\n            if(match == pattern){\n                found = true;\n                break;\n            }\n        }\n    }\n    if(found){\n        return [match, start, end];\n    }\n    else{\n        return null;\n    }\n}\n",
    "    var match = text.match(pattern);\n    if(match){\n        return {\n            match: match[0],\n            start: match.index,\n            end: match.index + match[0].length\n        };\n    }\n    return null;\n}\n",
    "    var match = text.match(pattern);\n    if(match){\n        return {\n            match: match[0],\n            start: match.index,\n            end: match.index + match[0].length\n        };\n    }\n    return null;\n}\n",
    "\tvar match = text.match(pattern);\n\treturn match;\n}\n",
    "\tvar match = text.match(pattern);\n\treturn match;\n}\n",
    "\tvar match = text.match(pattern);\n\tif(match){\n\t\treturn {\n\t\t\tmatch: match[0],\n\t\t\tstart: match.index,\n\t\t\tend: match.index + match[0].length\n\t\t};\n\t}\n\treturn null;\n}\n",
    "  var result = [];\n  var start = 0;\n  var end = 0;\n  for(var i = 0; i < text.length; i++){\n    if(text[i] === pattern[0]){\n      start = i;\n      for(var j = 0; j < pattern.length; j++){\n        if(text[i + j] === pattern[j]){\n          end = i + j;\n        }\n      }\n    }\n  }\n  result.push(text.slice(start, end + 1));\n  result.push(start);\n  result.push(end);\n  return result;\n}\n",
    "\tvar start_index = text.indexOf(pattern);\n\tvar end_index = start_index + pattern.length;\n\treturn [text.substring(start_index, end_index), start_index, end_index];\n}\n",
    "\tvar result = [];\n\tvar start = 0;\n\tvar end = 0;\n\tvar i = 0;\n\twhile(i < text.length){\n\t\tif(text[i] == pattern[0]){\n\t\t\tstart = i;\n\t\t\tfor(var j = 0; j < pattern.length; j++){\n\t\t\t\tif(text[i] == pattern[j]){\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(j == pattern.length){\n\t\t\t\tend = i;\n\t\t\t\tresult.push(text.substring(start, end));\n\t\t\t\tresult.push(start);\n\t\t\t\tresult.push(end);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\n",
    "    var start = 0;\n    var end = 0;\n    var match = \"\";\n    var found = false;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start = i;\n            for(var j = 0; j < pattern.length; j++){\n                if(text[i + j] == pattern[j]){\n                    match += text[i + j];\n                    end = i + j;\n                    found = true;\n                }\n                else{\n                    found = false;\n                    break;\n                }\n            }\n            if(found){\n                break;\n            }\n        }\n    }\n    return [match, start, end];\n}\n",
    "    var result = {};\n    var match = text.match(pattern);\n    if(match){\n        result.match = match[0];\n        result.start = match.index;\n        result.end = match.index + match[0].length;\n    }\n    return result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var i = 0;\n    while(i < text.length){\n        if(text[i] == pattern[0]){\n            start = i;\n            var j = 0;\n            while(j < pattern.length){\n                if(text[i] == pattern[j]){\n                    i++;\n                    j++;\n                }\n                else{\n                    break;\n                }\n            }\n            if(j == pattern.length){\n                end = i;\n                result.push([start, end]);\n            }\n        }\n        else{\n            i++;\n        }\n    }\n    return result;\n}\n",
    "    var result = {};\n    var match = text.match(pattern);\n    if(match){\n        result.match = match[0];\n        result.start = match.index;\n        result.end = match.index + match[0].length;\n    }\n    return result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var match = false;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start = i;\n            for(var j = 0; j < pattern.length; j++){\n                if(text[i + j] == pattern[j]){\n                    match = true;\n                }\n                else{\n                    match = false;\n                    break;\n                }\n            }\n            if(match){\n                end = i + j;\n                result.push([start, end]);\n            }\n        }\n    }\n    return result;\n}\n",
    "\tvar result = [];\n\tvar start = 0;\n\tvar end = 0;\n\tvar found = false;\n\tfor(var i = 0; i < text.length; i++){\n\t\tif(text[i] == pattern[0]){\n\t\t\tstart = i;\n\t\t\tend = i;\n\t\t\tfor(var j = 1; j < pattern.length; j++){\n\t\t\t\tif(text[i+j] == pattern[j]){\n\t\t\t\t\tend = i + j;\n\t\t\t\t\tfound = true;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(found){\n\t\t\t\tresult.push({\n\t\t\t\t\tstart: start,\n\t\t\t\t\tend: end,\n\t\t\t\t\tsubstring: text.substring(start, end+1)\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n",
    "\tvar match = text.match(pattern);\n\tif(match){\n\t\treturn {\n\t\t\tmatch: match[0],\n\t\t\tstart: match.index,\n\t\t\tend: match.index + match[0].length\n\t\t};\n\t}\n\treturn null;\n}\n",
    "    var start_index = text.indexOf(pattern);\n    var end_index = start_index + pattern.length;\n    var result = text.substring(start_index, end_index);\n    return [result, start_index, end_index];\n}\n",
    "    var result = {};\n    var match = text.match(pattern);\n    if(match){\n        result.match = match[0];\n        result.start = match.index;\n        result.end = match.index + match[0].length;\n    }\n    return result;\n}\n\nvar text = \"This is a test. This is a programming test. This is a programming test in any language.\";\nvar pattern = /test/;\nvar result = find_literals(text, pattern);",
    "    var start = 0;\n    var end = 0;\n    var match = \"\";\n    var found = false;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start = i;\n            for(var j = 0; j < pattern.length; j++){\n                if(text[i+j] != pattern[j]){\n                    break;\n                }\n                if(j == pattern.length - 1){\n                    end = i + j;\n                    found = true;\n                }\n            }\n        }\n        if(found){\n            break;\n        }\n    }\n    if(found){\n        for(var i = start; i <= end; i++){\n            match += text[i];\n        }\n    }\n    return [match, start, end];\n}\n"
  ]
}