{
  "name": "mbpp_565_split",
  "language": "js",
  "prompt": "//Write a python function to split a string into characters.\nfunction split(word){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_565_split.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = word.split(\"\");\n    return split;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\")\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = word.split(\"\");\n    return split;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = word.split(\"\");\n    return split;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split('');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var splitted = word.split(\"\");\n    return splitted;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var arr = [];\n    for(var i = 0; i < word.length; i++){\n        arr.push(word[i]);\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var splitWord = word.split(\"\");\n    return splitWord;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var array = [];\n    for (var i = 0; i < word.length; i++){\n        array.push(word[i]);\n    }\n    return array;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = word.split(\"\");\n    return split;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var splitWord = word.split(\"\");\n    return splitWord;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var splitWord = word.split(\"\");\n    return splitWord;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var splitted = word.split(\"\");\n    return splitted;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = word.split(\"\");\n    return split;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\")\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = word.split(\"\");\n    return split;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var arr = [];\n    for(var i = 0; i < word.length; i++){\n        arr.push(word[i]);\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split_word = word.split(\"\");\n    return split_word;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = word.split(\"\");\n    return split;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = word.split(\"\");\n    return split;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = word.split(\"\");\n    return split;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = word.split(\"\");\n    return split;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var splitWord = word.split(\"\");\n    return splitWord;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var splitWord = word.split('');\n    return splitWord;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = word.split(\"\");\n    return split;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var splitString = \"\";\n    for(var i = 0; i < word.length; i++){\n        splitString += word[i] + \"\\n\";\n    }\n    return splitString;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'p\\ny\\nt\\nh\\no\\nn\\n'\n\nshould loosely deep-equal\n\n[\n  'p',\n  'y',\n  't',\n  'h',\n  'o',\n  'n'\n]\n    at test (/tmp/tmpno2byin8.js:14:10)\n    at Object.<anonymous> (/tmp/tmpno2byin8.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'p\\ny\\nt\\nh\\no\\nn\\n',\n  expected: [ 'p', 'y', 't', 'h', 'o', 'n' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var char = word.split(\"\");\n    return char;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = [];\n    for (var i = 0; i < word.length; i++){\n        split.push(word[i]);\n    }\n    return split;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var splitWord = word.split(\"\");\n    return splitWord;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split_word = word.split(\"\");\n    return split_word;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var splitWord = word.split(\"\");\n    return splitWord;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var array = [];\n    for(var i = 0; i < word.length; i++){\n        array.push(word[i]);\n    }\n    return array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split_word = word.split(\"\");\n    return split_word;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = word.split(\"\");\n    return split;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var splitWord = word.split(\"\");\n    return splitWord;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = word.split(\"\");\n    return split;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var splitWord = word.split(\"\");\n    return splitWord;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var splitWord = word.split(\"\");\n    console.log(splitWord);\n}\nsplit(\"Hello\");\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "[ 'H', 'e', 'l', 'l', 'o' ]\n[ 'p', 'y', 't', 'h', 'o', 'n' ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  'p',\n  'y',\n  't',\n  'h',\n  'o',\n  'n'\n]\n    at test (/tmp/tmp8gstajhs.js:13:10)\n    at Object.<anonymous> (/tmp/tmp8gstajhs.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 'p', 'y', 't', 'h', 'o', 'n' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var splitWord = word.split(\"\");\n    return splitWord;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = word.split(\"\");\n    return split;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var splitWord = word.split(\"\");\n    return splitWord;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split('');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = word.split(\"\");\n    return split;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = word.split(\"\");\n    return split;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = word.split(\"\");\n    return split;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var array = [];\n    for(var i = 0; i < word.length; i++){\n        array.push(word[i]);\n    }\n    return array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split_word = word.split(\"\");\n    return split_word;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var splitWord = word.split(\"\");\n    return splitWord;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = word.split(\"\");\n    return split;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = word.split(\"\");\n    return split;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var splitWord = word.split(\"\");\n    return splitWord;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = word.split(\"\");\n    return split;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = word.split(\"\");\n    return split;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = word.split(\"\");\n    return split;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = word.split(\"\");\n    return split;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split_word = word.split(\"\");\n    return split_word;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var splitWord = word.split(\"\");\n    return splitWord;\n}\nvar splitWord = split(\"Hello\");\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = word.split(\"\");\n    return split;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\")\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = word.split(\"\");\n    return split;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split_word = word.split(\"\");\n    return split_word;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var splitWord = word.split(\"\");\n    return splitWord;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var splitWord = word.split(\"\");\n    return splitWord;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = word.split(\"\");\n    return split;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var splitWord = word.split(\"\");\n    return splitWord;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = word.split(\"\");\n    return split;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = word.split(\"\");\n    return split;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var array = [];\n    for(var i = 0; i < word.length; i++){\n        array.push(word[i]);\n    }\n    return array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = word.split(\"\");\n    return split;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split_word = word.split(\"\");\n    return split_word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = word.split(\"\");\n    return split;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var splitWord = word.split(\"\");\n    return splitWord;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split_word = word.split(\"\");\n    return split_word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var splitWord = word.split(\"\");\n    return splitWord;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = word.split(\"\");\n    return split;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = word.split(\"\");\n    return split;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var splitWord = word.split('');\n    return splitWord;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var arr = [];\n    for(var i = 0; i < word.length; i++){\n        arr.push(word[i]);\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var splitWord = word.split(\"\");\n    return splitWord;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var splitWord = word.split(\"\");\n    return splitWord;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split_word = word.split(\"\");\n    return split_word;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var arr = [];\n    for(var i = 0; i < word.length; i++){\n        arr.push(word[i]);\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\")\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = word.split(\"\");\n    return split;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = word.split(\"\");\n    return split;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\")\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var arr = [];\n    for(var i = 0; i < word.length; i++){\n        arr.push(word[i]);\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = word.split(\"\");\n    return split;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split_word = word.split(\"\");\n    return split_word;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var splitWord = word.split(\"\");\n    return splitWord;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n  return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = word.split(\"\");\n    return split;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var splitWord = word.split(\"\");\n    return splitWord;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = word.split(\"\");\n    return split;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = word.split(\"\");\n    return split;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\")\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var splitWord = word.split(\"\");\n    return splitWord;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var splitWord = word.split(\"\");\n    return splitWord;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var new_word = word.split(\"\");\n    return new_word;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var splitWord = word.split(\"\");\n    return splitWord;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var array = [];\n    for(var i = 0; i < word.length; i++){\n        array.push(word[i]);\n    }\n    return array;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var splitWord = word.split(\"\");\n    return splitWord;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var splitWord = word.split(\"\");\n    return splitWord;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\")\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var splitWord = word.split(\"\");\n    return splitWord;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split('');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var arr = [];\n    for(var i = 0; i < word.length; i++){\n        arr.push(word[i]);\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split_word = word.split(\"\");\n    return split_word;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var splitWord = word.split(\"\");\n    return splitWord;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = word.split(\"\");\n    return split;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = word.split(\"\");\n    return split;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var splitWord = word.split(\"\");\n    return splitWord;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var splitWord = word.split(\"\");\n    return splitWord;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split_word = word.split(\"\");\n    return split_word;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split('')\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = word.split(\"\");\n    return split;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = word.split(\"\");\n    return split;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = word.split(\"\");\n    return split;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    return word.split(\"\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var arr = [];\n    for(var i = 0; i < word.length; i++){\n        arr.push(word[i]);\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var splitWord = word.split(\"\");\n    return splitWord;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a string into characters.\nfunction split(word){\n    var split = word.split(\"\");\n    return split;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split;\n  assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n  assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);\n  assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}