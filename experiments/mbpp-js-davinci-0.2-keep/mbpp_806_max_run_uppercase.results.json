{
  "name": "mbpp_806_max_run_uppercase",
  "language": "js",
  "prompt": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_806_max_run_uppercase.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            cur_run++;\n        }\n        else{\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if(cur_run > max_run){\n        max_run = cur_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for (var i = 0; i < test_str.length; i++) {\n        if (test_str[i] == test_str[i].toUpperCase()) {\n            cur_run++;\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n        } else {\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            run++;\n            if(run > max_run){\n                max_run = run;\n            }\n        }\n        else{\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            run++;\n        }\n        else{\n            run = 0;\n        }\n        if(run > max_run){\n            max_run = run;\n        }\n    }\n    return max_run;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            run++;\n        }else{\n            if(run > max_run){\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpwf2ftop3.js:24:10)\n    at Object.<anonymous> (/tmp/tmpwf2ftop3.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            run++;\n        }\n        else{\n            if(run > max_run){\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpch107uog.js:25:10)\n    at Object.<anonymous> (/tmp/tmpch107uog.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_count = 0;\n    var count = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            count++;\n        }\n        else{\n            if(count > max_count){\n                max_count = count;\n            }\n            count = 0;\n        }\n    }\n    return max_count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpgca_aagb.js:24:10)\n    at Object.<anonymous> (/tmp/tmpgca_aagb.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            run++;\n            if(run > max_run){\n                max_run = run;\n            }\n        }\n        else{\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpbm_009ed.js:25:10)\n    at Object.<anonymous> (/tmp/tmpbm_009ed.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if(curr_run > max_run){\n        max_run = curr_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var current_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            current_run++;\n        }\n        else{\n            if(current_run > max_run){\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpzglp3ol0.js:25:10)\n    at Object.<anonymous> (/tmp/tmpzglp3ol0.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            cur_run++;\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n        }\n        else{\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_count = 0;\n    var count = 0;\n    for (var i = 0; i < test_str.length; i++) {\n        if (test_str[i] == test_str[i].toUpperCase()) {\n            count++;\n        } else {\n            if (count > max_count) {\n                max_count = count;\n            }\n            count = 0;\n        }\n    }\n    return max_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmppj88zopa.js:24:10)\n    at Object.<anonymous> (/tmp/tmppj88zopa.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i=0; i<test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if(curr_run > max_run){\n        max_run = curr_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            cur_run++;\n        }\n        else{\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if(cur_run > max_run){\n        max_run = cur_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i=0; i<test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if(curr_run > max_run){\n        max_run = curr_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i=0; i<test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if(curr_run > max_run){\n        max_run = curr_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for (var i = 0; i < test_str.length; i++){\n        if (test_str[i] == test_str[i].toUpperCase()){\n            curr_run += 1;\n            if (curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for (var i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            cur_run++;\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n        } else {\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        } else {\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i=0; i<test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n        }\n        else{\n            curr_run = 0;\n        }\n        if(curr_run > max_run){\n            max_run = curr_run;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    let max_run = 0;\n    let current_run = 0;\n    for(let i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            current_run++;\n            if(current_run > max_run){\n                max_run = current_run;\n            }\n        }\n        else{\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    var i;\n    for(i=0; i<test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if(curr_run > max_run){\n        max_run = curr_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            cur_run++;\n        }\n        else{\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpuoa5tr3y.js:25:10)\n    at Object.<anonymous> (/tmp/tmpuoa5tr3y.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            cur_run++;\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n        }\n        else{\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i].match(/[A-Z]/)){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max = 0;\n    var curr = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr++;\n            if(curr > max){\n                max = curr;\n            }\n        }\n        else{\n            curr = 0;\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var count = 0;\n    var max = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            count++;\n            if(count > max){\n                max = count;\n            }\n        }\n        else{\n            count = 0;\n        }\n    }\n    return max;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            run++;\n        }\n        else{\n            if(run > max_run){\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if(run > max_run){\n        max_run = run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            cur_run++;\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n        }\n        else{\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var count = 0;\n    var max_count = 0;\n    for(var i=0; i<test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            count++;\n            if(count > max_count){\n                max_count = count;\n            }\n        }\n        else{\n            count = 0;\n        }\n    }\n    return max_count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpu14_2hvy.js:25:10)\n    at Object.<anonymous> (/tmp/tmpu14_2hvy.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if(curr_run > max_run){\n        max_run = curr_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            cur_run++;\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n        }\n        else{\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if(curr_run > max_run){\n        max_run = curr_run;\n    }\n    return max_run;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            run++;\n        }\n        else{\n            if(run > max_run){\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpch107uog.js:25:10)\n    at Object.<anonymous> (/tmp/tmpch107uog.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var current_run = 0;\n    for (var i = 0; i < test_str.length; i++){\n        if (test_str[i] == test_str[i].toUpperCase()){\n            current_run += 1;\n            if (current_run > max_run){\n                max_run = current_run;\n            }\n        }\n        else{\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpbm_009ed.js:25:10)\n    at Object.<anonymous> (/tmp/tmpbm_009ed.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if(curr_run > max_run){\n        max_run = curr_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            run++;\n        }\n        else{\n            if(run > max_run){\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpch107uog.js:25:10)\n    at Object.<anonymous> (/tmp/tmpch107uog.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for (var i = 0; i < test_str.length; i++){\n        if (test_str[i] === test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if (curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpo84ncihy.js:24:10)\n    at Object.<anonymous> (/tmp/tmpo84ncihy.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var count = 0;\n    var max = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            count++;\n        } else {\n            if(count > max){\n                max = count;\n            }\n            count = 0;\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpwye_iwrn.js:24:10)\n    at Object.<anonymous> (/tmp/tmpwye_iwrn.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_count = 0;\n    var count = 0;\n    for(var i=0; i<test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            count++;\n        }\n        else{\n            if(count > max_count){\n                max_count = count;\n            }\n            count = 0;\n        }\n    }\n    if(count > max_count){\n        max_count = count;\n    }\n    return max_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if(curr_run > max_run){\n        max_run = curr_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            cur_run++;\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n        }\n        else{\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var current_run = 0;\n    for(var i=0; i<test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            current_run++;\n            if(current_run > max_run){\n                max_run = current_run;\n            }\n        }\n        else{\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            run++;\n        }\n        else{\n            if(run > max_run){\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if(run > max_run){\n        max_run = run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n\tvar max_run = 0;\n\tvar run = 0;\n\tfor(var i = 0; i < test_str.length; i++){\n\t\tif(test_str[i] == test_str[i].toUpperCase()){\n\t\t\trun++;\n\t\t}\n\t\telse{\n\t\t\tif(run > max_run){\n\t\t\t\tmax_run = run;\n\t\t\t}\n\t\t\trun = 0;\n\t\t}\n\t}\n\treturn max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp148joe3b.js:25:10)\n    at Object.<anonymous> (/tmp/tmp148joe3b.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpyfnp4pbz.js:24:10)\n    at Object.<anonymous> (/tmp/tmpyfnp4pbz.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            cur_run++;\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n        }else{\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            run++;\n        }\n        else{\n            run = 0;\n        }\n        if(run > max_run){\n            max_run = run;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for (var i = 0; i < test_str.length; i++){\n        if (test_str[i] == test_str[i].toUpperCase()){\n            curr_run += 1;\n            if (curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            run++;\n        }\n        else{\n            if(run > max_run){\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpch107uog.js:25:10)\n    at Object.<anonymous> (/tmp/tmpch107uog.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var temp_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            temp_run += 1;\n        }\n        else{\n            if(temp_run > max_run){\n                max_run = temp_run;\n            }\n            temp_run = 0;\n        }\n    }\n    if(temp_run > max_run){\n        max_run = temp_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            cur_run++;\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n        }\n        else{\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            run++;\n        }\n        else{\n            if(run > max_run){\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if(run > max_run){\n        max_run = run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            curr_run += 1;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            cur_run++;\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n        }\n        else{\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpyfnp4pbz.js:24:10)\n    at Object.<anonymous> (/tmp/tmpyfnp4pbz.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var count = 0;\n    var max_count = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            count++;\n            if(count > max_count){\n                max_count = count;\n            }\n        }\n        else{\n            count = 0;\n        }\n    }\n    return max_count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            cur_run++;\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n        }\n        else{\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i=0; i<test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            cur_run++;\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n        }\n        else{\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str.charAt(i) >= 'A' && test_str.charAt(i) <= 'Z'){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if(curr_run > max_run){\n        max_run = curr_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            curr_run = 0;\n        }\n        if(curr_run > max_run){\n            max_run = curr_run;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            cur_run++;\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n        }\n        else{\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i=0;i<test_str.length;i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            cur_run++;\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n        }else{\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_count = 0;\n    var count = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            count++;\n        }\n        else{\n            if(count > max_count){\n                max_count = count;\n            }\n            count = 0;\n        }\n    }\n    if(count > max_count){\n        max_count = count;\n    }\n    return max_count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i=0; i<test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            cur_run++;\n        }\n        else{\n            cur_run = 0;\n        }\n        if(cur_run > max_run){\n            max_run = cur_run;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var count = 0;\n    var max_count = 0;\n    var i;\n    for (i = 0; i < test_str.length; i++) {\n        if (test_str[i] == test_str[i].toUpperCase()) {\n            count++;\n        }\n        else {\n            if (count > max_count) {\n                max_count = count;\n            }\n            count = 0;\n        }\n    }\n    return max_count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp7u1q16t7.js:25:10)\n    at Object.<anonymous> (/tmp/tmp7u1q16t7.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpbm_009ed.js:25:10)\n    at Object.<anonymous> (/tmp/tmpbm_009ed.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for (var i = 0; i < test_str.length; i++) {\n        if (test_str[i] == test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp9qn7k08i.js:23:10)\n    at Object.<anonymous> (/tmp/tmp9qn7k08i.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            run++;\n        }\n        else{\n            run = 0;\n        }\n        if(run > max_run){\n            max_run = run;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            run++;\n        }\n        else{\n            if(run > max_run){\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp4xbdltmr.js:25:10)\n    at Object.<anonymous> (/tmp/tmp4xbdltmr.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    let max_run = 0;\n    let curr_run = 0;\n    for(let i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp5zk07aug.js:25:10)\n    at Object.<anonymous> (/tmp/tmp5zk07aug.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            cur_run++;\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n        }\n        else{\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var current_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            current_run++;\n            if(current_run > max_run){\n                max_run = current_run;\n            }\n        }\n        else{\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var count = 0;\n    var max_count = 0;\n    for(var i=0; i<test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            count++;\n        }\n        else{\n            if(count > max_count){\n                max_count = count;\n            }\n            count = 0;\n        }\n    }\n    if(count > max_count){\n        max_count = count;\n    }\n    return max_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            curr_run = 0;\n        }\n        if(curr_run > max_run){\n            max_run = curr_run;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            cur_run++;\n        }\n        else{\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if(cur_run > max_run){\n        max_run = cur_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpu14_2hvy.js:25:10)\n    at Object.<anonymous> (/tmp/tmpu14_2hvy.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            cur_run++;\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n        }\n        else{\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            run++;\n            if(run > max_run){\n                max_run = run;\n            }\n        }\n        else{\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            cur_run++;\n        }\n        else{\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpk3kmja61.js:24:10)\n    at Object.<anonymous> (/tmp/tmpk3kmja61.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            cur_run += 1;\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n        }\n        else{\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            run++;\n        }\n        else{\n            if(run > max_run){\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if(run > max_run){\n        max_run = run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_count = 0;\n    var count = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            count++;\n        }\n        else{\n            count = 0;\n        }\n        if(count > max_count){\n            max_count = count;\n        }\n    }\n    return max_count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if(curr_run > max_run){\n        max_run = curr_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            run++;\n            if(run > max_run){\n                max_run = run;\n            }\n        }\n        else{\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            cur_run++;\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n        }\n        else{\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            cur_run++;\n        }\n        else{\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if(cur_run > max_run){\n        max_run = cur_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            run++;\n        }\n        else{\n            if(run > max_run){\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp4xbdltmr.js:25:10)\n    at Object.<anonymous> (/tmp/tmp4xbdltmr.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var count = 0;\n    var max = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            count++;\n            if(count > max){\n                max = count;\n            }\n        }\n        else{\n            count = 0;\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            cur_run++;\n        }\n        else{\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpuoa5tr3y.js:25:10)\n    at Object.<anonymous> (/tmp/tmpuoa5tr3y.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    var i;\n    for(i=0; i<test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            cur_run++;\n        }\n        else{\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if(cur_run > max_run){\n        max_run = cur_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if(curr_run > max_run){\n        max_run = curr_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpu14_2hvy.js:25:10)\n    at Object.<anonymous> (/tmp/tmpu14_2hvy.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            run++;\n            if(run > max_run){\n                max_run = run;\n            }\n        }\n        else{\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpu14_2hvy.js:25:10)\n    at Object.<anonymous> (/tmp/tmpu14_2hvy.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var count = 0;\n    var max = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            count++;\n            if(count > max){\n                max = count;\n            }\n        }\n        else{\n            count = 0;\n        }\n    }\n    return max;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if(curr_run > max_run){\n        max_run = curr_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if(curr_run > max_run){\n        max_run = curr_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for (var i = 0; i < test_str.length; i++) {\n        if (test_str[i] == test_str[i].toUpperCase()) {\n            curr_run++;\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n        } else {\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i=0; i<test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpvqm43yt4.js:25:10)\n    at Object.<anonymous> (/tmp/tmpvqm43yt4.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var current_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            current_run++;\n            if(current_run > max_run){\n                max_run = current_run;\n            }\n        }\n        else{\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run += 1;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for (var i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            cur_run++;\n        }\n        else{\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmprfgxdske.js:25:10)\n    at Object.<anonymous> (/tmp/tmprfgxdske.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run += 1;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_count = 0;\n    var count = 0;\n    for(var i=0; i<test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            count++;\n        }\n        else{\n            if(count > max_count){\n                max_count = count;\n            }\n            count = 0;\n        }\n    }\n    return max_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpu8e49674.js:25:10)\n    at Object.<anonymous> (/tmp/tmpu8e49674.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            cur_run++;\n        }\n        else{\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if(cur_run > max_run){\n        max_run = cur_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            run++;\n            if(run > max_run){\n                max_run = run;\n            }\n        }\n        else{\n            run = 0;\n        }\n    }\n    return max_run;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i=0; i<test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            cur_run++;\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n        }\n        else{\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            cur_run++;\n        }\n        else{\n            cur_run = 0;\n        }\n        if(cur_run > max_run){\n            max_run = cur_run;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var current_run = 0;\n    var i;\n    for(i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            current_run++;\n            if(current_run > max_run){\n                max_run = current_run;\n            }\n        }\n        else{\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpu14_2hvy.js:25:10)\n    at Object.<anonymous> (/tmp/tmpu14_2hvy.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for (var i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= 'A' && test_str[i] <= 'Z') {\n            curr_run++;\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n        } else {\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n  var max_run = 0;\n  var cur_run = 0;\n  for(var i = 0; i < test_str.length; i++){\n    if(test_str[i] == test_str[i].toUpperCase()){\n      cur_run++;\n    }\n    else{\n      cur_run = 0;\n    }\n    if(cur_run > max_run){\n      max_run = cur_run;\n    }\n  }\n  return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            cur_run++;\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n        }\n        else{\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            run++;\n            if(run > max_run){\n                max_run = run;\n            }\n        }else{\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var count = 0;\n    var max_count = 0;\n    var i;\n    for(i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            count++;\n        }\n        else{\n            if(count > max_count){\n                max_count = count;\n            }\n            count = 0;\n        }\n    }\n    if(count > max_count){\n        max_count = count;\n    }\n    return max_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var current_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            current_run++;\n            if(current_run > max_run){\n                max_run = current_run;\n            }\n        }\n        else{\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            cur_run++;\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n        }\n        else{\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var count = 0;\n    var max_count = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            count++;\n            if(count > max_count){\n                max_count = count;\n            }\n        }\n        else{\n            count = 0;\n        }\n    }\n    return max_count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i=0; i<test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            run++;\n            if(run > max_run){\n                max_run = run;\n            }\n        }\n        else{\n            run = 0;\n        }\n    }\n    return max_run;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str.charAt(i) >= 'A' && test_str.charAt(i) <= 'Z'){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            run++;\n            if(run > max_run){\n                max_run = run;\n            }\n        }\n        else{\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpu14_2hvy.js:25:10)\n    at Object.<anonymous> (/tmp/tmpu14_2hvy.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            cur_run++;\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n        }\n        else{\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    let max_run = 0;\n    let cur_run = 0;\n    for(let i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            cur_run++;\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n        } else {\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpu14_2hvy.js:25:10)\n    at Object.<anonymous> (/tmp/tmpu14_2hvy.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for (var i = 0; i < test_str.length; i++){\n        if (test_str[i] === test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if (curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if (curr_run > max_run){\n        max_run = curr_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            run++;\n            if(run > max_run){\n                max_run = run;\n            }\n        }\n        else{\n            run = 0;\n        }\n    }\n    return max_run;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var count = 0;\n    var max_count = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            count++;\n            if(count > max_count){\n                max_count = count;\n            }\n        }else{\n            count = 0;\n        }\n    }\n    return max_count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if(curr_run > max_run){\n        max_run = curr_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var count = 0;\n    var max_count = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            count++;\n        }\n        else{\n            if(count > max_count){\n                max_count = count;\n            }\n            count = 0;\n        }\n    }\n    if(count > max_count){\n        max_count = count;\n    }\n    return max_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_count = 0;\n    var count = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            count++;\n            if(count > max_count){\n                max_count = count;\n            }\n        }\n        else{\n            count = 0;\n        }\n    }\n    return max_count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpu14_2hvy.js:25:10)\n    at Object.<anonymous> (/tmp/tmpu14_2hvy.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            run++;\n            if(run > max_run){\n                max_run = run;\n            }\n        }\n        else{\n            run = 0;\n        }\n    }\n    return max_run;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            cur_run++;\n        }\n        else{\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if(cur_run > max_run){\n        max_run = cur_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i=0; i<test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            cur_run++;\n        }\n        else{\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if(cur_run > max_run){\n        max_run = cur_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            curr_run = 0;\n        }\n        if(curr_run > max_run){\n            max_run = curr_run;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            cur_run++;\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n        }\n        else{\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i=0; i<test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            cur_run++;\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n        }\n        else{\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for (var i = 0; i < test_str.length; i++){\n        if (test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if (curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if(curr_run > max_run){\n        max_run = curr_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            cur_run++;\n        }\n        else{\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if(cur_run > max_run){\n        max_run = cur_run;\n    }\n    return max_run;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    let max_run = 0;\n    let current_run = 0;\n    for(let i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            current_run++;\n        }\n        else{\n            if(current_run > max_run){\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmptivjfplu.js:25:10)\n    at Object.<anonymous> (/tmp/tmptivjfplu.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpu14_2hvy.js:25:10)\n    at Object.<anonymous> (/tmp/tmpu14_2hvy.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for (var i = 0; i < test_str.length; i++){\n        if (test_str[i] == test_str[i].toUpperCase()){\n            curr_run += 1;\n            if (curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else {\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if(curr_run > max_run){\n        max_run = curr_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            curr_run = 0;\n        }\n        if(curr_run > max_run){\n            max_run = curr_run;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            run++;\n        }\n        else{\n            if(run > max_run){\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp4xbdltmr.js:25:10)\n    at Object.<anonymous> (/tmp/tmp4xbdltmr.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var current_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            current_run++;\n        }\n        else{\n            if(current_run > max_run){\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if(current_run > max_run){\n        max_run = current_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var count = 0;\n    var max_count = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            count++;\n        }\n        else{\n            if(count > max_count){\n                max_count = count;\n            }\n            count = 0;\n        }\n    }\n    return max_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpd7qybay_.js:25:10)\n    at Object.<anonymous> (/tmp/tmpd7qybay_.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i=0; i<test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}