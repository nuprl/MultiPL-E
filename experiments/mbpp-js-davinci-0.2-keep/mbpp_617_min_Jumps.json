{
  "name": "mbpp_617_min_Jumps",
  "language": "js",
  "prompt": "//Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\nfunction min_Jumps(steps, d){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_617_min_Jumps.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_Jumps;\n  assert.deepEqual(candidate([3, 4], 11),3.5);\n  assert.deepEqual(candidate([3, 4], 0),0);\n  assert.deepEqual(candidate([11, 14], 11),1);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var jumps = 0;\n    var position = 0;\n    while(position < d){\n        position += steps;\n        jumps++;\n    }\n    return jumps;\n}\n",
    "    var jumps = 0;\n    var current = 0;\n    while(current < d){\n        current += steps;\n        jumps++;\n    }\n    return jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    let min = Number.MAX_VALUE;\n    for(let i = 1; i <= steps; i++){\n        let jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "\tif(d == 0) return 0;\n\tif(steps == 0) return -1;\n\tvar jumps = min_Jumps(steps-1, d-1);\n\tif(jumps != -1) jumps = min_Jumps(steps, d-1);\n\treturn jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    let min_jumps = min_Jumps(steps-1, d-1);\n    if(min_jumps != -1){\n        min_jumps = min_jumps + 1;\n    }\n    let min_jumps2 = min_Jumps(steps-1, d-2);\n    if(min_jumps2 != -1){\n        min_jumps2 = min_jumps2 + 1;\n    }\n    if(min_jumps == -1 && min_jumps2 == -1) return -1;\n    if(min_jumps == -1) return min_jumps2;\n    if(min_jumps2 == -1) return min_jumps;\n    return Math.min(min_jumps, min_jumps2);\n}\n",
    "    let jumps = 0;\n    let position = 0;\n    while(position < d){\n        position += steps;\n        jumps++;\n    }\n    return jumps;\n}\n",
    "    if(d==0) return 0;\n    if(steps==0) return -1;\n    var min = min_Jumps(steps-1, d-1);\n    if(min!=-1) min = min + 1;\n    var min2 = min_Jumps(steps-1, d+1);\n    if(min2!=-1) min2 = min2 + 1;\n    if(min==-1) return min2;\n    if(min2==-1) return min;\n    return Math.min(min, min2);\n}\n",
    "    var jumps = 0;\n    var current_pos = 0;\n    while(current_pos < d){\n        jumps++;\n        current_pos += steps;\n        if(current_pos === d){\n            return jumps;\n        }\n        else if(current_pos > d){\n            current_pos -= steps;\n            steps--;\n        }\n    }\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    if(d <= steps) return 1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps + 1 < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    let min_jumps = min_Jumps(steps-1, d-1);\n    if(d-2 >= 0){\n        let min_jumps_2 = min_Jumps(steps-1, d-2);\n        if(min_jumps_2 != -1 && (min_jumps == -1 || min_jumps_2 < min_jumps)){\n            min_jumps = min_jumps_2;\n        }\n    }\n    if(d-3 >= 0){\n        let min_jumps_3 = min_Jumps(steps-1, d-3);\n        if(min_jumps_3 != -1 && (min_jumps == -1 || min_jumps_3 < min_jumps)){\n            min_jumps = min_jumps_3;\n        }\n    }\n    if(min_jumps != -1) min_jumps++;\n    return min_jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var jumps = min_Jumps(steps-1, d-1);\n    if(jumps != -1) jumps = min_Jumps(steps, d-1);\n    if(jumps != -1) jumps = min_Jumps(steps, d-2);\n    if(jumps == -1) return -1;\n    else return jumps+1;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var jumps = min_Jumps(steps-1, d-1);\n    if(jumps != -1) jumps = min_Jumps(steps, d-1);\n    if(jumps != -1) jumps = min_Jumps(steps, d-2);\n    if(jumps != -1) jumps = min_Jumps(steps, d-3);\n    if(jumps != -1) jumps = min_Jumps(steps, d-4);\n    if(jumps != -1) jumps = min_Jumps(steps, d-5);\n    if(jumps != -1) jumps = min_Jumps(steps, d-6);\n    if(jumps != -1) jumps = min_Jumps(steps, d-7);\n    if(jumps != -1) jumps = min_Jumps(steps, d-8);\n    if(jumps != -1) jumps = min_Jumps(steps, d-9);\n    if(jumps != -1) jumps = min_Jumps(steps, d-10);\n    if(jumps != -1) jumps = min_Jumps(steps, d-11);\n    if(jumps != -1) jumps = min_Jumps(steps, d-12);\n    if(jumps != -1) jumps = min_Jumps(steps, d-13);\n    if(jumps != -1) jumps = min_Jumps(steps, d-14);\n    if(jumps != -1) jumps = min_Jumps(steps, d-15);\n    if(jumps != -1) jumps = min_Jumps(steps, d-16);\n    if(jumps != -1) jumps = min_Jumps(steps, d-17);\n    if(jumps != -1) jumps = min_Jumps(steps, d-18);\n    if(jumps != -1) jumps = min_Jumps(steps, d-19);\n    if(jumps != -1) jumps = min_Jumps(steps, d-20);\n    if(jumps != -1) jumps",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d==0) return 0;\n    if(steps==0) return -1;\n    var min = min_Jumps(steps-1, d-1);\n    if(min!=-1) min++;\n    var min2 = min_Jumps(steps-1, d+1);\n    if(min2!=-1) min2++;\n    if(min==-1) return min2;\n    if(min2==-1) return min;\n    return Math.min(min, min2);\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var jumps = min_Jumps(steps-1, d-1);\n    if(jumps != -1) jumps++;\n    var jumps = min_Jumps(steps-1, d+1);\n    if(jumps != -1) jumps++;\n    return jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    let min = Number.MAX_VALUE;\n    for(let i = 1; i <= steps; i++){\n        let jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min) min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps + 1 < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "\tif(d == 0)\n\t\treturn 0;\n\tif(d == 1)\n\t\treturn 1;\n\tif(steps == 1)\n\t\treturn d;\n\tvar min = d;\n\tfor(var i = 1; i <= d; i++){\n\t\tvar jumps = min_Jumps(steps - 1, d - i);\n\t\tif(jumps + 1 < min)\n\t\t\tmin = jumps + 1;\n\t}\n\treturn min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    let min = Number.MAX_VALUE;\n    for(let i = 1; i <= steps; i++){\n        let jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min) min = jumps;\n    }\n    return min + 1;\n}\n",
    "    if(d==0) return 0;\n    if(steps==0) return 0;\n    if(steps==1) return 1;\n    if(steps==2) return 2;\n    if(steps==3) return 3;\n    if(steps>=d) return 1;\n    return 1+Math.min(min_Jumps(steps-1, d-1), min_Jumps(steps-2, d-2), min_Jumps(steps-3, d-3));\n}\n",
    "    if(d==0) return 0;\n    if(steps==0) return -1;\n    if(d<=steps) return 1;\n    var min = Number.MAX_VALUE;\n    for(var i=1; i<=steps; i++){\n        var jumps = min_Jumps(steps, d-i);\n        if(jumps!=-1 && jumps<min){\n            min = jumps;\n        }\n    }\n    return min+1;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = min_Jumps(steps-1, d-1);\n    if(d-2 >= 0) min = Math.min(min, min_Jumps(steps-1, d-2));\n    if(d-3 >= 0) min = Math.min(min, min_Jumps(steps-1, d-3));\n    if(min != -1) return min+1;\n    return -1;\n}\n",
    "\tif(d == 0)\n\t\treturn 0;\n\tif(steps == 0)\n\t\treturn -1;\n\tvar min = Number.MAX_VALUE;\n\tfor(var i = 1; i <= steps; i++){\n\t\tvar jumps = min_Jumps(steps, d - i);\n\t\tif(jumps != -1 && jumps + 1 < min)\n\t\t\tmin = jumps + 1;\n\t}\n\treturn min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min) min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d == 0)\n        return 0;\n    if(steps == 0)\n        return -1;\n    var jump = min_Jumps(steps-1, d-1);\n    var jump2 = min_Jumps(steps-1, d-2);\n    var jump3 = min_Jumps(steps-1, d-3);\n    if(jump == -1 && jump2 == -1 && jump3 == -1)\n        return -1;\n    else\n        return Math.max(jump, jump2, jump3) + 1;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_SAFE_INTEGER;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps + 1 < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d-i);\n        if(jumps != -1 && jumps < min) min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d == 0)\n        return 0;\n    if(steps == 0)\n        return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d-i);\n        if(jumps != -1 && jumps < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d == 0){\n        return 0;\n    }\n    if(steps == 0){\n        return -1;\n    }\n    var min = min_Jumps(steps-1, d-1);\n    var min2 = min_Jumps(steps-1, d-2);\n    var min3 = min_Jumps(steps-1, d-3);\n    if(min == -1 && min2 == -1 && min3 == -1){\n        return -1;\n    }\n    if(min == -1){\n        min = min2;\n    }\n    if(min2 == -1){\n        min2 = min;\n    }\n    if(min3 == -1){\n        min3 = min;\n    }\n    return 1 + Math.min(min, min2, min3);\n}\n",
    "    var jumps = 0;\n    var current_pos = 0;\n    while(current_pos < d){\n        jumps++;\n        current_pos += steps;\n    }\n    return jumps;\n}\n",
    "\tif(d == 0) return 0;\n\tif(steps == 0) return -1;\n\tvar min = min_Jumps(steps-1, d-1);\n\tvar min2 = min_Jumps(steps-1, d-2);\n\tvar min3 = min_Jumps(steps-1, d-3);\n\tif(min == -1 && min2 == -1 && min3 == -1) return -1;\n\treturn 1 + Math.max(min, min2, min3);\n}\n",
    "\tvar jumps = 0;\n\tvar i = 0;\n\twhile(i < d){\n\t\ti = i + steps;\n\t\tjumps++;\n\t}\n\treturn jumps;\n}\n",
    "    let jumps = 0;\n    let pos = 0;\n    while(pos < d){\n        pos += steps;\n        jumps++;\n    }\n    return jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return Infinity;\n    let min = Infinity;\n    for(let i = 1; i <= steps; i++){\n        let jumps = min_Jumps(steps - i, d - i);\n        if(jumps != Infinity && jumps + 1 < min) min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps + 1 < min){\n            min = jumps + 1;\n        }\n    }\n    return min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = min_Jumps(steps - 1, d - 1);\n    if(min != -1) min++;\n    var min = Math.min(min, min_Jumps(steps - 1, d + 1));\n    if(min != -1) min++;\n    return min;\n}\n",
    "    if(d==0) return 0;\n    if(steps==0) return -1;\n    var res = min_Jumps(steps-1, d-1);\n    if(res!=-1) res = min_Jumps(steps, d-1);\n    return res+1;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min){\n            min = jumps + 1;\n        }\n    }\n    return min;\n}\n",
    "    var jumps = 0;\n    var current = 0;\n    while(current < d){\n        current += steps;\n        jumps++;\n    }\n    return jumps;\n}\n",
    "\tif(d == 0) return 0;\n\tif(steps == 0) return -1;\n\tvar min = min_Jumps(steps-1, d-1);\n\tif(d-2 >= 0){\n\t\tvar min2 = min_Jumps(steps-1, d-2);\n\t\tif(min2 != -1 && (min == -1 || min2 < min)){\n\t\t\tmin = min2;\n\t\t}\n\t}\n\tif(d-3 >= 0){\n\t\tvar min3 = min_Jumps(steps-1, d-3);\n\t\tif(min3 != -1 && (min == -1 || min3 < min)){\n\t\t\tmin = min3;\n\t\t}\n\t}\n\tif(min == -1) return -1;\n\treturn min+1;\n}\n",
    "    var jumps = 0;\n    var i = 0;\n    while(i < d){\n        jumps++;\n        i += steps;\n    }\n    return jumps;\n}\n",
    "\tvar jumps = 0;\n\tvar x = 0;\n\tvar y = 0;\n\twhile(x < d || y < d){\n\t\tif(x < d){\n\t\t\tx += steps;\n\t\t\tjumps++;\n\t\t}\n\t\tif(y < d){\n\t\t\ty += steps;\n\t\t\tjumps++;\n\t\t}\n\t}\n\treturn jumps;\n}\n",
    "    var jumps = 0;\n    var current = 0;\n    while(current < d){\n        jumps++;\n        current += steps;\n    }\n    return jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = min_Jumps(steps-1, d-1);\n    var min1 = min_Jumps(steps-1, d-2);\n    var min2 = min_Jumps(steps-1, d-3);\n    if(min == -1 && min1 == -1 && min2 == -1) return -1;\n    return 1 + Math.max(min, min1, min2);\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var jump = min_Jumps(steps-1, d-1);\n    var jump2 = min_Jumps(steps-1, d-2);\n    var jump3 = min_Jumps(steps-1, d-3);\n    if(jump == -1 && jump2 == -1 && jump3 == -1) return -1;\n    else return Math.max(jump, jump2, jump3) + 1;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var jumps = min_Jumps(steps - 1, d - 1);\n    if(jumps != -1) jumps++;\n    var jumps2 = min_Jumps(steps - 1, d + 1);\n    if(jumps2 != -1) jumps2++;\n    if(jumps == -1 && jumps2 == -1) return -1;\n    if(jumps == -1) return jumps2;\n    if(jumps2 == -1) return jumps;\n    return Math.min(jumps, jumps2);\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = min_Jumps(steps-1, d-1);\n    if(min != -1) min++;\n    var min2 = min_Jumps(steps-1, d+1);\n    if(min2 != -1) min2++;\n    if(min == -1 && min2 == -1) return -1;\n    if(min == -1) return min2;\n    if(min2 == -1) return min;\n    return Math.min(min, min2);\n}\n",
    "    var jumps = 0;\n    var current = 0;\n    while(current < d){\n        jumps++;\n        current += steps;\n        if(current < d){\n            current -= steps;\n            steps--;\n        }\n    }\n    return jumps;\n}",
    "\tif(d == 0) return 0;\n\tif(steps == 0) return -1;\n\tvar min = min_Jumps(steps-1, d-1);\n\tif(d-2 >= 0) min = Math.min(min, min_Jumps(steps-1, d-2));\n\tif(d-3 >= 0) min = Math.min(min, min_Jumps(steps-1, d-3));\n\tif(min == -1) return -1;\n\treturn min+1;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var jumps = min_Jumps(steps-1, d-1);\n    if(jumps != -1) jumps = min_Jumps(steps, d-1);\n    if(jumps != -1) jumps = min_Jumps(steps, d-2);\n    if(jumps != -1) jumps = min_Jumps(steps, d-3);\n    if(jumps != -1) jumps = min_Jumps(steps, d-4);\n    if(jumps != -1) jumps = min_Jumps(steps, d-5);\n    if(jumps != -1) jumps = min_Jumps(steps, d-6);\n    if(jumps != -1) jumps = min_Jumps(steps, d-7);\n    if(jumps != -1) jumps = min_Jumps(steps, d-8);\n    if(jumps != -1) jumps = min_Jumps(steps, d-9);\n    if(jumps != -1) jumps = min_Jumps(steps, d-10);\n    if(jumps != -1) jumps = min_Jumps(steps, d-11);\n    if(jumps != -1) jumps = min_Jumps(steps, d-12);\n    if(jumps != -1) jumps = min_Jumps(steps, d-13);\n    if(jumps != -1) jumps = min_Jumps(steps, d-14);\n    if(jumps != -1) jumps = min_Jumps(steps, d-15);\n    if(jumps != -1) jumps = min_Jumps(steps, d-16);\n    if(jumps != -1) jumps = min_Jumps(steps, d-17);\n    if(jumps != -1) jumps = min_Jumps(steps, d-18);\n    if(jumps != -1) jumps = min_Jumps(steps, d-19);\n    if(jumps != -1) jumps = min_Jumps(steps, d-20);\n    if(jumps != -1) jumps",
    "    if(steps == 0)\n        return 0;\n    if(steps == 1)\n        return 1;\n    if(steps == 2)\n        return 2;\n    if(steps == 3)\n        return 3;\n    if(steps == 4)\n        return 4;\n    if(steps == 5)\n        return 5;\n    if(steps == 6)\n        return 6;\n    if(steps == 7)\n        return 7;\n    if(steps == 8)\n        return 8;\n    if(steps == 9)\n        return 9;\n    if(steps == 10)\n        return 10;\n    if(steps == 11)\n        return 11;\n    if(steps == 12)\n        return 12;\n    if(steps == 13)\n        return 13;\n    if(steps == 14)\n        return 14;\n    if(steps == 15)\n        return 15;\n    if(steps == 16)\n        return 16;\n    if(steps == 17)\n        return 17;\n    if(steps == 18)\n        return 18;\n    if(steps == 19)\n        return 19;\n    if(steps == 20)\n        return 20;\n    if(steps == 21)\n        return 21;\n    if(steps == 22)\n        return 22;\n    if(steps == 23)\n        return 23;\n    if(steps == 24)\n        return 24;\n    if(steps == 25)\n        return 25;\n    if(steps == 26)\n        return 26;\n    if(steps == 27)\n        return 27;\n    if(steps == 28)\n        return 28;\n    if(steps == 29)\n        return 29;\n    if(steps == 30)\n        return 30;\n    if(steps == 31)\n        return 31;\n    if(steps == 32)\n        return 32;\n    if(steps == 33)\n        return 33;\n    if(steps == 34)\n        return 34;\n    if(steps == 35)\n        return 35;\n    if(steps == 36)\n        return 36;\n    if(steps == 37)\n        return 37;\n    if(steps == 38)\n        return 38;\n    if(steps",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d-i);\n        if(jumps != -1 && jumps < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    var jumps = 0;\n    var position = 0;\n    while(position < d){\n        position += steps;\n        jumps++;\n    }\n    return jumps;\n}\n",
    "    var jumps = 0;\n    var current_pos = 0;\n    for(var i=0; i<steps.length; i++){\n        if(current_pos < d){\n            current_pos += steps[i];\n            jumps++;\n        }\n    }\n    return jumps;\n}\n\nvar steps = [1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9];\nvar d = 10;",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var jumps = min_Jumps(steps-1, d-1);\n    if(jumps != -1) jumps = min_Jumps(steps, d-1);\n    if(jumps != -1) jumps = min_Jumps(steps, d-2);\n    if(jumps != -1) return jumps + 1;\n    else return -1;\n}\n",
    "\tvar jumps = 0;\n\tvar x = 0;\n\tvar y = 0;\n\twhile(x < d){\n\t\tif(x + steps < d){\n\t\t\tx += steps;\n\t\t\tjumps++;\n\t\t}\n\t\telse{\n\t\t\tx += steps;\n\t\t\tjumps++;\n\t\t\tbreak;\n\t\t}\n\t\tif(y + steps < d){\n\t\t\ty += steps;\n\t\t\tjumps++;\n\t\t}\n\t\telse{\n\t\t\ty += steps;\n\t\t\tjumps++;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn jumps;\n}\n",
    "    if(d == 0)\n        return 0;\n    if(steps == 0)\n        return -1;\n    var min = min_Jumps(steps-1, d-1);\n    if(min != -1)\n        min = min + 1;\n    var min2 = min_Jumps(steps-1, d+1);\n    if(min2 != -1)\n        min2 = min2 + 1;\n    if(min == -1 && min2 == -1)\n        return -1;\n    else if(min == -1)\n        return min2;\n    else if(min2 == -1)\n        return min;\n    else\n        return Math.min(min, min2);\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = min_Jumps(steps-1, d-1);\n    var min2 = min_Jumps(steps-1, d-2);\n    var min3 = min_Jumps(steps-1, d-3);\n    if(min == -1 && min2 == -1 && min3 == -1) return -1;\n    if(min == -1) min = Number.MAX_VALUE;\n    if(min2 == -1) min2 = Number.MAX_VALUE;\n    if(min3 == -1) min3 = Number.MAX_VALUE;\n    return 1 + Math.min(min, min2, min3);\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min) min = jumps;\n    }\n    return min + 1;\n}\n",
    "    let jumps = 0;\n    let pos = 0;\n    while(pos < d){\n        pos += steps;\n        jumps++;\n    }\n    return jumps;\n}\n",
    "    let jumps = 0;\n    let current_pos = 0;\n    while(current_pos < d){\n        jumps++;\n        current_pos += steps;\n    }\n    return jumps;\n}\n",
    "    var jumps = 0;\n    var pos = 0;\n    while(pos < d){\n        pos += steps;\n        jumps++;\n    }\n    return jumps;\n}\n",
    "    if(steps == 0){\n        return 0;\n    }\n    if(steps == 1){\n        return 1;\n    }\n    if(steps == 2){\n        return 2;\n    }\n    if(steps == 3){\n        return 4;\n    }\n    var jumps = new Array(steps+1);\n    jumps[0] = 0;\n    jumps[1] = 1;\n    jumps[2] = 2;\n    jumps[3] = 4;\n    for(var i=4; i<=steps; i++){\n        jumps[i] = jumps[i-1] + jumps[i-2] + jumps[i-3];\n    }\n    return jumps[steps];\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = min_Jumps(steps-1, d-1);\n    if(d-2 >= 0){\n        min = Math.min(min, min_Jumps(steps-1, d-2));\n    }\n    if(d-3 >= 0){\n        min = Math.min(min, min_Jumps(steps-1, d-3));\n    }\n    if(min == -1) return -1;\n    return min+1;\n}\n",
    "  if(d == 0) return 0;\n  if(steps == 0) return -1;\n  var jumps = min_Jumps(steps-1, d-1);\n  if(jumps != -1) jumps++;\n  var jumps = min_Jumps(steps-1, d+1);\n  if(jumps != -1) jumps++;\n  return jumps;\n}\n",
    "    var jumps = 0;\n    var curr_pos = 0;\n    while(curr_pos < d){\n        jumps++;\n        curr_pos += steps;\n    }\n    return jumps;\n}\n",
    "\tif(steps == 0)\n\t\treturn 0;\n\tif(steps == 1)\n\t\treturn 1;\n\tif(steps == 2)\n\t\treturn 2;\n\tif(steps == 3)\n\t\treturn 4;\n\tif(steps == 4)\n\t\treturn 7;\n\tif(steps == 5)\n\t\treturn 13;\n\tif(steps == 6)\n\t\treturn 24;\n\tif(steps == 7)\n\t\treturn 44;\n\tif(steps == 8)\n\t\treturn 81;\n\tif(steps == 9)\n\t\treturn 149;\n\tif(steps == 10)\n\t\treturn 274;\n\tif(steps == 11)\n\t\treturn 504;\n\tif(steps == 12)\n\t\treturn 927;\n\tif(steps == 13)\n\t\treturn 1705;\n\tif(steps == 14)\n\t\treturn 3136;\n\tif(steps == 15)\n\t\treturn 5768;\n\tif(steps == 16)\n\t\treturn 10609;\n\tif(steps == 17)\n\t\treturn 19513;\n\tif(steps == 18)\n\t\treturn 35890;\n\tif(steps == 19)\n\t\treturn 66012;\n\tif(steps == 20)\n\t\treturn 121415;\n\tif(steps == 21)\n\t\treturn 223317;\n\tif(steps == 22)\n\t\treturn 410744;\n\tif(steps == 23)\n\t\treturn 755476;\n\tif(steps == 24)\n\t\treturn 1389537;\n\tif(steps == 25)\n\t\treturn 2555757;\n\tif(steps == 26)\n\t\treturn 4700770;\n\tif(steps == 27)\n\t\treturn 8646064;\n\tif(steps == 28)\n\t\treturn 15902591;\n\tif(steps == 29)\n\t\treturn 29249425;\n\tif(steps == 30)\n\t\treturn 53798080;\n\tif(steps == 31)\n\t\treturn 98950096;\n\tif(steps == 32)\n\t\treturn 181997601;\n\tif(steps == 33)\n\t\t",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = min_Jumps(steps-1, d-1);\n    if(min != -1) min = min + 1;\n    var min1 = min_Jumps(steps-1, d+1);\n    if(min1 != -1) min1 = min1 + 1;\n    if(min == -1 && min1 == -1) return -1;\n    if(min == -1) return min1;\n    if(min1 == -1) return min;\n    return Math.min(min, min1);\n}\n",
    "    let jumps = 0;\n    let current = 0;\n    while(current < d){\n        current += steps;\n        jumps++;\n    }\n    return jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    let min = min_Jumps(steps-1, d-1);\n    if(min != -1) min++;\n    let min2 = min_Jumps(steps-1, d+1);\n    if(min2 != -1) min2++;\n    if(min == -1 && min2 == -1) return -1;\n    if(min == -1) return min2;\n    if(min2 == -1) return min;\n    return Math.min(min, min2);\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return Infinity;\n    if(d == steps) return 1;\n    return Math.min(min_Jumps(steps-1, d-1), min_Jumps(steps-1, d));\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var jumps = min_Jumps(steps-1, d-1);\n    if(jumps != -1) jumps = 1 + jumps;\n    var jumps1 = min_Jumps(steps-1, d);\n    if(jumps1 != -1) jumps1 = 1 + jumps1;\n    var jumps2 = min_Jumps(steps-1, d+1);\n    if(jumps2 != -1) jumps2 = 1 + jumps2;\n    if(jumps == -1 && jumps1 == -1 && jumps2 == -1) return -1;\n    else if(jumps == -1) return Math.min(jumps1, jumps2);\n    else if(jumps1 == -1) return Math.min(jumps, jumps2);\n    else if(jumps2 == -1) return Math.min(jumps, jumps1);\n    else return Math.min(jumps, Math.min(jumps1, jumps2));\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps + 1 < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Math.min(min_Jumps(steps-1, d-1), min_Jumps(steps-1, d+1));\n    if(min != -1) return min+1;\n    else return -1;\n}\n",
    "    var jumps = 0;\n    var current_pos = 0;\n    while(current_pos < d){\n        jumps++;\n        current_pos += steps;\n        if(current_pos == d){\n            return jumps;\n        }\n        else if(current_pos > d){\n            return jumps - 1;\n        }\n    }\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    let min = Math.min(min_Jumps(steps-1, d-1), min_Jumps(steps-1, d+1));\n    if(min != -1) return min + 1;\n    else return -1;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var jumps = min_Jumps(steps-1, d-1);\n    if(jumps != -1) jumps = jumps + 1;\n    var jumps2 = min_Jumps(steps-1, d+1);\n    if(jumps2 != -1) jumps2 = jumps2 + 1;\n    if(jumps == -1 && jumps2 == -1) return -1;\n    if(jumps == -1) return jumps2;\n    if(jumps2 == -1) return jumps;\n    return Math.min(jumps, jumps2);\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Math.min(min_Jumps(steps-1, d-1), min_Jumps(steps-1, d+1));\n    if(min != -1) return min + 1;\n    else return -1;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = min_Jumps(steps-1, d-1);\n    if(d-2 >= 0)\n        min = Math.min(min, min_Jumps(steps-1, d-2));\n    if(d-3 >= 0)\n        min = Math.min(min, min_Jumps(steps-1, d-3));\n    if(min != -1)\n        return min + 1;\n    else\n        return -1;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i=1; i<=steps; i++){\n        var jumps = min_Jumps(steps, d-i);\n        if(jumps != -1 && jumps < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "  if(d == 0) return 0;\n  if(steps == 0) return -1;\n  var jump = min_Jumps(steps-1, d-1);\n  var jump2 = min_Jumps(steps-1, d-2);\n  var jump3 = min_Jumps(steps-1, d-3);\n  if(jump == -1 && jump2 == -1 && jump3 == -1) return -1;\n  if(jump == -1) jump = 0;\n  if(jump2 == -1) jump2 = 0;\n  if(jump3 == -1) jump3 = 0;\n  return Math.min(jump, jump2, jump3) + 1;\n}\n",
    "    var jumps = 0;\n    var i = 0;\n    while(i < d){\n        if(i + steps[i] >= d){\n            jumps++;\n            break;\n        }\n        var max = 0;\n        var max_index = 0;\n        for(var j = 1; j <= steps[i]; j++){\n            if(steps[i+j] > max){\n                max = steps[i+j];\n                max_index = i+j;\n            }\n        }\n        i = max_index;\n        jumps++;\n    }\n    return jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var jumps = min_Jumps(steps-1, d-1);\n    if(jumps != -1) jumps = jumps + 1;\n    var jumps2 = min_Jumps(steps-1, d+1);\n    if(jumps2 != -1) jumps2 = jumps2 + 1;\n    if(jumps == -1) return jumps2;\n    if(jumps2 == -1) return jumps;\n    return Math.min(jumps, jumps2);\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return Infinity;\n    if(d == 1) return 1;\n    var min = Infinity;\n    for(var i=1; i<=steps; i++){\n        var jumps = min_Jumps(steps-i, d-i);\n        if(jumps != Infinity && jumps+1 < min){\n            min = jumps+1;\n        }\n    }\n    return min;\n}\n",
    "    if(d==0) return 0;\n    if(steps==0) return -1;\n    var jump1 = min_Jumps(steps-1, d-1);\n    var jump2 = min_Jumps(steps-1, d-2);\n    var jump3 = min_Jumps(steps-1, d-3);\n    if(jump1==-1 && jump2==-1 && jump3==-1) return -1;\n    else return Math.max(jump1, jump2, jump3) + 1;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return Infinity;\n    if(d == steps) return 1;\n    return Math.min(min_Jumps(steps-1, d-1), min_Jumps(steps-1, d));\n}\n",
    "    var jumps = 0;\n    var position = 0;\n    while(position < d){\n        position += steps;\n        jumps++;\n    }\n    return jumps;\n}",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var jumps = min_Jumps(steps-1, d-1);\n    if(jumps != -1) jumps = 1 + jumps;\n    var jumps2 = min_Jumps(steps-1, d+1);\n    if(jumps2 != -1) jumps2 = 1 + jumps2;\n    if(jumps == -1) return jumps2;\n    if(jumps2 == -1) return jumps;\n    return Math.min(jumps, jumps2);\n}\n",
    "    let jumps = 0;\n    let current_pos = 0;\n    while(current_pos < d){\n        current_pos += steps;\n        jumps++;\n    }\n    return jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Math.min(min_Jumps(steps-1, d-1), min_Jumps(steps-1, d+1));\n    if(min != -1) return min + 1;\n    else return -1;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var jumps = min_Jumps(steps-1, d-1);\n    if(jumps != -1) jumps++;\n    var jumps = min_Jumps(steps-1, d+1);\n    if(jumps != -1) jumps++;\n    return jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var jumps = min_Jumps(steps-1, d-1);\n    if(jumps != -1) jumps++;\n    var jumps = min_Jumps(steps-1, d+1);\n    if(jumps != -1) jumps++;\n    return jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var jumps = min_Jumps(steps-1, d-1);\n    if(jumps != -1) jumps++;\n    var jumps2 = min_Jumps(steps-1, d+1);\n    if(jumps2 != -1) jumps2++;\n    if(jumps == -1 && jumps2 == -1) return -1;\n    if(jumps == -1) return jumps2;\n    if(jumps2 == -1) return jumps;\n    return Math.min(jumps, jumps2);\n}\n",
    "\tif(steps == 0 || steps == 1)\n\t\treturn steps;\n\tif(steps == 2)\n\t\treturn 2;\n\tif(steps == 3)\n\t\treturn 3;\n\tif(steps == 4)\n\t\treturn 4;\n\tif(steps == 5)\n\t\treturn 5;\n\tif(steps == 6)\n\t\treturn 5;\n\tif(steps == 7)\n\t\treturn 5;\n\tif(steps == 8)\n\t\treturn 5;\n\tif(steps == 9)\n\t\treturn 5;\n\tif(steps == 10)\n\t\treturn 5;\n\tif(steps == 11)\n\t\treturn 5;\n\tif(steps == 12)\n\t\treturn 5;\n\tif(steps == 13)\n\t\treturn 5;\n\tif(steps == 14)\n\t\treturn 5;\n\tif(steps == 15)\n\t\treturn 5;\n\tif(steps == 16)\n\t\treturn 5;\n\tif(steps == 17)\n\t\treturn 5;\n\tif(steps == 18)\n\t\treturn 5;\n\tif(steps == 19)\n\t\treturn 5;\n\tif(steps == 20)\n\t\treturn 5;\n\tif(steps == 21)\n\t\treturn 5;\n\tif(steps == 22)\n\t\treturn 5;\n\tif(steps == 23)\n\t\treturn 5;\n\tif(steps == 24)\n\t\treturn 5;\n\tif(steps == 25)\n\t\treturn 5;\n\tif(steps == 26)\n\t\treturn 5;\n\tif(steps == 27)\n\t\treturn 5;\n\tif(steps == 28)\n\t\treturn 5;\n\tif(steps == 29)\n\t\treturn 5;\n\tif(steps == 30)\n\t\treturn 5;\n\tif(steps == 31)\n\t\treturn 5;\n\tif(steps == 32)\n\t\treturn 5;\n\tif(steps == 33)\n\t\treturn 5;\n\tif(steps == 34)\n\t\treturn 5;\n\tif(steps == 35)\n\t\treturn 5;\n\tif(steps == 36)\n\t\treturn 5;\n\tif(",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var jump = min_Jumps(steps-1, d-1);\n    var jump2 = min_Jumps(steps-1, d-2);\n    var jump3 = min_Jumps(steps-1, d-3);\n    if(jump == -1 && jump2 == -1 && jump3 == -1) return -1;\n    return 1 + Math.max(jump, jump2, jump3);\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d-i);\n        if(jumps != -1 && jumps < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min){\n            min = jumps + 1;\n        }\n    }\n    return min;\n}\n",
    "    var jumps = 0;\n    var pos = 0;\n    while(pos < d){\n        pos += steps;\n        jumps++;\n    }\n    return jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var jumps = min_Jumps(steps-1, d-1);\n    if(jumps != -1) jumps++;\n    var jumps = min_Jumps(steps-1, d+1);\n    if(jumps != -1) jumps++;\n    return jumps;\n}\n",
    "\tif(d == 0) return 0;\n\tif(steps == 0) return -1;\n\tvar min = Number.MAX_VALUE;\n\tfor(var i = 1; i <= steps; i++){\n\t\tvar jumps = min_Jumps(steps, d - i);\n\t\tif(jumps != -1 && jumps < min)\n\t\t\tmin = jumps + 1;\n\t}\n\treturn min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d-i);\n        if(jumps != -1 && jumps < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min) min = jumps;\n    }\n    return min + 1;\n}\n",
    "    if(d==0)\n        return 0;\n    if(steps==0)\n        return -1;\n    var min = min_Jumps(steps-1, d-1);\n    if(d>=steps)\n        min = Math.min(min, min_Jumps(steps, d-steps));\n    if(min==-1)\n        return -1;\n    return min+1;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = min_Jumps(steps-1, d-1);\n    var min2 = min_Jumps(steps-1, d-2);\n    var min3 = min_Jumps(steps-1, d-3);\n    if(min == -1 && min2 == -1 && min3 == -1) return -1;\n    if(min == -1) min = Number.MAX_VALUE;\n    if(min2 == -1) min2 = Number.MAX_VALUE;\n    if(min3 == -1) min3 = Number.MAX_VALUE;\n    return 1 + Math.min(min, min2, min3);\n}\n",
    "    var jumps = 0;\n    var curr_pos = 0;\n    while(curr_pos < d){\n        jumps++;\n        curr_pos += steps;\n    }\n    return jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = min_Jumps(steps-1, d-1);\n    if(min != -1) min++;\n    var min2 = min_Jumps(steps-1, d+1);\n    if(min2 != -1) min2++;\n    if(min == -1 && min2 == -1) return -1;\n    if(min == -1) return min2;\n    if(min2 == -1) return min;\n    return Math.min(min, min2);\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var jumps = min_Jumps(steps-1, d-1);\n    if(jumps != -1) jumps = min_Jumps(steps, d-1);\n    if(jumps != -1) jumps = min_Jumps(steps, d-2);\n    if(jumps != -1) return jumps+1;\n    else return -1;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var jump = min_Jumps(steps-1, d-1);\n    var jump2 = min_Jumps(steps-1, d-2);\n    var jump3 = min_Jumps(steps-1, d-3);\n    if(jump == -1 && jump2 == -1 && jump3 == -1) return -1;\n    return 1 + Math.max(jump, jump2, jump3);\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = min_Jumps(steps-1, d-1);\n    if(min != -1) min++;\n    var min = Math.min(min, min_Jumps(steps-1, d+1));\n    if(min != -1) min++;\n    var min = Math.min(min, min_Jumps(steps-1, d));\n    if(min != -1) min++;\n    return min;\n}\n",
    "    if(d==0) return 0;\n    if(steps==0) return -1;\n    var jumps = min_Jumps(steps-1, d-1);\n    if(jumps != -1) jumps++;\n    var jumps2 = min_Jumps(steps-1, d-2);\n    if(jumps2 != -1) jumps2++;\n    if(jumps == -1 && jumps2 == -1) return -1;\n    if(jumps == -1) return jumps2;\n    if(jumps2 == -1) return jumps;\n    return Math.min(jumps, jumps2);\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var jumps = min_Jumps(steps-1, d-1);\n    if(jumps != -1) jumps = jumps + 1;\n    var jumps2 = min_Jumps(steps-1, d+1);\n    if(jumps2 != -1) jumps2 = jumps2 + 1;\n    if(jumps == -1 && jumps2 == -1) return -1;\n    if(jumps == -1) return jumps2;\n    if(jumps2 == -1) return jumps;\n    return Math.min(jumps, jumps2);\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    let jump = min_Jumps(steps-1, d-1);\n    let jump2 = min_Jumps(steps-1, d-2);\n    let jump3 = min_Jumps(steps-1, d-3);\n    if(jump == -1 && jump2 == -1 && jump3 == -1) return -1;\n    return 1 + Math.max(jump, jump2, jump3);\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var jump = min_Jumps(steps-1, d-1);\n    var jump2 = min_Jumps(steps-1, d-2);\n    var jump3 = min_Jumps(steps-1, d-3);\n    if(jump == -1 && jump2 == -1 && jump3 == -1) return -1;\n    return 1 + Math.max(jump, jump2, jump3);\n}\n",
    "    let jumps = 0;\n    let current = 0;\n    while(current < d){\n        current += steps;\n        jumps++;\n    }\n    return jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps + 1 < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = min_Jumps(steps-1, d-1);\n    if(min != -1) min++;\n    var min2 = min_Jumps(steps-1, d+1);\n    if(min2 != -1) min2++;\n    if(min == -1 && min2 == -1) return -1;\n    if(min == -1) return min2;\n    if(min2 == -1) return min;\n    return Math.min(min, min2);\n}\n",
    "    var jumps = 0;\n    var pos = 0;\n    while(pos < d){\n        pos += steps;\n        jumps++;\n    }\n    return jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min_jumps = min_Jumps(steps-1, d-1);\n    if(d-1 == 0) return min_jumps + 1;\n    if(min_jumps != -1) return min_jumps + 1;\n    min_jumps = min_Jumps(steps-1, d-2);\n    if(d-2 == 0) return min_jumps + 1;\n    if(min_jumps != -1) return min_jumps + 1;\n    min_jumps = min_Jumps(steps-1, d-3);\n    if(d-3 == 0) return min_jumps + 1;\n    if(min_jumps != -1) return min_jumps + 1;\n    return -1;\n}",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    let min = Number.MAX_VALUE;\n    for(let i = 1; i <= steps; i++){\n        let jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min) min = jumps;\n    }\n    return min + 1;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    let min = Number.MAX_VALUE;\n    for(let i = 1; i <= steps; i++){\n        let jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min) min = jumps;\n    }\n    return (min == Number.MAX_VALUE) ? -1 : min + 1;\n}\n",
    "    if(d==0) return 0;\n    if(steps==0) return -1;\n    var min_jumps = min_Jumps(steps-1, d-1);\n    if(min_jumps != -1){\n        min_jumps = min_jumps + 1;\n    }\n    var min_jumps2 = min_Jumps(steps-1, d+1);\n    if(min_jumps2 != -1){\n        min_jumps2 = min_jumps2 + 1;\n    }\n    if(min_jumps == -1 && min_jumps2 == -1) return -1;\n    else if(min_jumps == -1) return min_jumps2;\n    else if(min_jumps2 == -1) return min_jumps;\n    else return Math.min(min_jumps, min_jumps2);\n}\n",
    "    if(steps == 0){\n        return 0;\n    }\n    if(steps == 1){\n        return 1;\n    }\n    if(steps == 2){\n        return 2;\n    }\n    if(steps == 3){\n        return 4;\n    }\n    var jumps = new Array(steps+1);\n    jumps[0] = 0;\n    jumps[1] = 1;\n    jumps[2] = 2;\n    jumps[3] = 4;\n    for(var i = 4; i <= steps; i++){\n        jumps[i] = jumps[i-1] + jumps[i-2] + jumps[i-3];\n    }\n    return jumps[steps];\n}\n",
    "    if(d==0) return 0;\n    if(steps==0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i=1; i<=steps; i++){\n        var jumps = min_Jumps(steps, d-i);\n        if(jumps!=-1 && jumps<min) min = jumps;\n    }\n    return min+1;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    let jumps = 0;\n    let curr_pos = 0;\n    while(curr_pos < d){\n        jumps++;\n        curr_pos += steps;\n    }\n    return jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = min_Jumps(steps-1, d-1);\n    if(min != -1) min++;\n    var min2 = min_Jumps(steps-1, d+1);\n    if(min2 != -1) min2++;\n    if(min == -1 && min2 == -1) return -1;\n    if(min == -1) return min2;\n    if(min2 == -1) return min;\n    return Math.min(min, min2);\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    let min = Number.MAX_VALUE;\n    for(let i = 1; i <= steps; i++){\n        let jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min){\n            min = jumps + 1;\n        }\n    }\n    return min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = min_Jumps(steps-1, d-1);\n    if(min != -1) min++;\n    var min2 = min_Jumps(steps-1, d+1);\n    if(min2 != -1) min2++;\n    if(min == -1 && min2 == -1) return -1;\n    if(min == -1) return min2;\n    if(min2 == -1) return min;\n    return Math.min(min, min2);\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    let min = Number.MAX_VALUE;\n    for(let i = 1; i <= steps; i++){\n        let jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min){\n            min = jumps + 1;\n        }\n    }\n    return min;\n}\n",
    "    if(d == 0){\n        return 0;\n    }\n    if(steps == 0){\n        return -1;\n    }\n    var min_jumps = min_Jumps(steps-1, d-1);\n    var min_jumps2 = min_Jumps(steps-1, d-2);\n    var min_jumps3 = min_Jumps(steps-1, d-3);\n    if(min_jumps == -1 && min_jumps2 == -1 && min_jumps3 == -1){\n        return -1;\n    }\n    else{\n        return 1 + Math.max(min_jumps, min_jumps2, min_jumps3);\n    }\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    let min = Number.MAX_VALUE;\n    for(let i = 1; i <= steps; i++){\n        let jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = min_Jumps(steps-1, d-1);\n    if(min != -1) min++;\n    var min2 = min_Jumps(steps-1, d+1);\n    if(min2 != -1) min2++;\n    if(min == -1 && min2 == -1) return -1;\n    if(min == -1) return min2;\n    if(min2 == -1) return min;\n    return Math.min(min, min2);\n}\n",
    "    let jumps = 0;\n    let curr_pos = 0;\n    while(curr_pos < d){\n        curr_pos += steps;\n        jumps++;\n    }\n    return jumps;\n}\n",
    "    if(d == 0)\n        return 0;\n    if(steps == 0)\n        return -1;\n    var min = min_Jumps(steps-1, d-1);\n    if(d-2 >= 0)\n        min = Math.min(min, min_Jumps(steps-1, d-2));\n    if(d-3 >= 0)\n        min = Math.min(min, min_Jumps(steps-1, d-3));\n    if(min != -1)\n        return min + 1;\n    return -1;\n}\n",
    "    if(d == 0)\n        return 0;\n    if(steps == 0)\n        return -1;\n    let min = Number.MAX_VALUE;\n    for(let i = 1; i <= steps; i++){\n        let jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d == 0)\n        return 0;\n    if(steps == 0)\n        return -1;\n    var jumps = min_Jumps(steps-1, d-1);\n    if(jumps != -1)\n        jumps = jumps + 1;\n    var jumps2 = min_Jumps(steps-1, d+1);\n    if(jumps2 != -1)\n        jumps2 = jumps2 + 1;\n    if(jumps == -1 && jumps2 == -1)\n        return -1;\n    else if(jumps == -1)\n        return jumps2;\n    else if(jumps2 == -1)\n        return jumps;\n    else\n        return Math.min(jumps, jumps2);\n}\n",
    "\tif(d == 0) return 0;\n\tif(steps == 0) return -1;\n\tvar jumps = min_Jumps(steps-1, d-1);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-1);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-2);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-3);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-4);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-5);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-6);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-7);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-8);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-9);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-10);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-11);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-12);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-13);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-14);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-15);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-16);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-17);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-18);\n\tif(jumps != -1) jumps = min_Jumps(steps-1,",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps + 1 < min) min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d==0) return 0;\n    if(steps==0) return -1;\n    if(d<=steps) return 1;\n    let min_jumps = min_Jumps(steps, d-steps);\n    if(min_jumps!=-1) return min_jumps+1;\n    return min_jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    let min = Number.MAX_VALUE;\n    for(let i = 1; i <= steps; i++){\n        let jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min) min = jumps;\n    }\n    return min + 1;\n}\n",
    "\tvar jumps = 0;\n\tvar i = 0;\n\twhile(i < d){\n\t\ti += steps;\n\t\tjumps++;\n\t}\n\treturn jumps;\n}\n",
    "    var jumps = 0;\n    var i = 0;\n    while(i < d){\n        if(i + steps >= d){\n            jumps++;\n            break;\n        }\n        i += steps;\n        jumps++;\n    }\n    return jumps;\n}\n",
    "    if(d == 0)\n        return 0;\n    if(steps == 0)\n        return -1;\n    let jump1 = min_Jumps(steps-1, d-1);\n    let jump2 = min_Jumps(steps-1, d-2);\n    let jump3 = min_Jumps(steps-1, d-3);\n    if(jump1 == -1 && jump2 == -1 && jump3 == -1)\n        return -1;\n    else\n        return Math.max(jump1, jump2, jump3) + 1;\n}\n",
    "\tif(d == 0) return 0;\n\tif(steps == 0) return -1;\n\tvar jumps = min_Jumps(steps-1, d-1);\n\tif(jumps != -1) jumps = min_Jumps(steps, d-1);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-2);\n\tif(jumps != -1) return jumps+1;\n\telse return -1;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var jumps = min_Jumps(steps-1, d-1);\n    if(jumps != -1) jumps = 1 + jumps;\n    var jumps2 = min_Jumps(steps-1, d+1);\n    if(jumps2 != -1) jumps2 = 1 + jumps2;\n    if(jumps == -1 && jumps2 == -1) return -1;\n    if(jumps == -1) return jumps2;\n    if(jumps2 == -1) return jumps;\n    return Math.min(jumps, jumps2);\n}\n",
    "\tif(d == 0)\n\t\treturn 0;\n\tif(steps == 0)\n\t\treturn -1;\n\tvar min = min_Jumps(steps-1, d-1);\n\tif(min != -1)\n\t\tmin = min + 1;\n\tvar min2 = min_Jumps(steps-1, d-2);\n\tif(min2 != -1)\n\t\tmin2 = min2 + 1;\n\tif(min == -1 && min2 == -1)\n\t\treturn -1;\n\telse if(min == -1)\n\t\treturn min2;\n\telse if(min2 == -1)\n\t\treturn min;\n\telse\n\t\treturn Math.min(min, min2);\n}\n",
    "\tif(d == 0){\n\t\treturn 0;\n\t}\n\tif(steps == 0){\n\t\treturn -1;\n\t}\n\tvar min = Number.MAX_VALUE;\n\tfor(var i = 1; i <= steps; i++){\n\t\tvar jumps = min_Jumps(steps, d - i);\n\t\tif(jumps != -1 && jumps < min){\n\t\t\tmin = jumps + 1;\n\t\t}\n\t}\n\treturn min;\n}\n",
    "    var jumps = 0;\n    var current_pos = 0;\n    var i = 0;\n    while(current_pos < d){\n        jumps++;\n        current_pos += steps[i];\n        i++;\n    }\n    return jumps;\n}\n\nvar steps = [1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9];\nvar d = 9;",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i=1; i<=steps; i++){\n        var jumps = min_Jumps(steps, d-i);\n        if(jumps != -1 && jumps+1 < min)\n            min = jumps+1;\n    }\n    return min;\n}\n",
    "    if(d === 0) return 0;\n    if(steps === 0) return Infinity;\n    if(d === steps) return 1;\n    return Math.min(min_Jumps(steps-1, d-1), min_Jumps(steps-1, d+1)) + 1;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = min_Jumps(steps - 1, d - 1);\n    if(min != -1) min++;\n    var min = Math.min(min, min_Jumps(steps - 1, d + 1));\n    if(min != -1) min++;\n    var min = Math.min(min, min_Jumps(steps - 1, d));\n    if(min != -1) min++;\n    return min;\n}\n",
    "    if(d==0) return 0;\n    if(steps==0) return -1;\n    let min = Math.min(min_Jumps(steps-1, d-1), min_Jumps(steps-1, d+1));\n    return (min==-1)? -1 : min+1;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = min_Jumps(steps-1, d-1);\n    if(min != -1) min++;\n    var min2 = min_Jumps(steps-1, d+1);\n    if(min2 != -1) min2++;\n    if(min == -1 && min2 == -1) return -1;\n    if(min == -1) return min2;\n    if(min2 == -1) return min;\n    return Math.min(min, min2);\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var jump1 = min_Jumps(steps-1, d-1);\n    var jump2 = min_Jumps(steps-1, d-2);\n    var jump3 = min_Jumps(steps-1, d-3);\n    if(jump1 == -1 && jump2 == -1 && jump3 == -1) return -1;\n    return Math.max(jump1, jump2, jump3) + 1;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = min_Jumps(steps-1, d-1);\n    var min2 = min_Jumps(steps-1, d-2);\n    var min3 = min_Jumps(steps-1, d-3);\n    if(min == -1 && min2 == -1 && min3 == -1) return -1;\n    return 1 + Math.max(min, min2, min3);\n}\n",
    "    var jumps = 0;\n    var x = 0;\n    var y = 0;\n    var i = 0;\n    while(x < d || y < d){\n        if(x < d){\n            x += steps[i];\n            jumps++;\n        }\n        if(y < d){\n            y += steps[i];\n            jumps++;\n        }\n        i++;\n    }\n    return jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    let min = Math.min(min_Jumps(steps-1, d-1), min_Jumps(steps-1, d+1));\n    if(min != -1) return min + 1;\n    else return -1;\n}\n",
    "\tif(d == 0)\n\t\treturn 0;\n\tif(d == 1)\n\t\treturn 1;\n\tif(steps == 1)\n\t\treturn d;\n\tvar min = d;\n\tfor(var i = 1; i <= d; i++){\n\t\tvar jumps = 1 + Math.max(min_Jumps(steps - 1, i - 1), min_Jumps(steps, d - i));\n\t\tif(jumps < min)\n\t\t\tmin = jumps;\n\t}\n\treturn min;\n}\n",
    "    if(d==0) return 0;\n    if(steps==0) return -1;\n    var min = min_Jumps(steps-1, d-1);\n    if(min!=-1) min++;\n    var min2 = min_Jumps(steps-1, d-2);\n    if(min2!=-1) min2++;\n    if(min==-1) return min2;\n    if(min2==-1) return min;\n    return Math.min(min, min2);\n}\n",
    "    var jumps = 0;\n    var current = 0;\n    while(current < d){\n        current += steps;\n        jumps++;\n    }\n    return jumps;\n}\n",
    "    if(d == 0){\n        return 0;\n    }\n    if(steps == 0){\n        return -1;\n    }\n    var min = min_Jumps(steps-1, d-1);\n    if(min != -1){\n        min = 1 + min;\n    }\n    var min2 = min_Jumps(steps-1, d-2);\n    if(min2 != -1){\n        min2 = 1 + min2;\n    }\n    var min3 = min_Jumps(steps-1, d-3);\n    if(min3 != -1){\n        min3 = 1 + min3;\n    }\n    if(min == -1 && min2 == -1 && min3 == -1){\n        return -1;\n    }\n    return Math.min(min, min2, min3);\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var jumps = min_Jumps(steps - 1, d - 1);\n    if(jumps != -1) jumps++;\n    var jumps2 = min_Jumps(steps - 1, d + 1);\n    if(jumps2 != -1) jumps2++;\n    if(jumps == -1 && jumps2 == -1) return -1;\n    if(jumps == -1) return jumps2;\n    if(jumps2 == -1) return jumps;\n    return Math.min(jumps, jumps2);\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var jumps = min_Jumps(steps-1, d-1);\n    if(jumps != -1) jumps++;\n    var jumps = min_Jumps(steps-1, d+1);\n    if(jumps != -1) jumps++;\n    return jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var jumps = min_Jumps(steps-1, d-1);\n    if(jumps != -1) jumps = min_Jumps(steps, d-1);\n    if(jumps != -1) jumps = min_Jumps(steps, d-2);\n    if(jumps != -1) jumps = min_Jumps(steps, d-3);\n    if(jumps != -1) jumps = min_Jumps(steps, d-4);\n    if(jumps != -1) jumps = min_Jumps(steps, d-5);\n    if(jumps != -1) jumps = min_Jumps(steps, d-6);\n    if(jumps != -1) jumps = min_Jumps(steps, d-7);\n    if(jumps != -1) jumps = min_Jumps(steps, d-8);\n    if(jumps != -1) jumps = min_Jumps(steps, d-9);\n    if(jumps != -1) jumps = min_Jumps(steps, d-10);\n    if(jumps != -1) jumps = min_Jumps(steps, d-11);\n    if(jumps != -1) jumps = min_Jumps(steps, d-12);\n    if(jumps != -1) jumps = min_Jumps(steps, d-13);\n    if(jumps != -1) jumps = min_Jumps(steps, d-14);\n    if(jumps != -1) jumps = min_Jumps(steps, d-15);\n    if(jumps != -1) jumps = min_Jumps(steps, d-16);\n    if(jumps != -1) jumps = min_Jumps(steps, d-17);\n    if(jumps != -1) jumps = min_Jumps(steps, d-18);\n    if(jumps != -1) jumps = min_Jumps(steps, d-19);\n    if(jumps != -1) jumps = min_Jumps(steps, d-20);\n    if(jumps != -1) jumps",
    "\tif(d == 0) return 0;\n\tif(steps == 0) return -1;\n\tvar min = min_Jumps(steps-1, d-1);\n\tvar min2 = min_Jumps(steps-1, d-2);\n\tvar min3 = min_Jumps(steps-1, d-3);\n\tif(min == -1 && min2 == -1 && min3 == -1) return -1;\n\treturn 1 + Math.max(min, min2, min3);\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = min_Jumps(steps-1, d-1);\n    var min2 = min_Jumps(steps-1, d-2);\n    var min3 = min_Jumps(steps-1, d-3);\n    if(min == -1 && min2 == -1 && min3 == -1) return -1;\n    return 1 + Math.max(min, min2, min3);\n}\n",
    "    if(d == 0)\n        return 0;\n    if(steps == 0)\n        return -1;\n    var min = min_Jumps(steps-1, d-1);\n    var min2 = min_Jumps(steps-1, d+1);\n    if(min == -1 && min2 == -1)\n        return -1;\n    else if(min == -1)\n        return 1 + min2;\n    else if(min2 == -1)\n        return 1 + min;\n    else\n        return 1 + Math.min(min, min2);\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var jumps = min_Jumps(steps-1, d-1);\n    if(jumps != -1) jumps++;\n    var jumps = min_Jumps(steps-1, d+1);\n    if(jumps != -1) jumps++;\n    return jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = min_Jumps(steps-1, d-1);\n    if(d-2 >= 0){\n        if(min == -1 || min > min_Jumps(steps-1, d-2)){\n            min = min_Jumps(steps-1, d-2);\n        }\n    }\n    if(d-3 >= 0){\n        if(min == -1 || min > min_Jumps(steps-1, d-3)){\n            min = min_Jumps(steps-1, d-3);\n        }\n    }\n    if(min != -1){\n        return min+1;\n    }\n    return -1;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = min_Jumps(steps-1, d-1);\n    if(min != -1) min++;\n    var min = Math.min(min, min_Jumps(steps-1, d+1));\n    if(min != -1) min++;\n    return min;\n}\n",
    "    var jumps = 0;\n    var pos = 0;\n    while(pos < d){\n        pos += steps;\n        jumps++;\n    }\n    return jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min) min = jumps;\n    }\n    return min + 1;\n}\n",
    "    var jumps = 0;\n    var position = 0;\n    while(position < d){\n        position += steps;\n        jumps++;\n    }\n    return jumps;\n}\n",
    "\tif(d == 0) return 0;\n\tif(steps == 0) return -1;\n\tvar jumps = min_Jumps(steps-1, d-1);\n\tif(jumps != -1) jumps = min_Jumps(steps, d-steps);\n\tif(jumps == -1) return -1;\n\telse return jumps + 1;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    let min = Number.MAX_VALUE;\n    for(let i = 1; i <= steps; i++){\n        let jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps + 1 < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min_jumps = min_Jumps(steps-1, d-1);\n    if(min_jumps != -1) min_jumps++;\n    var min_jumps2 = min_Jumps(steps-1, d+1);\n    if(min_jumps2 != -1) min_jumps2++;\n    if(min_jumps == -1 && min_jumps2 == -1) return -1;\n    if(min_jumps == -1) return min_jumps2;\n    if(min_jumps2 == -1) return min_jumps;\n    return Math.min(min_jumps, min_jumps2);\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    let min = Number.MAX_VALUE;\n    for(let i = 1; i <= steps; i++){\n        let jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min) min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    if(d <= steps) return 1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d-i);\n        if(jumps != -1 && jumps < min) min = jumps;\n    }\n    return min + 1;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    let min = Number.MAX_VALUE;\n    for(let i = 1; i <= steps; i++){\n        let jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min) min = jumps;\n    }\n    return min + 1;\n}\n",
    "    var jumps = 0;\n    var current = 0;\n    while(current < d){\n        jumps++;\n        current += steps;\n    }\n    return jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps + 1 < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(steps == 0){\n        return 0;\n    }\n    if(steps == 1){\n        return 1;\n    }\n    if(steps == 2){\n        return 2;\n    }\n    if(steps == 3){\n        return 4;\n    }\n    return min_Jumps(steps-1, d) + min_Jumps(steps-2, d) + min_Jumps(steps-3, d);\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min_jumps = min_Jumps(steps - 1, d - 1);\n    if(min_jumps != -1) min_jumps++;\n    var min_jumps2 = min_Jumps(steps - 1, d + 1);\n    if(min_jumps2 != -1) min_jumps2++;\n    if(min_jumps == -1 && min_jumps2 == -1) return -1;\n    if(min_jumps == -1) return min_jumps2;\n    if(min_jumps2 == -1) return min_jumps;\n    return Math.min(min_jumps, min_jumps2);\n}",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = min_Jumps(steps-1, d-1);\n    if(d-2 >= 0){\n        var min2 = min_Jumps(steps-1, d-2);\n        if(min2 != -1 && (min == -1 || min2 < min)){\n            min = min2;\n        }\n    }\n    if(d-3 >= 0){\n        var min3 = min_Jumps(steps-1, d-3);\n        if(min3 != -1 && (min == -1 || min3 < min)){\n            min = min3;\n        }\n    }\n    if(min == -1) return -1;\n    return min+1;\n}\n",
    "\tvar jumps = 0;\n\tvar i = 0;\n\twhile(i < d){\n\t\tif(i + steps <= d){\n\t\t\ti += steps;\n\t\t\tjumps++;\n\t\t}\n\t\telse{\n\t\t\tjumps++;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn jumps;\n}\n",
    "\tif(d==0) return 0;\n\tif(steps==0) return -1;\n\tvar jump1 = min_Jumps(steps-1, d-1);\n\tvar jump2 = min_Jumps(steps-1, d-2);\n\tvar jump3 = min_Jumps(steps-1, d-3);\n\tif(jump1==-1 && jump2==-1 && jump3==-1) return -1;\n\treturn 1+Math.max(jump1, jump2, jump3);\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min) min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var small = min_Jumps(steps-1, d-1);\n    var big = min_Jumps(steps-1, d+1);\n    if(small == -1 && big == -1) return -1;\n    if(small == -1) return 1 + big;\n    if(big == -1) return 1 + small;\n    return 1 + Math.min(small, big);\n}\n",
    "    let jumps = 0;\n    let current = 0;\n    while(current < d){\n        jumps++;\n        current += steps;\n    }\n    return jumps;\n}\n",
    "    if(d==0) return 0;\n    if(d<=steps) return 1;\n    return 1+min_Jumps(steps, d-steps);\n}\n",
    "    var jumps = 0;\n    var current = 0;\n    while(current < d){\n        current += steps;\n        jumps++;\n    }\n    return jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps + 1 < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d === 0){\n        return 0;\n    }\n    if(steps === 0){\n        return Infinity;\n    }\n    var min = Infinity;\n    for(var i = 1; i <= steps; i++){\n        var jumps = 1 + min_Jumps(steps - i, d - i);\n        if(jumps < min){\n            min = jumps;\n        }\n    }\n    return min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = min_Jumps(steps-1, d-1);\n    if(min != -1) min = 1 + min;\n    var min2 = min_Jumps(steps-1, d-2);\n    if(min2 != -1) min2 = 1 + min2;\n    var min3 = min_Jumps(steps-1, d-3);\n    if(min3 != -1) min3 = 1 + min3;\n    if(min == -1 && min2 == -1 && min3 == -1) return -1;\n    if(min == -1) min = Number.MAX_VALUE;\n    if(min2 == -1) min2 = Number.MAX_VALUE;\n    if(min3 == -1) min3 = Number.MAX_VALUE;\n    return Math.min(min, min2, min3);\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var jumps = min_Jumps(steps-1, d-1);\n    if(jumps != -1) jumps = min_Jumps(steps, d-1);\n    if(jumps != -1) jumps = min_Jumps(steps, d-2);\n    if(jumps != -1) jumps = min_Jumps(steps, d-3);\n    if(jumps != -1) jumps = min_Jumps(steps, d-4);\n    if(jumps != -1) jumps = min_Jumps(steps, d-5);\n    if(jumps != -1) jumps = min_Jumps(steps, d-6);\n    if(jumps != -1) jumps = min_Jumps(steps, d-7);\n    if(jumps != -1) jumps = min_Jumps(steps, d-8);\n    if(jumps != -1) jumps = min_Jumps(steps, d-9);\n    if(jumps != -1) jumps = min_Jumps(steps, d-10);\n    if(jumps != -1) jumps = min_Jumps(steps, d-11);\n    if(jumps != -1) jumps = min_Jumps(steps, d-12);\n    if(jumps != -1) jumps = min_Jumps(steps, d-13);\n    if(jumps != -1) jumps = min_Jumps(steps, d-14);\n    if(jumps != -1) jumps = min_Jumps(steps, d-15);\n    if(jumps != -1) jumps = min_Jumps(steps, d-16);\n    if(jumps != -1) jumps = min_Jumps(steps, d-17);\n    if(jumps != -1) jumps = min_Jumps(steps, d-18);\n    if(jumps != -1) jumps = min_Jumps(steps, d-19);\n    if(jumps != -1) jumps = min_Jumps(steps, d-20);\n    if(jumps != -1) jumps",
    "    if(d == 0) return 0;\n    if(steps == 0) return 0;\n    if(steps >= d) return 1;\n    return 1 + min_Jumps(steps, d-steps);\n}",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps + 1 < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n"
  ]
}