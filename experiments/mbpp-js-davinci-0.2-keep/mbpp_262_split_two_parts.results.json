{
  "name": "mbpp_262_split_two_parts",
  "language": "js",
  "prompt": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_262_split_two_parts.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0,L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    return [list1.slice(0, L), list1.slice(L)]\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n  var list2 = list1.slice(L);\n  var list3 = list1.slice(0, L);\n  return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = [];\n    var list3 = [];\n    for (var i = 0; i < list1.length; i++){\n        if (i < L){\n            list2.push(list1[i]);\n        }\n        else{\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < L; i++){\n        list2.push(list1[i]);\n    }\n    for(var i = L; i < list1.length; i++){\n        list3.push(list1[i]);\n    }\n    return [list2, list3];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    list1 = list1.slice(0,L);\n    return [list1, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(0, L);\n    var list3 = list1.slice(L);\n    return [list2, list3];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L, list1.length);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    var list4 = [list3, list2];\n    return list4;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < L; i++){\n        list2.push(list1[i]);\n    }\n    for(var j = L; j < list1.length; j++){\n        list3.push(list1[j]);\n    }\n    return [list2, list3];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L, list1.length);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(i < L){\n            list2.push(list1[i]);\n        }\n        else{\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n  var list2 = list1.slice(L);\n  var list3 = list1.slice(0, L);\n  return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(i < L){\n            list2.push(list1[i]);\n        }\n        else{\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    return [list1.slice(0, L), list1.slice(L)]\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = [];\n    for (var i = 0; i < L; i++){\n        list2.push(list1[i]);\n    }\n    return [list2, list1.slice(L)];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n  var list2 = [];\n  var list3 = [];\n  for(var i = 0; i < list1.length; i++){\n    if(i < L){\n      list2.push(list1[i]);\n    }\n    else{\n      list3.push(list1[i]);\n    }\n  }\n  return [list2, list3];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < L; i++){\n        list2.push(list1[i]);\n    }\n    for(var j = L; j < list1.length; j++){\n        list3.push(list1[j]);\n    }\n    return [list2, list3];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < L; i++){\n        list2.push(list1[i]);\n    }\n    for(var i = L; i < list1.length; i++){\n        list3.push(list1[i]);\n    }\n    return [list2, list3];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n\tvar list2 = list1.slice(L);\n\tvar list3 = list1.slice(0, L);\n\treturn [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = [];\n    var list3 = [];\n    for (var i = 0; i < list1.length; i++){\n        if (i < L){\n            list2.push(list1[i]);\n        }\n        else{\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    list1 = list1.slice(0, L);\n    return [list1, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return (list3, list2);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  4,\n  4,\n  5,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1,\n    2\n  ],\n  [\n    3,\n    4,\n    4,\n    5,\n    1\n  ]\n]\n    at test (/tmp/tmpavc2k8in.js:12:10)\n    at Object.<anonymous> (/tmp/tmpavc2k8in.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 4, 4, 5, 1 ],\n  expected: [ [ 1, 1, 2 ], [ 3, 4, 4, 5, 1 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    let list2 = [];\n    for(let i = 0; i < L; i++){\n        list2.push(list1[i]);\n    }\n    return [list2, list1.slice(L)];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n\tvar list2 = list1.slice(L);\n\tvar list3 = list1.slice(0,L);\n\treturn [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L, list1.length);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n\tvar list2 = list1.slice(L);\n\tvar list3 = list1.slice(0, L);\n\treturn [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    let list2 = list1.slice(L);\n    let list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list1 = [1,2,3,4,5,6,7,8,9,10];\n    var L = 5;\n    var list2 = list1.slice(0,L);\n    var list3 = list1.slice(L);\n    var list4 = [list2, list3];\n    return list4;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2,\n    3,\n    4,\n    5\n  ],\n  [\n    6,\n    7,\n    8,\n    9,\n    10\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1,\n    2\n  ],\n  [\n    3,\n    4,\n    4,\n    5,\n    1\n  ]\n]\n    at test (/tmp/tmpsz485drk.js:15:10)\n    at Object.<anonymous> (/tmp/tmpsz485drk.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2, 3, 4, 5 ], [ 6, 7, 8, 9, 10 ] ],\n  expected: [ [ 1, 1, 2 ], [ 3, 4, 4, 5, 1 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n  var list2 = list1.slice(L);\n  var list3 = list1.slice(0, L);\n  return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(i < L){\n            list2.push(list1[i]);\n        }\n        else{\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    list1 = list1.slice(0, L);\n    return [list1, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < L; i++){\n        list2.push(list1[i]);\n    }\n    for(var i = L; i < list1.length; i++){\n        list3.push(list1[i]);\n    }\n    return [list2, list3];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    list1 = list1.slice(0, L);\n    return [list1, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = [];\n    var list3 = [];\n    for (var i=0; i<list1.length; i++){\n        if (i<L){\n            list2.push(list1[i]);\n        }\n        else{\n            list3.push(list1[i]);\n        }\n    }\n    var list4 = [list2, list3];\n    return list4;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0,L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < L; i++){\n        list2.push(list1[i]);\n    }\n    for(var j = L; j < list1.length; j++){\n        list3.push(list1[j]);\n    }\n    return [list2, list3];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < L; i++){\n        list2.push(list1[i]);\n    }\n    for(var i = L; i < list1.length; i++){\n        list3.push(list1[i]);\n    }\n    return [list2, list3];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    return [list1.slice(0, L), list1.slice(L)];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(0, L);\n    var list3 = list1.slice(L);\n    return [list2, list3];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0,L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    list1.splice(L);\n    return [list1, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(i < L){\n            list2.push(list1[i]);\n        }\n        else{\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\n\nvar list1 = [1,2,3,4,5,6,7,8,9,10];\nvar L = 5;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    list1 = list1.slice(0, L);\n    return [list1, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    list1 = list1.slice(0, L);\n    return [list1, list2];\n}\nvar list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar L = 5;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    var list4 = [list3, list2];\n    return list4;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(i < L){\n            list2.push(list1[i]);\n        }\n        else{\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.splice(L);\n    return [list1, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(i < L){\n            list2.push(list1[i]);\n        }\n        else{\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = [];\n    for(var i = 0; i < L; i++){\n        list2.push(list1[i]);\n    }\n    var list3 = [];\n    for(var i = L; i < list1.length; i++){\n        list3.push(list1[i]);\n    }\n    return [list2, list3];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L, list1.length);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = [];\n    var list3 = [];\n    for (var i = 0; i < L; i++){\n        list2.push(list1[i]);\n    }\n    for (var i = L; i < list1.length; i++){\n        list3.push(list1[i]);\n    }\n    return [list2, list3];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n  var list2 = list1.slice(L);\n  var list3 = list1.slice(0, L);\n  return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < L; i++){\n        list2.push(list1[i]);\n    }\n    for(var i = L; i < list1.length; i++){\n        list3.push(list1[i]);\n    }\n    return [list2, list3];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n  var list2 = list1.slice(L);\n  var list3 = list1.slice(0, L);\n  return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = [];\n    for(var i = 0; i < L; i++){\n        list2.push(list1[i]);\n    }\n    var list3 = [];\n    for(var i = L; i < list1.length; i++){\n        list3.push(list1[i]);\n    }\n    return [list2, list3];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list1 = list1.slice(0, L);\n    return [list1, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    list1 = list1.slice(0,L);\n    return [list1, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    list1 = list1.slice(0, L);\n    return [list1, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(i < L){\n            list2.push(list1[i]);\n        }\n        else{\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list1 = list1.slice(0, L);\n    return [list1, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0,L);\n    return [list3,list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    return [list1.slice(0, L), list1.slice(L)];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0,L);\n    return [list3, list2];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = [];\n    for(var i=0; i<L; i++){\n        list2.push(list1[i]);\n    }\n    var list3 = [];\n    for(var i=L; i<list1.length; i++){\n        list3.push(list1[i]);\n    }\n    return [list2, list3];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < L; i++){\n        list2.push(list1[i]);\n    }\n    for(var j = L; j < list1.length; j++){\n        list3.push(list1[j]);\n    }\n    return [list2, list3];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n  var list2 = list1.slice(L);\n  list1.splice(L);\n  return [list1, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = [];\n    var list3 = [];\n    for(var i=0; i<L; i++){\n        list2.push(list1[i]);\n    }\n    for(var i=L; i<list1.length; i++){\n        list3.push(list1[i]);\n    }\n    return [list2, list3];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = [];\n    var list3 = [];\n    for(var i=0; i<list1.length; i++){\n        if(i<L){\n            list2.push(list1[i]);\n        }\n        else{\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < L; i++){\n        list2.push(list1[i]);\n    }\n    for(var i = L; i < list1.length; i++){\n        list3.push(list1[i]);\n    }\n    return [list2, list3];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    list1 = list1.slice(0, L);\n    return [list1, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n\tvar list2 = list1.slice(L);\n\tlist1.splice(L);\n\treturn [list1, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    list1 = list1.slice(0, L);\n    return [list1, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < L; i++){\n        list2.push(list1[i]);\n    }\n    for(var j = L; j < list1.length; j++){\n        list3.push(list1[j]);\n    }\n    return [list2, list3];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0,L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    return [list1.slice(0, L), list1.slice(L)];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < L; i++){\n        list2.push(list1[i]);\n    }\n    for(var i = L; i < list1.length; i++){\n        list3.push(list1[i]);\n    }\n    return [list2, list3];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    var list4 = [list3, list2];\n    return list4;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts(list1, L){\n    var list2 = list1.slice(L);\n    var list3 = list1.slice(0, L);\n    return [list3, list2];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}