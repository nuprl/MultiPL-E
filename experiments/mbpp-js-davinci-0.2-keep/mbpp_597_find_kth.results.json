{
  "name": "mbpp_597_find_kth",
  "language": "js",
  "prompt": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_597_find_kth.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            count++;\n            if(count == k){\n                return arr1[i];\n            }\n            i++;\n        }\n        else{\n            count++;\n            if(count == k){\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if(i < arr1.length){\n        return arr1[i + k - count - 1];\n    }\n    else{\n        return arr2[j + k - count - 1];\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    if(arr1.length + arr2.length < k){\n        return null;\n    }\n    var i = 0;\n    var j = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            if(i + j == k - 1){\n                return arr1[i];\n            }\n            i++;\n        }else{\n            if(i + j == k - 1){\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if(i < arr1.length){\n        return arr1[k - j - 1];\n    }\n    if(j < arr2.length){\n        return arr2[k - i - 1];\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      i++;\n    }else{\n      j++;\n    }\n    count++;\n    if(count === k){\n      break;\n    }\n  }\n  if(count === k){\n    if(i < arr1.length && j < arr2.length){\n      return Math.min(arr1[i], arr2[j]);\n    }else if(i < arr1.length){\n      return arr1[i];\n    }else{\n      return arr2[j];\n    }\n  }\n  return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpf38o9lui.js:34:10)\n    at Object.<anonymous> (/tmp/tmpf38o9lui.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0, j = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            if(i + j == k - 1){\n                return arr1[i];\n            }\n            i++;\n        }else{\n            if(i + j == k - 1){\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if(i < arr1.length){\n        return arr1[i + k - j - 1];\n    }\n    if(j < arr2.length){\n        return arr2[j + k - i - 1];\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length + arr2.length < k) return null;\n  var i = 0, j = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      if(i + j + 1 === k) return arr1[i];\n      i++;\n    }else{\n      if(i + j + 1 === k) return arr2[j];\n      j++;\n    }\n  }\n  if(i === arr1.length) return arr2[k - arr1.length - 1];\n  return arr1[k - arr2.length - 1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var result = [];\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      result.push(arr1[i]);\n      i++;\n    }else{\n      result.push(arr2[j]);\n      j++;\n    }\n  }\n  while(i < arr1.length){\n    result.push(arr1[i]);\n    i++;\n  }\n  while(j < arr2.length){\n    result.push(arr2[j]);\n    j++;\n  }\n  return result[k-1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      i++;\n    }else{\n      j++;\n    }\n    count++;\n    if(count == k){\n      break;\n    }\n  }\n  if(i == arr1.length){\n    return arr2[j];\n  }else{\n    return arr1[i];\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp7pxnufzm.js:29:10)\n    at Object.<anonymous> (/tmp/tmp7pxnufzm.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            i++;\n        }else{\n            j++;\n        }\n        count++;\n        if(count == k){\n            break;\n        }\n    }\n    if(i == arr1.length){\n        return arr2[j];\n    }else{\n        return arr1[i];\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpi54x782o.js:29:10)\n    at Object.<anonymous> (/tmp/tmpi54x782o.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var index1 = 0;\n  var index2 = 0;\n  var result = [];\n  while(index1 < arr1.length && index2 < arr2.length){\n    if(arr1[index1] < arr2[index2]){\n      result.push(arr1[index1]);\n      index1++;\n    } else {\n      result.push(arr2[index2]);\n      index2++;\n    }\n  }\n  if(index1 < arr1.length){\n    result = result.concat(arr1.slice(index1));\n  } else {\n    result = result.concat(arr2.slice(index2));\n  }\n  return result[k-1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      i++;\n    }else{\n      j++;\n    }\n    count++;\n    if(count == k){\n      if(arr1[i] < arr2[j]){\n        return arr1[i];\n      }else{\n        return arr2[j];\n      }\n    }\n  }\n  if(i < arr1.length){\n    return arr1[i + k - count - 1];\n  }else{\n    return arr2[j + k - count - 1];\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpe5aszq6g.js:33:10)\n    at Object.<anonymous> (/tmp/tmpe5aszq6g.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0, j = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            if(i + j == k - 1){\n                return arr1[i];\n            }\n            i++;\n        }\n        else{\n            if(i + j == k - 1){\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if(i < arr1.length){\n        return arr1[i + k - j - 1];\n    }\n    if(j < arr2.length){\n        return arr2[j + k - i - 1];\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  var result = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      result = arr1[i];\n      i++;\n    } else {\n      result = arr2[j];\n      j++;\n    }\n    count++;\n    if(count == k){\n      break;\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0, j = 0, count = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            if(count == k - 1){\n                return arr1[i];\n            }\n            i++;\n            count++;\n        }else{\n            if(count == k - 1){\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    while(i < arr1.length){\n        if(count == k - 1){\n            return arr1[i];\n        }\n        i++;\n        count++;\n    }\n    while(j < arr2.length){\n        if(count == k - 1){\n            return arr2[j];\n        }\n        j++;\n        count++;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length + arr2.length < k) return null;\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      count++;\n      if(count === k) return arr1[i];\n      i++;\n    }else{\n      count++;\n      if(count === k) return arr2[j];\n      j++;\n    }\n  }\n  while(i < arr1.length){\n    count++;\n    if(count === k) return arr1[i];\n    i++;\n  }\n  while(j < arr2.length){\n    count++;\n    if(count === k) return arr2[j];\n    j++;\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0, j = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            if(k == 1) return arr1[i];\n            i++;\n            k--;\n        }\n        else{\n            if(k == 1) return arr2[j];\n            j++;\n            k--;\n        }\n    }\n    while(i < arr1.length){\n        if(k == 1) return arr1[i];\n        i++;\n        k--;\n    }\n    while(j < arr2.length){\n        if(k == 1) return arr2[j];\n        j++;\n        k--;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length + arr2.length < k) return;\n  var i = 0, j = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      if(i + j + 1 === k) return arr1[i];\n      i++;\n    }else{\n      if(i + j + 1 === k) return arr2[j];\n      j++;\n    }\n  }\n  if(i < arr1.length){\n    return arr1[k - j - 1];\n  }else{\n    return arr2[k - i - 1];\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length + arr2.length < k) return null;\n  var i = 0, j = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      if(i + j + 1 === k) return arr1[i];\n      i++;\n    } else {\n      if(i + j + 1 === k) return arr2[j];\n      j++;\n    }\n  }\n  if(i === arr1.length) return arr2[k - arr1.length - 1];\n  if(j === arr2.length) return arr1[k - arr2.length - 1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var index1 = 0;\n  var index2 = 0;\n  var result = [];\n  while(index1 < arr1.length && index2 < arr2.length){\n    if(arr1[index1] < arr2[index2]){\n      result.push(arr1[index1]);\n      index1++;\n    } else {\n      result.push(arr2[index2]);\n      index2++;\n    }\n  }\n  while(index1 < arr1.length){\n    result.push(arr1[index1]);\n    index1++;\n  }\n  while(index2 < arr2.length){\n    result.push(arr2[index2]);\n    index2++;\n  }\n  return result[k-1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            i++;\n        }else{\n            j++;\n        }\n        count++;\n        if(count == k){\n            break;\n        }\n    }\n    if(i == arr1.length){\n        return arr2[j];\n    }else{\n        return arr1[i];\n    }\n}\n\nvar arr1 = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19];\nvar arr2 = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmplnzuyzmi.js:31:10)\n    at Object.<anonymous> (/tmp/tmplnzuyzmi.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    if(arr1.length + arr2.length < k) return null;\n    if(arr1.length > arr2.length) return find_kth(arr2, arr1, k);\n    if(arr1.length === 0) return arr2[k-1];\n    if(k === 1) return Math.min(arr1[0], arr2[0]);\n    var i = Math.min(Math.floor(k/2), arr1.length);\n    var j = Math.min(k - i, arr2.length);\n    if(arr1[i-1] < arr2[j-1]){\n        return find_kth(arr1.slice(i), arr2, k-i);\n    }else if(arr1[i-1] > arr2[j-1]){\n        return find_kth(arr1, arr2.slice(j), k-j);\n    }else{\n        return arr1[i-1];\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            if(count === k - 1){\n                return arr1[i];\n            }\n            i++;\n            count++;\n        }else{\n            if(count === k - 1){\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    if(i === arr1.length){\n        return arr2[j + k - count - 1];\n    }\n    if(j === arr2.length){\n        return arr1[i + k - count - 1];\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  var result = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      result = arr1[i];\n      i++;\n    }\n    else{\n      result = arr2[j];\n      j++;\n    }\n    count++;\n    if(count == k){\n      break;\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      i++;\n    }else{\n      j++;\n    }\n    count++;\n    if(count === k){\n      break;\n    }\n  }\n  if(i < arr1.length){\n    return arr1[i];\n  }else{\n    return arr2[j];\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp2sax3lne.js:29:10)\n    at Object.<anonymous> (/tmp/tmp2sax3lne.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length + arr2.length < k) return null;\n  if(arr1.length === 0) return arr2[k-1];\n  if(arr2.length === 0) return arr1[k-1];\n\n  var mid1 = Math.floor(arr1.length/2);\n  var mid2 = Math.floor(arr2.length/2);\n  if(mid1 + mid2 < k-1){\n    if(arr1[mid1] > arr2[mid2]){\n      return find_kth(arr1, arr2.slice(mid2+1), k-mid2-1);\n    }else{\n      return find_kth(arr1.slice(mid1+1), arr2, k-mid1-1);\n    }\n  }else{\n    if(arr1[mid1] > arr2[mid2]){\n      return find_kth(arr1.slice(0, mid1), arr2, k);\n    }else{\n      return find_kth(arr1, arr2.slice(0, mid2), k);\n    }\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            count++;\n            if(count === k){\n                return arr1[i];\n            }\n            i++;\n        }else{\n            count++;\n            if(count === k){\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    while(i < arr1.length){\n        count++;\n        if(count === k){\n            return arr1[i];\n        }\n        i++;\n    }\n    while(j < arr2.length){\n        count++;\n        if(count === k){\n            return arr2[j];\n        }\n        j++;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0;\n    var j = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            if(i + j == k - 1){\n                return arr1[i];\n            }\n            i++;\n        }\n        else{\n            if(i + j == k - 1){\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if(i < arr1.length){\n        return arr1[i + k - 1 - j];\n    }\n    if(j < arr2.length){\n        return arr2[j + k - 1 - i];\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    var result;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            result = arr1[i];\n            i++;\n        } else {\n            result = arr2[j];\n            j++;\n        }\n        count++;\n        if(count === k){\n            return result;\n        }\n    }\n    while(i < arr1.length){\n        result = arr1[i];\n        i++;\n        count++;\n        if(count === k){\n            return result;\n        }\n    }\n    while(j < arr2.length){\n        result = arr2[j];\n        j++;\n        count++;\n        if(count === k){\n            return result;\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            if(count == k-1){\n                return arr1[i];\n            }\n            i++;\n            count++;\n        }else{\n            if(count == k-1){\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    if(i == arr1.length){\n        return arr2[j+k-1];\n    }\n    if(j == arr2.length){\n        return arr1[i+k-1];\n    }\n}\n\nvar arr1 = [1,2,3,4,5,6,7,8,9,10];\nvar arr2 = [11,12,13,14,15,16,17,18,19,20];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length + arr2.length < k) return -1;\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      count++;\n      if(count == k) return arr1[i];\n      i++;\n    } else {\n      count++;\n      if(count == k) return arr2[j];\n      j++;\n    }\n  }\n  while(i < arr1.length){\n    count++;\n    if(count == k) return arr1[i];\n    i++;\n  }\n  while(j < arr2.length){\n    count++;\n    if(count == k) return arr2[j];\n    j++;\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length + arr2.length < k) return null;\n  if(arr1.length === 0) return arr2[k-1];\n  if(arr2.length === 0) return arr1[k-1];\n  if(k === 1) return Math.min(arr1[0], arr2[0]);\n  var mid1 = Math.min(k/2, arr1.length);\n  var mid2 = Math.min(k/2, arr2.length);\n  if(arr1[mid1-1] < arr2[mid2-1]){\n    return find_kth(arr1.slice(mid1), arr2, k-mid1);\n  }else{\n    return find_kth(arr1, arr2.slice(mid2), k-mid2);\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmp_zdo0r8v.js:7\n  var mid1 = Math.min(k/2, arr1.length);\n                  ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min (<anonymous>)\n    at find_kth (/tmp/tmp_zdo0r8v.js:7:19)\n    at find_kth (/tmp/tmp_zdo0r8v.js:12:12)\n    at find_kth (/tmp/tmp_zdo0r8v.js:12:12)\n    at find_kth (/tmp/tmp_zdo0r8v.js:12:12)\n    at find_kth (/tmp/tmp_zdo0r8v.js:12:12)\n    at find_kth (/tmp/tmp_zdo0r8v.js:12:12)\n    at find_kth (/tmp/tmp_zdo0r8v.js:12:12)\n    at find_kth (/tmp/tmp_zdo0r8v.js:12:12)\n    at find_kth (/tmp/tmp_zdo0r8v.js:12:12)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0, j = 0, count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      if(count == k-1) return arr1[i];\n      i++;\n    } else {\n      if(count == k-1) return arr2[j];\n      j++;\n    }\n    count++;\n  }\n  if(i < arr1.length){\n    return arr1[i+k-count-1];\n  }\n  if(j < arr2.length){\n    return arr2[j+k-count-1];\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(k > arr1.length + arr2.length) return;\n  if(arr1.length > arr2.length) return find_kth(arr2, arr1, k);\n  if(arr1.length === 0) return arr2[k-1];\n  if(k === 1) return Math.min(arr1[0], arr2[0]);\n  var i = Math.min(arr1.length, Math.floor(k/2));\n  var j = Math.min(arr2.length, Math.floor(k/2));\n  if(arr1[i-1] > arr2[j-1]){\n    return find_kth(arr1, arr2.slice(j), k-j);\n  }else{\n    return find_kth(arr1.slice(i), arr2, k-i);\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length + arr2.length < k) return -1;\n  var i = 0;\n  var j = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      if(i + j == k - 1) return arr1[i];\n      i++;\n    }else{\n      if(i + j == k - 1) return arr2[j];\n      j++;\n    }\n  }\n  if(i < arr1.length){\n    return arr1[k - j - 1];\n  }\n  if(j < arr2.length){\n    return arr2[k - i - 1];\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var result;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      result = arr1[i];\n      i++;\n    } else {\n      result = arr2[j];\n      j++;\n    }\n    k--;\n    if(k === 0){\n      return result;\n    }\n  }\n  while(i < arr1.length){\n    result = arr1[i];\n    i++;\n    k--;\n    if(k === 0){\n      return result;\n    }\n  }\n  while(j < arr2.length){\n    result = arr2[j];\n    j++;\n    k--;\n    if(k === 0){\n      return result;\n    }\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            i++;\n        }\n        else{\n            j++;\n        }\n        count++;\n        if(count === k){\n            break;\n        }\n    }\n    if(i === arr1.length){\n        return arr2[j];\n    }\n    else{\n        return arr1[i];\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp3wejk_29.js:31:10)\n    at Object.<anonymous> (/tmp/tmp3wejk_29.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      count++;\n      if(count === k){\n        return arr1[i];\n      }\n      i++;\n    }\n    else{\n      count++;\n      if(count === k){\n        return arr2[j];\n      }\n      j++;\n    }\n  }\n  if(i < arr1.length){\n    return arr1[i + k - count - 1];\n  }\n  if(j < arr2.length){\n    return arr2[j + k - count - 1];\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      count++;\n      if(count === k){\n        return arr1[i];\n      }\n      i++;\n    }else{\n      count++;\n      if(count === k){\n        return arr2[j];\n      }\n      j++;\n    }\n  }\n  while(i < arr1.length){\n    count++;\n    if(count === k){\n      return arr1[i];\n    }\n    i++;\n  }\n  while(j < arr2.length){\n    count++;\n    if(count === k){\n      return arr2[j];\n    }\n    j++;\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length === 0) return arr2[k-1];\n  if(arr2.length === 0) return arr1[k-1];\n  if(k === 1) return Math.min(arr1[0], arr2[0]);\n\n  var i = Math.min(Math.floor(k/2), arr1.length);\n  var j = Math.min(k - i, arr2.length);\n\n  if(arr1[i-1] > arr2[j-1]){\n    return find_kth(arr1, arr2.slice(j), k-j);\n  }else{\n    return find_kth(arr1.slice(i), arr2, k-i);\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var len1 = arr1.length;\n    var len2 = arr2.length;\n    var i = 0;\n    var j = 0;\n    while(i < len1 && j < len2){\n        if(arr1[i] < arr2[j]){\n            if(k == 1){\n                return arr1[i];\n            }\n            i++;\n            k--;\n        }else{\n            if(k == 1){\n                return arr2[j];\n            }\n            j++;\n            k--;\n        }\n    }\n    if(i < len1){\n        return arr1[i + k - 1];\n    }\n    if(j < len2){\n        return arr2[j + k - 1];\n    }\n}\n\nvar arr1 = [1, 2, 3, 4, 5, 6, 7];\nvar arr2 = [2, 4, 6, 8, 10, 12, 14];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length + arr2.length < k) return null;\n  var i = 0;\n  var j = 0;\n  var result = [];\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      result.push(arr1[i]);\n      i++;\n    }else{\n      result.push(arr2[j]);\n      j++;\n    }\n  }\n  while(i < arr1.length){\n    result.push(arr1[i]);\n    i++;\n  }\n  while(j < arr2.length){\n    result.push(arr2[j]);\n    j++;\n  }\n  return result[k-1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    var result = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            result = arr1[i];\n            i++;\n        }\n        else{\n            result = arr2[j];\n            j++;\n        }\n        count++;\n        if(count === k){\n            break;\n        }\n    }\n    if(count === k){\n        return result;\n    }\n    else{\n        if(i === arr1.length){\n            return arr2[j + k - count - 1];\n        }\n        else{\n            return arr1[i + k - count - 1];\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      i++;\n    }else{\n      j++;\n    }\n    count++;\n    if(count == k){\n      break;\n    }\n  }\n  if(i == arr1.length){\n    return arr2[j];\n  }\n  if(j == arr2.length){\n    return arr1[i];\n  }\n  return Math.min(arr1[i], arr2[j]);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpgaa497eo.js:31:10)\n    at Object.<anonymous> (/tmp/tmpgaa497eo.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            count++;\n            if(count == k){\n                return arr1[i];\n            }\n            i++;\n        }else{\n            count++;\n            if(count == k){\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    while(i < arr1.length){\n        count++;\n        if(count == k){\n            return arr1[i];\n        }\n        i++;\n    }\n    while(j < arr2.length){\n        count++;\n        if(count == k){\n            return arr2[j];\n        }\n        j++;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      i++;\n    }else{\n      j++;\n    }\n    count++;\n    if(count === k){\n      break;\n    }\n  }\n  if(i === arr1.length){\n    return arr2[j];\n  }else{\n    return arr1[i];\n  }\n}\n\nvar arr1 = [1, 3, 5, 7, 9];\nvar arr2 = [2, 4, 6, 8, 10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpdu_eurjr.js:31:10)\n    at Object.<anonymous> (/tmp/tmpdu_eurjr.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length === 0) return arr2[k-1];\n  if(arr2.length === 0) return arr1[k-1];\n  if(k === 1) return Math.min(arr1[0], arr2[0]);\n\n  var i = Math.min(Math.floor(k/2), arr1.length);\n  var j = Math.min(k-i, arr2.length);\n\n  if(arr1[i-1] < arr2[j-1]){\n    return find_kth(arr1.slice(i), arr2, k-i);\n  }\n  else{\n    return find_kth(arr1, arr2.slice(j), k-j);\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length + arr2.length < k) return null;\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  var result = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      result = arr1[i];\n      i++;\n    }\n    else{\n      result = arr2[j];\n      j++;\n    }\n    count++;\n    if(count === k) return result;\n  }\n  while(i < arr1.length){\n    result = arr1[i];\n    i++;\n    count++;\n    if(count === k) return result;\n  }\n  while(j < arr2.length){\n    result = arr2[j];\n    j++;\n    count++;\n    if(count === k) return result;\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    while(count < k){\n        if(arr1[i] < arr2[j]){\n            i++;\n        }\n        else{\n            j++;\n        }\n        count++;\n    }\n    if(arr1[i] < arr2[j]){\n        return arr1[i];\n    }\n    else{\n        return arr2[j];\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp1qhx94mn.js:28:10)\n    at Object.<anonymous> (/tmp/tmp1qhx94mn.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length + arr2.length < k)\n    return null;\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      i++;\n    }else{\n      j++;\n    }\n    count++;\n    if(count === k)\n      break;\n  }\n  if(count === k){\n    if(i < arr1.length && j < arr2.length){\n      return Math.min(arr1[i], arr2[j]);\n    }else if(i < arr1.length){\n      return arr1[i];\n    }else{\n      return arr2[j];\n    }\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp2qm98vj3.js:34:10)\n    at Object.<anonymous> (/tmp/tmp2qm98vj3.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    if(arr1.length + arr2.length < k){\n        return null;\n    }\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            if(count === k - 1){\n                return arr1[i];\n            }\n            i++;\n            count++;\n        }\n        else{\n            if(count === k - 1){\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    while(i < arr1.length){\n        if(count === k - 1){\n            return arr1[i];\n        }\n        i++;\n        count++;\n    }\n    while(j < arr2.length){\n        if(count === k - 1){\n            return arr2[j];\n        }\n        j++;\n        count++;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length + arr2.length < k) return null;\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      i++;\n    }else{\n      j++;\n    }\n    count++;\n    if(count === k) break;\n  }\n  if(count === k) return Math.min(arr1[i], arr2[j]);\n  if(i === arr1.length){\n    return arr2[k - arr1.length - 1];\n  }\n  return arr1[k - arr2.length - 1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpstkbej3j.js:28:10)\n    at Object.<anonymous> (/tmp/tmpstkbej3j.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length + arr2.length < k) return -1;\n  if(arr1.length === 0) return arr2[k-1];\n  if(arr2.length === 0) return arr1[k-1];\n  if(k === 1) return Math.min(arr1[0], arr2[0]);\n  var i = Math.min(Math.floor(k/2), arr1.length);\n  var j = Math.min(Math.floor(k/2), arr2.length);\n  if(arr1[i-1] < arr2[j-1]){\n    return find_kth(arr1.slice(i), arr2, k-i);\n  }else{\n    return find_kth(arr1, arr2.slice(j), k-j);\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length + arr2.length < k) return null;\n  var i = 0, j = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      if(i + j + 1 == k) return arr1[i];\n      i++;\n    }else{\n      if(i + j + 1 == k) return arr2[j];\n      j++;\n    }\n  }\n  if(i < arr1.length){\n    return arr1[k - j - 1];\n  }else{\n    return arr2[k - i - 1];\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            i++;\n        }\n        else{\n            j++;\n        }\n        count++;\n        if(count == k){\n            if(i == arr1.length){\n                return arr2[j];\n            }\n            else if(j == arr2.length){\n                return arr1[i];\n            }\n            else{\n                return Math.min(arr1[i], arr2[j]);\n            }\n        }\n    }\n}\n\nvar arr1 = [1, 3, 5, 7, 9];\nvar arr2 = [2, 4, 6, 8, 10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmph2xt0foo.js:35:10)\n    at Object.<anonymous> (/tmp/tmph2xt0foo.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    if(arr1.length == 0)\n        return arr2[k-1];\n    if(arr2.length == 0)\n        return arr1[k-1];\n    if(k == 1)\n        return Math.min(arr1[0], arr2[0]);\n    var i = Math.min(parseInt(arr1.length), parseInt(k/2));\n    var j = Math.min(parseInt(arr2.length), parseInt(k/2));\n    if(arr1[i-1] > arr2[j-1]){\n        return find_kth(arr1, arr2.slice(j), k-j);\n    }\n    else{\n        return find_kth(arr1.slice(i), arr2, k-i);\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length == 0) return arr2[k-1];\n  if(arr2.length == 0) return arr1[k-1];\n  if(k == 1) return Math.min(arr1[0], arr2[0]);\n  var i = Math.min(Math.floor(k/2), arr1.length);\n  var j = Math.min(k-i, arr2.length);\n  if(arr1[i-1] < arr2[j-1]){\n    return find_kth(arr1.slice(i), arr2, k-i);\n  }else{\n    return find_kth(arr1, arr2.slice(j), k-j);\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length === 0)\n    return arr2[k-1];\n  if(arr2.length === 0)\n    return arr1[k-1];\n  if(k === 1)\n    return Math.min(arr1[0], arr2[0]);\n  var i = Math.min(Math.floor(k/2), arr1.length);\n  var j = Math.min(Math.floor(k/2), arr2.length);\n  if(arr1[i-1] > arr2[j-1])\n    return find_kth(arr1, arr2.slice(j), k-j);\n  else\n    return find_kth(arr1.slice(i), arr2, k-i);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length === 0) return arr2[k-1];\n  if(arr2.length === 0) return arr1[k-1];\n  if(k === 1) return Math.min(arr1[0], arr2[0]);\n\n  var i = Math.min(Math.floor(k/2), arr1.length);\n  var j = Math.min(k - i, arr2.length);\n\n  if(arr1[i-1] < arr2[j-1]){\n    return find_kth(arr1.slice(i), arr2, k-i);\n  }else{\n    return find_kth(arr1, arr2.slice(j), k-j);\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var index1 = 0;\n    var index2 = 0;\n    var result = [];\n    while(index1 < arr1.length && index2 < arr2.length){\n        if(arr1[index1] < arr2[index2]){\n            result.push(arr1[index1]);\n            index1++;\n        }else{\n            result.push(arr2[index2]);\n            index2++;\n        }\n    }\n    while(index1 < arr1.length){\n        result.push(arr1[index1]);\n        index1++;\n    }\n    while(index2 < arr2.length){\n        result.push(arr2[index2]);\n        index2++;\n    }\n    return result[k-1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      i++;\n    } else {\n      j++;\n    }\n    count++;\n    if(count == k){\n      break;\n    }\n  }\n  if(i < arr1.length){\n    return arr1[i];\n  } else {\n    return arr2[j];\n  }\n}\n\nvar arr1 = [2, 3, 6, 7, 9];\nvar arr2 = [1, 4, 8, 10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpsa_afpiz.js:31:10)\n    at Object.<anonymous> (/tmp/tmpsa_afpiz.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      if(count === k-1){\n        return arr1[i];\n      }\n      i++;\n      count++;\n    }\n    else{\n      if(count === k-1){\n        return arr2[j];\n      }\n      j++;\n      count++;\n    }\n  }\n  if(i === arr1.length){\n    return arr2[j+k-count-1];\n  }\n  else{\n    return arr1[i+k-count-1];\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length + arr2.length < k) return null;\n  var i = 0;\n  var j = 0;\n  while(k > 1 && i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      i++;\n    }else{\n      j++;\n    }\n    k--;\n  }\n  if(i === arr1.length){\n    return arr2[j + k - 1];\n  }\n  if(j === arr2.length){\n    return arr1[i + k - 1];\n  }\n  return Math.min(arr1[i], arr2[j]);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    if(arr1.length == 0){\n        return arr2[k-1];\n    }\n    if(arr2.length == 0){\n        return arr1[k-1];\n    }\n    if(k == 1){\n        return Math.min(arr1[0], arr2[0]);\n    }\n    var i = Math.min(parseInt(arr1.length, 10), parseInt(k/2, 10)) - 1;\n    var j = Math.min(parseInt(arr2.length, 10), parseInt(k/2, 10)) - 1;\n    if(arr1[i] > arr2[j]){\n        return find_kth(arr1, arr2.slice(j+1), k - j - 1);\n    }\n    else{\n        return find_kth(arr1.slice(i+1), arr2, k - i - 1);\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while (i < arr1.length && j < arr2.length){\n    if (arr1[i] < arr2[j]){\n      i++;\n    } else {\n      j++;\n    }\n    count++;\n    if (count === k){\n      if (arr1[i] < arr2[j]){\n        return arr1[i];\n      } else {\n        return arr2[j];\n      }\n    }\n  }\n  if (i < arr1.length){\n    return arr1[i + k - count - 1];\n  } else {\n    return arr2[j + k - count - 1];\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpjpqkqxjp.js:33:10)\n    at Object.<anonymous> (/tmp/tmpjpqkqxjp.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            if(count == k-1){\n                return arr1[i];\n            }\n            i++;\n            count++;\n        }else{\n            if(count == k-1){\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    if(i < arr1.length){\n        return arr1[i+k-count-1];\n    }else{\n        return arr2[j+k-count-1];\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            if(count === k-1){\n                return arr1[i];\n            }\n            i++;\n            count++;\n        }\n        else{\n            if(count === k-1){\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    if(i < arr1.length){\n        return arr1[i+k-count-1];\n    }\n    else{\n        return arr2[j+k-count-1];\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length == 0)\n    return arr2[k-1];\n  if(arr2.length == 0)\n    return arr1[k-1];\n  if(k == 1)\n    return Math.min(arr1[0], arr2[0]);\n  var mid1 = Math.min(Math.floor(k/2), arr1.length);\n  var mid2 = Math.min(Math.floor(k/2), arr2.length);\n  if(arr1[mid1-1] < arr2[mid2-1]){\n    return find_kth(arr1.slice(mid1), arr2, k-mid1);\n  }\n  else{\n    return find_kth(arr1, arr2.slice(mid2), k-mid2);\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length == 0)\n    return arr2[k-1];\n  if(arr2.length == 0)\n    return arr1[k-1];\n  if(k == 1)\n    return Math.min(arr1[0], arr2[0]);\n  var mid1 = Math.min(parseInt(k/2), arr1.length);\n  var mid2 = Math.min(parseInt(k/2), arr2.length);\n  if(arr1[mid1-1] > arr2[mid2-1])\n    return find_kth(arr1, arr2.slice(mid2), k-mid2);\n  else\n    return find_kth(arr1.slice(mid1), arr2, k-mid1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      i++;\n    }else{\n      j++;\n    }\n    count++;\n    if(count == k){\n      break;\n    }\n  }\n  if(i == arr1.length){\n    return arr2[j];\n  }else{\n    return arr1[i];\n  }\n}\n\nvar arr1 = [2, 3, 6, 7, 9];\nvar arr2 = [1, 4, 8, 10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpbhuidyin.js:31:10)\n    at Object.<anonymous> (/tmp/tmpbhuidyin.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length == 0)\n    return arr2[k-1];\n  if(arr2.length == 0)\n    return arr1[k-1];\n  if(k == 1)\n    return Math.min(arr1[0], arr2[0]);\n  var i = Math.min(Math.floor(k/2), arr1.length);\n  var j = Math.min(k - i, arr2.length);\n  if(arr1[i-1] > arr2[j-1])\n    return find_kth(arr1, arr2.slice(j), k-j);\n  else\n    return find_kth(arr1.slice(i), arr2, k-i);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  var result = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      result = arr1[i];\n      i++;\n    } else {\n      result = arr2[j];\n      j++;\n    }\n    count++;\n    if(count === k){\n      return result;\n    }\n  }\n  while(i < arr1.length){\n    result = arr1[i];\n    i++;\n    count++;\n    if(count === k){\n      return result;\n    }\n  }\n  while(j < arr2.length){\n    result = arr2[j];\n    j++;\n    count++;\n    if(count === k){\n      return result;\n    }\n  }\n}\n\nvar arr1 = [1, 3, 5, 7, 9];\nvar arr2 = [2, 4, 6, 8, 10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length + arr2.length < k) return null;\n  if(arr1.length === 0) return arr2[k-1];\n  if(arr2.length === 0) return arr1[k-1];\n  if(k === 1) return Math.min(arr1[0], arr2[0]);\n  var mid1 = Math.min(Math.floor(k/2), arr1.length);\n  var mid2 = Math.min(Math.floor(k/2), arr2.length);\n  if(arr1[mid1-1] < arr2[mid2-1]){\n    return find_kth(arr1.slice(mid1), arr2, k-mid1);\n  }else{\n    return find_kth(arr1, arr2.slice(mid2), k-mid2);\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length == 0)\n    return arr2[k-1];\n  if(arr2.length == 0)\n    return arr1[k-1];\n  if(k == 1)\n    return Math.min(arr1[0], arr2[0]);\n  var mid1 = Math.min(k/2, arr1.length);\n  var mid2 = Math.min(k/2, arr2.length);\n  if(arr1[mid1-1] < arr2[mid2-1]){\n    return find_kth(arr1.slice(mid1), arr2, k-mid1);\n  }\n  else{\n    return find_kth(arr1, arr2.slice(mid2), k-mid2);\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "/tmp/tmpjccwhimr.js:9\n  var mid1 = Math.min(k/2, arr1.length);\n                  ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min (<anonymous>)\n    at find_kth (/tmp/tmpjccwhimr.js:9:19)\n    at find_kth (/tmp/tmpjccwhimr.js:15:12)\n    at find_kth (/tmp/tmpjccwhimr.js:15:12)\n    at find_kth (/tmp/tmpjccwhimr.js:15:12)\n    at find_kth (/tmp/tmpjccwhimr.js:15:12)\n    at find_kth (/tmp/tmpjccwhimr.js:15:12)\n    at find_kth (/tmp/tmpjccwhimr.js:15:12)\n    at find_kth (/tmp/tmpjccwhimr.js:15:12)\n    at find_kth (/tmp/tmpjccwhimr.js:15:12)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0, j = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      if(i + j + 1 === k){\n        return arr1[i];\n      }\n      i++;\n    }else{\n      if(i + j + 1 === k){\n        return arr2[j];\n      }\n      j++;\n    }\n  }\n  if(i < arr1.length){\n    return arr1[k - j - 1];\n  }\n  return arr2[k - i - 1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length === 0){\n    return arr2[k-1];\n  }\n  if(arr2.length === 0){\n    return arr1[k-1];\n  }\n  if(k === 1){\n    return Math.min(arr1[0], arr2[0]);\n  }\n  var i = Math.min(Math.floor(k/2), arr1.length);\n  var j = Math.min(Math.floor(k/2), arr2.length);\n  if(arr1[i-1] > arr2[j-1]){\n    return find_kth(arr1, arr2.slice(j), k-j);\n  }\n  return find_kth(arr1.slice(i), arr2, k-i);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    if(arr1.length + arr2.length < k){\n        return null;\n    }\n    if(arr1.length === 0){\n        return arr2[k-1];\n    }\n    if(arr2.length === 0){\n        return arr1[k-1];\n    }\n    if(k === 1){\n        return Math.min(arr1[0], arr2[0]);\n    }\n    var mid1 = Math.min(Math.floor(k/2), arr1.length);\n    var mid2 = Math.min(Math.floor(k/2), arr2.length);\n    if(arr1[mid1-1] < arr2[mid2-1]){\n        return find_kth(arr1.slice(mid1), arr2, k-mid1);\n    }else{\n        return find_kth(arr1, arr2.slice(mid2), k-mid2);\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      i++;\n    }\n    else{\n      j++;\n    }\n    count++;\n    if(count === k){\n      if(arr1[i] < arr2[j]){\n        return arr1[i];\n      }\n      else{\n        return arr2[j];\n      }\n    }\n  }\n  if(i < arr1.length){\n    return arr1[i + k - count - 1];\n  }\n  else{\n    return arr2[j + k - count - 1];\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpp0lf450v.js:36:10)\n    at Object.<anonymous> (/tmp/tmpp0lf450v.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(count < k){\n    if(arr1[i] < arr2[j]){\n      i++;\n    } else {\n      j++;\n    }\n    count++;\n  }\n  return arr1[i] < arr2[j] ? arr1[i] : arr2[j];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpi5bipff6.js:22:10)\n    at Object.<anonymous> (/tmp/tmpi5bipff6.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            if(count == k-1){\n                return arr1[i];\n            }\n            i++;\n            count++;\n        }else{\n            if(count == k-1){\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    if(i < arr1.length){\n        return arr1[i+k-count-1];\n    }\n    if(j < arr2.length){\n        return arr2[j+k-count-1];\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  var result;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      result = arr1[i];\n      i++;\n    }else{\n      result = arr2[j];\n      j++;\n    }\n    count++;\n    if(count === k){\n      return result;\n    }\n  }\n  while(i < arr1.length){\n    result = arr1[i];\n    i++;\n    count++;\n    if(count === k){\n      return result;\n    }\n  }\n  while(j < arr2.length){\n    result = arr2[j];\n    j++;\n    count++;\n    if(count === k){\n      return result;\n    }\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            i++;\n        }else{\n            j++;\n        }\n        count++;\n        if(count == k){\n            if(arr1[i] < arr2[j]){\n                return arr1[i];\n            }else{\n                return arr2[j];\n            }\n        }\n    }\n    if(i < arr1.length){\n        return arr1[i + k - count - 1];\n    }else{\n        return arr2[j + k - count - 1];\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp41io088x.js:33:10)\n    at Object.<anonymous> (/tmp/tmp41io088x.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      i++;\n    }else{\n      j++;\n    }\n    count++;\n    if(count == k){\n      break;\n    }\n  }\n  if(i == arr1.length){\n    return arr2[j];\n  }else{\n    return arr1[i];\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp7pxnufzm.js:29:10)\n    at Object.<anonymous> (/tmp/tmp7pxnufzm.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      i++;\n    }else{\n      j++;\n    }\n    count++;\n    if(count == k){\n      break;\n    }\n  }\n  if(i < arr1.length){\n    return arr1[i];\n  }else{\n    return arr2[j];\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpscgpa8nq.js:29:10)\n    at Object.<anonymous> (/tmp/tmpscgpa8nq.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  var result = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      result = arr1[i];\n      i++;\n    } else {\n      result = arr2[j];\n      j++;\n    }\n    count++;\n    if(count === k){\n      return result;\n    }\n  }\n  while(i < arr1.length){\n    result = arr1[i];\n    i++;\n    count++;\n    if(count === k){\n      return result;\n    }\n  }\n  while(j < arr2.length){\n    result = arr2[j];\n    j++;\n    count++;\n    if(count === k){\n      return result;\n    }\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      i++;\n    } else {\n      j++;\n    }\n    count++;\n    if(count === k){\n      break;\n    }\n  }\n  if(i < arr1.length){\n    return arr1[i];\n  } else {\n    return arr2[j];\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123372,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpzvo10t0m.js:29:10)\n    at Object.<anonymous> (/tmp/tmpzvo10t0m.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      if(count == k){\n        return arr1[i];\n      }\n      i++;\n      count++;\n    }else{\n      if(count == k){\n        return arr2[j];\n      }\n      j++;\n      count++;\n    }\n  }\n  if(i < arr1.length){\n    return arr1[i + k - count - 1];\n  }else{\n    return arr2[j + k - count - 1];\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpbrc9sdos.js:33:10)\n    at Object.<anonymous> (/tmp/tmpbrc9sdos.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0;\n    var j = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            if(i + j + 1 === k){\n                return arr1[i];\n            }\n            i++;\n        }else{\n            if(i + j + 1 === k){\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if(i < arr1.length){\n        return arr1[i + k - j - 1];\n    }\n    if(j < arr2.length){\n        return arr2[j + k - i - 1];\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(count < k){\n    if(arr1[i] < arr2[j]){\n      i++;\n    }else{\n      j++;\n    }\n    count++;\n  }\n  if(arr1[i] < arr2[j]){\n    return arr1[i];\n  }else{\n    return arr2[j];\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpr90zig3i.js:26:10)\n    at Object.<anonymous> (/tmp/tmpr90zig3i.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length+arr2.length < k) return -1;\n  var i = 0, j = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      if(i+j == k-1) return arr1[i];\n      i++;\n    }else{\n      if(i+j == k-1) return arr2[j];\n      j++;\n    }\n  }\n  if(i == arr1.length){\n    return arr2[k-i-1];\n  }else{\n    return arr1[k-j-1];\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    if(arr1.length + arr2.length < k) return -1;\n    var i = 0, j = 0;\n    while(k > 0){\n        if(arr1[i] < arr2[j]){\n            i++;\n        }else{\n            j++;\n        }\n        k--;\n    }\n    return arr1[i-1] < arr2[j-1] ? arr1[i-1] : arr2[j-1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmppxaw_ynm.js:21:10)\n    at Object.<anonymous> (/tmp/tmppxaw_ynm.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    var result = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            result = arr1[i];\n            i++;\n        }\n        else{\n            result = arr2[j];\n            j++;\n        }\n        count++;\n        if(count == k){\n            return result;\n        }\n    }\n    while(i < arr1.length){\n        result = arr1[i];\n        i++;\n        count++;\n        if(count == k){\n            return result;\n        }\n    }\n    while(j < arr2.length){\n        result = arr2[j];\n        j++;\n        count++;\n        if(count == k){\n            return result;\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            count++;\n            if(count == k){\n                return arr1[i];\n            }\n            i++;\n        }\n        else{\n            count++;\n            if(count == k){\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if(i == arr1.length){\n        return arr2[j+k-count-1];\n    }\n    else{\n        return arr1[i+k-count-1];\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    if(arr1.length + arr2.length < k) return null;\n    var i = 0, j = 0, count = 0, result;\n    while(count < k){\n        if(arr1[i] < arr2[j]){\n            result = arr1[i];\n            i++;\n        }\n        else{\n            result = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    if(arr1.length + arr2.length < k){\n        return null;\n    }\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            if(count === k - 1){\n                return arr1[i];\n            }\n            i++;\n            count++;\n        }\n        else{\n            if(count === k - 1){\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    while(i < arr1.length){\n        if(count === k - 1){\n            return arr1[i];\n        }\n        i++;\n        count++;\n    }\n    while(j < arr2.length){\n        if(count === k - 1){\n            return arr2[j];\n        }\n        j++;\n        count++;\n    }\n}\n\nvar arr1 = [2, 3, 6, 7, 9];\nvar arr2 = [1, 4, 8, 10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0, j = 0;\n    var result = [];\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            result.push(arr1[i]);\n            i++;\n        } else {\n            result.push(arr2[j]);\n            j++;\n        }\n    }\n    while(i < arr1.length){\n        result.push(arr1[i]);\n        i++;\n    }\n    while(j < arr2.length){\n        result.push(arr2[j]);\n        j++;\n    }\n    return result[k-1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var len1 = arr1.length;\n  var len2 = arr2.length;\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < len1 && j < len2){\n    if(arr1[i] < arr2[j]){\n      i++;\n    }else{\n      j++;\n    }\n    count++;\n    if(count === k){\n      if(arr1[i] < arr2[j]){\n        return arr1[i];\n      }else{\n        return arr2[j];\n      }\n    }\n  }\n  while(i < len1){\n    i++;\n    count++;\n    if(count === k){\n      return arr1[i];\n    }\n  }\n  while(j < len2){\n    j++;\n    count++;\n    if(count === k){\n      return arr2[j];\n    }\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpqm7p_tls.js:44:10)\n    at Object.<anonymous> (/tmp/tmpqm7p_tls.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var len1 = arr1.length;\n  var len2 = arr2.length;\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < len1 && j < len2){\n    if(arr1[i] < arr2[j]){\n      i++;\n    } else {\n      j++;\n    }\n    count++;\n    if(count === k){\n      break;\n    }\n  }\n  if(i === len1){\n    return arr2[j];\n  } else if(j === len2){\n    return arr1[i];\n  } else {\n    return arr1[i] < arr2[j] ? arr1[i] : arr2[j];\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp0_pootek.js:33:10)\n    at Object.<anonymous> (/tmp/tmp0_pootek.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var kth;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      kth = arr1[i];\n      i++;\n    }\n    else{\n      kth = arr2[j];\n      j++;\n    }\n    k--;\n    if(k === 0){\n      return kth;\n    }\n  }\n  if(i < arr1.length){\n    return arr1[i + k - 1];\n  }\n  if(j < arr2.length){\n    return arr2[j + k - 1];\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    while(count < k){\n        if(arr1[i] < arr2[j]){\n            i++;\n        }\n        else{\n            j++;\n        }\n        count++;\n    }\n    return arr1[i-1] < arr2[j-1] ? arr1[i-1] : arr2[j-1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpowzn2auh.js:23:10)\n    at Object.<anonymous> (/tmp/tmpowzn2auh.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length + arr2.length < k) return null;\n  var i = 0, j = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      if(i + j + 1 === k) return arr1[i];\n      i++;\n    } else {\n      if(i + j + 1 === k) return arr2[j];\n      j++;\n    }\n  }\n  if(i < arr1.length) return arr1[k - j - 1];\n  if(j < arr2.length) return arr2[k - i - 1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    if(arr1.length + arr2.length < k) return -1;\n    let i = 0;\n    let j = 0;\n    let count = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            count++;\n            if(count === k) return arr1[i];\n            i++;\n        } else {\n            count++;\n            if(count === k) return arr2[j];\n            j++;\n        }\n    }\n    while(i < arr1.length){\n        count++;\n        if(count === k) return arr1[i];\n        i++;\n    }\n    while(j < arr2.length){\n        count++;\n        if(count === k) return arr2[j];\n        j++;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length > arr2.length)\n    return find_kth(arr2, arr1, k);\n  if(arr1.length === 0)\n    return arr2[k-1];\n  if(k === 1)\n    return Math.min(arr1[0], arr2[0]);\n  var i = Math.min(arr1.length, Math.floor(k/2));\n  var j = Math.min(arr2.length, Math.floor(k/2));\n  if(arr1[i-1] > arr2[j-1])\n    return find_kth(arr1, arr2.slice(j), k-j);\n  else\n    return find_kth(arr1.slice(i), arr2, k-i);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length + arr2.length < k) return null;\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      if(count === k - 1) return arr1[i];\n      i++;\n      count++;\n    }else{\n      if(count === k - 1) return arr2[j];\n      j++;\n      count++;\n    }\n  }\n  while(i < arr1.length){\n    if(count === k - 1) return arr1[i];\n    i++;\n    count++;\n  }\n  while(j < arr2.length){\n    if(count === k - 1) return arr2[j];\n    j++;\n    count++;\n  }\n}\n\nvar arr1 = [1, 3, 5, 7, 9];\nvar arr2 = [2, 4, 6, 8, 10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length == 0) return arr2[k-1];\n  if(arr2.length == 0) return arr1[k-1];\n  if(k == 1) return Math.min(arr1[0], arr2[0]);\n\n  var mid1 = Math.floor(arr1.length/2);\n  var mid2 = Math.floor(arr2.length/2);\n  if(arr1[mid1] <= arr2[mid2]){\n    if(k <= (mid1 + mid2 + 1)){\n      return find_kth(arr1.slice(0, mid1), arr2, k);\n    }else{\n      return find_kth(arr1, arr2.slice(mid2 + 1), k - mid2 - 1);\n    }\n  }else{\n    if(k <= (mid1 + mid2 + 1)){\n      return find_kth(arr1, arr2.slice(0, mid2), k);\n    }else{\n      return find_kth(arr1.slice(mid1 + 1), arr2, k - mid1 - 1);\n    }\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpviddhc4z.js:29:10)\n    at Object.<anonymous> (/tmp/tmpviddhc4z.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    if(arr1.length + arr2.length < k) return null;\n    let i = 0, j = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            if(i + j + 1 === k) return arr1[i];\n            i++;\n        } else {\n            if(i + j + 1 === k) return arr2[j];\n            j++;\n        }\n    }\n    if(i === arr1.length){\n        return arr2[k - arr1.length - 1];\n    } else {\n        return arr1[k - arr2.length - 1];\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      if(count === k-1){\n        return arr1[i];\n      }\n      i++;\n      count++;\n    } else {\n      if(count === k-1){\n        return arr2[j];\n      }\n      j++;\n      count++;\n    }\n  }\n  if(i < arr1.length){\n    return arr1[i+k-count-1];\n  }\n  if(j < arr2.length){\n    return arr2[j+k-count-1];\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            count++;\n            if(count === k){\n                return arr1[i];\n            }\n            i++;\n        }else{\n            count++;\n            if(count === k){\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    while(i < arr1.length){\n        count++;\n        if(count === k){\n            return arr1[i];\n        }\n        i++;\n    }\n    while(j < arr2.length){\n        count++;\n        if(count === k){\n            return arr2[j];\n        }\n        j++;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0, j = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            if(i + j + 1 === k){\n                return arr1[i];\n            }\n            i++;\n        }else{\n            if(i + j + 1 === k){\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if(i < arr1.length){\n        return arr1[k - j - 1];\n    }\n    if(j < arr2.length){\n        return arr2[k - i - 1];\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0, j = 0;\n    while (i < arr1.length && j < arr2.length){\n        if (arr1[i] < arr2[j]){\n            if (i + j == k - 1)\n                return arr1[i];\n            i++;\n        }\n        else{\n            if (i + j == k - 1)\n                return arr2[j];\n            j++;\n        }\n    }\n    if (i < arr1.length)\n        return arr1[i + k - j - 1];\n    if (j < arr2.length)\n        return arr2[j + k - i - 1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length + arr2.length < k) return null;\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      count++;\n      if(count === k) return arr1[i];\n      i++;\n    }else{\n      count++;\n      if(count === k) return arr2[j];\n      j++;\n    }\n  }\n  if(i === arr1.length){\n    return arr2[j + k - count - 1];\n  }else{\n    return arr1[i + k - count - 1];\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      i++;\n    } else {\n      j++;\n    }\n    count++;\n    if(count === k){\n      if(arr1[i] < arr2[j]){\n        return arr1[i];\n      } else {\n        return arr2[j];\n      }\n    }\n  }\n  if(i < arr1.length){\n    return arr1[i + k - count - 1];\n  } else {\n    return arr2[j + k - count - 1];\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp7ebrnku4.js:33:10)\n    at Object.<anonymous> (/tmp/tmp7ebrnku4.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            if(count === k-1){\n                return arr1[i];\n            }\n            i++;\n            count++;\n        }\n        else{\n            if(count === k-1){\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    while(i < arr1.length){\n        if(count === k-1){\n            return arr1[i];\n        }\n        i++;\n        count++;\n    }\n    while(j < arr2.length){\n        if(count === k-1){\n            return arr2[j];\n        }\n        j++;\n        count++;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0, j = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            if(i + j + 1 == k){\n                return arr1[i];\n            }\n            i++;\n        }else{\n            if(i + j + 1 == k){\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if(i < arr1.length){\n        return arr1[i + k - j - 1];\n    }\n    return arr2[j + k - i - 1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            if(count === k-1){\n                return arr1[i];\n            }\n            i++;\n            count++;\n        }else{\n            if(count === k-1){\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    if(i < arr1.length){\n        return arr1[i+k-count-1];\n    }\n    if(j < arr2.length){\n        return arr2[j+k-count-1];\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0, j = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            if(i + j == k - 1){\n                return arr1[i];\n            }\n            i++;\n        }else{\n            if(i + j == k - 1){\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if(i < arr1.length){\n        return arr1[k - j - 1];\n    }\n    if(j < arr2.length){\n        return arr2[k - i - 1];\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length + arr2.length < k) return null;\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      count++;\n      if(count === k) return arr1[i];\n      i++;\n    }else{\n      count++;\n      if(count === k) return arr2[j];\n      j++;\n    }\n  }\n  while(i < arr1.length){\n    count++;\n    if(count === k) return arr1[i];\n    i++;\n  }\n  while(j < arr2.length){\n    count++;\n    if(count === k) return arr2[j];\n    j++;\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            count++;\n            if(count == k){\n                return arr1[i];\n            }\n            i++;\n        }\n        else{\n            count++;\n            if(count == k){\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    while(i < arr1.length){\n        count++;\n        if(count == k){\n            return arr1[i];\n        }\n        i++;\n    }\n    while(j < arr2.length){\n        count++;\n        if(count == k){\n            return arr2[j];\n        }\n        j++;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      i++;\n    } else {\n      j++;\n    }\n    count++;\n    if(count === k){\n      if(arr1[i] < arr2[j]){\n        return arr1[i];\n      } else {\n        return arr2[j];\n      }\n    }\n  }\n  if(i < arr1.length){\n    return arr1[i + k - count - 1];\n  } else {\n    return arr2[j + k - count - 1];\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp7ebrnku4.js:33:10)\n    at Object.<anonymous> (/tmp/tmp7ebrnku4.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length == 0) return arr2[k-1];\n  if(arr2.length == 0) return arr1[k-1];\n  if(k == 1) return Math.min(arr1[0], arr2[0]);\n  var mid1 = Math.min(Math.floor(k/2), arr1.length);\n  var mid2 = Math.min(Math.floor(k/2), arr2.length);\n  if(arr1[mid1-1] < arr2[mid2-1]){\n    return find_kth(arr1.slice(mid1), arr2, k-mid1);\n  }else{\n    return find_kth(arr1, arr2.slice(mid2), k-mid2);\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      i++;\n    } else {\n      j++;\n    }\n    count++;\n    if(count === k){\n      break;\n    }\n  }\n  if(i < arr1.length){\n    return arr1[i];\n  } else {\n    return arr2[j];\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123372,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpzvo10t0m.js:29:10)\n    at Object.<anonymous> (/tmp/tmpzvo10t0m.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length == 0){\n    return arr2[k-1];\n  }\n  if(arr2.length == 0){\n    return arr1[k-1];\n  }\n  if(k == 1){\n    return Math.min(arr1[0], arr2[0]);\n  }\n  var mid1 = Math.min(arr1.length, Math.floor(k/2));\n  var mid2 = Math.min(arr2.length, Math.floor(k/2));\n  if(arr1[mid1-1] < arr2[mid2-1]){\n    return find_kth(arr1.slice(mid1), arr2, k-mid1);\n  }\n  else{\n    return find_kth(arr1, arr2.slice(mid2), k-mid2);\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            if(count === k - 1){\n                return arr1[i];\n            }\n            i++;\n            count++;\n        }else{\n            if(count === k - 1){\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    while(i < arr1.length){\n        if(count === k - 1){\n            return arr1[i];\n        }\n        i++;\n        count++;\n    }\n    while(j < arr2.length){\n        if(count === k - 1){\n            return arr2[j];\n        }\n        j++;\n        count++;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    if(arr1.length + arr2.length < k) return -1;\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            i++;\n        }else{\n            j++;\n        }\n        count++;\n        if(count === k) break;\n    }\n    if(count < k){\n        if(i === arr1.length){\n            return arr2[j + k - count - 1];\n        }else{\n            return arr1[i + k - count - 1];\n        }\n    }else{\n        if(arr1[i] < arr2[j]){\n            return arr1[i];\n        }else{\n            return arr2[j];\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpkurdo2li.js:36:10)\n    at Object.<anonymous> (/tmp/tmpkurdo2li.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    if(arr1.length == 0) return arr2[k-1];\n    if(arr2.length == 0) return arr1[k-1];\n    if(k == 1) return Math.min(arr1[0], arr2[0]);\n\n    var i = Math.min(Math.floor(k/2), arr1.length);\n    var j = Math.min(Math.floor(k/2), arr2.length);\n\n    if(arr1[i-1] > arr2[j-1]){\n        return find_kth(arr1, arr2.slice(j), k-j);\n    }else{\n        return find_kth(arr1.slice(i), arr2, k-i);\n    }\n}\n\nvar arr1 = [2, 3, 6, 7, 9];\nvar arr2 = [1, 4, 8, 10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length + arr2.length < k) return null;\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      if(count === k - 1) return arr1[i];\n      i++;\n    }else{\n      if(count === k - 1) return arr2[j];\n      j++;\n    }\n    count++;\n  }\n  if(i === arr1.length){\n    return arr2[j + k - count - 1];\n  }else{\n    return arr1[i + k - count - 1];\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            count++;\n            if(count == k){\n                return arr1[i];\n            }\n            i++;\n        }\n        else{\n            count++;\n            if(count == k){\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    while(i < arr1.length){\n        count++;\n        if(count == k){\n            return arr1[i];\n        }\n        i++;\n    }\n    while(j < arr2.length){\n        count++;\n        if(count == k){\n            return arr2[j];\n        }\n        j++;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    if(arr1.length + arr2.length < k)\n        return -1;\n    if(arr1.length === 0)\n        return arr2[k-1];\n    if(arr2.length === 0)\n        return arr1[k-1];\n    if(k === 1)\n        return Math.min(arr1[0], arr2[0]);\n    var mid1 = Math.min(arr1.length, Math.floor(k/2));\n    var mid2 = Math.min(arr2.length, Math.floor(k/2));\n    if(arr1[mid1-1] < arr2[mid2-1])\n        return find_kth(arr1.slice(mid1), arr2, k-mid1);\n    else\n        return find_kth(arr1, arr2.slice(mid2), k-mid2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      count++;\n      if(count === k){\n        return arr1[i];\n      }\n      i++;\n    } else {\n      count++;\n      if(count === k){\n        return arr2[j];\n      }\n      j++;\n    }\n  }\n  while(i < arr1.length){\n    count++;\n    if(count === k){\n      return arr1[i];\n    }\n    i++;\n  }\n  while(j < arr2.length){\n    count++;\n    if(count === k){\n      return arr2[j];\n    }\n    j++;\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            i++;\n        }\n        else{\n            j++;\n        }\n        count++;\n        if(count == k){\n            break;\n        }\n    }\n    if(i == arr1.length){\n        return arr2[j];\n    }\n    else{\n        return arr1[i];\n    }\n}\nvar arr1 = [2, 3, 6, 7, 9];\nvar arr2 = [1, 4, 8, 10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmprrn6bsgq.js:32:10)\n    at Object.<anonymous> (/tmp/tmprrn6bsgq.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      i++;\n    } else {\n      j++;\n    }\n    count++;\n    if(count === k){\n      break;\n    }\n  }\n  if(i === arr1.length){\n    return arr2[j];\n  } else {\n    return arr1[i];\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123372,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpiuxfhbyi.js:29:10)\n    at Object.<anonymous> (/tmp/tmpiuxfhbyi.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            if(count == k - 1){\n                return arr1[i];\n            }\n            i++;\n            count++;\n        }\n        else{\n            if(count == k - 1){\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    if(i < arr1.length){\n        return arr1[i + k - count - 1];\n    }\n    else{\n        return arr2[j + k - count - 1];\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            i++;\n        }else{\n            j++;\n        }\n        count++;\n        if(count == k){\n            break;\n        }\n    }\n    if(i < arr1.length){\n        return arr1[i];\n    }else{\n        return arr2[j];\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpuxaqf6or.js:29:10)\n    at Object.<anonymous> (/tmp/tmpuxaqf6or.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0, j = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            if(i + j == k - 1){\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if(i + j == k - 1){\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if(i < arr1.length){\n        return arr1[k - j - 1];\n    }\n    return arr2[k - i - 1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length + arr2.length < k){\n    return null;\n  }\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      count++;\n      if(count === k){\n        return arr1[i];\n      }\n      i++;\n    }else{\n      count++;\n      if(count === k){\n        return arr2[j];\n      }\n      j++;\n    }\n  }\n  while(i < arr1.length){\n    count++;\n    if(count === k){\n      return arr1[i];\n    }\n    i++;\n  }\n  while(j < arr2.length){\n    count++;\n    if(count === k){\n      return arr2[j];\n    }\n    j++;\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    if(arr1.length + arr2.length < k) return -1;\n    var i = 0, j = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            if(i + j + 1 === k) return arr1[i];\n            i++;\n        }else{\n            if(i + j + 1 === k) return arr2[j];\n            j++;\n        }\n    }\n    if(i < arr1.length){\n        return arr1[k - j - 1];\n    }else{\n        return arr2[k - i - 1];\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length == 0) return arr2[k-1];\n  if(arr2.length == 0) return arr1[k-1];\n  if(k == 1) return Math.min(arr1[0], arr2[0]);\n  var i = Math.min(Math.floor(k/2), arr1.length);\n  var j = Math.min(Math.floor(k/2), arr2.length);\n  if(arr1[i-1] > arr2[j-1]){\n    return find_kth(arr1, arr2.slice(j), k-j);\n  }else{\n    return find_kth(arr1.slice(i), arr2, k-i);\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  var result = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      result = arr1[i];\n      i++;\n    }\n    else{\n      result = arr2[j];\n      j++;\n    }\n    count++;\n    if(count === k){\n      return result;\n    }\n  }\n  while(i < arr1.length){\n    result = arr1[i];\n    i++;\n    count++;\n    if(count === k){\n      return result;\n    }\n  }\n  while(j < arr2.length){\n    result = arr2[j];\n    j++;\n    count++;\n    if(count === k){\n      return result;\n    }\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      i++;\n      count++;\n    }\n    else{\n      j++;\n      count++;\n    }\n    if(count == k)\n      break;\n  }\n  if(i == arr1.length)\n    return arr2[j];\n  else\n    return arr1[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpw8wksxlu.js:29:10)\n    at Object.<anonymous> (/tmp/tmpw8wksxlu.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0, j = 0;\n    var result = [];\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            result.push(arr1[i]);\n            i++;\n        } else {\n            result.push(arr2[j]);\n            j++;\n        }\n    }\n    while(i < arr1.length){\n        result.push(arr1[i]);\n        i++;\n    }\n    while(j < arr2.length){\n        result.push(arr2[j]);\n        j++;\n    }\n    return result[k-1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length + arr2.length < k) return -1;\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      count++;\n      if(count === k) return arr1[i];\n      i++;\n    }else{\n      count++;\n      if(count === k) return arr2[j];\n      j++;\n    }\n  }\n  while(i < arr1.length){\n    count++;\n    if(count === k) return arr1[i];\n    i++;\n  }\n  while(j < arr2.length){\n    count++;\n    if(count === k) return arr2[j];\n    j++;\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0, j = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            if(k == 1) return arr1[i];\n            i++;\n        }else{\n            if(k == 1) return arr2[j];\n            j++;\n        }\n        k--;\n    }\n    if(i < arr1.length){\n        return arr1[i + k - 1];\n    }\n    if(j < arr2.length){\n        return arr2[j + k - 1];\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length === 0){\n    return arr2[k-1];\n  }\n  if(arr2.length === 0){\n    return arr1[k-1];\n  }\n  if(k === 1){\n    return Math.min(arr1[0], arr2[0]);\n  }\n  var i = Math.min(Math.floor(k/2), arr1.length);\n  var j = Math.min(k-i, arr2.length);\n  if(arr1[i-1] < arr2[j-1]){\n    return find_kth(arr1.slice(i), arr2, k-i);\n  }\n  else{\n    return find_kth(arr1, arr2.slice(j), k-j);\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length == 0)\n    return arr2[k-1];\n  if(arr2.length == 0)\n    return arr1[k-1];\n  if(k == 1)\n    return Math.min(arr1[0], arr2[0]);\n  var mid1 = Math.min(Math.floor(k/2), arr1.length);\n  var mid2 = Math.min(Math.floor(k/2), arr2.length);\n  if(arr1[mid1-1] < arr2[mid2-1])\n    return find_kth(arr1.slice(mid1), arr2, k-mid1);\n  else\n    return find_kth(arr1, arr2.slice(mid2), k-mid2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    var result = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            result = arr1[i];\n            i++;\n        }\n        else{\n            result = arr2[j];\n            j++;\n        }\n        count++;\n        if(count == k){\n            break;\n        }\n    }\n    if(i == arr1.length){\n        while(count < k){\n            result = arr2[j];\n            j++;\n            count++;\n        }\n    }\n    if(j == arr2.length){\n        while(count < k){\n            result = arr1[i];\n            i++;\n            count++;\n        }\n    }\n    return result;\n}\n\nvar arr1 = [1, 3, 5, 7, 9];\nvar arr2 = [2, 4, 6, 8, 10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      i++;\n    } else {\n      j++;\n    }\n    count++;\n    if(count === k){\n      break;\n    }\n  }\n  if(i === arr1.length){\n    return arr2[j];\n  } else {\n    return arr1[i];\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123372,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpiuxfhbyi.js:29:10)\n    at Object.<anonymous> (/tmp/tmpiuxfhbyi.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      count++;\n      if(count == k){\n        return arr1[i];\n      }\n      i++;\n    }\n    else{\n      count++;\n      if(count == k){\n        return arr2[j];\n      }\n      j++;\n    }\n  }\n  while(i < arr1.length){\n    count++;\n    if(count == k){\n      return arr1[i];\n    }\n    i++;\n  }\n  while(j < arr2.length){\n    count++;\n    if(count == k){\n      return arr2[j];\n    }\n    j++;\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      i++;\n    } else {\n      j++;\n    }\n    count++;\n    if(count == k){\n      break;\n    }\n  }\n  if(i == arr1.length){\n    return arr2[j];\n  } else {\n    return arr1[i];\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123372,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp9e0yf1u6.js:29:10)\n    at Object.<anonymous> (/tmp/tmp9e0yf1u6.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var index1 = 0;\n  var index2 = 0;\n  var result = [];\n  while(index1 < arr1.length && index2 < arr2.length){\n    if(arr1[index1] < arr2[index2]){\n      result.push(arr1[index1]);\n      index1++;\n    } else {\n      result.push(arr2[index2]);\n      index2++;\n    }\n  }\n  if(index1 < arr1.length){\n    result = result.concat(arr1.slice(index1));\n  } else {\n    result = result.concat(arr2.slice(index2));\n  }\n  return result[k-1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    if(arr1.length + arr2.length < k){\n        return null;\n    }\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            count++;\n            if(count === k){\n                return arr1[i];\n            }\n            i++;\n        }else{\n            count++;\n            if(count === k){\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    while(i < arr1.length){\n        count++;\n        if(count === k){\n            return arr1[i];\n        }\n        i++;\n    }\n    while(j < arr2.length){\n        count++;\n        if(count === k){\n            return arr2[j];\n        }\n        j++;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    if(arr1.length + arr2.length < k) return null;\n    var i = 0;\n    var j = 0;\n    while(k > 0){\n        if(arr1[i] < arr2[j]){\n            i++;\n        }else{\n            j++;\n        }\n        k--;\n    }\n    if(arr1[i] < arr2[j]){\n        return arr1[i];\n    }else{\n        return arr2[j];\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp40eq0mou.js:26:10)\n    at Object.<anonymous> (/tmp/tmp40eq0mou.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      i++;\n    }\n    else{\n      j++;\n    }\n    count++;\n    if(count === k){\n      break;\n    }\n  }\n  if(i === arr1.length){\n    return arr2[j];\n  }\n  else{\n    return arr1[i];\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpoj_i7d_3.js:31:10)\n    at Object.<anonymous> (/tmp/tmpoj_i7d_3.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length+arr2.length < k) return -1;\n  var i=0, j=0;\n  while(i<arr1.length && j<arr2.length){\n    if(arr1[i] < arr2[j]){\n      if(i+j+1 == k) return arr1[i];\n      i++;\n    }else{\n      if(i+j+1 == k) return arr2[j];\n      j++;\n    }\n  }\n  if(i<arr1.length){\n    return arr1[i+k-j-1];\n  }else{\n    return arr2[j+k-i-1];\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    if(arr1.length === 0) return arr2[k-1];\n    if(arr2.length === 0) return arr1[k-1];\n    if(k === 1) return Math.min(arr1[0], arr2[0]);\n    var mid1 = Math.min(k/2, arr1.length);\n    var mid2 = Math.min(k/2, arr2.length);\n    if(arr1[mid1-1] < arr2[mid2-1]){\n        return find_kth(arr1.slice(mid1), arr2, k-mid1);\n    }else{\n        return find_kth(arr1, arr2.slice(mid2), k-mid2);\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "/tmp/tmpf911ujyi.js:6\n    var mid1 = Math.min(k/2, arr1.length);\n                    ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min (<anonymous>)\n    at find_kth (/tmp/tmpf911ujyi.js:6:21)\n    at find_kth (/tmp/tmpf911ujyi.js:11:16)\n    at find_kth (/tmp/tmpf911ujyi.js:11:16)\n    at find_kth (/tmp/tmpf911ujyi.js:11:16)\n    at find_kth (/tmp/tmpf911ujyi.js:11:16)\n    at find_kth (/tmp/tmpf911ujyi.js:11:16)\n    at find_kth (/tmp/tmpf911ujyi.js:11:16)\n    at find_kth (/tmp/tmpf911ujyi.js:11:16)\n    at find_kth (/tmp/tmpf911ujyi.js:11:16)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            count++;\n            if(count == k){\n                return arr1[i];\n            }\n            i++;\n        }\n        else{\n            count++;\n            if(count == k){\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    while(i < arr1.length){\n        count++;\n        if(count == k){\n            return arr1[i];\n        }\n        i++;\n    }\n    while(j < arr2.length){\n        count++;\n        if(count == k){\n            return arr2[j];\n        }\n        j++;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length + arr2.length < k) return null;\n  if(arr1.length === 0) return arr2[k-1];\n  if(arr2.length === 0) return arr1[k-1];\n  if(k === 1) return Math.min(arr1[0], arr2[0]);\n  var i = Math.min(Math.floor(k/2), arr1.length);\n  var j = Math.min(k - i, arr2.length);\n  if(arr1[i-1] < arr2[j-1]){\n    return find_kth(arr1.slice(i), arr2, k-i);\n  }else{\n    return find_kth(arr1, arr2.slice(j), k-j);\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(count < k){\n    if(arr1[i] < arr2[j]){\n      i++;\n    }else{\n      j++;\n    }\n    count++;\n  }\n  if(arr1[i] < arr2[j]){\n    return arr1[i];\n  }else{\n    return arr2[j];\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpr90zig3i.js:26:10)\n    at Object.<anonymous> (/tmp/tmpr90zig3i.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0, j = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            if(i + j + 1 == k){\n                return arr1[i];\n            }\n            i++;\n        }else{\n            if(i + j + 1 == k){\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if(i < arr1.length){\n        return arr1[i + k - j - 1];\n    }\n    if(j < arr2.length){\n        return arr2[j + k - i - 1];\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length === 0){\n    return arr2[k-1];\n  }\n  if(arr2.length === 0){\n    return arr1[k-1];\n  }\n  if(k === 1){\n    return Math.min(arr1[0], arr2[0]);\n  }\n  var i = Math.min(Math.floor(k/2), arr1.length);\n  var j = Math.min(k - i, arr2.length);\n  if(arr1[i-1] < arr2[j-1]){\n    return find_kth(arr1.slice(i), arr2, k-i);\n  }\n  else{\n    return find_kth(arr1, arr2.slice(j), k-j);\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            if(count === k-1){\n                return arr1[i];\n            }\n            i++;\n            count++;\n        }else{\n            if(count === k-1){\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    if(i < arr1.length){\n        return arr1[i+k-count-1];\n    }\n    if(j < arr2.length){\n        return arr2[j+k-count-1];\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    var result = [];\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            result.push(arr1[i]);\n            i++;\n        }\n        else{\n            result.push(arr2[j]);\n            j++;\n        }\n    }\n    if(i < arr1.length){\n        for(var x = i; x < arr1.length; x++){\n            result.push(arr1[x]);\n        }\n    }\n    if(j < arr2.length){\n        for(var y = j; y < arr2.length; y++){\n            result.push(arr2[y]);\n        }\n    }\n    return result[k-1];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length == 0) return arr2[k-1];\n  if(arr2.length == 0) return arr1[k-1];\n  if(k == 1) return Math.min(arr1[0], arr2[0]);\n\n  var i = Math.min(Math.floor(k/2), arr1.length);\n  var j = Math.min(k - i, arr2.length);\n\n  if(arr1[i-1] < arr2[j-1]){\n    return find_kth(arr1.slice(i), arr2, k-i);\n  }\n  else{\n    return find_kth(arr1, arr2.slice(j), k-j);\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0, j = 0;\n  var result = [];\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      result.push(arr1[i]);\n      i++;\n    } else {\n      result.push(arr2[j]);\n      j++;\n    }\n  }\n  while(i < arr1.length){\n    result.push(arr1[i]);\n    i++;\n  }\n  while(j < arr2.length){\n    result.push(arr2[j]);\n    j++;\n  }\n  return result[k-1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0, j = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      if(i + j + 1 === k){\n        return arr1[i];\n      }\n      i++;\n    } else {\n      if(i + j + 1 === k){\n        return arr2[j];\n      }\n      j++;\n    }\n  }\n  if(i === arr1.length){\n    return arr2[k - i - 1];\n  }\n  return arr1[k - j - 1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    if(arr1.length + arr2.length < k) return -1;\n    var i = 0;\n    var j = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            if(i + j == k - 1) return arr1[i];\n            i++;\n        }else{\n            if(i + j == k - 1) return arr2[j];\n            j++;\n        }\n    }\n    if(i < arr1.length){\n        return arr1[k - j - 1];\n    }else{\n        return arr2[k - i - 1];\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            i++;\n        }\n        else{\n            j++;\n        }\n        count++;\n        if(count == k){\n            break;\n        }\n    }\n    if(i == arr1.length){\n        return arr2[j];\n    }\n    else{\n        return arr1[i];\n    }\n}\n\nvar arr1 = [2, 3, 6, 7, 9];\nvar arr2 = [1, 4, 8, 10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpxde1yo2d.js:33:10)\n    at Object.<anonymous> (/tmp/tmpxde1yo2d.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length + arr2.length < k){\n    return null;\n  }\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      if(count === k - 1){\n        return arr1[i];\n      }\n      i++;\n    }else{\n      if(count === k - 1){\n        return arr2[j];\n      }\n      j++;\n    }\n    count++;\n  }\n  if(i < arr1.length){\n    return arr1[i + k - count - 1];\n  }\n  if(j < arr2.length){\n    return arr2[j + k - count - 1];\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      i++;\n    }else{\n      j++;\n    }\n    count++;\n    if(count === k){\n      if(arr1[i] < arr2[j]){\n        return arr1[i];\n      }else{\n        return arr2[j];\n      }\n    }\n  }\n  if(i < arr1.length){\n    return arr1[i + k - count - 1];\n  }else{\n    return arr2[j + k - count - 1];\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpci4ip_jd.js:33:10)\n    at Object.<anonymous> (/tmp/tmpci4ip_jd.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length + arr2.length < k) return null;\n  if(arr1.length === 0) return arr2[k-1];\n  if(arr2.length === 0) return arr1[k-1];\n  if(k === 1) return Math.min(arr1[0], arr2[0]);\n  var mid1 = Math.min(Math.floor(k/2), arr1.length);\n  var mid2 = Math.min(Math.floor(k/2), arr2.length);\n  if(arr1[mid1-1] < arr2[mid2-1]){\n    return find_kth(arr1.slice(mid1), arr2, k-mid1);\n  }else{\n    return find_kth(arr1, arr2.slice(mid2), k-mid2);\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length + arr2.length < k) return null;\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      count++;\n      if(count === k) return arr1[i];\n      i++;\n    }else{\n      count++;\n      if(count === k) return arr2[j];\n      j++;\n    }\n  }\n  while(i < arr1.length){\n    count++;\n    if(count === k) return arr1[i];\n    i++;\n  }\n  while(j < arr2.length){\n    count++;\n    if(count === k) return arr2[j];\n    j++;\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    var result = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            result = arr1[i];\n            i++;\n        }\n        else{\n            result = arr2[j];\n            j++;\n        }\n        count++;\n        if(count === k){\n            break;\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    var result = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            result = arr1[i];\n            i++;\n        } else {\n            result = arr2[j];\n            j++;\n        }\n        count++;\n        if(count === k){\n            break;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  var result = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      result = arr1[i];\n      i++;\n    } else {\n      result = arr2[j];\n      j++;\n    }\n    count++;\n    if(count == k){\n      return result;\n    }\n  }\n  while(i < arr1.length){\n    result = arr1[i];\n    i++;\n    count++;\n    if(count == k){\n      return result;\n    }\n  }\n  while(j < arr2.length){\n    result = arr2[j];\n    j++;\n    count++;\n    if(count == k){\n      return result;\n    }\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length == 0) return arr2[k-1];\n  if(arr2.length == 0) return arr1[k-1];\n  if(k == 1) return Math.min(arr1[0], arr2[0]);\n\n  var mid1 = Math.min(parseInt(k/2), arr1.length);\n  var mid2 = k - mid1;\n\n  if(arr1[mid1-1] < arr2[mid2-1]){\n    return find_kth(arr1.slice(mid1), arr2, mid2);\n  }else{\n    return find_kth(arr1, arr2.slice(mid2), mid1);\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length + arr2.length < k){\n    return null;\n  }\n  var i = 0;\n  var j = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      if(i + j + 1 === k){\n        return arr1[i];\n      }\n      i++;\n    } else {\n      if(i + j + 1 === k){\n        return arr2[j];\n      }\n      j++;\n    }\n  }\n  if(i < arr1.length){\n    return arr1[k - j - 1];\n  }\n  if(j < arr2.length){\n    return arr2[k - i - 1];\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  var result = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      result = arr1[i];\n      i++;\n    } else {\n      result = arr2[j];\n      j++;\n    }\n    count++;\n    if(count === k){\n      return result;\n    }\n  }\n  while(i < arr1.length){\n    result = arr1[i];\n    i++;\n    count++;\n    if(count === k){\n      return result;\n    }\n  }\n  while(j < arr2.length){\n    result = arr2[j];\n    j++;\n    count++;\n    if(count === k){\n      return result;\n    }\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0, j = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            if(i + j == k - 1){\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if(i + j == k - 1){\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if(i < arr1.length){\n        return arr1[i + k - j - 1];\n    }\n    if(j < arr2.length){\n        return arr2[j + k - i - 1];\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      count++;\n      if(count === k){\n        return arr1[i];\n      }\n      i++;\n    } else {\n      count++;\n      if(count === k){\n        return arr2[j];\n      }\n      j++;\n    }\n  }\n  while(i < arr1.length){\n    count++;\n    if(count === k){\n      return arr1[i];\n    }\n    i++;\n  }\n  while(j < arr2.length){\n    count++;\n    if(count === k){\n      return arr2[j];\n    }\n    j++;\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    if(arr1.length + arr2.length < k) return -1;\n    if(arr1.length === 0) return arr2[k-1];\n    if(arr2.length === 0) return arr1[k-1];\n    if(k === 1) return Math.min(arr1[0], arr2[0]);\n    var mid1 = Math.min(Math.floor(k/2), arr1.length);\n    var mid2 = Math.min(Math.floor(k/2), arr2.length);\n    if(arr1[mid1-1] < arr2[mid2-1]){\n        return find_kth(arr1.slice(mid1), arr2, k-mid1);\n    }else{\n        return find_kth(arr1, arr2.slice(mid2), k-mid2);\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      i++;\n    }else{\n      j++;\n    }\n    count++;\n    if(count === k){\n      break;\n    }\n  }\n  if(i < arr1.length){\n    return arr1[i];\n  }else{\n    return arr2[j];\n  }\n}\n\nvar arr1 = [2, 3, 6, 7, 9];\nvar arr2 = [1, 4, 8, 10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpj8o4s18k.js:31:10)\n    at Object.<anonymous> (/tmp/tmpj8o4s18k.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    if(arr1.length + arr2.length < k){\n        return -1;\n    }\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            count++;\n            if(count === k){\n                return arr1[i];\n            }\n            i++;\n        }else{\n            count++;\n            if(count === k){\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    while(i < arr1.length){\n        count++;\n        if(count === k){\n            return arr1[i];\n        }\n        i++;\n    }\n    while(j < arr2.length){\n        count++;\n        if(count === k){\n            return arr2[j];\n        }\n        j++;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0, j = 0;\n    var result = [];\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            result.push(arr1[i]);\n            i++;\n        }else{\n            result.push(arr2[j]);\n            j++;\n        }\n    }\n    while(i < arr1.length){\n        result.push(arr1[i]);\n        i++;\n    }\n    while(j < arr2.length){\n        result.push(arr2[j]);\n        j++;\n    }\n    return result[k-1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    var result = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            result = arr1[i];\n            i++;\n        }\n        else{\n            result = arr2[j];\n            j++;\n        }\n        count++;\n        if(count == k){\n            break;\n        }\n    }\n    while(i < arr1.length){\n        result = arr1[i];\n        i++;\n        count++;\n        if(count == k){\n            break;\n        }\n    }\n    while(j < arr2.length){\n        result = arr2[j];\n        j++;\n        count++;\n        if(count == k){\n            break;\n        }\n    }\n    return result;\n}\nvar arr1 = [1, 3, 5, 7, 9];\nvar arr2 = [2, 4, 6, 8, 10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmptz2njls_.js:46:10)\n    at Object.<anonymous> (/tmp/tmptz2njls_.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  var result = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      result = arr1[i];\n      i++;\n    }\n    else{\n      result = arr2[j];\n      j++;\n    }\n    count++;\n    if(count === k){\n      break;\n    }\n  }\n  if(i === arr1.length){\n    while(count !== k){\n      result = arr2[j];\n      j++;\n      count++;\n    }\n  }\n  if(j === arr2.length){\n    while(count !== k){\n      result = arr1[i];\n      i++;\n      count++;\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      i++;\n    }else{\n      j++;\n    }\n    count++;\n    if(count == k){\n      break;\n    }\n  }\n  if(i == arr1.length){\n    return arr2[j];\n  }else{\n    return arr1[i];\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp7pxnufzm.js:29:10)\n    at Object.<anonymous> (/tmp/tmp7pxnufzm.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  var result = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      result = arr1[i];\n      i++;\n    }\n    else{\n      result = arr2[j];\n      j++;\n    }\n    count++;\n    if(count == k){\n      return result;\n    }\n  }\n  while(i < arr1.length){\n    result = arr1[i];\n    i++;\n    count++;\n    if(count == k){\n      return result;\n    }\n  }\n  while(j < arr2.length){\n    result = arr2[j];\n    j++;\n    count++;\n    if(count == k){\n      return result;\n    }\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    if(arr1.length == 0){\n        return arr2[k-1];\n    }\n    if(arr2.length == 0){\n        return arr1[k-1];\n    }\n    if(k == 1){\n        return Math.min(arr1[0], arr2[0]);\n    }\n    var i = Math.min(Math.floor(k/2), arr1.length);\n    var j = Math.min(k - i, arr2.length);\n    if(arr1[i-1] < arr2[j-1]){\n        return find_kth(arr1.slice(i), arr2, k-i);\n    }\n    else{\n        return find_kth(arr1, arr2.slice(j), k-j);\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      i++;\n    } else {\n      j++;\n    }\n    count++;\n    if(count === k){\n      if(arr1[i] < arr2[j]){\n        return arr1[i];\n      } else {\n        return arr2[j];\n      }\n    }\n  }\n  if(i < arr1.length){\n    return arr1[i + k - count - 1];\n  } else {\n    return arr2[j + k - count - 1];\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp7ebrnku4.js:33:10)\n    at Object.<anonymous> (/tmp/tmp7ebrnku4.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length === 0) return arr2[k-1];\n  if(arr2.length === 0) return arr1[k-1];\n  if(k === 1) return Math.min(arr1[0], arr2[0]);\n  var i = Math.min(Math.floor(arr1.length/k), Math.floor(arr2.length/k));\n  if(arr1[i] > arr2[i]){\n    return find_kth(arr1, arr2.slice(i), k-i);\n  }else{\n    return find_kth(arr1.slice(i), arr2, k-i);\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "/tmp/tmpnoez20zf.js:6\n  var i = Math.min(Math.floor(arr1.length/k), Math.floor(arr2.length/k));\n                        ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.floor (<anonymous>)\n    at find_kth (/tmp/tmpnoez20zf.js:6:25)\n    at find_kth (/tmp/tmpnoez20zf.js:8:12)\n    at find_kth (/tmp/tmpnoez20zf.js:8:12)\n    at find_kth (/tmp/tmpnoez20zf.js:8:12)\n    at find_kth (/tmp/tmpnoez20zf.js:8:12)\n    at find_kth (/tmp/tmpnoez20zf.js:8:12)\n    at find_kth (/tmp/tmpnoez20zf.js:8:12)\n    at find_kth (/tmp/tmpnoez20zf.js:8:12)\n    at find_kth (/tmp/tmpnoez20zf.js:8:12)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0;\n    var j = 0;\n    var m = arr1.length;\n    var n = arr2.length;\n    var count = 0;\n    while(i < m && j < n){\n        if(arr1[i] < arr2[j]){\n            i++;\n        }else{\n            j++;\n        }\n        count++;\n        if(count == k){\n            break;\n        }\n    }\n    if(i == m){\n        return arr2[j];\n    }else{\n        return arr1[i];\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpvpl_28mq.js:31:10)\n    at Object.<anonymous> (/tmp/tmpvpl_28mq.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    if(arr1.length + arr2.length < k){\n        return null;\n    }\n    var index1 = 0;\n    var index2 = 0;\n    while(k > 1 && index1 < arr1.length && index2 < arr2.length){\n        if(arr1[index1] < arr2[index2]){\n            index1++;\n        } else {\n            index2++;\n        }\n        k--;\n    }\n    if(index1 == arr1.length){\n        return arr2[index2 + k - 1];\n    }\n    if(index2 == arr2.length){\n        return arr1[index1 + k - 1];\n    }\n    return Math.min(arr1[index1], arr2[index2]);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    if(arr1.length == 0)\n        return arr2[k-1];\n    if(arr2.length == 0)\n        return arr1[k-1];\n    if(k == 1)\n        return Math.min(arr1[0], arr2[0]);\n    var mid1 = Math.min(Math.floor(k/2), arr1.length);\n    var mid2 = Math.min(Math.floor(k/2), arr2.length);\n    if(arr1[mid1-1] < arr2[mid2-1]){\n        return find_kth(arr1.slice(mid1), arr2, k-mid1);\n    }\n    else{\n        return find_kth(arr1, arr2.slice(mid2), k-mid2);\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    if(arr1.length == 0)\n        return arr2[k-1];\n    if(arr2.length == 0)\n        return arr1[k-1];\n    if(k == 1)\n        return Math.min(arr1[0], arr2[0]);\n    var mid1 = Math.min(k/2, arr1.length);\n    var mid2 = Math.min(k/2, arr2.length);\n    if(arr1[mid1-1] < arr2[mid2-1])\n        return find_kth(arr1.slice(mid1), arr2, k-mid1);\n    else\n        return find_kth(arr1, arr2.slice(mid2), k-mid2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "/tmp/tmp7zeitx63.js:9\n    var mid1 = Math.min(k/2, arr1.length);\n                    ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min (<anonymous>)\n    at find_kth (/tmp/tmp7zeitx63.js:9:21)\n    at find_kth (/tmp/tmp7zeitx63.js:14:16)\n    at find_kth (/tmp/tmp7zeitx63.js:14:16)\n    at find_kth (/tmp/tmp7zeitx63.js:14:16)\n    at find_kth (/tmp/tmp7zeitx63.js:14:16)\n    at find_kth (/tmp/tmp7zeitx63.js:14:16)\n    at find_kth (/tmp/tmp7zeitx63.js:14:16)\n    at find_kth (/tmp/tmp7zeitx63.js:14:16)\n    at find_kth (/tmp/tmp7zeitx63.js:14:16)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var len1 = arr1.length;\n  var len2 = arr2.length;\n  if(len1 + len2 < k){\n    return null;\n  }\n  var i = 0;\n  var j = 0;\n  while(i < len1 && j < len2 && i + j < k){\n    if(arr1[i] < arr2[j]){\n      i++;\n    }else{\n      j++;\n    }\n  }\n  if(i + j < k){\n    if(i === len1){\n      return arr2[j + k - i - 1];\n    }else{\n      return arr1[i + k - j - 1];\n    }\n  }\n  if(arr1[i - 1] < arr2[j - 1]){\n    return arr1[i - 1];\n  }else{\n    return arr2[j - 1];\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpbo_y6728.js:36:10)\n    at Object.<anonymous> (/tmp/tmpbo_y6728.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length + arr2.length < k) return -1;\n  if(arr1.length === 0) return arr2[k-1];\n  if(arr2.length === 0) return arr1[k-1];\n  if(k === 1) return Math.min(arr1[0], arr2[0]);\n  var mid1 = Math.min(k/2, arr1.length);\n  var mid2 = Math.min(k/2, arr2.length);\n  if(arr1[mid1-1] < arr2[mid2-1]){\n    return find_kth(arr1.slice(mid1), arr2, k-mid1);\n  }else{\n    return find_kth(arr1, arr2.slice(mid2), k-mid2);\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "/tmp/tmp3cccxg3h.js:7\n  var mid1 = Math.min(k/2, arr1.length);\n                  ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min (<anonymous>)\n    at find_kth (/tmp/tmp3cccxg3h.js:7:19)\n    at find_kth (/tmp/tmp3cccxg3h.js:12:12)\n    at find_kth (/tmp/tmp3cccxg3h.js:12:12)\n    at find_kth (/tmp/tmp3cccxg3h.js:12:12)\n    at find_kth (/tmp/tmp3cccxg3h.js:12:12)\n    at find_kth (/tmp/tmp3cccxg3h.js:12:12)\n    at find_kth (/tmp/tmp3cccxg3h.js:12:12)\n    at find_kth (/tmp/tmp3cccxg3h.js:12:12)\n    at find_kth (/tmp/tmp3cccxg3h.js:12:12)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      count++;\n      if(count == k){\n        return arr1[i];\n      }\n      i++;\n    }else{\n      count++;\n      if(count == k){\n        return arr2[j];\n      }\n      j++;\n    }\n  }\n  while(i < arr1.length){\n    count++;\n    if(count == k){\n      return arr1[i];\n    }\n    i++;\n  }\n  while(j < arr2.length){\n    count++;\n    if(count == k){\n      return arr2[j];\n    }\n    j++;\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      count++;\n      if(count == k){\n        return arr1[i];\n      }\n      i++;\n    }\n    else{\n      count++;\n      if(count == k){\n        return arr2[j];\n      }\n      j++;\n    }\n  }\n  while(i < arr1.length){\n    count++;\n    if(count == k){\n      return arr1[i];\n    }\n    i++;\n  }\n  while(j < arr2.length){\n    count++;\n    if(count == k){\n      return arr2[j];\n    }\n    j++;\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length == 0) return arr2[k-1];\n  if(arr2.length == 0) return arr1[k-1];\n  if(k == 1) return Math.min(arr1[0], arr2[0]);\n\n  var mid1 = Math.floor(arr1.length/2);\n  var mid2 = Math.floor(arr2.length/2);\n  if(arr1[mid1] <= arr2[mid2]){\n    if(k <= (mid1 + mid2 + 1))\n      return find_kth(arr1.slice(0, mid1+1), arr2, k);\n    else\n      return find_kth(arr1, arr2.slice(mid2+1), k-mid2-1);\n  }\n  else{\n    if(k <= (mid1 + mid2 + 1))\n      return find_kth(arr1, arr2.slice(0, mid2+1), k);\n    else\n      return find_kth(arr1.slice(mid1+1), arr2, k-mid1-1);\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "/tmp/tmpbg846s1s.js:7\n  var mid1 = Math.floor(arr1.length/2);\n                  ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.floor (<anonymous>)\n    at find_kth (/tmp/tmpbg846s1s.js:7:19)\n    at find_kth (/tmp/tmpbg846s1s.js:11:14)\n    at find_kth (/tmp/tmpbg846s1s.js:11:14)\n    at find_kth (/tmp/tmpbg846s1s.js:11:14)\n    at find_kth (/tmp/tmpbg846s1s.js:11:14)\n    at find_kth (/tmp/tmpbg846s1s.js:11:14)\n    at find_kth (/tmp/tmpbg846s1s.js:11:14)\n    at find_kth (/tmp/tmpbg846s1s.js:11:14)\n    at find_kth (/tmp/tmpbg846s1s.js:11:14)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      if(count == k-1){\n        return arr1[i];\n      }\n      i++;\n      count++;\n    } else {\n      if(count == k-1){\n        return arr2[j];\n      }\n      j++;\n      count++;\n    }\n  }\n  if(i < arr1.length){\n    return arr1[i+k-count-1];\n  }\n  if(j < arr2.length){\n    return arr2[j+k-count-1];\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  if(arr1.length == 0) return arr2[k-1];\n  if(arr2.length == 0) return arr1[k-1];\n  var mid1 = Math.floor(arr1.length/2);\n  var mid2 = Math.floor(arr2.length/2);\n  if(mid1+mid2<k-1){\n    if(arr1[mid1]>arr2[mid2]){\n      return find_kth(arr1, arr2.slice(mid2+1), k-mid2-1);\n    }else{\n      return find_kth(arr1.slice(mid1+1), arr2, k-mid1-1);\n    }\n  }else{\n    if(arr1[mid1]>arr2[mid2]){\n      return find_kth(arr1.slice(0,mid1), arr2, k);\n    }else{\n      return find_kth(arr1, arr2.slice(0,mid2), k);\n    }\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n    var i = 0, j = 0;\n    while(i < arr1.length && j < arr2.length){\n        if(arr1[i] < arr2[j]){\n            if(i + j + 1 === k){\n                return arr1[i];\n            }\n            i++;\n        }else{\n            if(i + j + 1 === k){\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if(i < arr1.length){\n        return arr1[i + k - j - 1];\n    }\n    if(j < arr2.length){\n        return arr2[j + k - i - 1];\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find kth element from the given two sorted arrays.\nfunction find_kth(arr1, arr2, k){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < arr1.length && j < arr2.length){\n    if(arr1[i] < arr2[j]){\n      i++;\n    }\n    else{\n      j++;\n    }\n    count++;\n    if(count == k){\n      if(arr1[i] < arr2[j]){\n        return arr1[i];\n      }\n      else{\n        return arr2[j];\n      }\n    }\n  }\n  if(i < arr1.length){\n    return arr1[i + k - count - 1];\n  }\n  else{\n    return arr2[j + k - count - 1];\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_kth;\n  assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);\n  assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);\n  assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);\n}\n\ntest();",
      "timestamp": 1666123372,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmplr8abi5y.js:36:10)\n    at Object.<anonymous> (/tmp/tmplr8abi5y.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    }
  ]
}