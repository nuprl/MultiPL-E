{
  "name": "mbpp_447_cube_nums",
  "language": "js",
  "prompt": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_447_cube_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube;\n}\nvar numbers = [1,2,3,4,5];\nvar cube = cube_nums(numbers);",
    "    var cube_nums = nums.map(function(num){\n        return num * num * num;\n    });\n    return cube_nums;\n}",
    "    var cube_nums = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube_nums;\n}",
    "    var cube_nums = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube_nums;\n}",
    "    var cube_nums = nums.map(function(num){\n        return num * num * num;\n    });\n    return cube_nums;\n}",
    "    return nums.map(function(num){\n        return num*num*num;\n    });\n}",
    "    var cubes = [];\n    for(var i=0; i<nums.length; i++){\n        cubes.push(nums[i]*nums[i]*nums[i]);\n    }\n    return cubes;\n}",
    "    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube;\n}",
    "    var cube_nums = [];\n    for(var i=0;i<nums.length;i++){\n        cube_nums.push(nums[i]*nums[i]*nums[i]);\n    }\n    return cube_nums;\n}",
    "    var cubes = nums.map(function(num){\n        return num ** 3;\n    });\n    return cubes;\n}",
    "    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube;\n}",
    "    var cubes = nums.map(function(num){\n        return num*num*num;\n    });\n    return cubes;\n}\nvar nums = [1,2,3,4,5];",
    "    var cube = nums.map(function(num){\n        return num * num * num;\n    });\n    return cube;\n}",
    "    var cubes = [];\n    for(var i = 0; i < nums.length; i++){\n        cubes.push(nums[i] * nums[i] * nums[i]);\n    }\n    return cubes;\n}",
    "    return nums.map(function(num){\n        return Math.pow(num, 3);\n    });\n}",
    "    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube;\n}",
    "    var cube_array = [];\n    for(var i=0;i<nums.length;i++){\n        cube_array.push(nums[i]*nums[i]*nums[i]);\n    }\n    return cube_array;\n}",
    "    var cube_nums = nums.map(function(num){\n        return num * num * num;\n    });\n    return cube_nums;\n}",
    "    var cube_list = [];\n    for(var i=0;i<nums.length;i++){\n        cube_list.push(nums[i]**3);\n    }\n    return cube_list;\n}",
    "    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube;\n}\nvar result = cube_nums([1,2,3,4,5]);"
  ]
}