{
  "name": "mbpp_391_convert_list_dictionary",
  "language": "js",
  "prompt": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_391_convert_list_dictionary.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for (var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpau_zrvse.js:15:10)\n    at Object.<anonymous> (/tmp/tmpau_zrvse.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i=0; i<l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nvar l1 = ['a', 'b', 'c', 'd'];\nvar l2 = [1, 2, 3, 4];\nvar l3 = [5, 6, 7, 8];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpkvcbevyp.js:18:10)\n    at Object.<anonymous> (/tmp/tmpkvcbevyp.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = {};\n        d[l1[i]][l2[i]] = l3[i];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: {\n    'Adina Park': 85\n  },\n  S002: {\n    'Leyton Marsh': 98\n  },\n  S003: {\n    'Duncan Boyle': 89\n  },\n  S004: {\n    'Saim Richards': 92\n  }\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpa9gt2g26.js:16:10)\n    at Object.<anonymous> (/tmp/tmpa9gt2g26.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: { 'Adina Park': 85 },\n    S002: { 'Leyton Marsh': 98 },\n    S003: { 'Duncan Boyle': 89 },\n    S004: { 'Saim Richards': 92 }\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for (var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpau_zrvse.js:15:10)\n    at Object.<anonymous> (/tmp/tmpau_zrvse.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpddv0vpix.js:14:10)\n    at Object.<anonymous> (/tmp/tmpddv0vpix.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i = 0; i < l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpp6sc7rik.js:15:10)\n    at Object.<anonymous> (/tmp/tmpp6sc7rik.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpwse6uz0u.js:15:10)\n    at Object.<anonymous> (/tmp/tmpwse6uz0u.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i=0; i<l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpv249neli.js:14:10)\n    at Object.<anonymous> (/tmp/tmpv249neli.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nvar l1 = ['a', 'b', 'c'];\nvar l2 = [1, 2, 3];\nvar l3 = [4, 5, 6];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpyz15rtcx.js:18:10)\n    at Object.<anonymous> (/tmp/tmpyz15rtcx.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var l1_dict = {};\n    var l2_dict = {};\n    var l3_dict = {};\n    var l1_l2_dict = {};\n    var l1_l2_l3_dict = {};\n    for (var i = 0; i < l1.length; i++){\n        l1_dict[l1[i]] = l2[i];\n    }\n    for (var i = 0; i < l2.length; i++){\n        l2_dict[l2[i]] = l3[i];\n    }\n    for (var i = 0; i < l3.length; i++){\n        l3_dict[l3[i]] = l1[i];\n    }\n    l1_l2_dict[l1] = l2_dict;\n    l1_l2_l3_dict[l1_l2_dict] = l3_dict;\n    return l1_l2_l3_dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  '[object Object]': {\n    '85': 'S001',\n    '89': 'S003',\n    '92': 'S004',\n    '98': 'S002'\n  }\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpr8nxpt4e.js:26:10)\n    at Object.<anonymous> (/tmp/tmpr8nxpt4e.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    '[object Object]': { '85': 'S001', '89': 'S003', '92': 'S004', '98': 'S002' }\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpom_30h84.js:15:10)\n    at Object.<anonymous> (/tmp/tmpom_30h84.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpddv0vpix.js:14:10)\n    at Object.<anonymous> (/tmp/tmpddv0vpix.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for (var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpau_zrvse.js:15:10)\n    at Object.<anonymous> (/tmp/tmpau_zrvse.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpwse6uz0u.js:15:10)\n    at Object.<anonymous> (/tmp/tmpwse6uz0u.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for (var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpau_zrvse.js:15:10)\n    at Object.<anonymous> (/tmp/tmpau_zrvse.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for (var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpau_zrvse.js:15:10)\n    at Object.<anonymous> (/tmp/tmpau_zrvse.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i=0; i<l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\n\nvar l1 = ['a', 'b', 'c'];\nvar l2 = [1, 2, 3];\nvar l3 = [4, 5, 6];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp3lzfu2fu.js:19:10)\n    at Object.<anonymous> (/tmp/tmp3lzfu2fu.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for (var i=0; i<l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpk3ubazvw.js:15:10)\n    at Object.<anonymous> (/tmp/tmpk3ubazvw.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for (var i = 0; i < l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpkax1lupe.js:14:10)\n    at Object.<anonymous> (/tmp/tmpkax1lupe.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nvar l1 = [\"a\", \"b\", \"c\"];\nvar l2 = [1, 2, 3];\nvar l3 = [4, 5, 6];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpf55nlb2n.js:16:10)\n    at Object.<anonymous> (/tmp/tmpf55nlb2n.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for (var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpau_zrvse.js:15:10)\n    at Object.<anonymous> (/tmp/tmpau_zrvse.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i=0; i<l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpv249neli.js:14:10)\n    at Object.<anonymous> (/tmp/tmpv249neli.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i = 0; i < l1.length; i++){\n        dict[l1[i]] = {};\n        for(var j = 0; j < l2.length; j++){\n            dict[l1[i]][l2[j]] = l3[i][j];\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: {\n    'Adina Park': undefined,\n    'Duncan Boyle': undefined,\n    'Leyton Marsh': undefined,\n    'Saim Richards': undefined\n  },\n  S002: {\n    'Adina Park': undefined,\n    'Duncan Boyle': undefined,\n    'Leyton Marsh': undefined,\n    'Saim Richards': undefined\n  },\n  S003: {\n    'Adina Park': undefined,\n    'Duncan Boyle': undefined,\n    'Leyton Marsh': undefined,\n    'Saim Richards': undefined\n  },\n  S004: {\n    'Adina Park': undefined,\n    'Duncan Boyle': undefined,\n    'Leyton Marsh': undefi...\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpd3ublzxr.js:18:10)\n    at Object.<anonymous> (/tmp/tmpd3ublzxr.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: {\n      'Adina Park': undefined,\n      'Leyton Marsh': undefined,\n      'Duncan Boyle': undefined,\n      'Saim Richards': undefined\n    },\n    S002: {\n      'Adina Park': undefined,\n      'Leyton Marsh': undefined,\n      'Duncan Boyle': undefined,\n      'Saim Richards': undefined\n    },\n    S003: {\n      'Adina Park': undefined,\n      'Leyton Marsh': undefined,\n      'Duncan Boyle': undefined,\n      'Saim Richards': undefined\n    },\n    S004: {\n      'Adina Park': undefined,\n      'Leyton Marsh': undefined,\n      'Duncan Boyle': undefined,\n      'Saim Richards': undefined\n    }\n  },\n  expected",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i=0; i<l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5b6khfv.js:14:10)\n    at Object.<anonymous> (/tmp/tmpn5b6khfv.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for (var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpau_zrvse.js:15:10)\n    at Object.<anonymous> (/tmp/tmpau_zrvse.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\nvar l1 = [\"a\", \"b\", \"c\"];\nvar l2 = [1, 2, 3];\nvar l3 = [4, 5, 6];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpsa35c1cj.js:17:10)\n    at Object.<anonymous> (/tmp/tmpsa35c1cj.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nvar l1 = [\"a\", \"b\", \"c\"];\nvar l2 = [1, 2, 3];\nvar l3 = [4, 5, 6];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp45y2r1x4.js:18:10)\n    at Object.<anonymous> (/tmp/tmp45y2r1x4.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i=0; i<l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\n\nvar l1 = ['a', 'b', 'c'];\nvar l2 = [1, 2, 3];\nvar l3 = [4, 5, 6];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp3lzfu2fu.js:19:10)\n    at Object.<anonymous> (/tmp/tmp3lzfu2fu.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for (var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpau_zrvse.js:15:10)\n    at Object.<anonymous> (/tmp/tmpau_zrvse.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpwse6uz0u.js:15:10)\n    at Object.<anonymous> (/tmp/tmpwse6uz0u.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i = 0; i < l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpgvtpcqrh.js:14:10)\n    at Object.<anonymous> (/tmp/tmpgvtpcqrh.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nvar l1 = ['a', 'b', 'c'];\nvar l2 = [1, 2, 3];\nvar l3 = [4, 5, 6];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp1589_2sr.js:19:10)\n    at Object.<anonymous> (/tmp/tmp1589_2sr.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    var i = 0;\n    while(i < l1.length){\n        d[l1[i]] = [l2[i], l3[i]];\n        i++;\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpozvc6022.js:17:10)\n    at Object.<anonymous> (/tmp/tmpozvc6022.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpddv0vpix.js:14:10)\n    at Object.<anonymous> (/tmp/tmpddv0vpix.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for (var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpau_zrvse.js:15:10)\n    at Object.<anonymous> (/tmp/tmpau_zrvse.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpddv0vpix.js:14:10)\n    at Object.<anonymous> (/tmp/tmpddv0vpix.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i=0; i<l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpm_jky7fl.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm_jky7fl.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i = 0; i < l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpp6sc7rik.js:15:10)\n    at Object.<anonymous> (/tmp/tmpp6sc7rik.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i = 0; i < l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\n\nvar l1 = ['a', 'b', 'c'];\nvar l2 = [1, 2, 3];\nvar l3 = [4, 5, 6];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp81_wm0ye.js:19:10)\n    at Object.<anonymous> (/tmp/tmp81_wm0ye.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i=0; i<l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nvar l1 = ['a', 'b', 'c'];\nvar l2 = [1, 2, 3];\nvar l3 = [4, 5, 6];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpqbh8ygwe.js:19:10)\n    at Object.<anonymous> (/tmp/tmpqbh8ygwe.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i=0; i<l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpv249neli.js:14:10)\n    at Object.<anonymous> (/tmp/tmpv249neli.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i = 0; i < l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpgvtpcqrh.js:14:10)\n    at Object.<anonymous> (/tmp/tmpgvtpcqrh.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i=0; i<l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\n\nvar l1 = ['a', 'b', 'c'];\nvar l2 = [1, 2, 3];\nvar l3 = [4, 5, 6];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpd896nsdn.js:18:10)\n    at Object.<anonymous> (/tmp/tmpd896nsdn.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d1 = {};\n    var d2 = {};\n    var d3 = {};\n    var d4 = {};\n    var d5 = {};\n    var d6 = {};\n    var d7 = {};\n    var d8 = {};\n    var d9 = {};\n    var d10 = {};\n    var d11 = {};\n    var d12 = {};\n    var d13 = {};\n    var d14 = {};\n    var d15 = {};\n    var d16 = {};\n    var d17 = {};\n    var d18 = {};\n    var d19 = {};\n    var d20 = {};\n    var d21 = {};\n    var d22 = {};\n    var d23 = {};\n    var d24 = {};\n    var d25 = {};\n    var d26 = {};\n    var d27 = {};\n    var d28 = {};\n    var d29 = {};\n    var d30 = {};\n    var d31 = {};\n    var d32 = {};\n    var d33 = {};\n    var d34 = {};\n    var d35 = {};\n    var d36 = {};\n    var d37 = {};\n    var d38 = {};\n    var d39 = {};\n    var d40 = {};\n    var d41 = {};\n    var d42 = {};\n    var d43 = {};\n    var d44 = {};\n    var d45 = {};\n    var d46 = {};\n    var d47 = {};\n    var d48 = {};\n    var d49 = {};\n    var d50 = {};\n    var d51 = {};\n    var d52 = {};\n    var d53 = {};\n    var d54 = {};\n    var d55 = {};\n    var d56 = {};\n    var d57 = {};\n    var d58 = {};\n    var d59 = {};\n    var d60 = {};\n    var d61 = {};\n    var d62 = {};\n    var d63 = {};\n    var d64 = {};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "/tmp/tmpdu8894sv.js:77\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = {};\n        d[l1[i]][l2[i]] = l3[i];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: {\n    'Adina Park': 85\n  },\n  S002: {\n    'Leyton Marsh': 98\n  },\n  S003: {\n    'Duncan Boyle': 89\n  },\n  S004: {\n    'Saim Richards': 92\n  }\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpa9gt2g26.js:16:10)\n    at Object.<anonymous> (/tmp/tmpa9gt2g26.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: { 'Adina Park': 85 },\n    S002: { 'Leyton Marsh': 98 },\n    S003: { 'Duncan Boyle': 89 },\n    S004: { 'Saim Richards': 92 }\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpwse6uz0u.js:15:10)\n    at Object.<anonymous> (/tmp/tmpwse6uz0u.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpwse6uz0u.js:15:10)\n    at Object.<anonymous> (/tmp/tmpwse6uz0u.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpwse6uz0u.js:15:10)\n    at Object.<anonymous> (/tmp/tmpwse6uz0u.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for (var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpau_zrvse.js:15:10)\n    at Object.<anonymous> (/tmp/tmpau_zrvse.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for (var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpau_zrvse.js:15:10)\n    at Object.<anonymous> (/tmp/tmpau_zrvse.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for (var i = 0; i < l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpda6sw4tu.js:15:10)\n    at Object.<anonymous> (/tmp/tmpda6sw4tu.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for (var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpau_zrvse.js:15:10)\n    at Object.<anonymous> (/tmp/tmpau_zrvse.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nvar l1 = [\"a\", \"b\", \"c\"];\nvar l2 = [1, 2, 3];\nvar l3 = [4, 5, 6];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp45y2r1x4.js:18:10)\n    at Object.<anonymous> (/tmp/tmp45y2r1x4.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i=0; i<l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nvar l1 = ['a', 'b', 'c'];\nvar l2 = [1, 2, 3];\nvar l3 = [4, 5, 6];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp2323xlm5.js:18:10)\n    at Object.<anonymous> (/tmp/tmp2323xlm5.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i = 0; i < l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpp6sc7rik.js:15:10)\n    at Object.<anonymous> (/tmp/tmpp6sc7rik.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpom_30h84.js:15:10)\n    at Object.<anonymous> (/tmp/tmpom_30h84.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = {};\n        d[l1[i]][l2[i]] = l3[i];\n    }\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: {\n    'Adina Park': 85\n  },\n  S002: {\n    'Leyton Marsh': 98\n  },\n  S003: {\n    'Duncan Boyle': 89\n  },\n  S004: {\n    'Saim Richards': 92\n  }\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpaiy_ls1c.js:15:10)\n    at Object.<anonymous> (/tmp/tmpaiy_ls1c.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: { 'Adina Park': 85 },\n    S002: { 'Leyton Marsh': 98 },\n    S003: { 'Duncan Boyle': 89 },\n    S004: { 'Saim Richards': 92 }\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmphnm094ct.js:14:10)\n    at Object.<anonymous> (/tmp/tmphnm094ct.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i = 0; i < l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpgvtpcqrh.js:14:10)\n    at Object.<anonymous> (/tmp/tmpgvtpcqrh.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {}\n    for (var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]]\n    }\n    return d\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpsz_bboh5.js:15:10)\n    at Object.<anonymous> (/tmp/tmpsz_bboh5.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpwse6uz0u.js:15:10)\n    at Object.<anonymous> (/tmp/tmpwse6uz0u.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpddv0vpix.js:14:10)\n    at Object.<anonymous> (/tmp/tmpddv0vpix.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = {};\n        d[l1[i]][l2[i]] = l3[i];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: {\n    'Adina Park': 85\n  },\n  S002: {\n    'Leyton Marsh': 98\n  },\n  S003: {\n    'Duncan Boyle': 89\n  },\n  S004: {\n    'Saim Richards': 92\n  }\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpa9gt2g26.js:16:10)\n    at Object.<anonymous> (/tmp/tmpa9gt2g26.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: { 'Adina Park': 85 },\n    S002: { 'Leyton Marsh': 98 },\n    S003: { 'Duncan Boyle': 89 },\n    S004: { 'Saim Richards': 92 }\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i=0; i<arguments.length; i++){\n        d[i] = arguments[i];\n    }\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  '0': [\n    'S001',\n    'S002',\n    'S003',\n    'S004'\n  ],\n  '1': [\n    'Adina Park',\n    'Leyton Marsh',\n    'Duncan Boyle',\n    'Saim Richards'\n  ],\n  '2': [\n    85,\n    98,\n    89,\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpdgoxl4yd.js:14:10)\n    at Object.<anonymous> (/tmp/tmpdgoxl4yd.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    '0': [ 'S001', 'S002', 'S003', 'S004' ],\n    '1': [ 'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards' ],\n    '2': [ 85, 98, 89, 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i=0; i<l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\n\nvar l1 = ['a', 'b', 'c', 'd'];\nvar l2 = [1, 2, 3, 4];\nvar l3 = [5, 6, 7, 8];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpfowesetg.js:19:10)\n    at Object.<anonymous> (/tmp/tmpfowesetg.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i=0; i<l1.length; i++){\n        d[l1[i]] = {};\n        for(var j=0; j<l2.length; j++){\n            d[l1[i]][l2[j]] = l3[i][j];\n        }\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: {\n    'Adina Park': undefined,\n    'Duncan Boyle': undefined,\n    'Leyton Marsh': undefined,\n    'Saim Richards': undefined\n  },\n  S002: {\n    'Adina Park': undefined,\n    'Duncan Boyle': undefined,\n    'Leyton Marsh': undefined,\n    'Saim Richards': undefined\n  },\n  S003: {\n    'Adina Park': undefined,\n    'Duncan Boyle': undefined,\n    'Leyton Marsh': undefined,\n    'Saim Richards': undefined\n  },\n  S004: {\n    'Adina Park': undefined,\n    'Duncan Boyle': undefined,\n    'Leyton Marsh': undefi...\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp4h_vw7f6.js:18:10)\n    at Object.<anonymous> (/tmp/tmp4h_vw7f6.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: {\n      'Adina Park': undefined,\n      'Leyton Marsh': undefined,\n      'Duncan Boyle': undefined,\n      'Saim Richards': undefined\n    },\n    S002: {\n      'Adina Park': undefined,\n      'Leyton Marsh': undefined,\n      'Duncan Boyle': undefined,\n      'Saim Richards': undefined\n    },\n    S003: {\n      'Adina Park': undefined,\n      'Leyton Marsh': undefined,\n      'Duncan Boyle': undefined,\n      'Saim Richards': undefined\n    },\n    S004: {\n      'Adina Park': undefined,\n      'Leyton Marsh': undefined,\n      'Duncan Boyle': undefined,\n      'Saim Richards': undefined\n    }\n  },\n  expected",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpwse6uz0u.js:15:10)\n    at Object.<anonymous> (/tmp/tmpwse6uz0u.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpddv0vpix.js:14:10)\n    at Object.<anonymous> (/tmp/tmpddv0vpix.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i = 0; i < l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpp6sc7rik.js:15:10)\n    at Object.<anonymous> (/tmp/tmpp6sc7rik.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = {};\n        for(var j = 0; j < l2.length; j++){\n            d[l1[i]][l2[j]] = l3[i][j];\n        }\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: {\n    'Adina Park': undefined,\n    'Duncan Boyle': undefined,\n    'Leyton Marsh': undefined,\n    'Saim Richards': undefined\n  },\n  S002: {\n    'Adina Park': undefined,\n    'Duncan Boyle': undefined,\n    'Leyton Marsh': undefined,\n    'Saim Richards': undefined\n  },\n  S003: {\n    'Adina Park': undefined,\n    'Duncan Boyle': undefined,\n    'Leyton Marsh': undefined,\n    'Saim Richards': undefined\n  },\n  S004: {\n    'Adina Park': undefined,\n    'Duncan Boyle': undefined,\n    'Leyton Marsh': undefi...\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpxal0oe8k.js:18:10)\n    at Object.<anonymous> (/tmp/tmpxal0oe8k.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: {\n      'Adina Park': undefined,\n      'Leyton Marsh': undefined,\n      'Duncan Boyle': undefined,\n      'Saim Richards': undefined\n    },\n    S002: {\n      'Adina Park': undefined,\n      'Leyton Marsh': undefined,\n      'Duncan Boyle': undefined,\n      'Saim Richards': undefined\n    },\n    S003: {\n      'Adina Park': undefined,\n      'Leyton Marsh': undefined,\n      'Duncan Boyle': undefined,\n      'Saim Richards': undefined\n    },\n    S004: {\n      'Adina Park': undefined,\n      'Leyton Marsh': undefined,\n      'Duncan Boyle': undefined,\n      'Saim Richards': undefined\n    }\n  },\n  expected",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpwse6uz0u.js:15:10)\n    at Object.<anonymous> (/tmp/tmpwse6uz0u.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i=0; i<l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5b6khfv.js:14:10)\n    at Object.<anonymous> (/tmp/tmpn5b6khfv.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i = 0; i < l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpp6sc7rik.js:15:10)\n    at Object.<anonymous> (/tmp/tmpp6sc7rik.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d1 = {};\n    for(var i = 0; i < l1.length; i++){\n        d1[l1[i]] = l2[i];\n    }\n    var d2 = {};\n    for(var i = 0; i < l3.length; i++){\n        d2[l3[i]] = l4[i];\n    }\n    var d3 = {};\n    d3[\"d1\"] = d1;\n    d3[\"d2\"] = d2;\n    return d3;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "/tmp/tmpqduhnu29.js:9\n        d2[l3[i]] = l4[i];\n                    ^\n\nReferenceError: l4 is not defined\n    at convert_list_dictionary (/tmp/tmpqduhnu29.js:9:21)\n    at test (/tmp/tmpqduhnu29.js:22:20)\n    at Object.<anonymous> (/tmp/tmpqduhnu29.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "ReferenceError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmphnm094ct.js:14:10)\n    at Object.<anonymous> (/tmp/tmphnm094ct.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i = 0; i < l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpp6sc7rik.js:15:10)\n    at Object.<anonymous> (/tmp/tmpp6sc7rik.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i=0; i<l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmplrkaz1_g.js:15:10)\n    at Object.<anonymous> (/tmp/tmplrkaz1_g.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i = 0; i < l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpp6sc7rik.js:15:10)\n    at Object.<anonymous> (/tmp/tmpp6sc7rik.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for (var i = 0; i < l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpda6sw4tu.js:15:10)\n    at Object.<anonymous> (/tmp/tmpda6sw4tu.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpwse6uz0u.js:15:10)\n    at Object.<anonymous> (/tmp/tmpwse6uz0u.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for (var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpau_zrvse.js:15:10)\n    at Object.<anonymous> (/tmp/tmpau_zrvse.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpwse6uz0u.js:15:10)\n    at Object.<anonymous> (/tmp/tmpwse6uz0u.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpwse6uz0u.js:15:10)\n    at Object.<anonymous> (/tmp/tmpwse6uz0u.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i = 0; i < l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpp6sc7rik.js:15:10)\n    at Object.<anonymous> (/tmp/tmpp6sc7rik.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i=0; i<l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5b6khfv.js:14:10)\n    at Object.<anonymous> (/tmp/tmpn5b6khfv.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpwse6uz0u.js:15:10)\n    at Object.<anonymous> (/tmp/tmpwse6uz0u.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for (var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpau_zrvse.js:15:10)\n    at Object.<anonymous> (/tmp/tmpau_zrvse.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i=0; i<l1.length; i++){\n        dict[l1[i]] = {};\n        dict[l1[i]][l2[i]] = l3[i];\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: {\n    'Adina Park': 85\n  },\n  S002: {\n    'Leyton Marsh': 98\n  },\n  S003: {\n    'Duncan Boyle': 89\n  },\n  S004: {\n    'Saim Richards': 92\n  }\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmphlnudnep.js:16:10)\n    at Object.<anonymous> (/tmp/tmphlnudnep.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: { 'Adina Park': 85 },\n    S002: { 'Leyton Marsh': 98 },\n    S003: { 'Duncan Boyle': 89 },\n    S004: { 'Saim Richards': 92 }\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d1 = {};\n    for (var i = 0; i < l1.length; i++){\n        d1[l1[i]] = l2[i];\n    }\n    var d2 = {};\n    for (var i = 0; i < l3.length; i++){\n        d2[l3[i]] = l2[i];\n    }\n    var d3 = {};\n    d3[l1[0]] = d1;\n    d3[l1[1]] = d2;\n    return d3;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: {\n    S001: 'Adina Park',\n    S002: 'Leyton Marsh',\n    S003: 'Duncan Boyle',\n    S004: 'Saim Richards'\n  },\n  S002: {\n    '85': 'Adina Park',\n    '89': 'Duncan Boyle',\n    '92': 'Saim Richards',\n    '98': 'Leyton Marsh'\n  }\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpzihkuo3h.js:22:10)\n    at Object.<anonymous> (/tmp/tmpzihkuo3h.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: {\n      S001: 'Adina Park',\n      S002: 'Leyton Marsh',\n      S003: 'Duncan Boyle',\n      S004: 'Saim Richards'\n    },\n    S002: {\n      '85': 'Adina Park',\n      '89': 'Duncan Boyle',\n      '92': 'Saim Richards',\n      '98': 'Leyton Marsh'\n    }\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpwse6uz0u.js:15:10)\n    at Object.<anonymous> (/tmp/tmpwse6uz0u.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for (var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpau_zrvse.js:15:10)\n    at Object.<anonymous> (/tmp/tmpau_zrvse.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i=0; i<l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmplrkaz1_g.js:15:10)\n    at Object.<anonymous> (/tmp/tmplrkaz1_g.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for (var i = 0; i < l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpkax1lupe.js:14:10)\n    at Object.<anonymous> (/tmp/tmpkax1lupe.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i = 0; i < l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\n\nvar l1 = ['a', 'b', 'c', 'd'];\nvar l2 = [1, 2, 3, 4];\nvar l3 = [5, 6, 7, 8];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpsmfpvjv6.js:18:10)\n    at Object.<anonymous> (/tmp/tmpsmfpvjv6.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i = 0; i < l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpp6sc7rik.js:15:10)\n    at Object.<anonymous> (/tmp/tmpp6sc7rik.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i=0; i<l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpm_jky7fl.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm_jky7fl.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpwse6uz0u.js:15:10)\n    at Object.<anonymous> (/tmp/tmpwse6uz0u.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpwse6uz0u.js:15:10)\n    at Object.<anonymous> (/tmp/tmpwse6uz0u.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpwse6uz0u.js:15:10)\n    at Object.<anonymous> (/tmp/tmpwse6uz0u.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i=0; i<l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nvar l1 = ['a', 'b', 'c'];\nvar l2 = [1, 2, 3];\nvar l3 = [4, 5, 6];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpqbh8ygwe.js:19:10)\n    at Object.<anonymous> (/tmp/tmpqbh8ygwe.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpwse6uz0u.js:15:10)\n    at Object.<anonymous> (/tmp/tmpwse6uz0u.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpwse6uz0u.js:15:10)\n    at Object.<anonymous> (/tmp/tmpwse6uz0u.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nvar l1 = ['a', 'b', 'c'];\nvar l2 = [1, 2, 3];\nvar l3 = [4, 5, 6];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp1589_2sr.js:19:10)\n    at Object.<anonymous> (/tmp/tmp1589_2sr.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for (var i = 0; i < l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpda6sw4tu.js:15:10)\n    at Object.<anonymous> (/tmp/tmpda6sw4tu.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i = 0; i < l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpgvtpcqrh.js:14:10)\n    at Object.<anonymous> (/tmp/tmpgvtpcqrh.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    d[l1[0]] = l1[1];\n    d[l2[0]] = l2[1];\n    d[l3[0]] = l3[1];\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  '85': 98,\n  'Adina Park': 'Leyton Marsh',\n  S001: 'S002'\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpbtemunjr.js:14:10)\n    at Object.<anonymous> (/tmp/tmpbtemunjr.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { '85': 98, S001: 'S002', 'Adina Park': 'Leyton Marsh' },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpddv0vpix.js:14:10)\n    at Object.<anonymous> (/tmp/tmpddv0vpix.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for (var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpsyxnlqqk.js:14:10)\n    at Object.<anonymous> (/tmp/tmpsyxnlqqk.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i = 0; i < l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpp6sc7rik.js:15:10)\n    at Object.<anonymous> (/tmp/tmpp6sc7rik.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i=0; i<l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpv249neli.js:14:10)\n    at Object.<anonymous> (/tmp/tmpv249neli.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i = 0; i < l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpp6sc7rik.js:15:10)\n    at Object.<anonymous> (/tmp/tmpp6sc7rik.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    d[l1[0]] = l1[1];\n    d[l2[0]] = l2[1];\n    d[l3[0]] = l3[1];\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  '85': 98,\n  'Adina Park': 'Leyton Marsh',\n  S001: 'S002'\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmplk_rnv9i.js:15:10)\n    at Object.<anonymous> (/tmp/tmplk_rnv9i.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { '85': 98, S001: 'S002', 'Adina Park': 'Leyton Marsh' },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d1 = {};\n    for(var i=0; i<l1.length; i++){\n        d1[l1[i]] = l2[i];\n    }\n    var d2 = {};\n    for(var i=0; i<l1.length; i++){\n        d2[l1[i]] = l3[i];\n    }\n    var d3 = {};\n    for(var i=0; i<l1.length; i++){\n        d3[l1[i]] = [d1[l1[i]], d2[l1[i]]];\n    }\n    return d3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmppw7zl946.js:22:10)\n    at Object.<anonymous> (/tmp/tmppw7zl946.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpwse6uz0u.js:15:10)\n    at Object.<anonymous> (/tmp/tmpwse6uz0u.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nvar l1 = [\"a\", \"b\", \"c\"];\nvar l2 = [1, 2, 3];\nvar l3 = [4, 5, 6];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp45y2r1x4.js:18:10)\n    at Object.<anonymous> (/tmp/tmp45y2r1x4.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i = 0; i < l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpp6sc7rik.js:15:10)\n    at Object.<anonymous> (/tmp/tmpp6sc7rik.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for (var i = 0; i < l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpda6sw4tu.js:15:10)\n    at Object.<anonymous> (/tmp/tmpda6sw4tu.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nvar l1 = ['a', 'b', 'c'];\nvar l2 = [1, 2, 3];\nvar l3 = [4, 5, 6];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp1589_2sr.js:19:10)\n    at Object.<anonymous> (/tmp/tmp1589_2sr.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i = 0; i < l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpp6sc7rik.js:15:10)\n    at Object.<anonymous> (/tmp/tmpp6sc7rik.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i=0; i<l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpm_jky7fl.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm_jky7fl.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for (var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpau_zrvse.js:15:10)\n    at Object.<anonymous> (/tmp/tmpau_zrvse.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for (var i = 0; i < l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpda6sw4tu.js:15:10)\n    at Object.<anonymous> (/tmp/tmpda6sw4tu.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i=0; i<l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmplrkaz1_g.js:15:10)\n    at Object.<anonymous> (/tmp/tmplrkaz1_g.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i=0; i<l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmplrkaz1_g.js:15:10)\n    at Object.<anonymous> (/tmp/tmplrkaz1_g.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i = 0; i < l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpp6sc7rik.js:15:10)\n    at Object.<anonymous> (/tmp/tmpp6sc7rik.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for (var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpau_zrvse.js:15:10)\n    at Object.<anonymous> (/tmp/tmpau_zrvse.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for (var i = 0; i < l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpda6sw4tu.js:15:10)\n    at Object.<anonymous> (/tmp/tmpda6sw4tu.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpwse6uz0u.js:15:10)\n    at Object.<anonymous> (/tmp/tmpwse6uz0u.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var l1_dict = {};\n    var l2_dict = {};\n    var l3_dict = {};\n    var l1_dict_key = l1[0];\n    var l2_dict_key = l2[0];\n    var l3_dict_key = l3[0];\n    l1_dict[l1_dict_key] = l1[1];\n    l2_dict[l2_dict_key] = l2[1];\n    l3_dict[l3_dict_key] = l3[1];\n    var l1_l2_dict = {};\n    var l1_l2_l3_dict = {};\n    l1_l2_dict[l1_dict_key] = l1_dict[l1_dict_key];\n    l1_l2_dict[l2_dict_key] = l2_dict[l2_dict_key];\n    l1_l2_l3_dict[l1_dict_key] = l1_l2_dict;\n    l1_l2_l3_dict[l2_dict_key] = l2_dict[l2_dict_key];\n    l1_l2_l3_dict[l3_dict_key] = l3_dict[l3_dict_key];\n    return l1_l2_l3_dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  '85': 98,\n  'Adina Park': 'Leyton Marsh',\n  S001: {\n    'Adina Park': 'Leyton Marsh',\n    S001: 'S002'\n  }\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpaawnswwa.js:27:10)\n    at Object.<anonymous> (/tmp/tmpaawnswwa.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    '85': 98,\n    S001: { S001: 'S002', 'Adina Park': 'Leyton Marsh' },\n    'Adina Park': 'Leyton Marsh'\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpwse6uz0u.js:15:10)\n    at Object.<anonymous> (/tmp/tmpwse6uz0u.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpwse6uz0u.js:15:10)\n    at Object.<anonymous> (/tmp/tmpwse6uz0u.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for (var i = 0; i < l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpda6sw4tu.js:15:10)\n    at Object.<anonymous> (/tmp/tmpda6sw4tu.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpwse6uz0u.js:15:10)\n    at Object.<anonymous> (/tmp/tmpwse6uz0u.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpwse6uz0u.js:15:10)\n    at Object.<anonymous> (/tmp/tmpwse6uz0u.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i=0; i<l1.length; i++){\n        d[l1[i]] = {};\n        for(var j=0; j<l2.length; j++){\n            d[l1[i]][l2[j]] = l3[i][j];\n        }\n    }\n    return d;\n}\n\nvar l1 = ['a', 'b', 'c'];\nvar l2 = ['d', 'e', 'f'];\nvar l3 = [[1,2,3], [4,5,6], [7,8,9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: {\n    'Adina Park': undefined,\n    'Duncan Boyle': undefined,\n    'Leyton Marsh': undefined,\n    'Saim Richards': undefined\n  },\n  S002: {\n    'Adina Park': undefined,\n    'Duncan Boyle': undefined,\n    'Leyton Marsh': undefined,\n    'Saim Richards': undefined\n  },\n  S003: {\n    'Adina Park': undefined,\n    'Duncan Boyle': undefined,\n    'Leyton Marsh': undefined,\n    'Saim Richards': undefined\n  },\n  S004: {\n    'Adina Park': undefined,\n    'Duncan Boyle': undefined,\n    'Leyton Marsh': undefi...\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp4x4gv35p.js:21:10)\n    at Object.<anonymous> (/tmp/tmp4x4gv35p.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: {\n      'Adina Park': undefined,\n      'Leyton Marsh': undefined,\n      'Duncan Boyle': undefined,\n      'Saim Richards': undefined\n    },\n    S002: {\n      'Adina Park': undefined,\n      'Leyton Marsh': undefined,\n      'Duncan Boyle': undefined,\n      'Saim Richards': undefined\n    },\n    S003: {\n      'Adina Park': undefined,\n      'Leyton Marsh': undefined,\n      'Duncan Boyle': undefined,\n      'Saim Richards': undefined\n    },\n    S004: {\n      'Adina Park': undefined,\n      'Leyton Marsh': undefined,\n      'Duncan Boyle': undefined,\n      'Saim Richards': undefined\n    }\n  },\n  expected",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i = 0; i < l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpp6sc7rik.js:15:10)\n    at Object.<anonymous> (/tmp/tmpp6sc7rik.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpwse6uz0u.js:15:10)\n    at Object.<anonymous> (/tmp/tmpwse6uz0u.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpwse6uz0u.js:15:10)\n    at Object.<anonymous> (/tmp/tmpwse6uz0u.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpwse6uz0u.js:15:10)\n    at Object.<anonymous> (/tmp/tmpwse6uz0u.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpwse6uz0u.js:15:10)\n    at Object.<anonymous> (/tmp/tmpwse6uz0u.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for (var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpsyxnlqqk.js:14:10)\n    at Object.<anonymous> (/tmp/tmpsyxnlqqk.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpom_30h84.js:15:10)\n    at Object.<anonymous> (/tmp/tmpom_30h84.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for (var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpau_zrvse.js:15:10)\n    at Object.<anonymous> (/tmp/tmpau_zrvse.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = l2[i];\n    }\n    for(var i = 0; i < l3.length; i++){\n        d[l3[i]] = l3[i];\n    }\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  '85': 85,\n  '89': 89,\n  '92': 92,\n  '98': 98,\n  S001: 'Adina Park',\n  S002: 'Leyton Marsh',\n  S003: 'Duncan Boyle',\n  S004: 'Saim Richards'\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpfxya6qpl.js:17:10)\n    at Object.<anonymous> (/tmp/tmpfxya6qpl.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    '85': 85,\n    '89': 89,\n    '92': 92,\n    '98': 98,\n    S001: 'Adina Park',\n    S002: 'Leyton Marsh',\n    S003: 'Duncan Boyle',\n    S004: 'Saim Richards'\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i=0; i<l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpv249neli.js:14:10)\n    at Object.<anonymous> (/tmp/tmpv249neli.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpwse6uz0u.js:15:10)\n    at Object.<anonymous> (/tmp/tmpwse6uz0u.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(i=0; i<l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp6faenoai.js:14:10)\n    at Object.<anonymous> (/tmp/tmp6faenoai.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i=0; i<l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpm_jky7fl.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm_jky7fl.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i=0; i<l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpv249neli.js:14:10)\n    at Object.<anonymous> (/tmp/tmpv249neli.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpwse6uz0u.js:15:10)\n    at Object.<anonymous> (/tmp/tmpwse6uz0u.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nvar l1 = [\"a\", \"b\", \"c\"];\nvar l2 = [1, 2, 3];\nvar l3 = [4, 5, 6];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp45y2r1x4.js:18:10)\n    at Object.<anonymous> (/tmp/tmp45y2r1x4.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    d[l1[0]] = l1[1];\n    d[l2[0]] = l2[1];\n    d[l3[0]] = l3[1];\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  '85': 98,\n  'Adina Park': 'Leyton Marsh',\n  S001: 'S002'\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpbtemunjr.js:14:10)\n    at Object.<anonymous> (/tmp/tmpbtemunjr.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { '85': 98, S001: 'S002', 'Adina Park': 'Leyton Marsh' },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i=0; i<l1.length; i++){\n        d[l1[i]] = {};\n        d[l1[i]][l2[i]] = l3[i];\n    }\n    return d;\n}\n\nvar l1 = ['a', 'b', 'c'];\nvar l2 = ['d', 'e', 'f'];\nvar l3 = ['g', 'h', 'i'];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: {\n    'Adina Park': 85\n  },\n  S002: {\n    'Leyton Marsh': 98\n  },\n  S003: {\n    'Duncan Boyle': 89\n  },\n  S004: {\n    'Saim Richards': 92\n  }\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp2ma00cbm.js:20:10)\n    at Object.<anonymous> (/tmp/tmp2ma00cbm.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: { 'Adina Park': 85 },\n    S002: { 'Leyton Marsh': 98 },\n    S003: { 'Duncan Boyle': 89 },\n    S004: { 'Saim Richards': 92 }\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpddv0vpix.js:14:10)\n    at Object.<anonymous> (/tmp/tmpddv0vpix.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i=0; i<l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpv249neli.js:14:10)\n    at Object.<anonymous> (/tmp/tmpv249neli.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpwse6uz0u.js:15:10)\n    at Object.<anonymous> (/tmp/tmpwse6uz0u.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpddv0vpix.js:14:10)\n    at Object.<anonymous> (/tmp/tmpddv0vpix.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i = 0; i < l1.length; i++){\n        dict[l1[i]] = {};\n        dict[l1[i]][l2[i]] = l3[i];\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: {\n    'Adina Park': 85\n  },\n  S002: {\n    'Leyton Marsh': 98\n  },\n  S003: {\n    'Duncan Boyle': 89\n  },\n  S004: {\n    'Saim Richards': 92\n  }\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp7jr7mp1j.js:16:10)\n    at Object.<anonymous> (/tmp/tmp7jr7mp1j.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: { 'Adina Park': 85 },\n    S002: { 'Leyton Marsh': 98 },\n    S003: { 'Duncan Boyle': 89 },\n    S004: { 'Saim Richards': 92 }\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpwse6uz0u.js:15:10)\n    at Object.<anonymous> (/tmp/tmpwse6uz0u.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i=0; i<l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpv249neli.js:14:10)\n    at Object.<anonymous> (/tmp/tmpv249neli.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpwse6uz0u.js:15:10)\n    at Object.<anonymous> (/tmp/tmpwse6uz0u.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpwse6uz0u.js:15:10)\n    at Object.<anonymous> (/tmp/tmpwse6uz0u.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i = 0; i < l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpp6sc7rik.js:15:10)\n    at Object.<anonymous> (/tmp/tmpp6sc7rik.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nvar l1 = ['a', 'b', 'c'];\nvar l2 = [1, 2, 3];\nvar l3 = [4, 5, 6];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpyz15rtcx.js:18:10)\n    at Object.<anonymous> (/tmp/tmpyz15rtcx.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpwse6uz0u.js:15:10)\n    at Object.<anonymous> (/tmp/tmpwse6uz0u.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpwse6uz0u.js:15:10)\n    at Object.<anonymous> (/tmp/tmpwse6uz0u.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i=0; i<l1.length; i++){\n        dict[l1[i]] = {};\n        for(var j=0; j<l2.length; j++){\n            dict[l1[i]][l2[j]] = l3[i][j];\n        }\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: {\n    'Adina Park': undefined,\n    'Duncan Boyle': undefined,\n    'Leyton Marsh': undefined,\n    'Saim Richards': undefined\n  },\n  S002: {\n    'Adina Park': undefined,\n    'Duncan Boyle': undefined,\n    'Leyton Marsh': undefined,\n    'Saim Richards': undefined\n  },\n  S003: {\n    'Adina Park': undefined,\n    'Duncan Boyle': undefined,\n    'Leyton Marsh': undefined,\n    'Saim Richards': undefined\n  },\n  S004: {\n    'Adina Park': undefined,\n    'Duncan Boyle': undefined,\n    'Leyton Marsh': undefi...\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpnd0bcjni.js:17:10)\n    at Object.<anonymous> (/tmp/tmpnd0bcjni.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: {\n      'Adina Park': undefined,\n      'Leyton Marsh': undefined,\n      'Duncan Boyle': undefined,\n      'Saim Richards': undefined\n    },\n    S002: {\n      'Adina Park': undefined,\n      'Leyton Marsh': undefined,\n      'Duncan Boyle': undefined,\n      'Saim Richards': undefined\n    },\n    S003: {\n      'Adina Park': undefined,\n      'Leyton Marsh': undefined,\n      'Duncan Boyle': undefined,\n      'Saim Richards': undefined\n    },\n    S004: {\n      'Adina Park': undefined,\n      'Leyton Marsh': undefined,\n      'Duncan Boyle': undefined,\n      'Saim Richards': undefined\n    }\n  },\n  expected",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpwse6uz0u.js:15:10)\n    at Object.<anonymous> (/tmp/tmpwse6uz0u.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    var i;\n    for(i=0; i<l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpw18mxigf.js:16:10)\n    at Object.<anonymous> (/tmp/tmpw18mxigf.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i = 0; i < l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpp6sc7rik.js:15:10)\n    at Object.<anonymous> (/tmp/tmpp6sc7rik.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    var i = 0;\n    for(var i = 0; i < l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmplfe2y_xd.js:16:10)\n    at Object.<anonymous> (/tmp/tmplfe2y_xd.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpwse6uz0u.js:15:10)\n    at Object.<anonymous> (/tmp/tmpwse6uz0u.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for (var i = 0; i < l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpda6sw4tu.js:15:10)\n    at Object.<anonymous> (/tmp/tmpda6sw4tu.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpddv0vpix.js:14:10)\n    at Object.<anonymous> (/tmp/tmpddv0vpix.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for (var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpau_zrvse.js:15:10)\n    at Object.<anonymous> (/tmp/tmpau_zrvse.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i = 0; i < l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpp6sc7rik.js:15:10)\n    at Object.<anonymous> (/tmp/tmpp6sc7rik.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpwse6uz0u.js:15:10)\n    at Object.<anonymous> (/tmp/tmpwse6uz0u.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i = 0; i < l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\n\nvar l1 = ['a', 'b', 'c'];\nvar l2 = [1, 2, 3];\nvar l3 = [4, 5, 6];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp81_wm0ye.js:19:10)\n    at Object.<anonymous> (/tmp/tmp81_wm0ye.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nvar l1 = ['a', 'b', 'c'];\nvar l2 = [1, 2, 3];\nvar l3 = [4, 5, 6];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp1589_2sr.js:19:10)\n    at Object.<anonymous> (/tmp/tmp1589_2sr.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for (var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpau_zrvse.js:15:10)\n    at Object.<anonymous> (/tmp/tmpau_zrvse.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpwse6uz0u.js:15:10)\n    at Object.<anonymous> (/tmp/tmpwse6uz0u.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i=0; i<l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\n\nvar l1 = ['a', 'b', 'c'];\nvar l2 = [1, 2, 3];\nvar l3 = [4, 5, 6];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp3lzfu2fu.js:19:10)\n    at Object.<anonymous> (/tmp/tmp3lzfu2fu.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i=0; i<l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5b6khfv.js:14:10)\n    at Object.<anonymous> (/tmp/tmpn5b6khfv.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i=0; i<l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nvar l1 = ['a', 'b', 'c'];\nvar l2 = [1, 2, 3];\nvar l3 = [4, 5, 6];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp2323xlm5.js:18:10)\n    at Object.<anonymous> (/tmp/tmp2323xlm5.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i=0; i<l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\n\nvar l1 = ['a', 'b', 'c'];\nvar l2 = [1, 2, 3];\nvar l3 = [4, 5, 6];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpd896nsdn.js:18:10)\n    at Object.<anonymous> (/tmp/tmpd896nsdn.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nvar l1 = ['a', 'b', 'c'];\nvar l2 = [1, 2, 3];\nvar l3 = [4, 5, 6];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpyz15rtcx.js:18:10)\n    at Object.<anonymous> (/tmp/tmpyz15rtcx.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpom_30h84.js:15:10)\n    at Object.<anonymous> (/tmp/tmpom_30h84.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for (var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpau_zrvse.js:15:10)\n    at Object.<anonymous> (/tmp/tmpau_zrvse.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++) {\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpq5xy8t3q.js:15:10)\n    at Object.<anonymous> (/tmp/tmpq5xy8t3q.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i=0; i<l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpv249neli.js:14:10)\n    at Object.<anonymous> (/tmp/tmpv249neli.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmphnm094ct.js:14:10)\n    at Object.<anonymous> (/tmp/tmphnm094ct.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i=0; i<l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5b6khfv.js:14:10)\n    at Object.<anonymous> (/tmp/tmpn5b6khfv.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpwse6uz0u.js:15:10)\n    at Object.<anonymous> (/tmp/tmpwse6uz0u.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i=0; i<l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpm_jky7fl.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm_jky7fl.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++) {\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nvar l1 = ['a', 'b', 'c', 'd'];\nvar l2 = [1, 2, 3, 4];\nvar l3 = [5, 6, 7, 8];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp4luzcv4y.js:19:10)\n    at Object.<anonymous> (/tmp/tmp4luzcv4y.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var dict = {};\n    for(var i = 0; i < l1.length; i++){\n        dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpp6sc7rik.js:15:10)\n    at Object.<anonymous> (/tmp/tmpp6sc7rik.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmphnm094ct.js:14:10)\n    at Object.<anonymous> (/tmp/tmphnm094ct.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpwse6uz0u.js:15:10)\n    at Object.<anonymous> (/tmp/tmpwse6uz0u.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i=0; i<l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\n\nvar l1 = ['a', 'b', 'c'];\nvar l2 = [1, 2, 3];\nvar l3 = [4, 5, 6];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp2323xlm5.js:18:10)\n    at Object.<anonymous> (/tmp/tmp2323xlm5.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary(l1, l2, l3){\n    var d = {};\n    for(var i = 0; i < l1.length; i++){\n        d[l1[i]] = [l2[i], l3[i]];\n    }\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpddv0vpix.js:14:10)\n    at Object.<anonymous> (/tmp/tmpddv0vpix.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    }
  ]
}