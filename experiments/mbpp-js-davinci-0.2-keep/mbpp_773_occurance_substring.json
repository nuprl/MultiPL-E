{
  "name": "mbpp_773_occurance_substring",
  "language": "js",
  "prompt": "//Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\nfunction occurance_substring(text, pattern){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_773_occurance_substring.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = occurance_substring;\n  assert.deepEqual(candidate(\"python programming, python language\", \"python\"),[\"python\", 0, 6]);\n  assert.deepEqual(candidate(\"python programming,programming language\", \"programming\"),[\"programming\", 7, 18]);\n  assert.deepEqual(candidate(\"python programming,programming language\", \"language\"),[\"language\", 31, 39]);\n  assert.deepEqual(candidate(\"c++ programming, c++ language\", \"python\"),undefined);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var count = 0;\n    var index = 0;\n    var result = [];\n    while(index < text.length){\n        index = text.indexOf(pattern, index);\n        if(index == -1){\n            break;\n        }\n        result.push(index);\n        count++;\n        index++;\n    }\n    return count == 0 ? null : result;\n}\n",
    "    var result = [];\n    var i = 0;\n    while(i < text.length){\n        var index = text.indexOf(pattern, i);\n        if(index === -1){\n            break;\n        }\n        result.push(index);\n        i = index + 1;\n    }\n    return result;\n}\n",
    "    var i=0;\n    var j=0;\n    var count=0;\n    var pos=[];\n    while(i<text.length){\n        if(text[i]==pattern[j]){\n            i++;\n            j++;\n            if(j==pattern.length){\n                count++;\n                pos.push(i-j);\n                j=0;\n            }\n        }\n        else{\n            i++;\n            j=0;\n        }\n    }\n    if(count==0){\n        return null;\n    }\n    else{\n        return pos;\n    }\n}\n",
    "    var index = text.indexOf(pattern);\n    var count = 0;\n    while(index != -1){\n        count++;\n        index = text.indexOf(pattern, index + 1);\n    }\n    return count;\n}\n",
    "    var result = [];\n    var index = 0;\n    while(index < text.length){\n        var index_of = text.indexOf(pattern, index);\n        if(index_of == -1){\n            break;\n        }\n        result.push(index_of);\n        index = index_of + 1;\n    }\n    return result;\n}\n",
    "    var index = text.indexOf(pattern);\n    if(index == -1){\n        return null;\n    }\n    else{\n        return index;\n    }\n}\n",
    "    var count = 0;\n    var position = [];\n    var index = 0;\n    while(index < text.length){\n        var index_of = text.indexOf(pattern, index);\n        if(index_of == -1){\n            break;\n        }\n        count += 1;\n        position.push(index_of);\n        index = index_of + 1;\n    }\n    if(count == 0){\n        return null;\n    }\n    return {\n        count: count,\n        position: position\n    };\n}\n",
    "    var result = [];\n    var pos = text.indexOf(pattern);\n    while(pos > -1){\n        result.push(pos);\n        pos = text.indexOf(pattern, pos + 1);\n    }\n    return result;\n}\n",
    "    let count = 0;\n    let position = [];\n    for(let i = 0; i < text.length; i++){\n        if(text[i] === pattern[0]){\n            let j = 0;\n            while(j < pattern.length && text[i+j] === pattern[j]){\n                j++;\n            }\n            if(j === pattern.length){\n                count++;\n                position.push(i);\n            }\n        }\n    }\n    if(count === 0){\n        return null;\n    }\n    return {\n        count: count,\n        position: position\n    }\n}\n",
    "    var pos = text.indexOf(pattern);\n    var count = 0;\n    while (pos > -1) {\n        count++;\n        pos = text.indexOf(pattern, pos + 1);\n    }\n    return count;\n}",
    "    var result = [];\n    var index = 0;\n    while(index < text.length){\n        var index_of = text.indexOf(pattern, index);\n        if(index_of == -1){\n            break;\n        }\n        result.push(index_of);\n        index = index_of + 1;\n    }\n    return result;\n}\n",
    "    var pos = text.indexOf(pattern);\n    var count = 0;\n    while(pos > -1){\n        count++;\n        pos = text.indexOf(pattern, pos + 1);\n    }\n    return count;\n}",
    "    var count = 0;\n    var pos = [];\n    for(var i = 0; i < text.length; i++){\n        if(text.substring(i, i + pattern.length) == pattern){\n            count++;\n            pos.push(i);\n        }\n    }\n    if(count == 0){\n        return null;\n    }\n    else{\n        return [count, pos];\n    }\n}",
    "    var result = [];\n    var i = 0;\n    while(i < text.length){\n        var j = 0;\n        while(j < pattern.length && text[i+j] == pattern[j]){\n            j++;\n        }\n        if(j == pattern.length){\n            result.push(i);\n        }\n        i++;\n    }\n    return result;\n}\n",
    "    var pos = text.indexOf(pattern);\n    if (pos == -1) {\n        return null;\n    }\n    var count = 0;\n    while (pos != -1) {\n        count++;\n        pos = text.indexOf(pattern, pos + 1);\n    }\n    return count;\n}\n",
    "    var pos = 0;\n    var count = 0;\n    var result = [];\n    while(pos < text.length){\n        var index = text.indexOf(pattern, pos);\n        if(index == -1){\n            break;\n        }\n        result.push(index);\n        pos = index + 1;\n        count++;\n    }\n    if(count == 0){\n        return null;\n    }\n    return result;\n}\n",
    "\tvar count = 0;\n\tvar pos = [];\n\tfor(var i=0; i<text.length; i++){\n\t\tif(text.substring(i, i+pattern.length) == pattern){\n\t\t\tcount++;\n\t\t\tpos.push(i);\n\t\t}\n\t}\n\tif(count == 0){\n\t\treturn null;\n\t}\n\telse{\n\t\treturn [count, pos];\n\t}\n}\n",
    "    let result = [];\n    let index = text.indexOf(pattern);\n    while(index != -1){\n        result.push(index);\n        index = text.indexOf(pattern, index + 1);\n    }\n    return result.length > 0 ? result : null;\n}\n",
    "    var result = [];\n    var i = 0;\n    while(i < text.length){\n        var index = text.indexOf(pattern, i);\n        if(index == -1){\n            break;\n        }\n        result.push(index);\n        i = index + 1;\n    }\n    return result;\n}\n",
    "    var result = [];\n    var i = 0;\n    while(i < text.length){\n        var j = 0;\n        while(j < pattern.length && text[i+j] == pattern[j]){\n            j++;\n        }\n        if(j == pattern.length){\n            result.push(i);\n        }\n        i++;\n    }\n    return result;\n}\n"
  ]
}