{
  "name": "mbpp_805_max_sum_list",
  "language": "js",
  "prompt": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_805_max_sum_list.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max_sum = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max_sum){\n            max_sum = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for (var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for (var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if (sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max_sum = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max_sum){\n            max_sum = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max_sum = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max_sum){\n            max_sum = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max_sum = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max_sum){\n      max_sum = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n\tvar max_sum = 0;\n\tvar max_sum_list = [];\n\tfor(var i = 0; i < lists.length; i++){\n\t\tvar sum = 0;\n\t\tfor(var j = 0; j < lists[i].length; j++){\n\t\t\tsum += lists[i][j];\n\t\t}\n\t\tif(sum > max_sum){\n\t\t\tmax_sum = sum;\n\t\t\tmax_sum_list = lists[i];\n\t\t}\n\t}\n\treturn max_sum_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n\tvar max = 0;\n\tvar max_list = [];\n\tfor(var i = 0; i < lists.length; i++){\n\t\tvar sum = 0;\n\t\tfor(var j = 0; j < lists[i].length; j++){\n\t\t\tsum += lists[i][j];\n\t\t}\n\t\tif(sum > max){\n\t\t\tmax = sum;\n\t\t\tmax_list = lists[i];\n\t\t}\n\t}\n\treturn max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n\tvar max_sum = 0;\n\tvar max_list = [];\n\tfor(var i = 0; i < lists.length; i++){\n\t\tvar sum = 0;\n\t\tfor(var j = 0; j < lists[i].length; j++){\n\t\t\tsum += lists[i][j];\n\t\t}\n\t\tif(sum > max_sum){\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = lists[i];\n\t\t}\n\t}\n\treturn max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max_sum = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max_sum){\n            max_sum = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max_sum = 0;\n  var max_list = [];\n  for (var i = 0; i < lists.length; i++) {\n    var sum = 0;\n    for (var j = 0; j < lists[i].length; j++) {\n      sum += lists[i][j];\n    }\n    if (sum > max_sum) {\n      max_sum = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list;\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max_sum = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max_sum){\n      max_sum = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var index = 0;\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            index = i;\n        }\n    }\n    return lists[index];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max_sum = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max_sum){\n      max_sum = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max_sum = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max_sum){\n            max_sum = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max_sum = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max_sum){\n            max_sum = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max_sum = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max_sum){\n      max_sum = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max_sum = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max_sum){\n      max_sum = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max_sum = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max_sum){\n      max_sum = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n\tvar max_sum = 0;\n\tvar max_list = [];\n\tfor(var i = 0; i < lists.length; i++){\n\t\tvar sum = 0;\n\t\tfor(var j = 0; j < lists[i].length; j++){\n\t\t\tsum += lists[i][j];\n\t\t}\n\t\tif(sum > max_sum){\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = lists[i];\n\t\t}\n\t}\n\treturn max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var sums = lists.map(function(list){\n    return list.reduce(function(a,b){\n      return a + b;\n    });\n  });\n  var max = sums.reduce(function(a,b){\n    return Math.max(a,b);\n  });\n  return lists[sums.indexOf(max)];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max_sum = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max_sum){\n            max_sum = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max_sum = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max_sum){\n      max_sum = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max_sum = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max_sum){\n      max_sum = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max_sum = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max_sum){\n            max_sum = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max_sum = 0;\n    var max_sum_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max_sum){\n            max_sum = sum;\n            max_sum_list = lists[i];\n        }\n    }\n    return max_sum_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var index = 0;\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            index = i;\n        }\n    }\n    return lists[index];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max_sum = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max_sum){\n            max_sum = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n\tvar max = 0;\n\tvar max_list = [];\n\tfor(var i = 0; i < lists.length; i++){\n\t\tvar sum = 0;\n\t\tfor(var j = 0; j < lists[i].length; j++){\n\t\t\tsum += lists[i][j];\n\t\t}\n\t\tif(sum > max){\n\t\t\tmax = sum;\n\t\t\tmax_list = lists[i];\n\t\t}\n\t}\n\treturn max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max_sum = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max_sum){\n            max_sum = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max_sum = 0;\n    var max_sum_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max_sum){\n            max_sum = sum;\n            max_sum_list = lists[i];\n        }\n    }\n    return max_sum_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n\tvar max = 0;\n\tvar max_list = [];\n\tfor(var i = 0; i < lists.length; i++){\n\t\tvar sum = 0;\n\t\tfor(var j = 0; j < lists[i].length; j++){\n\t\t\tsum += lists[i][j];\n\t\t}\n\t\tif(sum > max){\n\t\t\tmax = sum;\n\t\t\tmax_list = lists[i];\n\t\t}\n\t}\n\treturn max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n\tvar max = 0;\n\tvar max_list = [];\n\tfor(var i = 0; i < lists.length; i++){\n\t\tvar sum = 0;\n\t\tfor(var j = 0; j < lists[i].length; j++){\n\t\t\tsum += lists[i][j];\n\t\t}\n\t\tif(sum > max){\n\t\t\tmax = sum;\n\t\t\tmax_list = lists[i];\n\t\t}\n\t}\n\treturn max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max_sum = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max_sum){\n            max_sum = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max_sum = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max_sum){\n            max_sum = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max_sum = 0;\n  var max_list = [];\n  for (var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for (var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if (sum > max_sum){\n      max_sum = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n\tvar max = 0;\n\tvar max_list = [];\n\tfor(var i = 0; i < lists.length; i++){\n\t\tvar sum = 0;\n\t\tfor(var j = 0; j < lists[i].length; j++){\n\t\t\tsum += lists[i][j];\n\t\t}\n\t\tif(sum > max){\n\t\t\tmax = sum;\n\t\t\tmax_list = lists[i];\n\t\t}\n\t}\n\treturn max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n\tvar max = 0;\n\tvar max_list = [];\n\tfor(var i = 0; i < lists.length; i++){\n\t\tvar sum = 0;\n\t\tfor(var j = 0; j < lists[i].length; j++){\n\t\t\tsum += lists[i][j];\n\t\t}\n\t\tif(sum > max){\n\t\t\tmax = sum;\n\t\t\tmax_list = lists[i];\n\t\t}\n\t}\n\treturn max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max_sum = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max_sum){\n            max_sum = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max_sum = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max_sum){\n            max_sum = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max_sum = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max_sum){\n            max_sum = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n\tvar max_sum = 0;\n\tvar max_sum_list = [];\n\tfor(var i = 0; i < lists.length; i++){\n\t\tvar sum = 0;\n\t\tfor(var j = 0; j < lists[i].length; j++){\n\t\t\tsum += lists[i][j];\n\t\t}\n\t\tif(sum > max_sum){\n\t\t\tmax_sum = sum;\n\t\t\tmax_sum_list = lists[i];\n\t\t}\n\t}\n\treturn max_sum_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max_sum = 0;\n    var max_list = [];\n    for (var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for (var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if (sum > max_sum){\n            max_sum = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n\tvar max = 0;\n\tvar max_list = [];\n\tfor(var i = 0; i < lists.length; i++){\n\t\tvar sum = 0;\n\t\tfor(var j = 0; j < lists[i].length; j++){\n\t\t\tsum += lists[i][j];\n\t\t}\n\t\tif(sum > max){\n\t\t\tmax = sum;\n\t\t\tmax_list = lists[i];\n\t\t}\n\t}\n\treturn max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var sums = lists.map(function(list){\n    return list.reduce(function(sum, element){\n      return sum + element;\n    }, 0);\n  });\n  var max_sum = Math.max.apply(null, sums);\n  return lists[sums.indexOf(max_sum)];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    let max = 0;\n    let max_list = [];\n    for(let i = 0; i < lists.length; i++){\n        let sum = 0;\n        for(let j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for (var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for (var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if (sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    return lists.reduce((max, list) => {\n        let sum = list.reduce((sum, num) => sum + num, 0);\n        return sum > max[1] ? [list, sum] : max;\n    }, [[], 0])[0];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max_sum = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max_sum){\n            max_sum = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n\tvar max = 0;\n\tvar max_list = [];\n\tfor(var i = 0; i < lists.length; i++){\n\t\tvar sum = 0;\n\t\tfor(var j = 0; j < lists[i].length; j++){\n\t\t\tsum += lists[i][j];\n\t\t}\n\t\tif(sum > max){\n\t\t\tmax = sum;\n\t\t\tmax_list = lists[i];\n\t\t}\n\t}\n\treturn max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max_sum = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max_sum){\n      max_sum = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for (var i = 0; i < lists.length; i++) {\n    var sum = 0;\n    for (var j = 0; j < lists[i].length; j++) {\n      sum += lists[i][j];\n    }\n    if (sum > max) {\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max_sum = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max_sum){\n      max_sum = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n\tvar max_sum = 0;\n\tvar max_list = [];\n\tfor(var i = 0; i < lists.length; i++){\n\t\tvar sum = 0;\n\t\tfor(var j = 0; j < lists[i].length; j++){\n\t\t\tsum += lists[i][j];\n\t\t}\n\t\tif(sum > max_sum){\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = lists[i];\n\t\t}\n\t}\n\treturn max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for (var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for (var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if (sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n\tvar max = 0;\n\tvar max_list = [];\n\tfor(var i = 0; i < lists.length; i++){\n\t\tvar sum = 0;\n\t\tfor(var j = 0; j < lists[i].length; j++){\n\t\t\tsum += lists[i][j];\n\t\t}\n\t\tif(sum > max){\n\t\t\tmax = sum;\n\t\t\tmax_list = lists[i];\n\t\t}\n\t}\n\treturn max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max_sum = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max_sum){\n            max_sum = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max_sum = 0;\n    var max_list = [];\n    for (var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for (var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if (sum > max_sum){\n            max_sum = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max_sum = 0;\n  var max_index = 0;\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max_sum){\n      max_sum = sum;\n      max_index = i;\n    }\n  }\n  return lists[max_index];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max_sum = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max_sum){\n            max_sum = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n\tvar max = 0;\n\tvar max_list = [];\n\tfor(var i = 0; i < lists.length; i++){\n\t\tvar sum = 0;\n\t\tfor(var j = 0; j < lists[i].length; j++){\n\t\t\tsum += lists[i][j];\n\t\t}\n\t\tif(sum > max){\n\t\t\tmax = sum;\n\t\t\tmax_list = lists[i];\n\t\t}\n\t}\n\treturn max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max_sum = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max_sum){\n            max_sum = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max_sum = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max_sum){\n      max_sum = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max_sum = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max_sum){\n            max_sum = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max_sum = 0;\n    var max_list = [];\n    for(var i=0; i<lists.length; i++){\n        var sum = 0;\n        for(var j=0; j<lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max_sum){\n            max_sum = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max_sum = 0;\n    var max_sum_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max_sum){\n            max_sum = sum;\n            max_sum_list = lists[i];\n        }\n    }\n    return max_sum_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i=0; i<lists.length; i++){\n        var sum = 0;\n        for(var j=0; j<lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max_sum = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max_sum){\n            max_sum = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n\tvar max = 0;\n\tvar max_list = [];\n\tfor(var i = 0; i < lists.length; i++){\n\t\tvar sum = 0;\n\t\tfor(var j = 0; j < lists[i].length; j++){\n\t\t\tsum += lists[i][j];\n\t\t}\n\t\tif(sum > max){\n\t\t\tmax = sum;\n\t\t\tmax_list = lists[i];\n\t\t}\n\t}\n\treturn max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max_sum = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max_sum){\n            max_sum = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n\tvar max = 0;\n\tvar max_list = [];\n\tfor(var i = 0; i < lists.length; i++){\n\t\tvar sum = 0;\n\t\tfor(var j = 0; j < lists[i].length; j++){\n\t\t\tsum += lists[i][j];\n\t\t}\n\t\tif(sum > max){\n\t\t\tmax = sum;\n\t\t\tmax_list = lists[i];\n\t\t}\n\t}\n\treturn max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n  var max = 0;\n  var max_list = [];\n  for(var i = 0; i < lists.length; i++){\n    var sum = 0;\n    for(var j = 0; j < lists[i].length; j++){\n      sum += lists[i][j];\n    }\n    if(sum > max){\n      max = sum;\n      max_list = lists[i];\n    }\n  }\n  return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max){\n            max = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max_sum = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max_sum){\n            max_sum = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list(lists){\n    var max_sum = 0;\n    var max_list = [];\n    for(var i = 0; i < lists.length; i++){\n        var sum = 0;\n        for(var j = 0; j < lists[i].length; j++){\n            sum += lists[i][j];\n        }\n        if(sum > max_sum){\n            max_sum = sum;\n            max_list = lists[i];\n        }\n    }\n    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_list;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);\n  assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);\n  assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);\n}\n\ntest();",
      "timestamp": 1665510045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}