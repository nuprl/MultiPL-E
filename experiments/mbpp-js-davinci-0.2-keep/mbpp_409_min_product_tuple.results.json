{
  "name": "mbpp_409_min_product_tuple",
  "language": "js",
  "prompt": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_409_min_product_tuple.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min_product){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_prod = list1[0][0] * list1[0][1];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i][0] * list1[i][1] < min_prod){\n            min_prod = list1[i][0] * list1[i][1];\n        }\n    }\n    return min_prod;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0] * list1[0][1];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i][0] * list1[i][1] < min){\n            min = list1[i][0] * list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=1;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var list2 = [];\n    for(var i = 0; i < list1.length; i++){\n        for(var j = 0; j < list1.length; j++){\n            if(i != j){\n                list2.push(list1[i]*list1[j]);\n            }\n        }\n    }\n    return Math.min(...list2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpracpxdbg.js:19:10)\n    at Object.<anonymous> (/tmp/tmpracpxdbg.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = Number.MAX_VALUE;\n    for(var i = 0; i < list1.length; i++){\n        for(var j = i + 1; j < list1.length; j++){\n            var product = list1[i][0] * list1[j][0] + list1[i][1] * list1[j][1];\n            if(product < min_product){\n                min_product = product;\n            }\n        }\n    }\n    return min_product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n46\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmp2flnabp5.js:20:10)\n    at Object.<anonymous> (/tmp/tmp2flnabp5.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 46,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=1; i<list1.length; i++){\n        if(list1[i][0]*list1[i][1] < min_product){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0] * list1[0][1];\n    for(var i = 1; i < list1.length; i++){\n        if(list1[i][0] * list1[i][1] < min_product){\n            min_product = list1[i][0] * list1[i][1];\n        }\n    }\n    return min_product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0] * list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0] * list1[i][1] < min_product){\n            min_product = list1[i][0] * list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=1; i<list1.length; i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0; i<list1.length; i++){\n        if(list1[i][0]*list1[i][1] < min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min_product){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0] * list1[0][1];\n    for(var i=0; i<list1.length; i++){\n        if(list1[i][0] * list1[i][1] < min_product){\n            min_product = list1[i][0] * list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = Infinity;\n    for(var i = 0; i < list1.length; i++){\n        for(var j = i + 1; j < list1.length; j++){\n            var product = list1[i][0] * list1[j][0] + list1[i][1] * list1[j][1];\n            if(product < min_product){\n                min_product = product;\n            }\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n46\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpzxa67j2k.js:19:10)\n    at Object.<anonymous> (/tmp/tmpzxa67j2k.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 46,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=1;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(min_product > list1[i][0]*list1[i][1]){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0] * list1[0][1];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i][0] * list1[i][1] < min){\n            min = list1[i][0] * list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min_product){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min_product){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=1;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0] * list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0] * list1[i][1] < min_product){\n            min_product = list1[i][0] * list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min_product){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product=list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(min_product>list1[i][0]*list1[i][1]){\n            min_product=list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=1; i<list1.length; i++){\n        if(list1[i][0]*list1[i][1] < min_product){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i = 1; i < list1.length; i++){\n        var product = list1[i][0]*list1[i][1];\n        if(product < min){\n            min = product;\n        }\n    }\n    return min;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=1;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1] < min_product){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=1;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min_product){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0] * list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0] * list1[i][1] < min_product){\n            min_product = list1[i][0] * list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=1;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min_product){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var list2 = [];\n    for(var i=0;i<list1.length;i++){\n        for(var j=0;j<list1.length;j++){\n            if(i!=j){\n                list2.push(list1[i]*list1[j]);\n            }\n        }\n    }\n    console.log(list2);\n    var min = list2[0];\n    for(var i=0;i<list2.length;i++){\n        if(list2[i]<min){\n            min = list2[i];\n        }\n    }\n    console.log(min);\n}\nmin_product_tuple([1,2,3,4,5]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "[\n   2,  3, 4,  5,  2,  6, 8,\n  10,  3, 6, 12, 15,  4, 8,\n  12, 20, 5, 10, 15, 20\n]\n2\n[\n  NaN, NaN, NaN, NaN,\n  NaN, NaN, NaN, NaN,\n  NaN, NaN, NaN, NaN\n]\nNaN\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpfz5awyns.js:27:10)\n    at Object.<anonymous> (/tmp/tmpfz5awyns.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=1;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_prod = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min_prod){\n            min_prod = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_prod;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=0; i<list1.length; i++){\n        var product = list1[i][0]*list1[i][1];\n        if(product<min_product){\n            min_product = product;\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0] * list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0] * list1[i][1] < min_product){\n            min_product = list1[i][0] * list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=1; i<list1.length; i++){\n        if(list1[i][0]*list1[i][1] < min_product){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0] * list1[0][1];\n    for(var i=0; i<list1.length; i++){\n        if(list1[i][0] * list1[i][1] < min_product){\n            min_product = list1[i][0] * list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n  var min = list1[0][0] * list1[0][1];\n  for(var i = 0; i < list1.length; i++){\n    if(list1[i][0] * list1[i][1] < min){\n      min = list1[i][0] * list1[i][1];\n    }\n  }\n  return min;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min_product){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(min_product > list1[i][0]*list1[i][1]){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=1;i<list1.length;i++){\n        if(min>(list1[i][0]*list1[i][1])){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=1;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0] * list1[0][1];\n    for(var i = 1; i < list1.length; i++){\n        if(min > list1[i][0] * list1[i][1]){\n            min = list1[i][0] * list1[i][1];\n        }\n    }\n    return min;\n}\nvar list1 = [[1,2],[3,4],[5,6]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min=list1[0][0]*list1[0][1];\n    for(var i=1;i<list1.length;i++){\n        if(min>(list1[i][0]*list1[i][1])){\n            min=list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min_product){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0] * list1[0][1];\n    for(var i = 1; i < list1.length; i++){\n        if(min_product > list1[i][0] * list1[i][1]){\n            min_product = list1[i][0] * list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=0; i<list1.length; i++){\n        var product = list1[i][0]*list1[i][1];\n        if(product < min_product){\n            min_product = product;\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0] * list1[0][1];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i][0] * list1[i][1] < min_product){\n            min_product = list1[i][0] * list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n\tvar min = list1[0][0]*list1[0][1];\n\tfor(var i=1;i<list1.length;i++){\n\t\tif(list1[i][0]*list1[i][1]<min){\n\t\t\tmin = list1[i][0]*list1[i][1];\n\t\t}\n\t}\n\treturn min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min_product){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=1;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min_product){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nvar list1 = [[1,2],[3,4],[5,6]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        for(var j=0;j<list1[i].length;j++){\n            if(list1[i][j]*list1[i][j+1]<min_product){\n                min_product = list1[i][j]*list1[i][j+1];\n            }\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1] < min_product){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0] * list1[0][1];\n    for(var i = 0; i < list1.length; i++){\n        var product = list1[i][0] * list1[i][1];\n        if(product < min_product){\n            min_product = product;\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=1;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min_product){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=1; i<list1.length; i++){\n        if(list1[i][0]*list1[i][1] < min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=1;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min_product){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(min > list1[i][0]*list1[i][1]){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_prod = list1[0][0]*list1[0][1];\n    for(var i=1;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min_prod){\n            min_prod = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_prod;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_prod = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min_prod){\n            min_prod = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_prod;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min=list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min=list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=1;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min_product){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_prod = list1[0][0]*list1[0][1];\n    for(var i=1;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min_prod){\n            min_prod = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_prod;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n\tvar min_product = list1[0][0]*list1[0][1];\n\tfor(var i=0; i<list1.length; i++){\n\t\tif(list1[i][0]*list1[i][1] < min_product){\n\t\t\tmin_product = list1[i][0]*list1[i][1];\n\t\t}\n\t}\n\treturn min_product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min_product){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0] * list1[0][1];\n    for(var i = 1; i < list1.length; i++){\n        if(list1[i][0] * list1[i][1] < min){\n            min = list1[i][0] * list1[i][1];\n        }\n    }\n    return min;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min_product){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0] * list1[0][1];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i][0] * list1[i][1] < min){\n            min = list1[i][0] * list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(min_product > list1[i][0]*list1[i][1]){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0] * list1[0][1];\n    for(var i = 0; i < list1.length; i++){\n        if(min_product > list1[i][0] * list1[i][1]){\n            min_product = list1[i][0] * list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i][0]*list1[i][1] < min_product){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0] * list1[0][1];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i][0] * list1[i][1] < min){\n            min = list1[i][0] * list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min_product){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0] * list1[0][1];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i][0] * list1[i][1] < min){\n            min = list1[i][0] * list1[i][1];\n        }\n    }\n    return min;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n  var min = list1[0][0]*list1[0][1];\n  for(var i=0;i<list1.length;i++){\n    if(list1[i][0]*list1[i][1]<min){\n      min = list1[i][0]*list1[i][1];\n    }\n  }\n  return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = Number.MAX_VALUE;\n    for(var i=0;i<list1.length;i++){\n        for(var j=0;j<list1[i].length;j++){\n            if(list1[i][j]<min){\n                min = list1[i][j];\n            }\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpmsyz7_1v.js:18:10)\n    at Object.<anonymous> (/tmp/tmpmsyz7_1v.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min_product){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_prod = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min_prod){\n            min_prod = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_prod;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=1;i<list1.length;i++){\n        if(min>(list1[i][0]*list1[i][1])){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min_product){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0] * list1[0][1];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i][0] * list1[i][1] < min_product){\n            min_product = list1[i][0] * list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=1;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min_product){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min_product){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min_product){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        for(var j=0;j<list1[i].length;j++){\n            if(list1[i][j]*list1[i][j+1]<min){\n                min = list1[i][j]*list1[i][j+1];\n            }\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for (var i = 0; i < list1.length; i++){\n        if (list1[i][0]*list1[i][1] < min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0] * list1[0][1];\n    for(var i = 0; i < list1.length; i++){\n        var product = list1[i][0] * list1[i][1];\n        if(product < min){\n            min = product;\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0] * list1[0][1];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i][0] * list1[i][1] < min_product){\n            min_product = list1[i][0] * list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0] * list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(min_product > list1[i][0] * list1[i][1]){\n            min_product = list1[i][0] * list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    let min = list1[0][0] * list1[0][1];\n    for(let i = 0; i < list1.length; i++){\n        if(list1[i][0] * list1[i][1] < min){\n            min = list1[i][0] * list1[i][1];\n        }\n    }\n    return min;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min=list1[0][0]*list1[0][1];\n    for(var i=1;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min=list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=1;i<list1.length;i++){\n        if(min > list1[i][0]*list1[i][1]){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min_product){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = Number.MAX_VALUE;\n    for(var i=0;i<list1.length;i++){\n        for(var j=i+1;j<list1.length;j++){\n            var product = list1[i][0]*list1[j][0] + list1[i][1]*list1[j][1];\n            if(product < min_product){\n                min_product = product;\n            }\n        }\n    }\n    return min_product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n46\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpfmz8uq27.js:20:10)\n    at Object.<anonymous> (/tmp/tmpfmz8uq27.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 46,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min_product){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min=list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min=list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product=list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min_product){\n            min_product=list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0] * list1[0][1];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i][0] * list1[i][1] < min){\n            min = list1[i][0] * list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min_product){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min_product){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0] * list1[0][1];\n    for(var i=1; i<list1.length; i++){\n        if(list1[i][0] * list1[i][1] < min_product){\n            min_product = list1[i][0] * list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0] * list1[0][1];\n    for(var i = 1; i < list1.length; i++){\n        var product = list1[i][0] * list1[i][1];\n        if(product < min){\n            min = product;\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=1; i<list1.length; i++){\n        var product = list1[i][0]*list1[i][1];\n        if(product < min_product){\n            min_product = product;\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0] * list1[0][1];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i][0] * list1[i][1] < min){\n            min = list1[i][0] * list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=0; i<list1.length; i++){\n        if(list1[i][0]*list1[i][1] < min_product){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=0; i<list1.length; i++){\n        if(list1[i][0]*list1[i][1] < min_product){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_prod = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(min_prod > list1[i][0]*list1[i][1]){\n            min_prod = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_prod;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min=list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min=list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min=list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min=list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=1;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min_product){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0] * list1[0][1];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i][0] * list1[i][1] < min_product){\n            min_product = list1[i][0] * list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    let min = list1[0][0] * list1[0][1];\n    for(let i = 0; i < list1.length; i++){\n        if(list1[i][0] * list1[i][1] < min){\n            min = list1[i][0] * list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0] * list1[0][1];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i][0] * list1[i][1] < min){\n            min = list1[i][0] * list1[i][1];\n        }\n    }\n    return min;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0; i<list1.length; i++){\n        if(list1[i][0]*list1[i][1] < min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0] * list1[0][1];\n    for(var i = 1; i < list1.length; i++){\n        if(min_product > list1[i][0] * list1[i][1]){\n            min_product = list1[i][0] * list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min_product){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        var product = list1[i][0]*list1[i][1];\n        if(product<min_product){\n            min_product = product;\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0] * list1[0][1];\n    for(var i=1; i<list1.length; i++){\n        if(list1[i][0] * list1[i][1] < min_product){\n            min_product = list1[i][0] * list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=1;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0] * list1[0][1];\n    for(var i = 1; i < list1.length; i++){\n        var product = list1[i][0] * list1[i][1];\n        if(product < min_product){\n            min_product = product;\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0] * list1[0][1];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i][0] * list1[i][1] < min_product){\n            min_product = list1[i][0] * list1[i][1];\n        }\n    }\n    return min_product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0] * list1[0][1];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i][0] * list1[i][1] < min){\n            min = list1[i][0] * list1[i][1];\n        }\n    }\n    return min;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min_product){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min_product){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0] * list1[0][1];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i][0] * list1[i][1] < min){\n            min = list1[i][0] * list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(min_product > list1[i][0]*list1[i][1]){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min_product){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min_product){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0] * list1[0][1];\n    for(var i = 0; i < list1.length; i++){\n        var product = list1[i][0] * list1[i][1];\n        if(product < min_product){\n            min_product = product;\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0] * list1[0][1];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i][0] * list1[i][1] < min){\n            min = list1[i][0] * list1[i][1];\n        }\n    }\n    return min;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(min_product > list1[i][0]*list1[i][1]){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0] * list1[0][1];\n    for(var i=0; i<list1.length; i++){\n        if(list1[i][0] * list1[i][1] < min_product){\n            min_product = list1[i][0] * list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        var product = list1[i][0]*list1[i][1];\n        if(product<min_product){\n            min_product = product;\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i][0]*list1[i][1] < min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min_product){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=1;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0] * list1[0][1];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i][0] * list1[i][1] < min_product){\n            min_product = list1[i][0] * list1[i][1];\n        }\n    }\n    return min_product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0] * list1[0][1];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i][0] * list1[i][1] < min){\n            min = list1[i][0] * list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=1;i<list1.length;i++){\n        var product = list1[i][0]*list1[i][1];\n        if(product<min_product){\n            min_product = product;\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0] * list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        var product = list1[i][0] * list1[i][1];\n        if(product < min_product){\n            min_product = product;\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        var product = list1[i][0]*list1[i][1];\n        if(product<min){\n            min = product;\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0]*list1[0][1];\n    for(var i=1;i<list1.length;i++){\n        if(min_product > list1[i][0]*list1[i][1]){\n            min_product = list1[i][0]*list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=1;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min=list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min=list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0] * list1[0][1];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i][0] * list1[i][1] < min){\n            min = list1[i][0] * list1[i][1];\n        }\n    }\n    return min;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0] * list1[0][1];\n    for(var i=0; i<list1.length; i++){\n        if(list1[i][0] * list1[i][1] < min_product){\n            min_product = list1[i][0] * list1[i][1];\n        }\n    }\n    return min_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0] * list1[0][1];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i][0] * list1[i][1] < min){\n            min = list1[i][0] * list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0] * list1[0][1];\n    for(var i = 1; i < list1.length; i++){\n        if(list1[i][0] * list1[i][1] < min){\n            min = list1[i][0] * list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0] * list1[0][1];\n    for(var i = 1; i < list1.length; i++){\n        if(list1[i][0] * list1[i][1] < min){\n            min = list1[i][0] * list1[i][1];\n        }\n    }\n    return min;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0] * list1[0][1];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i][0] * list1[i][1] < min){\n            min = list1[i][0] * list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min_product = list1[0][0] * list1[0][1];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i][0] * list1[i][1] < min_product){\n            min_product = list1[i][0] * list1[i][1];\n        }\n    }\n    return min_product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple(list1){\n    var min = list1[0][0]*list1[0][1];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i][0]*list1[i][1]<min){\n            min = list1[i][0]*list1[i][1];\n        }\n    }\n    return min;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_product_tuple;\n  assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);\n  assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);\n  assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);\n}\n\ntest();",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}