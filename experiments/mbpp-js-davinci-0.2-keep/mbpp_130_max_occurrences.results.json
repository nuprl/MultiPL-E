{
  "name": "mbpp_130_max_occurrences",
  "language": "js",
  "prompt": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var count = {};\n    for(var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        if(count[num] === undefined){\n            count[num] = 1;\n        }\n        else{\n            count[num]++;\n        }\n        if(count[num] > max){\n            max = count[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var count = 0;\n    var max = 0;\n    var max_num = 0;\n    for(var i = 0; i < nums.length; i++){\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var item = nums[i];\n        if(counts[item] === undefined){\n            counts[item] = 1;\n        }\n        else{\n            counts[item] += 1;\n        }\n        if(counts[item] > max){\n            max = counts[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max_count = 0;\n    var max_item = null;\n    var count = {};\n    for(var i = 0; i < nums.length; i++){\n        var item = nums[i];\n        if(count[item] === undefined){\n            count[item] = 1;\n        }\n        else{\n            count[item] += 1;\n        }\n        if(count[item] > max_count){\n            max_count = count[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var item = 0;\n    for(var i = 0; i < nums.length; i++){\n        var count = 0;\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            item = nums[i];\n        }\n    }\n    return item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var item = nums[i];\n        if(counts[item] == undefined){\n            counts[item] = 1;\n        }\n        else{\n            counts[item] += 1;\n        }\n        if(counts[item] > max){\n            max = counts[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max_count = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        if(counts[num] === undefined){\n            counts[num] = 1;\n        }\n        else{\n            counts[num]++;\n        }\n        if(counts[num] > max_count){\n            max_count = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    let max = 0;\n    let item = null;\n    let count = {};\n    for(let i = 0; i < nums.length; i++){\n        if(count[nums[i]]){\n            count[nums[i]]++;\n        }else{\n            count[nums[i]] = 1;\n        }\n        if(count[nums[i]] > max){\n            max = count[nums[i]];\n            item = nums[i];\n        }\n    }\n    return item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    var count = 0;\n    for(var i = 0; i < nums.length; i++){\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    for(var i = 0; i < nums.length; i++){\n        var count = 0;\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        if(counts[num] === undefined){\n            counts[num] = 0;\n        }\n        counts[num] += 1;\n        if(counts[num] > max){\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i=0; i<nums.length; i++){\n        var item = nums[i];\n        if(counts[item] === undefined){\n            counts[item] = 1;\n        }\n        else{\n            counts[item] += 1;\n        }\n        if(counts[item] > max){\n            max = counts[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    for(var i = 0; i < nums.length; i++){\n        var count = 0;\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var count = {};\n    for(var i = 0; i < nums.length; i++){\n        var item = nums[i];\n        if(count[item] == undefined){\n            count[item] = 1;\n        }\n        else{\n            count[item] += 1;\n        }\n        if(count[item] > max){\n            max = count[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    var count = 0;\n    for(var i = 0; i < nums.length; i++){\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    var count = 0;\n    for(var i = 0; i < nums.length; i++){\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var count = 0;\n    var max = 0;\n    var max_num = 0;\n    for(var i = 0; i < nums.length; i++){\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var count = {};\n    nums.forEach(function(num){\n        if(count[num]){\n            count[num]++;\n        }\n        else{\n            count[num] = 1;\n        }\n    });\n    var max = 0;\n    var max_num = 0;\n    for(var num in count){\n        if(count[num] > max){\n            max = count[num];\n            max_num = num;\n        }\n    }\n    return max_num;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'7'\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpe_0267ah.js:28:10)\n    at Object.<anonymous> (/tmp/tmpe_0267ah.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '7',\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for (var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        counts[num] = counts[num] || 0;\n        counts[num]++;\n        if (counts[num] > max){\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var count = {};\n    for(var i = 0; i < nums.length; i++){\n        if(count[nums[i]] === undefined){\n            count[nums[i]] = 1;\n        }\n        else{\n            count[nums[i]]++;\n        }\n        if(count[nums[i]] > max){\n            max = count[nums[i]];\n            max_item = nums[i];\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        if(counts[num] === undefined){\n            counts[num] = 1;\n        }\n        else{\n            counts[num] += 1;\n        }\n        if(counts[num] > max){\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    for(var i = 0; i < nums.length; i++){\n        var count = 0;\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max_count = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var item = nums[i];\n        if(counts[item] === undefined){\n            counts[item] = 1;\n        }\n        else{\n            counts[item] += 1;\n        }\n        if(counts[item] > max_count){\n            max_count = counts[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        for(let j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    var count = 0;\n    for(var i = 0; i < nums.length; i++){\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    var count = 0;\n    for(var i = 0; i < nums.length; i++){\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    for(var i = 0; i < nums.length; i++){\n        var count = 0;\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max_count = 0;\n    var max_item;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        if(counts[num] == undefined){\n            counts[num] = 1;\n        }\n        else{\n            counts[num] += 1;\n        }\n        if(counts[num] > max_count){\n            max_count = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    var count = 0;\n    for(var i = 0; i < nums.length; i++){\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        if(counts[num] === undefined){\n            counts[num] = 1;\n        }\n        else{\n            counts[num] += 1;\n        }\n        if(counts[num] > max){\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n  var max = 0;\n  var max_num = 0;\n  for(var i = 0; i < nums.length; i++){\n    var count = 0;\n    for(var j = 0; j < nums.length; j++){\n      if(nums[i] == nums[j]){\n        count++;\n      }\n    }\n    if(count > max){\n      max = count;\n      max_num = nums[i];\n    }\n  }\n  return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        if(counts[num] === undefined){\n            counts[num] = 1;\n        }\n        else{\n            counts[num] += 1;\n        }\n        if(counts[num] > max){\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    for(var i = 0; i < nums.length; i++){\n        var count = 0;\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    for(var i = 0; i < nums.length; i++){\n        var count = 0;\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        if(counts[num] === undefined){\n            counts[num] = 1;\n        }\n        else{\n            counts[num] += 1;\n        }\n        if(counts[num] > max){\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var counts = {};\n    var max = 0;\n    var max_item = null;\n    for(var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        counts[num] = counts[num] ? counts[num] + 1 : 1;\n        if(counts[num] > max){\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max_count = 0;\n    var max_item = null;\n    var count = {};\n    for(var i = 0; i < nums.length; i++){\n        if(count[nums[i]] === undefined){\n            count[nums[i]] = 1;\n        }\n        else{\n            count[nums[i]] += 1;\n        }\n        if(count[nums[i]] > max_count){\n            max_count = count[nums[i]];\n            max_item = nums[i];\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    var count = 0;\n    for(var i = 0; i < nums.length; i++){\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var count = {};\n    for(var i = 0; i < nums.length; i++){\n        var item = nums[i];\n        if(count[item] === undefined){\n            count[item] = 1;\n        }\n        else{\n            count[item] += 1;\n        }\n        if(count[item] > max){\n            max = count[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var counts = {};\n    var max = 0;\n    var max_item;\n    for(var i = 0; i < nums.length; i++){\n        var item = nums[i];\n        if(counts[item] === undefined){\n            counts[item] = 1;\n        }\n        else{\n            counts[item] += 1;\n        }\n        if(counts[item] > max){\n            max = counts[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i=0; i<nums.length; i++){\n        var num = nums[i];\n        if(counts[num] === undefined){\n            counts[num] = 1;\n        }else{\n            counts[num] = counts[num] + 1;\n        }\n        if(counts[num] > max){\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        if(counts[num] == undefined){\n            counts[num] = 1;\n        }\n        else{\n            counts[num] += 1;\n        }\n        if(counts[num] > max){\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var item = nums[i];\n        if(counts[item] === undefined){\n            counts[item] = 1;\n        }\n        else{\n            counts[item] += 1;\n        }\n        if(counts[item] > max){\n            max = counts[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    for(var i = 0; i < nums.length; i++){\n        var count = 0;\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    var count = 0;\n    for(var i = 0; i < nums.length; i++){\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    var count = 0;\n    for(var i = 0; i < nums.length; i++){\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        if(counts[num] === undefined){\n            counts[num] = 1;\n        }else{\n            counts[num] = counts[num] + 1;\n        }\n        if(counts[num] > max){\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var count = {};\n    for(var i = 0; i < nums.length; i++){\n        if(count[nums[i]]){\n            count[nums[i]] += 1;\n        }\n        else{\n            count[nums[i]] = 1;\n        }\n        if(count[nums[i]] > max){\n            max = count[nums[i]];\n            max_item = nums[i];\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    let count = 0;\n    let max = 0;\n    let item;\n    for(let i = 0; i < nums.length; i++){\n        for(let j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            item = nums[i];\n        }\n        count = 0;\n    }\n    return item;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    var count = 0;\n    for(var i = 0; i < nums.length; i++){\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max_count = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i=0; i<nums.length; i++){\n        var num = nums[i];\n        if(counts[num] == null){\n            counts[num] = 1;\n        }\n        else{\n            counts[num] += 1;\n        }\n        if(counts[num] > max_count){\n            max_count = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        if(counts[num] === undefined){\n            counts[num] = 1;\n        }else{\n            counts[num] += 1;\n        }\n        if(counts[num] > max){\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        if(counts[num] === undefined){\n            counts[num] = 1;\n        }\n        else{\n            counts[num] += 1;\n        }\n        if(counts[num] > max){\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        if(counts[num] === undefined){\n            counts[num] = 1;\n        }else{\n            counts[num] += 1;\n        }\n        if(counts[num] > max){\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        if(counts[num] === undefined){\n            counts[num] = 1;\n        }else{\n            counts[num] += 1;\n        }\n        if(counts[num] > max){\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    var count = 0;\n    for(var i = 0; i < nums.length; i++){\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    var count = 0;\n    for(var i = 0; i < nums.length; i++){\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        if(counts[num] === undefined){\n            counts[num] = 1;\n        }\n        else{\n            counts[num] = counts[num] + 1;\n        }\n        if(counts[num] > max){\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    var count = 0;\n    for(var i = 0; i < nums.length; i++){\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        if(counts[num] === undefined){\n            counts[num] = 1;\n        }else{\n            counts[num] += 1;\n        }\n        if(counts[num] > max){\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    var count = 0;\n    for(var i = 0; i < nums.length; i++){\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var item = nums[i];\n        if(counts[item] === undefined){\n            counts[item] = 1;\n        }\n        else{\n            counts[item] += 1;\n        }\n        if(counts[item] > max){\n            max = counts[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var count = {};\n    for(var i = 0; i < nums.length; i++){\n        if(count[nums[i]]){\n            count[nums[i]]++;\n        }\n        else{\n            count[nums[i]] = 1;\n        }\n    }\n    var max = 0;\n    var max_key;\n    for(var key in count){\n        if(count[key] > max){\n            max = count[key];\n            max_key = key;\n        }\n    }\n    return max_key;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'7'\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpbd6sd_cx.js:29:10)\n    at Object.<anonymous> (/tmp/tmpbd6sd_cx.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '7',\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max_count = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var item = nums[i];\n        if(counts[item] === undefined){\n            counts[item] = 1;\n        }\n        else{\n            counts[item] += 1;\n        }\n        if(counts[item] > max_count){\n            max_count = counts[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    var count = 0;\n    for(var i = 0; i < nums.length; i++){\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max_count = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        if(counts[num] === undefined){\n            counts[num] = 1;\n        }\n        else{\n            counts[num]++;\n        }\n        if(counts[num] > max_count){\n            max_count = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        if(counts[num] === undefined){\n            counts[num] = 1;\n        }else{\n            counts[num] += 1;\n        }\n        if(counts[num] > max){\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var counts = {};\n    var max = 0;\n    var max_item;\n    for(var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        if(counts[num] === undefined){\n            counts[num] = 1;\n        }\n        else{\n            counts[num] += 1;\n        }\n        if(counts[num] > max){\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var count = {};\n    for(var i = 0; i < nums.length; i++){\n        if(count[nums[i]] == undefined){\n            count[nums[i]] = 1;\n        }\n        else{\n            count[nums[i]] += 1;\n        }\n        if(count[nums[i]] > max){\n            max = count[nums[i]];\n            max_item = nums[i];\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = null;\n    var count = {};\n    for(var i = 0; i < nums.length; i++){\n        if(count[nums[i]] === undefined){\n            count[nums[i]] = 1;\n        }\n        else{\n            count[nums[i]]++;\n        }\n        if(count[nums[i]] > max){\n            max = count[nums[i]];\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var count = 0;\n    var max = 0;\n    var max_item = 0;\n    for(var i = 0; i < nums.length; i++){\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_item = nums[i];\n        }\n        count = 0;\n    }\n    return max_item;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var count = {};\n    for(var i = 0; i < nums.length; i++){\n        var item = nums[i];\n        if(count[item] === undefined){\n            count[item] = 1;\n        }\n        else{\n            count[item] += 1;\n        }\n        if(count[item] > max){\n            max = count[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    let max = 0;\n    let max_num = null;\n    let num_counts = {};\n    for(let i = 0; i < nums.length; i++){\n        if(num_counts[nums[i]] === undefined){\n            num_counts[nums[i]] = 1;\n        }\n        else{\n            num_counts[nums[i]]++;\n        }\n        if(num_counts[nums[i]] > max){\n            max = num_counts[nums[i]];\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for (var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        counts[num] = counts[num] || 0;\n        counts[num]++;\n        if (counts[num] > max){\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var count = {};\n    for(var i = 0; i < nums.length; i++){\n        if(count[nums[i]] === undefined){\n            count[nums[i]] = 1;\n        }\n        else{\n            count[nums[i]] += 1;\n        }\n        if(count[nums[i]] > max){\n            max = count[nums[i]];\n            max_item = nums[i];\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        if(counts[num] == null){\n            counts[num] = 1;\n        }\n        else{\n            counts[num]++;\n        }\n        if(counts[num] > max){\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max_count = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        if(counts[num] === undefined){\n            counts[num] = 1;\n        }else{\n            counts[num]++;\n        }\n        if(counts[num] > max_count){\n            max_count = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    for(var i = 0; i < nums.length; i++){\n        var count = 0;\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var count = 0;\n    var max = 0;\n    var max_item = 0;\n    for(var i = 0; i < nums.length; i++){\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_item = nums[i];\n        }\n        count = 0;\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = 0;\n    var count = 0;\n    for(var i = 0; i < nums.length; i++){\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_item = nums[i];\n        }\n        count = 0;\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    var count = 0;\n    for(var i = 0; i < nums.length; i++){\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    let max = 0;\n    let max_item = null;\n    let counts = {};\n    for(let i = 0; i < nums.length; i++){\n        let num = nums[i];\n        if(counts[num] === undefined){\n            counts[num] = 1;\n        }else{\n            counts[num] += 1;\n        }\n        if(counts[num] > max){\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n  var max = 0;\n  var max_num = 0;\n  var count = 0;\n  for(var i = 0; i < nums.length; i++){\n    for(var j = 0; j < nums.length; j++){\n      if(nums[i] == nums[j]){\n        count++;\n      }\n    }\n    if(count > max){\n      max = count;\n      max_num = nums[i];\n    }\n    count = 0;\n  }\n  return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    for(var i = 0; i < nums.length; i++){\n        var count = 0;\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    var count = 0;\n    for(var i = 0; i < nums.length; i++){\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        counts[num] = counts[num] ? counts[num] + 1 : 1;\n        if(counts[num] > max){\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        if(counts[nums[i]] === undefined){\n            counts[nums[i]] = 1;\n        }\n        else{\n            counts[nums[i]] = counts[nums[i]] + 1;\n        }\n    }\n    var max = 0;\n    var max_key = null;\n    for(var key in counts){\n        if(counts[key] > max){\n            max = counts[key];\n            max_key = key;\n        }\n    }\n    return max_key;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'7'\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmp5cfuvngs.js:29:10)\n    at Object.<anonymous> (/tmp/tmp5cfuvngs.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '7',\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    var num_count = {};\n    for(var i = 0; i < nums.length; i++){\n        if(num_count[nums[i]]){\n            num_count[nums[i]] += 1;\n        }\n        else{\n            num_count[nums[i]] = 1;\n        }\n        if(num_count[nums[i]] > max){\n            max = num_count[nums[i]];\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var count = 0;\n    var max = 0;\n    var item;\n    for(var i=0; i<nums.length; i++){\n        for(var j=0; j<nums.length; j++){\n            if(nums[i] == nums[j])\n                count++;\n            if(max<count){\n                max=count; \n                item = nums[i];\n            }\n        }\n        count=0;\n    }\n    return item;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    for(var i = 0; i < nums.length; i++){\n        var count = 0;\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        counts[num] = counts[num] ? counts[num] + 1 : 1;\n    }\n    var max = 0;\n    var max_num = null;\n    for(var num in counts){\n        if(counts[num] > max){\n            max = counts[num];\n            max_num = num;\n        }\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'7'\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpzjkj_wf6.js:25:10)\n    at Object.<anonymous> (/tmp/tmpzjkj_wf6.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '7',\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        if(counts[num] === undefined){\n            counts[num] = 1;\n        }\n        else{\n            counts[num]++;\n        }\n        if(counts[num] > max){\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    var count = 0;\n    for(var i = 0; i < nums.length; i++){\n        count = 0;\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var count = {};\n    for(var i = 0; i < nums.length; i++){\n        if(count[nums[i]] == undefined){\n            count[nums[i]] = 1;\n        }\n        else{\n            count[nums[i]] += 1;\n        }\n        if(count[nums[i]] > max){\n            max = count[nums[i]];\n            max_item = nums[i];\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    var count = 0;\n    for(var i = 0; i < nums.length; i++){\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    var nums_count = {};\n    for(var i = 0; i < nums.length; i++){\n        if(nums_count[nums[i]] === undefined){\n            nums_count[nums[i]] = 1;\n        }\n        else{\n            nums_count[nums[i]] += 1;\n        }\n        if(nums_count[nums[i]] > max){\n            max = nums_count[nums[i]];\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    for(var i = 0; i < nums.length; i++){\n        var count = 0;\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        if(counts[num] == null){\n            counts[num] = 1;\n        }\n        else{\n            counts[num]++;\n        }\n        if(counts[num] > max){\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    var count = 0;\n    for(var i = 0; i < nums.length; i++){\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var item = nums[i];\n        if(counts[item] === undefined){\n            counts[item] = 1;\n        }else{\n            counts[item] += 1;\n        }\n        if(counts[item] > max){\n            max = counts[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    let max = 0;\n    let max_item = null;\n    let counts = {};\n    for(let i = 0; i < nums.length; i++){\n        let item = nums[i];\n        if(!(item in counts)){\n            counts[item] = 0;\n        }\n        counts[item]++;\n        if(counts[item] > max){\n            max = counts[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max_count = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        if(counts[num] === undefined){\n            counts[num] = 1;\n        }else{\n            counts[num]++;\n        }\n        if(counts[num] > max_count){\n            max_count = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    for(var i = 0; i < nums.length; i++){\n        var count = 0;\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    let max = 0;\n    let max_item = null;\n    let count = {};\n    for(let i = 0; i < nums.length; i++){\n        if(count[nums[i]] === undefined){\n            count[nums[i]] = 1;\n        }\n        else{\n            count[nums[i]] += 1;\n        }\n        if(count[nums[i]] > max){\n            max = count[nums[i]];\n            max_item = nums[i];\n        }\n    }\n    return max_item;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    var count = 0;\n    for(var i = 0; i < nums.length; i++){\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for (var i = 0; i < nums.length; i++){\n        var item = nums[i];\n        if (counts[item] == undefined){\n            counts[item] = 1;\n        } else {\n            counts[item] += 1;\n        }\n        if (counts[item] > max){\n            max = counts[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var count = {};\n    var max = 0;\n    var max_item = 0;\n    for(var i = 0; i < nums.length; i++){\n        if(count[nums[i]]){\n            count[nums[i]] += 1;\n        }\n        else{\n            count[nums[i]] = 1;\n        }\n        if(count[nums[i]] > max){\n            max = count[nums[i]];\n            max_item = nums[i];\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    for(var i = 0; i < nums.length; i++){\n        var count = 0;\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var count = {};\n    for(var i = 0; i < nums.length; i++){\n        var item = nums[i];\n        if(count[item] == undefined){\n            count[item] = 1;\n        }\n        else{\n            count[item] = count[item] + 1;\n        }\n        if(count[item] > max){\n            max = count[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    var count = 0;\n    for(var i = 0; i < nums.length; i++){\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var count = {};\n    for(var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        if(count[num] === undefined){\n            count[num] = 1;\n        }else{\n            count[num] += 1;\n        }\n        if(count[num] > max){\n            max = count[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var count = {};\n    for(var i = 0; i < nums.length; i++){\n        if(count[nums[i]] === undefined){\n            count[nums[i]] = 1;\n        }\n        else{\n            count[nums[i]] += 1;\n        }\n        if(count[nums[i]] > max){\n            max = count[nums[i]];\n            max_item = nums[i];\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var counts = {};\n    for(var i = 0; i<nums.length; i++){\n        var num = nums[i];\n        counts[num] = counts[num] ? counts[num]+1 : 1;\n    }\n    var max_count = 0;\n    var max_num;\n    for(var num in counts){\n        if(counts[num] > max_count){\n            max_count = counts[num];\n            max_num = num;\n        }\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'7'\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpm_n2835y.js:25:10)\n    at Object.<anonymous> (/tmp/tmpm_n2835y.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '7',\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    var count = 0;\n    for(var i = 0; i < nums.length; i++){\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n  var max = 0;\n  var max_item = null;\n  var counts = {};\n  for (var i = 0; i < nums.length; i++){\n    var num = nums[i];\n    if (counts[num] === undefined){\n      counts[num] = 1;\n    } else {\n      counts[num] += 1;\n    }\n    if (counts[num] > max){\n      max = counts[num];\n      max_item = num;\n    }\n  }\n  return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        if(counts[num] == undefined){\n            counts[num] = 1;\n        }\n        else{\n            counts[num] += 1;\n        }\n        if(counts[num] > max){\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    var count = 0;\n    for(var i = 0; i < nums.length; i++){\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        if(counts[num] === undefined){\n            counts[num] = 1;\n        } else {\n            counts[num] += 1;\n        }\n        if(counts[num] > max){\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    var count = 0;\n    for(var i = 0; i < nums.length; i++){\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    var count = 0;\n    for(var i = 0; i < nums.length; i++){\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var counts = {};\n    var compare = 0;\n    var mostFrequent;\n    for(var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        counts[num] = counts[num] ? counts[num] + 1 : 1;\n        if(counts[num] > compare){\n            compare = counts[num];\n            mostFrequent = nums[i];\n        }\n    }\n    return mostFrequent;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var count = {};\n    for(var i = 0; i < nums.length; i++){\n        if(count[nums[i]] === undefined){\n            count[nums[i]] = 1;\n        }\n        else{\n            count[nums[i]] += 1;\n        }\n        if(count[nums[i]] > max){\n            max = count[nums[i]];\n            max_item = nums[i];\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max_count = 1;\n    var res = nums[0];\n    var curr_count = 1;\n    for(var i = 1; i < nums.length; i++){\n        if(nums[i] == nums[i-1]){\n            curr_count++;\n        }\n        else{\n            if(curr_count > max_count){\n                max_count = curr_count;\n                res = nums[i-1];\n            }\n            curr_count = 1;\n        }\n    }\n    if(curr_count > max_count){\n        max_count = curr_count;\n        res = nums[nums.length-1];\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmp0re258eg.js:31:10)\n    at Object.<anonymous> (/tmp/tmp0re258eg.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var item = 0;\n    var count = 0;\n    for(var i = 0; i < nums.length; i++){\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            item = nums[i];\n        }\n        count = 0;\n    }\n    return item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var counts = {};\n    for(var i = 0; i<nums.length; i++){\n        if(counts[nums[i]] === undefined){\n            counts[nums[i]] = 1;\n        }\n        else{\n            counts[nums[i]] += 1;\n        }\n    }\n    var max = 0;\n    var max_key = null;\n    for(var key in counts){\n        if(counts[key] > max){\n            max = counts[key];\n            max_key = key;\n        }\n    }\n    return max_key;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'7'\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpitvtjw0u.js:29:10)\n    at Object.<anonymous> (/tmp/tmpitvtjw0u.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '7',\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        if(counts[num] == null){\n            counts[num] = 1;\n        }\n        else{\n            counts[num] += 1;\n        }\n        if(counts[num] > max){\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        if(counts[num] === undefined){\n            counts[num] = 1;\n        }\n        else{\n            counts[num] += 1;\n        }\n        if(counts[num] > max){\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    var count = 0;\n    for(var i = 0; i < nums.length; i++){\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    for(var i = 0; i < nums.length; i++){\n        var count = 0;\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var item = nums[i];\n        if(counts[item] === undefined){\n            counts[item] = 1;\n        }\n        else{\n            counts[item] += 1;\n        }\n        if(counts[item] > max){\n            max = counts[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    var count = 0;\n    var num_count = {};\n    for(var i = 0; i < nums.length; i++){\n        if(num_count[nums[i]]){\n            num_count[nums[i]] += 1;\n        }\n        else{\n            num_count[nums[i]] = 1;\n        }\n    }\n    for(var key in num_count){\n        if(num_count[key] > max){\n            max = num_count[key];\n            max_num = key;\n        }\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'7'\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmponyfrbxi.js:30:10)\n    at Object.<anonymous> (/tmp/tmponyfrbxi.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '7',\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var count = {};\n    for(var i = 0; i < nums.length; i++){\n        if(count[nums[i]] === undefined){\n            count[nums[i]] = 1;\n        }\n        else{\n            count[nums[i]] += 1;\n        }\n        if(count[nums[i]] > max){\n            max = count[nums[i]];\n            max_item = nums[i];\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var item = nums[i];\n        if(counts[item] == undefined){\n            counts[item] = 1;\n        }\n        else{\n            counts[item] += 1;\n        }\n        if(counts[item] > max){\n            max = counts[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var counts = {};\n    var max = 0;\n    var max_item = null;\n    for(var i = 0; i < nums.length; i++){\n        var item = nums[i];\n        if(counts[item] === undefined){\n            counts[item] = 1;\n        }\n        else{\n            counts[item] += 1;\n        }\n        if(counts[item] > max){\n            max = counts[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    let max = 0;\n    let max_num = 0;\n    let num_count = {};\n    for(let i = 0; i < nums.length; i++){\n        if(num_count[nums[i]]){\n            num_count[nums[i]]++;\n        }\n        else{\n            num_count[nums[i]] = 1;\n        }\n        if(num_count[nums[i]] > max){\n            max = num_count[nums[i]];\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    let nums_dict = {};\n    for(let i = 0; i < nums.length; i++){\n        if(nums_dict[nums[i]]){\n            nums_dict[nums[i]] += 1;\n        }\n        else{\n            nums_dict[nums[i]] = 1;\n        }\n    }\n    for(let key in nums_dict){\n        if(nums_dict[key] > max){\n            max = nums_dict[key];\n            max_num = key;\n        }\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'7'\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpeznc56o_.js:30:10)\n    at Object.<anonymous> (/tmp/tmpeznc56o_.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '7',\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var count = {};\n    for(var i = 0; i < nums.length; i++){\n        var item = nums[i];\n        if(count[item] == undefined){\n            count[item] = 1;\n        }\n        else{\n            count[item] += 1;\n        }\n        if(count[item] > max){\n            max = count[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var item = nums[i];\n        if(counts[item] === undefined){\n            counts[item] = 1;\n        }\n        else{\n            counts[item] += 1;\n        }\n        if(counts[item] > max){\n            max = counts[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i=0; i<nums.length; i++){\n        var num = nums[i];\n        if(counts[num] === undefined){\n            counts[num] = 1;\n        }\n        else{\n            counts[num]++;\n        }\n        if(counts[num] > max){\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item;\n    var count = {};\n    for(var i = 0; i < nums.length; i++){\n        if(count[nums[i]] === undefined){\n            count[nums[i]] = 1;\n        }\n        else{\n            count[nums[i]] += 1;\n        }\n        if(count[nums[i]] > max){\n            max = count[nums[i]];\n            max_item = nums[i];\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        if(counts[num] === undefined){\n            counts[num] = 1;\n        }\n        else{\n            counts[num] = counts[num] + 1;\n        }\n        if(counts[num] > max){\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var counts = {};\n    var max = 0;\n    var max_item = null;\n    for(var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        if(counts[num] === undefined){\n            counts[num] = 1;\n        }\n        else{\n            counts[num] += 1;\n        }\n        if(counts[num] > max){\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        if(counts[num] == undefined){\n            counts[num] = 1;\n        }\n        else{\n            counts[num] += 1;\n        }\n        if(counts[num] > max){\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var counts = {};\n    for (var i = 0; i < nums.length; i++) {\n        var num = nums[i];\n        counts[num] = counts[num] ? counts[num] + 1 : 1;\n    }\n    var max = 0;\n    var max_num = null;\n    for (var num in counts) {\n        if (counts[num] > max) {\n            max = counts[num];\n            max_num = num;\n        }\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'7'\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmp49qi37ja.js:25:10)\n    at Object.<anonymous> (/tmp/tmp49qi37ja.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '7',\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var count = {};\n    for(var i = 0; i < nums.length; i++){\n        var item = nums[i];\n        if(count[item] === undefined){\n            count[item] = 1;\n        }else{\n            count[item] += 1;\n        }\n        if(count[item] > max){\n            max = count[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        if(counts[num] === undefined){\n            counts[num] = 1;\n        }else{\n            counts[num] += 1;\n        }\n        if(counts[num] > max){\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var dict = {};\n    for(var i = 0; i < nums.length; i++){\n        if(dict[nums[i]] == undefined){\n            dict[nums[i]] = 1;\n        }\n        else{\n            dict[nums[i]] += 1;\n        }\n    }\n    var max = 0;\n    var max_key = 0;\n    for(var key in dict){\n        if(dict[key] > max){\n            max = dict[key];\n            max_key = key;\n        }\n    }\n    return max_key;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'7'\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpdd64saz_.js:28:10)\n    at Object.<anonymous> (/tmp/tmpdd64saz_.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '7',\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    for(var i = 0; i < nums.length; i++){\n        var count = 0;\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max_count = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var item = nums[i];\n        if(counts[item] === undefined){\n            counts[item] = 1;\n        }\n        else{\n            counts[item] += 1;\n        }\n        if(counts[item] > max_count){\n            max_count = counts[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max_count = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        if(counts[num] === undefined){\n            counts[num] = 1;\n        }\n        else{\n            counts[num] += 1;\n        }\n        if(counts[num] > max_count){\n            max_count = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    let max = 0;\n    let max_item = null;\n    let counts = {};\n    for(let num of nums){\n        counts[num] = counts[num] + 1 || 1;\n        if(counts[num] > max){\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max_count = 0;\n    var max_item = null;\n    var counts = {};\n    for (var i = 0; i < nums.length; i++) {\n        var item = nums[i];\n        if (counts[item] === undefined) {\n            counts[item] = 1;\n        } else {\n            counts[item] += 1;\n        }\n        if (counts[item] > max_count) {\n            max_count = counts[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    for(var i = 0; i < nums.length; i++){\n        var count = 0;\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for (var i = 0; i < nums.length; i++) {\n        var num = nums[i];\n        if (counts[num] === undefined) {\n            counts[num] = 1;\n        } else {\n            counts[num] += 1;\n        }\n        if (counts[num] > max) {\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        if(counts[num] === undefined){\n            counts[num] = 1;\n        }else{\n            counts[num] += 1;\n        }\n        if(counts[num] > max){\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var item = nums[i];\n        if(counts[item] === undefined){\n            counts[item] = 1;\n        }\n        else{\n            counts[item]++;\n        }\n        if(counts[item] > max){\n            max = counts[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    var count = 0;\n    for(var i = 0; i < nums.length; i++){\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max_count = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        if(counts[nums[i]] === undefined){\n            counts[nums[i]] = 1;\n        }\n        else{\n            counts[nums[i]] += 1;\n        }\n        if(counts[nums[i]] > max_count){\n            max_count = counts[nums[i]];\n            max_item = nums[i];\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    let max = 0;\n    let max_item = null;\n    let counts = {};\n    for(let i = 0; i < nums.length; i++){\n        if(counts[nums[i]] === undefined){\n            counts[nums[i]] = 1;\n        }\n        else{\n            counts[nums[i]] += 1;\n        }\n        if(counts[nums[i]] > max){\n            max = counts[nums[i]];\n            max_item = nums[i];\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var item = nums[i];\n        if(counts[item] == null){\n            counts[item] = 1;\n        }\n        else{\n            counts[item] += 1;\n        }\n        if(counts[item] > max){\n            max = counts[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    var count = 0;\n    for(var i = 0; i < nums.length; i++){\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    var count = 0;\n    for(var i = 0; i < nums.length; i++){\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var count = 0;\n    var max = 0;\n    var item;\n    for(var i=0; i<nums.length; i++){\n        for(var j=0; j<nums.length; j++){\n            if(nums[i] == nums[j])\n                count++;\n            if(max<count){\n                max=count; \n                item = nums[i];\n            }\n        }\n        count=0;\n    }\n    return item;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    for(var i = 0; i < nums.length; i++){\n        var count = 0;\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var count = {};\n    for(var i = 0; i < nums.length; i++){\n        var item = nums[i];\n        if(count[item] == null){\n            count[item] = 1;\n        }\n        else{\n            count[item] += 1;\n        }\n        if(count[item] > max){\n            max = count[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var count = {};\n    for(var i = 0; i < nums.length; i++){\n        if(count[nums[i]] == null){\n            count[nums[i]] = 1;\n        }\n        else{\n            count[nums[i]] += 1;\n        }\n        if(count[nums[i]] > max){\n            max = count[nums[i]];\n            max_item = nums[i];\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var item = nums[i];\n        if(counts[item] === undefined){\n            counts[item] = 1;\n        }\n        else{\n            counts[item] += 1;\n        }\n        if(counts[item] > max){\n            max = counts[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = 0;\n    var count = 0;\n    var item = 0;\n    for(var i=0; i<nums.length; i++){\n        item = nums[i];\n        count = 0;\n        for(var j=0; j<nums.length; j++){\n            if(item == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_item = item;\n        }\n    }\n    return max_item;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var item = nums[i];\n        if(counts[item] === undefined){\n            counts[item] = 1;\n        }else{\n            counts[item] = counts[item] + 1;\n        }\n        if(counts[item] > max){\n            max = counts[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    for(var i = 0; i < nums.length; i++){\n        var count = 0;\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var count = {};\n    for(var i=0; i<nums.length; i++){\n        if(count[nums[i]] == undefined){\n            count[nums[i]] = 1;\n        }\n        else{\n            count[nums[i]] += 1;\n        }\n        if(count[nums[i]] > max){\n            max = count[nums[i]];\n            max_item = nums[i];\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var count = {};\n    for(var i = 0; i < nums.length; i++){\n        if(count[nums[i]] === undefined){\n            count[nums[i]] = 1;\n        }\n        else{\n            count[nums[i]] += 1;\n        }\n        if(count[nums[i]] > max){\n            max = count[nums[i]];\n            max_item = nums[i];\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    var num_count = {};\n    for(var i = 0; i < nums.length; i++){\n        if(num_count[nums[i]] === undefined){\n            num_count[nums[i]] = 1;\n        }\n        else{\n            num_count[nums[i]] += 1;\n        }\n        if(num_count[nums[i]] > max){\n            max = num_count[nums[i]];\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var count = 0;\n    var max = 0;\n    var item;\n    for(var i = 0; i < nums.length; i++){\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            item = nums[i];\n        }\n        count = 0;\n    }\n    return item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    var count = 0;\n    for(var i = 0; i < nums.length; i++){\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        if(counts[num] == undefined){\n            counts[num] = 1;\n        }\n        else{\n            counts[num] += 1;\n        }\n        if(counts[num] > max){\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var item = 0;\n    var dict = {};\n    for(var i = 0; i < nums.length; i++){\n        if(dict[nums[i]] == undefined){\n            dict[nums[i]] = 1;\n        }\n        else{\n            dict[nums[i]] += 1;\n        }\n    }\n    for(var key in dict){\n        if(dict[key] > max){\n            max = dict[key];\n            item = key;\n        }\n    }\n    return item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'7'\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpk59_h1wb.js:29:10)\n    at Object.<anonymous> (/tmp/tmpk59_h1wb.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '7',\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    var count = 0;\n    for(var i = 0; i < nums.length; i++){\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var item = nums[i];\n        if(counts[item] === undefined){\n            counts[item] = 1;\n        }\n        else{\n            counts[item]++;\n        }\n        if(counts[item] > max){\n            max = counts[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var item = nums[i];\n        if(counts[item] === undefined){\n            counts[item] = 1;\n        }\n        else{\n            counts[item] += 1;\n        }\n        if(counts[item] > max){\n            max = counts[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max_count = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        if(counts[num] === undefined){\n            counts[num] = 1;\n        }else{\n            counts[num]++;\n        }\n        if(counts[num] > max_count){\n            max_count = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var dict = {};\n    for(var i=0; i<nums.length; i++){\n        if(nums[i] in dict){\n            dict[nums[i]] += 1;\n        }\n        else{\n            dict[nums[i]] = 1;\n        }\n    }\n    for(var key in dict){\n        if(dict[key] > max){\n            max = dict[key];\n            max_item = key;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'7'\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpuqoups3k.js:29:10)\n    at Object.<anonymous> (/tmp/tmpuqoups3k.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '7',\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    for (var i = 0; i < nums.length; i++){\n        var count = 0;\n        for (var j = 0; j < nums.length; j++){\n            if (nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if (count > max){\n            max = count;\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max_count = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var item = nums[i];\n        if(counts[item] === undefined){\n            counts[item] = 1;\n        }\n        else{\n            counts[item] += 1;\n        }\n        if(counts[item] > max_count){\n            max_count = counts[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    for(var i=0; i<nums.length; i++){\n        var count = 0;\n        for(var j=0; j<nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    var count = 0;\n    for(var i = 0; i < nums.length; i++){\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i=0; i<nums.length; i++){\n        var item = nums[i];\n        if(counts[item] == undefined){\n            counts[item] = 1;\n        }else{\n            counts[item] += 1;\n        }\n        if(counts[item] > max){\n            max = counts[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item;\n    var count = {};\n    for(var i = 0; i < nums.length; i++){\n        if(count[nums[i]] === undefined){\n            count[nums[i]] = 1;\n        }\n        else{\n            count[nums[i]] += 1;\n        }\n        if(count[nums[i]] > max){\n            max = count[nums[i]];\n            max_item = nums[i];\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item;\n    var count = {};\n    for(var i = 0; i < nums.length; i++){\n        if(count[nums[i]] === undefined){\n            count[nums[i]] = 1;\n        }\n        else{\n            count[nums[i]] += 1;\n        }\n        if(count[nums[i]] > max){\n            max = count[nums[i]];\n            max_item = nums[i];\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    var count = 0;\n    for(var i = 0; i < nums.length; i++){\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    for(var i = 0; i < nums.length; i++){\n        var count = 0;\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max_count = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        if(counts[num] === undefined){\n            counts[num] = 1;\n        }\n        else{\n            counts[num]++;\n        }\n        if(counts[num] > max_count){\n            max_count = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        for(let j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    var count = 0;\n    for(var i = 0; i < nums.length; i++){\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_item = null;\n    var count = {};\n    for(var i = 0; i < nums.length; i++){\n        if(count[nums[i]] === undefined){\n            count[nums[i]] = 1;\n        }\n        else{\n            count[nums[i]]++;\n        }\n        if(count[nums[i]] > max){\n            max = count[nums[i]];\n            max_item = nums[i];\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var item = 0;\n    var count = 0;\n    for(var i = 0; i < nums.length; i++){\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] === nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            item = nums[i];\n        }\n        count = 0;\n    }\n    return item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    for(var i = 0; i < nums.length; i++){\n        var count = 0;\n        for(var j = 0; j < nums.length; j++){\n            if(nums[i] == nums[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max_count = 0;\n    var max_item = null;\n    var counts = {};\n    for(var i=0; i<nums.length; i++){\n        var num = nums[i];\n        if(counts[num] === undefined){\n            counts[num] = 1;\n        }else{\n            counts[num] = counts[num] + 1;\n        }\n        if(counts[num] > max_count){\n            max_count = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    var max = 0;\n    var max_num = 0;\n    var count = 0;\n    var nums_count = {};\n    for(var i = 0; i < nums.length; i++){\n        if(nums_count[nums[i]]){\n            nums_count[nums[i]]++;\n        }\n        else{\n            nums_count[nums[i]] = 1;\n        }\n    }\n    for(var key in nums_count){\n        if(nums_count[key] > max){\n            max = nums_count[key];\n            max_num = key;\n        }\n    }\n    return max_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'7'\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpq1654bje.js:30:10)\n    at Object.<anonymous> (/tmp/tmpq1654bje.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '7',\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums){\n    let max = 0;\n    let max_item = null;\n    let count = {};\n    for(let i = 0; i < nums.length; i++){\n        if(count[nums[i]] === undefined){\n            count[nums[i]] = 1;\n        }\n        else{\n            count[nums[i]] += 1;\n        }\n        if(count[nums[i]] > max){\n            max = count[nums[i]];\n            max_item = nums[i];\n        }\n    }\n    return max_item;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}