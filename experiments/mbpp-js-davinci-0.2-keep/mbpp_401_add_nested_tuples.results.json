{
  "name": "mbpp_401_add_nested_tuples",
  "language": "js",
  "prompt": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_401_add_nested_tuples.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = []; \n    for (var x = 0; x < test_tup1.length; x++) { \n        result.push(test_tup1[x] + test_tup2[x]); \n    } \n    return result; \n}\nvar test_tup1 = [(1, 2), (3, 4), (5, 6)]; \nvar test_tup2 = [(7, 8), (9, 10), (11, 12)]; \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '1,36,7',\n  '4,53,9',\n  '2,91,1',\n  '1,107,3'\n]\n\nshould loosely deep-equal\n\n[\n  [\n    7,\n    10\n  ],\n  [\n    7,\n    14\n  ],\n  [\n    3,\n    10\n  ],\n  [\n    8,\n    13\n  ]\n]\n    at test (/tmp/tmpn9x1b77k.js:16:10)\n    at Object.<anonymous> (/tmp/tmpn9x1b77k.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '1,36,7', '4,53,9', '2,91,1', '1,107,3' ],\n  expected: [ [ 7, 10 ], [ 7, 14 ], [ 3, 10 ], [ 8, 13 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] + test_tup2[i]);\n    }\n    return result;\n}\n\nvar test_tup1 = (1, 2, 3, 4);\nvar test_tup2 = (5, 6, 7, 8);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '1,36,7',\n  '4,53,9',\n  '2,91,1',\n  '1,107,3'\n]\n\nshould loosely deep-equal\n\n[\n  [\n    7,\n    10\n  ],\n  [\n    7,\n    14\n  ],\n  [\n    3,\n    10\n  ],\n  [\n    8,\n    13\n  ]\n]\n    at test (/tmp/tmp5z_x389n.js:17:10)\n    at Object.<anonymous> (/tmp/tmp5z_x389n.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '1,36,7', '4,53,9', '2,91,1', '1,107,3' ],\n  expected: [ [ 7, 10 ], [ 7, 14 ], [ 3, 10 ], [ 8, 13 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\n\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        result.push(test_tup1[i] + test_tup2[i]);\n    }\n    return result;\n}\nvar test_tup1 = ((1, 2), (3, 4), (5, 6));\nvar test_tup2 = ((7, 8), (9, 10), (11, 12));\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '1,36,7',\n  '4,53,9',\n  '2,91,1',\n  '1,107,3'\n]\n\nshould loosely deep-equal\n\n[\n  [\n    7,\n    10\n  ],\n  [\n    7,\n    14\n  ],\n  [\n    3,\n    10\n  ],\n  [\n    8,\n    13\n  ]\n]\n    at test (/tmp/tmpbccu3mu1.js:16:10)\n    at Object.<anonymous> (/tmp/tmpbccu3mu1.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '1,36,7', '4,53,9', '2,91,1', '1,107,3' ],\n  expected: [ [ 7, 10 ], [ 7, 14 ], [ 3, 10 ], [ 8, 13 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var tup = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            tup.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(tup);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] + test_tup2[i]);\n    }\n    return result;\n}\nvar test_tup1 = ((1, 2), (3, 4));\nvar test_tup2 = ((5, 6), (7, 8));\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '1,36,7',\n  '4,53,9',\n  '2,91,1',\n  '1,107,3'\n]\n\nshould loosely deep-equal\n\n[\n  [\n    7,\n    10\n  ],\n  [\n    7,\n    14\n  ],\n  [\n    3,\n    10\n  ],\n  [\n    8,\n    13\n  ]\n]\n    at test (/tmp/tmp9kxgxq90.js:16:10)\n    at Object.<anonymous> (/tmp/tmp9kxgxq90.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '1,36,7', '4,53,9', '2,91,1', '1,107,3' ],\n  expected: [ [ 7, 10 ], [ 7, 14 ], [ 3, 10 ], [ 8, 13 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var tup = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            tup.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(tup);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var tup = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            tup.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(tup);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] + test_tup2[i]);\n    }\n    return result;\n}\nvar test_tup1 = (1, 2, 3);\nvar test_tup2 = (4, 5, 6);\nvar res = add_nested_tuples(test_tup1, test_tup2);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '1,36,7',\n  '4,53,9',\n  '2,91,1',\n  '1,107,3'\n]\n\nshould loosely deep-equal\n\n[\n  [\n    7,\n    10\n  ],\n  [\n    7,\n    14\n  ],\n  [\n    3,\n    10\n  ],\n  [\n    8,\n    13\n  ]\n]\n    at test (/tmp/tmphqoe16ju.js:17:10)\n    at Object.<anonymous> (/tmp/tmphqoe16ju.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '1,36,7', '4,53,9', '2,91,1', '1,107,3' ],\n  expected: [ [ 7, 10 ], [ 7, 14 ], [ 3, 10 ], [ 8, 13 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        res.push(test_tup1[i] + test_tup2[i]);\n    }\n    return res;\n}\nvar test_tup1 = ((1, 2), (3, 4), (5, 6));\nvar test_tup2 = ((7, 8), (9, 10), (11, 12));\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '1,36,7',\n  '4,53,9',\n  '2,91,1',\n  '1,107,3'\n]\n\nshould loosely deep-equal\n\n[\n  [\n    7,\n    10\n  ],\n  [\n    7,\n    14\n  ],\n  [\n    3,\n    10\n  ],\n  [\n    8,\n    13\n  ]\n]\n    at test (/tmp/tmphh2_s7k_.js:16:10)\n    at Object.<anonymous> (/tmp/tmphh2_s7k_.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '1,36,7', '4,53,9', '2,91,1', '1,107,3' ],\n  expected: [ [ 7, 10 ], [ 7, 14 ], [ 3, 10 ], [ 8, 13 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var tup = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            tup.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(tup);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        res.push(test_tup1[i] + test_tup2[i]);\n    }\n    return res;\n}\nvar test_tup1 = ((1, 2), (3, 4), (5, 6));\nvar test_tup2 = ((7, 8), (9, 10), (11, 12));\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '1,36,7',\n  '4,53,9',\n  '2,91,1',\n  '1,107,3'\n]\n\nshould loosely deep-equal\n\n[\n  [\n    7,\n    10\n  ],\n  [\n    7,\n    14\n  ],\n  [\n    3,\n    10\n  ],\n  [\n    8,\n    13\n  ]\n]\n    at test (/tmp/tmphh2_s7k_.js:16:10)\n    at Object.<anonymous> (/tmp/tmphh2_s7k_.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '1,36,7', '4,53,9', '2,91,1', '1,107,3' ],\n  expected: [ [ 7, 10 ], [ 7, 14 ], [ 3, 10 ], [ 8, 13 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var tup = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            tup.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(tup);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var tup = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            tup.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(tup);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        res.push(test_tup1[i] + test_tup2[i]);\n    }\n    return res;\n}\nvar test_tup1 = ((1, 2), (3, 4), (5, 6));\nvar test_tup2 = ((7, 8), (9, 10), (11, 12));\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '1,36,7',\n  '4,53,9',\n  '2,91,1',\n  '1,107,3'\n]\n\nshould loosely deep-equal\n\n[\n  [\n    7,\n    10\n  ],\n  [\n    7,\n    14\n  ],\n  [\n    3,\n    10\n  ],\n  [\n    8,\n    13\n  ]\n]\n    at test (/tmp/tmphh2_s7k_.js:16:10)\n    at Object.<anonymous> (/tmp/tmphh2_s7k_.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '1,36,7', '4,53,9', '2,91,1', '1,107,3' ],\n  expected: [ [ 7, 10 ], [ 7, 14 ], [ 3, 10 ], [ 8, 13 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var tup = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            tup.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(tup);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    var len = test_tup1.length;\n    for (var i = 0; i < len; i++){\n        var tup = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            tup.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(tup);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        res.push(test_tup1[i] + test_tup2[i]);\n    }\n    return res;\n}\nvar test_tup1 = ((1, 2), (3, 4), (5, 6));\nvar test_tup2 = ((7, 8), (9, 10), (11, 12));\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '1,36,7',\n  '4,53,9',\n  '2,91,1',\n  '1,107,3'\n]\n\nshould loosely deep-equal\n\n[\n  [\n    7,\n    10\n  ],\n  [\n    7,\n    14\n  ],\n  [\n    3,\n    10\n  ],\n  [\n    8,\n    13\n  ]\n]\n    at test (/tmp/tmph6kul8ub.js:16:10)\n    at Object.<anonymous> (/tmp/tmph6kul8ub.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '1,36,7', '4,53,9', '2,91,1', '1,107,3' ],\n  expected: [ [ 7, 10 ], [ 7, 14 ], [ 3, 10 ], [ 8, 13 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var tup = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            tup.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(tup);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        res.push(test_tup1[i] + test_tup2[i]);\n    }\n    return res;\n}\nvar test_tup1 = ((1, 2), (3, 4));\nvar test_tup2 = ((5, 6), (7, 8));\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '1,36,7',\n  '4,53,9',\n  '2,91,1',\n  '1,107,3'\n]\n\nshould loosely deep-equal\n\n[\n  [\n    7,\n    10\n  ],\n  [\n    7,\n    14\n  ],\n  [\n    3,\n    10\n  ],\n  [\n    8,\n    13\n  ]\n]\n    at test (/tmp/tmpsdwyh0tn.js:16:10)\n    at Object.<anonymous> (/tmp/tmpsdwyh0tn.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '1,36,7', '4,53,9', '2,91,1', '1,107,3' ],\n  expected: [ [ 7, 10 ], [ 7, 14 ], [ 3, 10 ], [ 8, 13 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        res.push(test_tup1[i] + test_tup2[i]);\n    }\n    return res;\n}\nvar test_tup1 = ((1, 2), (3, 4));\nvar test_tup2 = ((5, 6), (7, 8));\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '1,36,7',\n  '4,53,9',\n  '2,91,1',\n  '1,107,3'\n]\n\nshould loosely deep-equal\n\n[\n  [\n    7,\n    10\n  ],\n  [\n    7,\n    14\n  ],\n  [\n    3,\n    10\n  ],\n  [\n    8,\n    13\n  ]\n]\n    at test (/tmp/tmpsdwyh0tn.js:16:10)\n    at Object.<anonymous> (/tmp/tmpsdwyh0tn.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '1,36,7', '4,53,9', '2,91,1', '1,107,3' ],\n  expected: [ [ 7, 10 ], [ 7, 14 ], [ 3, 10 ], [ 8, 13 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2,3], [4,5,6], [7,8,9]];\nvar test_tup2 = [[10,20,30], [40,50,60], [70,80,90]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        res.push(test_tup1[i] + test_tup2[i]);\n    }\n    return res;\n}\nvar test_tup1 = ((1, 2), (3, 4), (5, 6));\nvar test_tup2 = ((7, 8), (9, 10), (11, 12));\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '1,36,7',\n  '4,53,9',\n  '2,91,1',\n  '1,107,3'\n]\n\nshould loosely deep-equal\n\n[\n  [\n    7,\n    10\n  ],\n  [\n    7,\n    14\n  ],\n  [\n    3,\n    10\n  ],\n  [\n    8,\n    13\n  ]\n]\n    at test (/tmp/tmphh2_s7k_.js:16:10)\n    at Object.<anonymous> (/tmp/tmphh2_s7k_.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '1,36,7', '4,53,9', '2,91,1', '1,107,3' ],\n  expected: [ [ 7, 10 ], [ 7, 14 ], [ 3, 10 ], [ 8, 13 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = []; \n    for (var x = 0; x < test_tup1.length; x++) { \n        for (var y = 0; y < test_tup1[x].length; y++) { \n            result.push(test_tup1[x][y] + test_tup2[x][y]); \n        } \n    } \n    return result; \n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]]; \nvar test_tup2 = [[7, 8], [9, 10], [11, 12]]; \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  7,\n  10,\n  7,\n  14,\n  3,\n  10,\n  8,\n  13\n]\n\nshould loosely deep-equal\n\n[\n  [\n    7,\n    10\n  ],\n  [\n    7,\n    14\n  ],\n  [\n    3,\n    10\n  ],\n  [\n    8,\n    13\n  ]\n]\n    at test (/tmp/tmp5577ianp.js:18:10)\n    at Object.<anonymous> (/tmp/tmp5577ianp.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    7, 10, 7, 14,\n    3, 10, 8, 13\n  ],\n  expected: [ [ 7, 10 ], [ 7, 14 ], [ 3, 10 ], [ 8, 13 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = []; \n    for (var x = 0; x < test_tup1.length; x++) { \n        for (var y = 0; y < test_tup1[x].length; y++) { \n            result.push(test_tup1[x][y] + test_tup2[x][y]); \n        } \n    } \n    return result; \n}\nvar test_tup1 = [[1, 2], [3, 4]]; \nvar test_tup2 = [[5, 6], [7, 8]]; \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  7,\n  10,\n  7,\n  14,\n  3,\n  10,\n  8,\n  13\n]\n\nshould loosely deep-equal\n\n[\n  [\n    7,\n    10\n  ],\n  [\n    7,\n    14\n  ],\n  [\n    3,\n    10\n  ],\n  [\n    8,\n    13\n  ]\n]\n    at test (/tmp/tmpykypjsve.js:18:10)\n    at Object.<anonymous> (/tmp/tmpykypjsve.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    7, 10, 7, 14,\n    3, 10, 8, 13\n  ],\n  expected: [ [ 7, 10 ], [ 7, 14 ], [ 3, 10 ], [ 8, 13 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = []; \n    for (var x = 0; x < test_tup1.length; x++) { \n        var tup = []; \n        for (var y = 0; y < test_tup1[0].length; y++) { \n            tup.push(test_tup1[x][y] + test_tup2[x][y]); \n        } \n        result.push(tup); \n    } \n    return result; \n}\nvar test_tup1 = [[1, 2], [3, 4]]; \nvar test_tup2 = [[5, 6], [7, 8]]; \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var tup = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            tup.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(tup);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        res.push(test_tup1[i] + test_tup2[i]);\n    }\n    return res;\n}\nvar test_tup1 = ((1, 2), (3, 4), (5, 6));\nvar test_tup2 = ((7, 8), (9, 10), (11, 12));\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '1,36,7',\n  '4,53,9',\n  '2,91,1',\n  '1,107,3'\n]\n\nshould loosely deep-equal\n\n[\n  [\n    7,\n    10\n  ],\n  [\n    7,\n    14\n  ],\n  [\n    3,\n    10\n  ],\n  [\n    8,\n    13\n  ]\n]\n    at test (/tmp/tmphh2_s7k_.js:16:10)\n    at Object.<anonymous> (/tmp/tmphh2_s7k_.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '1,36,7', '4,53,9', '2,91,1', '1,107,3' ],\n  expected: [ [ 7, 10 ], [ 7, 14 ], [ 3, 10 ], [ 8, 13 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        result.push(test_tup1[i] + test_tup2[i]);\n    }\n    return result;\n}\n\nvar test_tup1 = ((1, 2), (3, 4), (5, 6));\nvar test_tup2 = ((7, 8), (9, 10), (11, 12));\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '1,36,7',\n  '4,53,9',\n  '2,91,1',\n  '1,107,3'\n]\n\nshould loosely deep-equal\n\n[\n  [\n    7,\n    10\n  ],\n  [\n    7,\n    14\n  ],\n  [\n    3,\n    10\n  ],\n  [\n    8,\n    13\n  ]\n]\n    at test (/tmp/tmp_dhemki0.js:17:10)\n    at Object.<anonymous> (/tmp/tmp_dhemki0.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '1,36,7', '4,53,9', '2,91,1', '1,107,3' ],\n  expected: [ [ 7, 10 ], [ 7, 14 ], [ 3, 10 ], [ 8, 13 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var tup1 = test_tup1[i];\n        var tup2 = test_tup2[i];\n        var temp = [];\n        for (var j = 0; j < tup1.length; j++) {\n            temp.push(tup1[j] + tup2[j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\n\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        res.push(test_tup1[i] + test_tup2[i]);\n    }\n    return res;\n}\nvar test_tup1 = ((1, 2), (3, 4));\nvar test_tup2 = ((5, 6), (7, 8));\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '1,36,7',\n  '4,53,9',\n  '2,91,1',\n  '1,107,3'\n]\n\nshould loosely deep-equal\n\n[\n  [\n    7,\n    10\n  ],\n  [\n    7,\n    14\n  ],\n  [\n    3,\n    10\n  ],\n  [\n    8,\n    13\n  ]\n]\n    at test (/tmp/tmpsdwyh0tn.js:16:10)\n    at Object.<anonymous> (/tmp/tmpsdwyh0tn.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '1,36,7', '4,53,9', '2,91,1', '1,107,3' ],\n  expected: [ [ 7, 10 ], [ 7, 14 ], [ 3, 10 ], [ 8, 13 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        res.push(test_tup1[i] + test_tup2[i]);\n    }\n    return res;\n}\nvar test_tup1 = ((1, 2), (3, 4), (5, 6));\nvar test_tup2 = ((7, 8), (9, 10), (11, 12));\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '1,36,7',\n  '4,53,9',\n  '2,91,1',\n  '1,107,3'\n]\n\nshould loosely deep-equal\n\n[\n  [\n    7,\n    10\n  ],\n  [\n    7,\n    14\n  ],\n  [\n    3,\n    10\n  ],\n  [\n    8,\n    13\n  ]\n]\n    at test (/tmp/tmphh2_s7k_.js:16:10)\n    at Object.<anonymous> (/tmp/tmphh2_s7k_.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '1,36,7', '4,53,9', '2,91,1', '1,107,3' ],\n  expected: [ [ 7, 10 ], [ 7, 14 ], [ 3, 10 ], [ 8, 13 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        result.push(test_tup1[i] + test_tup2[i]);\n    }\n    return result;\n}\nvar test_tup1 = ((1, 2), (3, 4), (5, 6));\nvar test_tup2 = ((7, 8), (9, 10), (11, 12));\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '1,36,7',\n  '4,53,9',\n  '2,91,1',\n  '1,107,3'\n]\n\nshould loosely deep-equal\n\n[\n  [\n    7,\n    10\n  ],\n  [\n    7,\n    14\n  ],\n  [\n    3,\n    10\n  ],\n  [\n    8,\n    13\n  ]\n]\n    at test (/tmp/tmpbccu3mu1.js:16:10)\n    at Object.<anonymous> (/tmp/tmpbccu3mu1.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '1,36,7', '4,53,9', '2,91,1', '1,107,3' ],\n  expected: [ [ 7, 10 ], [ 7, 14 ], [ 3, 10 ], [ 8, 13 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\n\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        res.push(test_tup1[i] + test_tup2[i]);\n    }\n    return res;\n}\nvar test_tup1 = ((1, 2), (3, 4), (5, 6));\nvar test_tup2 = ((7, 8), (9, 10), (11, 12));\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '1,36,7',\n  '4,53,9',\n  '2,91,1',\n  '1,107,3'\n]\n\nshould loosely deep-equal\n\n[\n  [\n    7,\n    10\n  ],\n  [\n    7,\n    14\n  ],\n  [\n    3,\n    10\n  ],\n  [\n    8,\n    13\n  ]\n]\n    at test (/tmp/tmphh2_s7k_.js:16:10)\n    at Object.<anonymous> (/tmp/tmphh2_s7k_.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '1,36,7', '4,53,9', '2,91,1', '1,107,3' ],\n  expected: [ [ 7, 10 ], [ 7, 14 ], [ 3, 10 ], [ 8, 13 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var res = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            res.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(res);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (let i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (let j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}