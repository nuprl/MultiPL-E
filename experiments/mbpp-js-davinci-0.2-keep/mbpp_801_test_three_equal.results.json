{
  "name": "mbpp_801_test_three_equal",
  "language": "js",
  "prompt": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_801_test_three_equal.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z)\n        return 3;\n    if (x == y || y == z || z == x)\n        return 2;\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x==y && y==z){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp_krd3p6j.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_krd3p6j.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return 3;\n    }\n    else if(x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpf9lstu4t.js:15:10)\n    at Object.<anonymous> (/tmp/tmpf9lstu4t.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return 3;\n    }\n    else if(x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmplsrvu4sa.js:16:10)\n    at Object.<anonymous> (/tmp/tmplsrvu4sa.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else {\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z)\n        return 3;\n    if (x == y || y == z || z == x)\n        return 2;\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x==y && y==z){\n        return 3;\n    }\n    else if(x==y || y==z || x==z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || z == x){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z)\n        return 3;\n    if (x == y || y == z || z == x)\n        return 2;\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z)\n      return 3;\n    if (x == y || y == z || z == x)\n      return 2;\n    return 0;\n  }\n  console.log(test_three_equal(1, 2, 3));\n  console.log(test_three_equal(3, 3, 3));\n  console.log(test_three_equal(3, 3, 1));\n  console.log(test_three_equal(3, 1, 1));\n  console.log(test_three_equal(1, 1, 1));\n  console.log(test_three_equal(1, 2, 1));\n  console.log(test_three_equal(1, 1, 2));\n  console.log(test_three_equal(2, 1, 1));\n  console.log(test_three_equal(1, 2, 2));\n  console.log(test_three_equal(2, 2, 1));\n  console.log(test_three_equal(2, 1, 2));\n  console.log(test_three_equal(1, 2, 3));\n  console.log(test_three_equal(1, 3, 2));\n  console.log(test_three_equal(3, 1, 2));\n  console.log(test_three_equal(3, 2, 1));\n  console.log(test_three_equal(2, 3, 1));\n  console.log(test_three_equal(2, 1, 3));\n  console.log(test_three_equal(1, 1, 2));\n  console.log(test_three_equal(1, 2, 2));\n  console.log(test_three_equal(2, 2, 1));\n  console.log(test_three_equal(2, 1, 2));\n  console.log(test_three_equal(1, 2, 3));\n  console.log(test_three_equal(1, 3, 2));\n  console.log(test_three_equal(3, 1, 2));\n  console.log(test_three_equal(3, 2, 1));\n  console.log(test_three_equal(2, 3,\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "/tmp/tmpqornav0c.js:35\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return 3;\n    }\n    else if(x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpf9lstu4t.js:15:10)\n    at Object.<anonymous> (/tmp/tmpf9lstu4t.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else {\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z)\n        return 3;\n    else if (x == y || y == z || x == z)\n        return 2;\n    else\n        return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z)\n        return 3;\n    else if (x == y || y == z || x == z)\n        return 2;\n    else\n        return 0;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return 3;\n    }\n    else if(x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z)\n      return 3;\n    else if (x == y || y == z || z == x)\n      return 2;\n    else\n      return 0;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpf9lstu4t.js:15:10)\n    at Object.<anonymous> (/tmp/tmpf9lstu4t.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && x == z){\n        return 3;\n    }\n    else if (x == y || x == z || y == z){\n        return 2;\n    }\n    else {\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z)\n      return 3;\n    if (x == y || y == z || z == x)\n      return 2;\n    return 0;\n  }\n  console.log(test_three_equal(1, 2, 3));\n  console.log(test_three_equal(3, 3, 3));\n  console.log(test_three_equal(3, 3, 1));\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "0\n3\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z)\n        return 3;\n    else if (x == y || y == z || x == z)\n        return 2;\n    else\n        return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpf9lstu4t.js:15:10)\n    at Object.<anonymous> (/tmp/tmpf9lstu4t.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && x == z)\n        return 3;\n    else if (x == y || x == z || y == z)\n        return 2;\n    else\n        return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return true;\n    }\n    return false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmprxy8x3bp.js:14:10)\n    at Object.<anonymous> (/tmp/tmprxy8x3bp.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x==y && y==z){\n        return 3;\n    }\n    else if(x==y || y==z || x==z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z)\n      return 3;\n  \n    else if (x == y || y == z || z == x)\n      return 2;\n  \n    else\n      return 0;\n  }\n  console.log(test_three_equal(2, 2, 2));\n  console.log(test_three_equal(3, 2, 2));\n  console.log(test_three_equal(2, 3, 2));\n  console.log(test_three_equal(2, 2, 3));\n  console.log(test_three_equal(2, 3, 4));\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "3\n2\n2\n2\n0\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x==y && y==z){\n        return 3;\n    }\n    else if(x==y || y==z || x==z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z)\n        return 3;\n    if (x == y || y == z || z == x)\n        return 2;\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpf9lstu4t.js:15:10)\n    at Object.<anonymous> (/tmp/tmpf9lstu4t.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return 3;\n    }\n    else if(x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z)\n        return 3;\n    if (x == y || y == z || x == z)\n        return 2;\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z)\n        return 3;\n    if (x == y || y == z || x == z)\n        return 2;\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x==y && y==z){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp_krd3p6j.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_krd3p6j.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return true;\n    }\n    return false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmprxy8x3bp.js:14:10)\n    at Object.<anonymous> (/tmp/tmprxy8x3bp.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else {\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x==y && y==z){\n        return 3;\n    }\n    else if(x==y || y==z || z==x){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else {\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z)\n      return 3;\n    else if (x == y || y == z || z == x)\n      return 2;\n    else\n      return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z)\n        return 3;\n    else if (x == y || y == z || x == z)\n        return 2;\n    else\n        return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpf9lstu4t.js:15:10)\n    at Object.<anonymous> (/tmp/tmpf9lstu4t.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpf9lstu4t.js:15:10)\n    at Object.<anonymous> (/tmp/tmpf9lstu4t.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x==y && y==z){\n        return 3;\n    }\n    else if(x==y || y==z || x==z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else {\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpf9lstu4t.js:15:10)\n    at Object.<anonymous> (/tmp/tmpf9lstu4t.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x==y && y==z){\n        return 3;\n    }\n    else if(x==y || y==z || z==x){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || z == x){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return 3;\n    }\n    else if(x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpf9lstu4t.js:15:10)\n    at Object.<anonymous> (/tmp/tmpf9lstu4t.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x==y && y==z){\n        return 3;\n    }\n    else if(x==y || y==z || x==z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x==y && y==z){\n        return 3;\n    }\n    else if(x==y || y==z || x==z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || z == x){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z)\n        return 3;\n    if (x == y || y == z || z == x)\n        return 2;\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpf9lstu4t.js:15:10)\n    at Object.<anonymous> (/tmp/tmpf9lstu4t.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z)\n        return 3;\n    if (x == y || y == z || z == x)\n        return 2;\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z)\n        return 3;\n    else if (x == y || y == z || x == z)\n        return 2;\n    else\n        return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return \"Three equal numbers\";\n    }\n    else{\n        return \"Not equal numbers\";\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Three equal numbers'\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp_90qxz59.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_90qxz59.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Three equal numbers',\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpf9lstu4t.js:15:10)\n    at Object.<anonymous> (/tmp/tmpf9lstu4t.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z)\n      return 3;\n    else if (x == y || y == z || z == x)\n      return 2;\n    else\n      return 0;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x==y && y==z){\n        return 3;\n    }\n    else if(x==y || y==z || x==z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z)\n      return 3;\n    if (x == y || y == z || z == x)\n      return 2;\n    return 0;\n  }\n  console.log(test_three_equal(1, 2, 3));\n  console.log(test_three_equal(1, 1, 1));\n  console.log(test_three_equal(1, 1, 2));\n  console.log(test_three_equal(1, 2, 1));\n  console.log(test_three_equal(2, 1, 1));\n  console.log(test_three_equal(2, 2, 1));\n  console.log(test_three_equal(2, 1, 2));\n  console.log(test_three_equal(1, 2, 2));\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "0\n3\n2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmplsrvu4sa.js:16:10)\n    at Object.<anonymous> (/tmp/tmplsrvu4sa.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return 3;\n    }\n    else if(x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpf9lstu4t.js:15:10)\n    at Object.<anonymous> (/tmp/tmpf9lstu4t.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpf9lstu4t.js:15:10)\n    at Object.<anonymous> (/tmp/tmpf9lstu4t.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z)\n      return 3;\n    if (x == y || y == z || z == x)\n      return 2;\n    return 0;\n  }\n  console.log(test_three_equal(1, 2, 3));\n  console.log(test_three_equal(3, 3, 3));\n  console.log(test_three_equal(3, 3, 1));\n\n  //Write a Python program to check whether three given lengths (integers) of three sides form a right triangle.\n  function triangle_type(a, b, c){\n    if (a == b && b == c)\n      return \"Equilateral\";\n    if (a == b || b == c || c == a)\n      return \"Isosceles\";\n    if (a*a == b*b + c*c || b*b == a*a + c*c || c*c == a*a + b*b)\n      return \"Right\";\n    return \"Scalene\";\n  }\n  console.log(triangle_type(3, 4, 5));\n  console.log(triangle_type(3, 3, 3));\n  console.log(triangle_type(3, 3, 1));\n  console.log(triangle_type(3, 4, 4));\n\n  //Write a Python program to check whether three given lengths (integers) of three sides form a right triangle.\n  function triangle_type(a, b, c){\n    if (a == b && b == c)\n      return \"Equilateral\";\n    if (a == b || b == c || c == a)\n      return \"Isosceles\";\n    if (a*a == b*b + c*c || b*b == a*a + c*c || c*c == a*a + b*b)\n      return \"Right\";\n    return \"Scalene\";\n  }\n  console.log(triangle_type(3, 4, 5));\n  console.log(triangle_type(3, 3, 3));\n  console.log(triangle_type(3, 3, 1));\n  console.log(triangle_type(3, 4,\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "/tmp/tmpl2jvbs72.js:42\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return 3;\n    }\n    else if(x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else {\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return 3;\n    }\n    else if(x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmplsrvu4sa.js:16:10)\n    at Object.<anonymous> (/tmp/tmplsrvu4sa.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z)\n        return 3;\n    else if (x == y || y == z || z == x)\n        return 2;\n    else\n        return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x==y && y==z){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp_krd3p6j.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_krd3p6j.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return 3;\n    }\n    else if(x == y || y == z || z == x){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && x == z){\n        return 3;\n    }\n    else if(x == y || x == z || y == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return 3;\n    }\n    else if(x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z)\n      return 3;\n    if (x == y || y == z || z == x)\n      return 2;\n    return 0;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x==y && y==z){\n        return 3;\n    }\n    else if(x==y || y==z || z==x){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || z == x){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z)\n        return 3;\n    else if (x == y || y == z || x == z)\n        return 2;\n    else\n        return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else {\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z)\n        return 3;\n    else if (x == y || y == z || x == z)\n        return 2;\n    else\n        return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return 3;\n    }else if(x == y || y == z || x == z){\n        return 2;\n    }else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z)\n        return 3;\n    if (x == y || y == z || z == x)\n        return 2;\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return 3;\n    }\n    else if(x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z)\n        return 3;\n    if (x == y || y == z || z == x)\n        return 2;\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else {\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmplsrvu4sa.js:16:10)\n    at Object.<anonymous> (/tmp/tmplsrvu4sa.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpf9lstu4t.js:15:10)\n    at Object.<anonymous> (/tmp/tmpf9lstu4t.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else {\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z)\n        return 3;\n    if (x == y || y == z || x == z)\n        return 2;\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z)\n        return 3;\n    else if (x == y || y == z || x == z)\n        return 2;\n    else\n        return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z)\n        return 3;\n    if (x == y || y == z || z == x)\n        return 2;\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else {\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z)\n      return 3;\n    else if (x == y || y == z || z == x)\n      return 2;\n    else\n      return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z)\n      return 3;\n  \n    else if (x == y || y == z || z == x)\n      return 2;\n  \n    else\n      return 0;\n  }\n  console.log(test_three_equal(1, 2, 3));\n  console.log(test_three_equal(2, 2, 3));\n  console.log(test_three_equal(3, 3, 3));\n  console.log(test_three_equal(1, 1, 1));\n\n  //Write a python function to check whether three given lengths (integers) of three sides form a right triangle.\n  function triangle_type(a, b, c){\n    if (a == b && b == c && c == a)\n      return \"Equilateral Triangle\";\n  \n    else if (a == b || b == c || c == a)\n      return \"Isosceles Triangle\";\n  \n    else if ((a ** 2) + (b ** 2) == (c ** 2) || (b ** 2) + (c ** 2) == (a ** 2) || (c ** 2) + (a ** 2) == (b ** 2))\n      return \"Right Angled Triangle\";\n  \n    else\n      return \"Scalene Triangle\";\n  }\n  console.log(triangle_type(3, 4, 5));\n  console.log(triangle_type(3, 3, 3));\n  console.log(triangle_type(3, 3, 4));\n  console.log(triangle_type(3, 4, 4));\n  console.log(triangle_type(3, 4, 6));\n\n  //Write a python function to check whether a given integer is within 20 of 100 or 400.\n  function near_hundred(n){\n    if (Math.abs(100 - n) <= 20 || Math.abs(200 - n) <= 20)\n      return true;\n    else\n      return false;\n  }\n  console.log(near_hundred(93));\n  console.log(near_hundred(90));\n  console.log(near_hundred(89));\n  console.log(near_hundred(110));\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "0\n2\n3\n3\nRight Angled Triangle\nEquilateral Triangle\nIsosceles Triangle\nIsosceles Triangle\nScalene Triangle\ntrue\ntrue\ntrue\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z)\n      return 3;\n    else if (x == y || y == z || z == x)\n      return 2;\n    else\n      return 0;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpf9lstu4t.js:15:10)\n    at Object.<anonymous> (/tmp/tmpf9lstu4t.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpf9lstu4t.js:15:10)\n    at Object.<anonymous> (/tmp/tmpf9lstu4t.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else {\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpf9lstu4t.js:15:10)\n    at Object.<anonymous> (/tmp/tmpf9lstu4t.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else {\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return 3;\n    }\n    else if(x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z) {\n        return 3;\n    }\n    else if (x == y || y == z || x == z) {\n        return 2;\n    }\n    else {\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpf9lstu4t.js:15:10)\n    at Object.<anonymous> (/tmp/tmpf9lstu4t.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return \"All numbers are equal\";\n    }\n    else if(x == y || y == z || x == z){\n        return \"Two numbers are equal\";\n    }\n    else{\n        return \"All numbers are different\";\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'All numbers are equal'\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpb8v7z8k8.js:19:10)\n    at Object.<anonymous> (/tmp/tmpb8v7z8k8.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'All numbers are equal',\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z)\n        return 3;\n    if (x == y || y == z || z == x)\n        return 2;\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z)\n      return 3;\n  \n    else if (x == y || y == z || z == x)\n      return 2;\n  \n    else\n      return 0;\n  }\n  console.log(test_three_equal(2, 2, 2));\n  console.log(test_three_equal(2, 2, 3));\n  console.log(test_three_equal(2, 3, 3));\n  console.log(test_three_equal(2, 3, 4));\n  console.log(test_three_equal(2, 3, 2));\n  console.log(test_three_equal(3, 3, 2));\n  console.log(test_three_equal(3, 3, 3));\n  console.log(test_three_equal(2, 2, 1));\n  console.log(test_three_equal(2, 2, 2));\n  console.log(test_three_equal(3, 2, 1));\n  console.log(test_three_equal(3, 2, 2));\n  console.log(test_three_equal(3, 2, 3));\n  console.log(test_three_equal(3, 3, 1));\n  console.log(test_three_equal(3, 3, 2));\n  console.log(test_three_equal(3, 3, 3));\n  console.log(test_three_equal(2, 1, 1));\n  console.log(test_three_equal(2, 1, 2));\n  console.log(test_three_equal(2, 1, 3));\n  console.log(test_three_equal(2, 2, 1));\n  console.log(test_three_equal(2, 2, 2));\n  console.log(test_three_equal(2, 2, 3));\n  console.log(test_three_equal(2, 3, 1));\n  console.log(test_three_equal(2, 3, 2));\n  console.log(test_three_equal(2, 3, 3));\n  console.log(test_three_equal(3, 1, 1));\n  console.log(test_\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "/tmp/tmp1i162h9s.js:37\n  console.log(test_\n              ^^^^^\n\nSyntaxError: missing ) after argument list\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpf9lstu4t.js:15:10)\n    at Object.<anonymous> (/tmp/tmpf9lstu4t.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else {\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return 3;\n    }\n    else if(x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z)\n        return 3;\n    else if (x == y || y == z || x == z)\n        return 2;\n    else\n        return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z)\n        return 3;\n    else if (x == y || y == z || x == z)\n        return 2;\n    else\n        return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpf9lstu4t.js:15:10)\n    at Object.<anonymous> (/tmp/tmpf9lstu4t.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z)\n        return 3;\n    if (x == y || y == z || z == x)\n        return 2;\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpf9lstu4t.js:15:10)\n    at Object.<anonymous> (/tmp/tmpf9lstu4t.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else {\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || x == z || y == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z)\n      return 3;\n    if (x == y || y == z || z == x)\n      return 2;\n    return 0;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z)\n        return 3;\n    if (x == y || y == z || z == x)\n        return 2;\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z)\n      return 3;\n    else if (x == y || y == z || z == x)\n      return 2;\n    else\n      return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z)\n      return 3;\n    if (x == y || y == z || z == x)\n      return 2;\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpf9lstu4t.js:15:10)\n    at Object.<anonymous> (/tmp/tmpf9lstu4t.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z){\n        return 3;\n    }\n    else if(x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else {\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || y == z || x == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1665510281,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if(x == y && y == z && z == x){\n        return 3;\n    }\n    else if(x == y || y == z || z == x){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x, y, z){\n    if (x == y && y == z){\n        return 3;\n    }\n    else if (x == y || x == z || y == z){\n        return 2;\n    }\n    else{\n        return 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = test_three_equal;\n  assert.deepEqual(candidate(1, 1, 1),3);\n  assert.deepEqual(candidate(-1, -2, -3),0);\n  assert.deepEqual(candidate(1, 2, 2),2);\n}\n\ntest();",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}