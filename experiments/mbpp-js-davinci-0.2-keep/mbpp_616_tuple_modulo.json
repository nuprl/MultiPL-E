{
  "name": "mbpp_616_tuple_modulo",
  "language": "js",
  "prompt": "//Write a function which takes two tuples of the same length and performs the element wise modulo.\nfunction tuple_modulo(test_tup1, test_tup2){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_616_tuple_modulo.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tuple_modulo;\n  assert.deepEqual(candidate([10, 4, 5, 6], [5, 6, 7, 5]),[0, 4, 5, 1]);\n  assert.deepEqual(candidate([11, 5, 6, 7], [6, 7, 8, 6]),[5, 5, 6, 1]);\n  assert.deepEqual(candidate([12, 6, 7, 8], [7, 8, 9, 7]),[5, 6, 7, 1]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] % test_tup2[i]);\n    }\n    return result;\n}\n",
    "    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] % test_tup2[i]);\n    }\n    return result;\n}\n",
    "    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] % test_tup2[i]);\n    }\n    return result;\n}\n",
    "    var new_tuple = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        new_tuple.push(test_tup1[i] % test_tup2[i]);\n    }\n    return new_tuple;\n}\n",
    "    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] % test_tup2[i]);\n    }\n    return result;\n}\n",
    "    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] % test_tup2[i]);\n    }\n    return result;\n}\n",
    "\tvar result = [];\n\tfor(var i = 0; i < test_tup1.length; i++){\n\t\tresult.push(test_tup1[i] % test_tup2[i]);\n\t}\n\treturn result;\n}\n",
    "    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] % test_tup2[i]);\n    }\n    return result;\n}\n",
    "    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] % test_tup2[i]);\n    }\n    return result;\n}\n",
    "\tvar result = [];\n\tfor(var i = 0; i < test_tup1.length; i++){\n\t\tresult.push(test_tup1[i] % test_tup2[i]);\n\t}\n\treturn result;\n}\n",
    "    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] % test_tup2[i]);\n    }\n    return result;\n}\n",
    "    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] % test_tup2[i]);\n    }\n    return result;\n}\n",
    "    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] % test_tup2[i]);\n    }\n    return result;\n}\n",
    "    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] % test_tup2[i]);\n    }\n    return result;\n}\n",
    "  var result = [];\n  for(var i = 0; i < test_tup1.length; i++){\n    result.push(test_tup1[i] % test_tup2[i]);\n  }\n  return result;\n}\n",
    "\tvar result = [];\n\tfor (var i = 0; i < test_tup1.length; i++){\n\t\tresult.push(test_tup1[i] % test_tup2[i]);\n\t}\n\treturn result;\n}\n",
    "\tvar result = [];\n\tfor(var i = 0; i < test_tup1.length; i++){\n\t\tresult.push(test_tup1[i] % test_tup2[i]);\n\t}\n\treturn result;\n}\n",
    "    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] % test_tup2[i]);\n    }\n    return result;\n}\n",
    "    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] % test_tup2[i]);\n    }\n    return result;\n}\n",
    "    var tup_mod = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        tup_mod.push(test_tup1[i] % test_tup2[i]);\n    }\n    return tup_mod;\n}\n"
  ]
}