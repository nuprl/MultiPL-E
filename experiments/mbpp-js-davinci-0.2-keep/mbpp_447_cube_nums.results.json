{
  "name": "mbpp_447_cube_nums",
  "language": "js",
  "prompt": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_447_cube_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube;\n}\nvar numbers = [1,2,3,4,5];\nvar cube = cube_nums(numbers);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = nums.map(function(num){\n        return num * num * num;\n    });\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = nums.map(function(num){\n        return num * num * num;\n    });\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    return nums.map(function(num){\n        return num*num*num;\n    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cubes = [];\n    for(var i=0; i<nums.length; i++){\n        cubes.push(nums[i]*nums[i]*nums[i]);\n    }\n    return cubes;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = [];\n    for(var i=0;i<nums.length;i++){\n        cube_nums.push(nums[i]*nums[i]*nums[i]);\n    }\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cubes = nums.map(function(num){\n        return num ** 3;\n    });\n    return cubes;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cubes = nums.map(function(num){\n        return num*num*num;\n    });\n    return cubes;\n}\nvar nums = [1,2,3,4,5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num * num * num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cubes = [];\n    for(var i = 0; i < nums.length; i++){\n        cubes.push(nums[i] * nums[i] * nums[i]);\n    }\n    return cubes;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    return nums.map(function(num){\n        return Math.pow(num, 3);\n    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_array = [];\n    for(var i=0;i<nums.length;i++){\n        cube_array.push(nums[i]*nums[i]*nums[i]);\n    }\n    return cube_array;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = nums.map(function(num){\n        return num * num * num;\n    });\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_list = [];\n    for(var i=0;i<nums.length;i++){\n        cube_list.push(nums[i]**3);\n    }\n    return cube_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube;\n}\nvar result = cube_nums([1,2,3,4,5]);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_list = [];\n    for(var i=0; i<nums.length; i++){\n        cube_list.push(nums[i]*nums[i]*nums[i]);\n    }\n    return cube_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = nums.map(function(num){\n        return num ** 3;\n    });\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = [];\n    for(var i = 0; i < nums.length; i++){\n        cube_nums.push(nums[i] * nums[i] * nums[i]);\n    }\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = [];\n    for(var i=0;i<nums.length;i++){\n        cube_nums.push(nums[i]**3);\n    }\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cubes = [];\n    for(var i = 0; i < nums.length; i++){\n        cubes.push(nums[i] * nums[i] * nums[i]);\n    }\n    return cubes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num * num * num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(x){\n        return x*x*x;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_list = [];\n    for(var i=0; i<nums.length; i++){\n        cube_list.push(nums[i]**3);\n    }\n    return cube_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = nums.map(function(num){\n        return num**3;\n    })\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    return nums.map(function(num){\n        return num**3;\n    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = [];\n    for(var i=0; i<nums.length; i++){\n        cube_nums.push(nums[i]*nums[i]*nums[i]);\n    }\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    return nums.map(function(num){\n        return num*num*num;\n    })\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = nums.map(function(num){\n        return num * num * num;\n    });\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = nums.map(function(num){\n        return num * num * num;\n    });\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num * num * num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = nums.map(function(num){\n        return num * num * num;\n    });\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num * num * num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_list = [];\n    for(var i=0; i<nums.length; i++){\n        cube_list.push(nums[i]**3);\n    }\n    return cube_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = [];\n    for(var i = 0; i < nums.length; i++){\n        cube_nums.push(nums[i]**3);\n    }\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cubes = [];\n    for(var i = 0; i < nums.length; i++){\n        cubes.push(nums[i] * nums[i] * nums[i]);\n    }\n    return cubes;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    return nums.map(function(num){\n        return num*num*num;\n    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = [];\n    for(var i = 0; i < nums.length; i++){\n        cube_nums.push(nums[i] * nums[i] * nums[i]);\n    }\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num**3;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num * num * num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(x){\n        return x*x*x;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = [];\n    for(var i=0;i<nums.length;i++){\n        cube_nums.push(nums[i]*nums[i]*nums[i]);\n    }\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num * num * num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num * num * num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = [];\n    for(var i=0; i<nums.length; i++){\n        cube_nums.push(nums[i]**3);\n    }\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    console.log(cube);\n}\ncube_nums([1,2,3,4,5]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n[\n    1,    8,  27,  64,\n  125,  216, 343, 512,\n  729, 1000\n]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  1,\n  8,\n  27,\n  64,\n  125,\n  216,\n  343,\n  512,\n  729,\n  1000\n]\n    at test (/tmp/tmp7e523yuu.js:15:10)\n    at Object.<anonymous> (/tmp/tmp7e523yuu.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [\n      1,    8,  27,  64,\n    125,  216, 343, 512,\n    729, 1000\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    return nums.map(function(num){\n        return num*num*num;\n    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = [];\n    for(var i=0; i<nums.length; i++){\n        cube_nums.push(nums[i]*nums[i]*nums[i]);\n    }\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num * num * num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = [];\n    for(var i=0; i<nums.length; i++){\n        cube_nums.push(nums[i]*nums[i]*nums[i]);\n    }\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = nums.map(function(num){\n        return num * num * num;\n    });\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = [];\n    for(var i=0; i<nums.length; i++){\n        cube_nums.push(nums[i]*nums[i]*nums[i]);\n    }\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cubes = [];\n    for(var i=0;i<nums.length;i++){\n        cubes.push(nums[i]*nums[i]*nums[i]);\n    }\n    return cubes;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num * num * num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return Math.pow(num,3);\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cubes = nums.map(function(num){\n        return num*num*num;\n    });\n    return cubes;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = [];\n    for(var i=0; i<nums.length; i++){\n        cube_nums.push(nums[i]**3);\n    }\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = nums.map(function(num){\n        return num * num * num;\n    });\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = [];\n    for(var i = 0; i < nums.length; i++){\n        cube_nums.push(Math.pow(nums[i], 3));\n    }\n    return cube_nums;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_list = [];\n    for(var i=0;i<nums.length;i++){\n        cube_list.push(nums[i]**3);\n    }\n    return cube_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cubes = [];\n    for(var i=0; i<nums.length; i++){\n        cubes.push(nums[i]*nums[i]*nums[i]);\n    }\n    return cubes;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num * num * num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num * num * num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = [];\n    for(var i=0; i<nums.length; i++){\n        cube_nums.push(nums[i]**3);\n    }\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    return nums.map(function(num){\n        return num*num*num;\n    })\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cubes = [];\n    for(var i=0; i<nums.length; i++){\n        cubes.push(nums[i]*nums[i]*nums[i]);\n    }\n    return cubes;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cubes = nums.map(function(num){\n        return num*num*num;\n    });\n    return cubes;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cubes = []\n    for(var i=0; i<nums.length; i++){\n        cubes.push(nums[i]**3)\n    }\n    return cubes\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = [];\n    for(var i=0; i<nums.length; i++){\n        cube_nums.push(nums[i]*nums[i]*nums[i]);\n    }\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_list = [];\n    for(var i=0; i<nums.length; i++){\n        cube_list.push(nums[i]**3);\n    }\n    return cube_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = [];\n    for(var i=0; i<nums.length; i++){\n        cube_nums.push(nums[i]*nums[i]*nums[i]);\n    }\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = [];\n    for(var i=0; i<nums.length; i++){\n        cube_nums.push(nums[i]**3);\n    }\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    for(var i=0;i<nums.length;i++){\n        nums[i]=nums[i]*nums[i]*nums[i];\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cubes = [];\n    for(var i=0; i<nums.length; i++){\n        cubes.push(nums[i]**3);\n    }\n    return cubes;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num * num * num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    return nums.map(function(num){\n        return num*num*num;\n    })\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cubes = nums.map(function(num){\n        return num*num*num;\n    });\n    return cubes;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cubes = nums.map(function(num){\n        return num*num*num;\n    });\n    return cubes;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    return nums.map(function(num){\n        return num*num*num;\n    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num*num*num;\n    })\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cubes = [];\n    for(var i = 0; i < nums.length; i++){\n        cubes.push(Math.pow(nums[i], 3));\n    }\n    return cubes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cubes = [];\n    for(var i=0; i<nums.length; i++){\n        cubes.push(nums[i]*nums[i]*nums[i]);\n    }\n    return cubes;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cubes = nums.map(function(num){\n        return num * num * num;\n    });\n    return cubes;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = [];\n    for(var i = 0; i < nums.length; i++){\n        cube_nums.push(nums[i] * nums[i] * nums[i]);\n    }\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cubes = nums.map(function(num){\n        return num*num*num;\n    });\n    return cubes;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = [];\n    for(var i=0; i<nums.length; i++){\n        cube_nums.push(nums[i]*nums[i]*nums[i]);\n    }\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cubes = [];\n    for(var i=0; i<nums.length; i++){\n        cubes.push(nums[i]*nums[i]*nums[i]);\n    }\n    return cubes;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = [];\n    for(var i=0; i<nums.length; i++){\n        cube_nums.push(nums[i]**3);\n    }\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube_nums;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = [];\n    for(var i=0; i<nums.length; i++){\n        cube_nums.push(nums[i]**3);\n    }\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube_nums;\n}\nvar nums = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube;\n}\nvar nums = [1,2,3,4,5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cubes = [];\n    for(var i=0; i<nums.length; i++){\n        cubes.push(nums[i]*nums[i]*nums[i]);\n    }\n    return cubes;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cubes = [];\n    for(var i = 0; i < nums.length; i++){\n        cubes.push(nums[i] * nums[i] * nums[i]);\n    }\n    return cubes;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cubes = [];\n    for(var i = 0; i < nums.length; i++){\n        cubes.push(nums[i] * nums[i] * nums[i]);\n    }\n    return cubes;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cubes = nums.map(function(num){\n        return num*num*num;\n    });\n    return cubes;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = [];\n    for(var i=0; i<nums.length; i++){\n        cube_nums.push(nums[i]**3);\n    }\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num * num * num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    return nums.map(function(num){\n        return num*num*num;\n    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = [];\n    for(var i=0; i<nums.length; i++){\n        cube_nums.push(nums[i]*nums[i]*nums[i]);\n    }\n    return cube_nums;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num * num * num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = [];\n    for(var i=0; i<nums.length; i++){\n        cube_nums.push(nums[i]*nums[i]*nums[i]);\n    }\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num * num * num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = nums.map(function(num){\n        return num * num * num;\n    });\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(x){\n        return x*x*x;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num ** 3;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cubes = [];\n    for(var i = 0; i < nums.length; i++){\n        cubes.push(nums[i] * nums[i] * nums[i]);\n    }\n    return cubes;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = [];\n    for(var i = 0; i < nums.length; i++){\n        cube_nums.push(Math.pow(nums[i], 3));\n    }\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cubes = [];\n    for(var i = 0; i < nums.length; i++){\n        cubes.push(Math.pow(nums[i], 3));\n    }\n    return cubes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = [];\n    for(var i = 0; i < nums.length; i++){\n        cube_nums.push(nums[i]**3);\n    }\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = nums.map(function(num){\n        return num * num * num;\n    });\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num * num * num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cubes = nums.map(function(num){\n        return num*num*num;\n    });\n    return cubes;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = nums.map(function(num){\n        return num * num * num;\n    });\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cubes = nums.map(function(num){\n        return num*num*num;\n    });\n    return cubes;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = [];\n    for(var i=0; i<nums.length; i++){\n        cube_nums.push(nums[i]**3);\n    }\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = [];\n    for(var i=0; i<nums.length; i++){\n        cube_nums.push(nums[i]**3);\n    }\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = nums.map(function(num){\n        return num * num * num;\n    });\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = [];\n    for(var i=0; i<nums.length; i++){\n        cube_nums.push(nums[i]*nums[i]*nums[i]);\n    }\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = nums.map(function(num){\n        return num*num*num;\n    })\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cubes = [];\n    for(var i=0; i<nums.length; i++){\n        cubes.push(nums[i]*nums[i]*nums[i]);\n    }\n    return cubes;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cubes = nums.map(function(num){\n        return num**3;\n    });\n    return cubes;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = nums.map(function(num){\n        return num * num * num;\n    });\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cubes = [];\n    for(var i=0; i<nums.length; i++){\n        cubes.push(Math.pow(nums[i],3));\n    }\n    return cubes;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = [];\n    for(var i=0; i<nums.length; i++){\n        cube_nums.push(nums[i]*nums[i]*nums[i]);\n    }\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cubes = [];\n    for(var i = 0; i < nums.length; i++){\n        cubes.push(nums[i] * nums[i] * nums[i]);\n    }\n    return cubes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = [];\n    for(var i=0; i<nums.length; i++){\n        cube_nums.push(nums[i]**3);\n    }\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = [];\n    for(var i=0; i<nums.length; i++){\n        cube_nums.push(nums[i]**3);\n    }\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = [];\n    for (var i = 0; i < nums.length; i++){\n        cube_nums.push(nums[i]**3);\n    }\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = [];\n    for(var i=0;i<nums.length;i++){\n        cube_nums.push(nums[i]*nums[i]*nums[i]);\n    }\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = [];\n    for(var i = 0; i < nums.length; i++){\n        cube_nums.push(nums[i] * nums[i] * nums[i]);\n    }\n    return cube_nums;\n}\nvar nums = [1,2,3,4,5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cubes = [];\n    for(var i = 0; i < nums.length; i++){\n        cubes.push(nums[i] * nums[i] * nums[i]);\n    }\n    return cubes;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num * num * num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num * num * num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cubes = [];\n    for(var i = 0; i < nums.length; i++){\n        cubes.push(nums[i] * nums[i] * nums[i]);\n    }\n    return cubes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cubes = [];\n    for(var i=0; i<nums.length; i++){\n        cubes.push(nums[i]*nums[i]*nums[i]);\n    }\n    return cubes;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = [];\n    for(var i = 0; i < nums.length; i++){\n        cube_nums.push(nums[i] * nums[i] * nums[i]);\n    }\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = [];\n    for(var i = 0; i < nums.length; i++){\n        cube_nums.push(nums[i]*nums[i]*nums[i]);\n    }\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cubes = [];\n    for(var i=0; i<nums.length; i++){\n        cubes.push(Math.pow(nums[i], 3));\n    }\n    return cubes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num * num * num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = [];\n    for(var i = 0; i < nums.length; i++){\n        cube_nums.push(nums[i] ** 3);\n    }\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = [];\n    for(var i=0; i<nums.length; i++){\n        cube_nums.push(nums[i]*nums[i]*nums[i]);\n    }\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_list = []\n    for(var i=0; i<nums.length; i++){\n        cube_list.push(nums[i]**3)\n    }\n    return cube_list\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = [];\n    for(var i=0; i<nums.length; i++){\n        cube_nums.push(nums[i]*nums[i]*nums[i]);\n    }\n    return cube_nums;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = [];\n    for(var i = 0; i < nums.length; i++){\n        cube_nums.push(nums[i] * nums[i] * nums[i]);\n    }\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cubes = nums.map(function(num){\n        return num*num*num;\n    });\n    return cubes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num * num * num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = [];\n    for(var i = 0; i < nums.length; i++){\n        cube_nums.push(Math.pow(nums[i], 3));\n    }\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube_nums = [];\n    for(var i = 0; i < nums.length; i++){\n        cube_nums.push(nums[i] * nums[i] * nums[i]);\n    }\n    return cube_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num*num*num;\n    });\n    return cube;\n}\nvar nums = [1,2,3,4,5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cube = nums.map(function(num){\n        return num * num * num;\n    });\n    return cube;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in a list.\nfunction cube_nums(nums){\n    var cubes = [];\n    for(var i=0; i<nums.length; i++){\n        cubes.push(nums[i]**3);\n    }\n    return cubes;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}