{
  "name": "mbpp_100_next_smallest_palindrome",
  "language": "js",
  "prompt": "//Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nfunction next_smallest_palindrome(num){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_100_next_smallest_palindrome.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_smallest_palindrome;\n  assert.deepEqual(candidate(99),101);\n  assert.deepEqual(candidate(1221),1331);\n  assert.deepEqual(candidate(120),121);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    let num_str = num.toString();\n    let num_len = num_str.length;\n    let mid = Math.floor(num_len/2);\n    let left = num_str.substring(0, mid);\n    let right = num_str.substring(mid + num_len % 2);\n    let right_rev = right.split('').reverse().join('');\n    let left_int = parseInt(left);\n    let right_int = parseInt(right_rev);\n    let next_palindrome = 0;\n    if(left_int === right_int){\n        next_palindrome = parseInt(left + right_rev);\n    }\n    else if(left_int < right_int){\n        next_palindrome = parseInt(left + right_rev);\n    }\n    else if(left_int > right_int){\n        let next_left = (left_int + 1).toString();\n        let next_left_len = next_left.length;\n        let next_mid = Math.floor(next_left_len/2);\n        let next_right = next_left.substring(next_mid + next_left_len % 2);\n        let next_right_rev = next_right.split('').reverse().join('');\n        next_palindrome = parseInt(next_left + next_right_rev);\n    }\n    return next_palindrome;\n}\n",
    "  var num_str = num.toString();\n  var num_arr = num_str.split('');\n  var num_len = num_arr.length;\n  var num_half = Math.floor(num_len/2);\n  var num_left = num_arr.slice(0,num_half);\n  var num_right = num_arr.slice(num_half,num_len);\n  var num_left_rev = num_left.slice().reverse();\n  var num_right_rev = num_right.slice().reverse();\n  var num_left_rev_str = num_left_rev.join('');\n  var num_right_rev_str = num_right_rev.join('');\n  var num_left_rev_int = parseInt(num_left_rev_str);\n  var num_right_rev_int = parseInt(num_right_rev_str);\n  var num_left_int = parseInt(num_left.join(''));\n  var num_right_int = parseInt(num_right.join(''));\n  var num_left_rev_int_str = num_left_rev_int.toString();\n  var num_right_rev_int_str = num_right_rev_int.toString();\n  var num_left_rev_int_arr = num_left_rev_int_str.split('');\n  var num_right_rev_int_arr = num_right_rev_int_str.split('');\n  var num_left_rev_int_len = num_left_rev_int_arr.length;\n  var num_right_rev_int_len = num_right_rev_int_arr.length;\n  var num_left_rev_int_half = Math.floor(num_left_rev_int_len/2);\n  var num_right_rev_int_half = Math.floor(num_right_rev_int_len/2);\n  var num_left_rev_int_left = num_left_rev_int_arr.slice(0,num_left_rev_int_half);\n  var num_right_rev",
    "  var num_str = num.toString();\n  var num_str_len = num_str.length;\n  var num_str_half_len = Math.floor(num_str_len / 2);\n  var num_str_half = num_str.slice(0, num_str_half_len);\n  var num_str_half_rev = num_str_half.split(\"\").reverse().join(\"\");\n  var num_str_half_rev_int = parseInt(num_str_half_rev);\n  var num_str_half_int = parseInt(num_str_half);\n  var num_str_half_rev_int_next = num_str_half_rev_int + 1;\n  var num_str_half_rev_int_next_str = num_str_half_rev_int_next.toString();\n  var num_str_half_rev_int_next_str_len = num_str_half_rev_int_next_str.length;\n  var num_str_half_rev_int_next_str_len_diff = num_str_half_len - num_str_half_rev_int_next_str_len;\n  var num_str_half_rev_int_next_str_len_diff_str = \"\";\n  for(var i = 0; i < num_str_half_rev_int_next_str_len_diff; i++){\n    num_str_half_rev_int_next_str_len_diff_str += \"0\";\n  }\n  var num_str_half_rev_int_next_str_len_diff_str_full = num_str_half_rev_int_next_str_len_diff_str + num_str_half_rev_int_next_str;\n  var num_str_half_rev_int_next_str_len_diff_str_full_int = parseInt(num_str_half_rev_int_next_str_len_diff_str_full);\n  if(num_str_half_rev_int_next_str_len_diff_str_full_int < num_str_half",
    "    var num_str = num.toString();\n    var num_len = num_str.length;\n    var num_arr = num_str.split('');\n    var num_arr_rev = num_str.split('').reverse();\n    var num_arr_rev_str = num_arr_rev.join('');\n    var num_arr_rev_int = parseInt(num_arr_rev_str);\n    var num_arr_rev_int_str = num_arr_rev_int.toString();\n    var num_arr_rev_int_len = num_arr_rev_int_str.length;\n    var num_arr_rev_int_arr = num_arr_rev_int_str.split('');\n    var num_arr_rev_int_arr_rev = num_arr_rev_int_str.split('').reverse();\n    var num_arr_rev_int_arr_rev_str = num_arr_rev_int_arr_rev.join('');\n    var num_arr_rev_int_arr_rev_int = parseInt(num_arr_rev_int_arr_rev_str);\n    var num_arr_rev_int_arr_rev_int_str = num_arr_rev_int_arr_rev_int.toString();\n    var num_arr_rev_int_arr_rev_int_len = num_arr_rev_int_arr_rev_int_str.length;\n    var num_arr_rev_int_arr_rev_int_arr = num_arr_rev_int_arr_rev_int_str.split('');\n    var num_arr_rev_int_arr_rev_int_arr_rev = num_arr_rev_int_arr_rev_int_str.split('').reverse();\n    var num_arr_rev_int_arr_rev_int_arr_rev_str = num_arr_rev_int_arr_rev_int_arr_rev.join('');\n    var num_arr_rev_int_arr_rev_int_arr_rev_int = parseInt(num_arr_rev_int_arr_",
    "  var num_str = num.toString();\n  var num_len = num_str.length;\n  var num_half = Math.floor(num_len/2);\n  var num_left = num_str.slice(0,num_half);\n  var num_right = num_str.slice(num_half+num_len%2);\n  var num_left_rev = num_left.split(\"\").reverse().join(\"\");\n  var num_right_rev = num_right.split(\"\").reverse().join(\"\");\n  var num_left_rev_num = parseInt(num_left_rev);\n  var num_right_rev_num = parseInt(num_right_rev);\n  var num_left_num = parseInt(num_left);\n  var num_right_num = parseInt(num_right);\n  var num_left_rev_num_plus_one = num_left_rev_num+1;\n  var num_left_rev_num_plus_one_str = num_left_rev_num_plus_one.toString();\n  var num_left_rev_num_plus_one_str_len = num_left_rev_num_plus_one_str.length;\n  var num_left_rev_num_plus_one_str_half = Math.floor(num_left_rev_num_plus_one_str_len/2);\n  var num_left_rev_num_plus_one_str_left = num_left_rev_num_plus_one_str.slice(0,num_left_rev_num_plus_one_str_half);\n  var num_left_rev_num_plus_one_str_right = num_left_rev_num_plus_one_str.slice(num_left_rev_num_plus_one_str_half+num_left_rev_num_plus_one_str_len%2);\n  var num_left_rev_num_plus_one_str_left_rev = num_left_rev_num_plus_one_str_left.split(\"\").reverse().join(\"\");\n  var num_left_rev_num_plus_one",
    "    var num_str = num.toString();\n    var num_len = num_str.length;\n    var num_half = Math.floor(num_len/2);\n    var num_half_str = num_str.slice(0,num_half);\n    var num_half_rev = num_half_str.split(\"\").reverse().join(\"\");\n    var num_half_rev_int = parseInt(num_half_rev);\n    var num_half_int = parseInt(num_half_str);\n    var num_half_rev_int_plus_one = num_half_rev_int + 1;\n    var num_half_rev_plus_one = num_half_rev_int_plus_one.toString();\n    var num_half_rev_plus_one_rev = num_half_rev_plus_one.split(\"\").reverse().join(\"\");\n    var num_half_rev_plus_one_rev_int = parseInt(num_half_rev_plus_one_rev);\n    var num_half_rev_plus_one_rev_int_plus_one = num_half_rev_plus_one_rev_int + 1;\n    var num_half_rev_plus_one_rev_int_plus_one_str = num_half_rev_plus_one_rev_int_plus_one.toString();\n    var num_half_rev_plus_one_rev_int_plus_one_str_rev = num_half_rev_plus_one_rev_int_plus_one_str.split(\"\").reverse().join(\"\");\n    var num_half_rev_plus_one_rev_int_plus_one_str_rev_int = parseInt(num_half_rev_plus_one_rev_int_plus_one_str_rev);\n    var num_half_rev_plus_one_rev_int_plus_one_str_rev_int_plus_one = num_half_rev_plus_one_rev_int_plus_one_str_rev_int + 1;\n    var num_half_rev_plus_one_rev_int_plus_one_str_rev_int_",
    "  var num_str = num.toString();\n  var num_len = num_str.length;\n  var num_half = Math.floor(num_len/2);\n  var num_half_str = num_str.slice(0,num_half);\n  var num_half_rev = num_half_str.split(\"\").reverse().join(\"\");\n  var num_half_rev_int = parseInt(num_half_rev);\n  var num_half_int = parseInt(num_half_str);\n  var num_half_rev_int_str = num_half_rev_int.toString();\n  var num_half_int_str = num_half_int.toString();\n  var num_half_rev_int_len = num_half_rev_int_str.length;\n  var num_half_int_len = num_half_int_str.length;\n  var num_half_rev_int_str_half = num_half_rev_int_str.slice(0,num_half_rev_int_len-1);\n  var num_half_int_str_half = num_half_int_str.slice(0,num_half_int_len-1);\n  var num_half_rev_int_str_half_int = parseInt(num_half_rev_int_str_half);\n  var num_half_int_str_half_int = parseInt(num_half_int_str_half);\n  var num_half_rev_int_str_half_int_str = num_half_rev_int_str_half_int.toString();\n  var num_half_int_str_half_int_str = num_half_int_str_half_int.toString();\n  var num_half_rev_int_str_half_int_str_half = num_half_rev_int_str_half_int_str.slice(0,num_half_rev_int_str_half_int_str.length-1);\n  var num_half_int_str_half_int_str_half = num_half_int_str_half_int_str.",
    "  var num_str = num.toString();\n  var num_len = num_str.length;\n  var num_half = Math.floor(num_len / 2);\n  var num_left = num_str.substring(0, num_half);\n  var num_right = num_str.substring(num_len - num_half, num_len);\n  var num_left_rev = num_left.split('').reverse().join('');\n  var num_right_rev = num_right.split('').reverse().join('');\n  var num_left_int = parseInt(num_left);\n  var num_right_int = parseInt(num_right);\n  var num_left_rev_int = parseInt(num_left_rev);\n  var num_right_rev_int = parseInt(num_right_rev);\n  var num_left_rev_str = num_left_rev_int.toString();\n  var num_right_rev_str = num_right_rev_int.toString();\n  var num_left_rev_len = num_left_rev_str.length;\n  var num_right_rev_len = num_right_rev_str.length;\n  var num_left_rev_half = Math.floor(num_left_rev_len / 2);\n  var num_right_rev_half = Math.floor(num_right_rev_len / 2);\n  var num_left_rev_left = num_left_rev_str.substring(0, num_left_rev_half);\n  var num_left_rev_right = num_left_rev_str.substring(num_left_rev_len - num_left_rev_half, num_left_rev_len);\n  var num_right_rev_left = num_right_rev_str.substring(0, num_right_rev_half);\n  var num_right_rev_right = num_right_rev_str.substring(num_right_rev_len - num_right_rev_half, num_right_rev_len);\n  var num_left_rev_left_int = parse",
    "  var num_str = num.toString();\n  var len = num_str.length;\n  var num_arr = num_str.split('');\n  var left = Math.floor(len/2);\n  var right = Math.ceil(len/2);\n  var left_arr = num_arr.slice(0,left);\n  var right_arr = num_arr.slice(right);\n  var left_str = left_arr.join('');\n  var right_str = right_arr.join('');\n  var left_num = parseInt(left_str);\n  var right_num = parseInt(right_str);\n  if(left_num > right_num){\n    return parseInt(left_str + left_str.split('').reverse().join(''));\n  }\n  else{\n    var new_left_num = left_num + 1;\n    var new_left_str = new_left_num.toString();\n    return parseInt(new_left_str + new_left_str.split('').reverse().join(''));\n  }\n}\n",
    "  var num_str = num.toString();\n  var len = num_str.length;\n  var left = Math.floor(len/2);\n  var right = len % 2 === 0 ? left : left + 1;\n  var left_str = num_str.substring(0, left);\n  var right_str = num_str.substring(right);\n  var left_num = parseInt(left_str);\n  var right_num = parseInt(right_str);\n  if(left_num === right_num){\n    left_num++;\n    left_str = left_num.toString();\n    right_str = left_str.split('').reverse().join('');\n    return parseInt(left_str + right_str);\n  }\n  else if(left_num < right_num){\n    left_str = left_num.toString();\n    right_str = left_str.split('').reverse().join('');\n    return parseInt(left_str + right_str);\n  }\n  else{\n    left_num++;\n    left_str = left_num.toString();\n    right_str = left_str.split('').reverse().join('');\n    return parseInt(left_str + right_str);\n  }\n}\n",
    "  var num_str = num.toString();\n  var num_len = num_str.length;\n  var num_arr = num_str.split('');\n  var mid_index = Math.floor(num_len/2);\n  var left_index = mid_index - 1;\n  var right_index = (num_len % 2) ? mid_index + 1 : mid_index;\n  var left_half = num_arr.slice(0, mid_index);\n  var right_half = num_arr.slice(right_index).reverse();\n  var left_half_str = left_half.join('');\n  var right_half_str = right_half.join('');\n  var left_half_int = parseInt(left_half_str);\n  var right_half_int = parseInt(right_half_str);\n  if(left_half_int < right_half_int){\n    var new_num_str = left_half_str + num_arr[mid_index] + left_half_str.split('').reverse().join('');\n    return parseInt(new_num_str);\n  }\n  else{\n    var new_num_str = (left_half_int + 1).toString() + num_arr[mid_index] + (left_half_int + 1).toString().split('').reverse().join('');\n    return parseInt(new_num_str);\n  }\n}\n",
    "  var num_str = num.toString();\n  var num_len = num_str.length;\n  var mid = Math.floor(num_len/2);\n  var left_half = num_str.slice(0, mid);\n  var right_half = num_str.slice(mid + num_len % 2);\n  var right_half_rev = right_half.split('').reverse().join('');\n  if(left_half < right_half_rev){\n    return parseInt(left_half + num_str[mid] + right_half_rev);\n  }\n  else{\n    var left_half_int = parseInt(left_half);\n    var left_half_int_plus = left_half_int + 1;\n    var left_half_plus = left_half_int_plus.toString();\n    var left_half_plus_len = left_half_plus.length;\n    var left_half_plus_mid = Math.floor(left_half_plus_len/2);\n    var left_half_plus_right_half = left_half_plus.slice(left_half_plus_mid + left_half_plus_len % 2);\n    var left_half_plus_right_half_rev = left_half_plus_right_half.split('').reverse().join('');\n    return parseInt(left_half_plus + '0' + left_half_plus_right_half_rev);\n  }\n}\n",
    "  var num_str = num.toString();\n  var num_len = num_str.length;\n  var mid = Math.floor(num_len/2);\n  var left = num_str.substr(0,mid);\n  var right = num_str.substr(mid+1);\n  var left_rev = left.split('').reverse().join('');\n  var right_rev = right.split('').reverse().join('');\n  var left_num = parseInt(left);\n  var right_num = parseInt(right);\n  var left_rev_num = parseInt(left_rev);\n  var right_rev_num = parseInt(right_rev);\n  if(left_num == left_rev_num && right_num == right_rev_num){\n    if(num_len % 2 == 0){\n      return parseInt(left+right);\n    }else{\n      return parseInt(left+num_str[mid]+right);\n    }\n  }else{\n    if(left_num < left_rev_num){\n      left_num++;\n      left = left_num.toString();\n      left_rev = left.split('').reverse().join('');\n    }\n    if(right_num < right_rev_num){\n      right_num++;\n      right = right_num.toString();\n      right_rev = right.split('').reverse().join('');\n    }\n    if(num_len % 2 == 0){\n      return parseInt(left+right);\n    }else{\n      return parseInt(left+num_str[mid]+right);\n    }\n  }\n}\n",
    "    var num_str = num.toString();\n    var num_arr = num_str.split('');\n    var num_len = num_arr.length;\n    var num_half = Math.floor(num_len/2);\n    var num_left = num_arr.slice(0, num_half);\n    var num_right = num_arr.slice(num_half + num_len % 2, num_len);\n    var num_left_rev = num_left.slice().reverse();\n    var num_right_rev = num_right.slice().reverse();\n    var num_left_rev_str = num_left_rev.join('');\n    var num_right_rev_str = num_right_rev.join('');\n    var num_left_rev_int = parseInt(num_left_rev_str);\n    var num_right_rev_int = parseInt(num_right_rev_str);\n    var num_left_int = parseInt(num_left.join(''));\n    var num_right_int = parseInt(num_right.join(''));\n    var num_left_rev_int_next = num_left_rev_int + 1;\n    var num_left_rev_int_next_str = num_left_rev_int_next.toString();\n    var num_left_rev_int_next_arr = num_left_rev_int_next_str.split('');\n    var num_left_rev_int_next_arr_rev = num_left_rev_int_next_arr.slice().reverse();\n    var num_left_rev_int_next_arr_rev_str = num_left_rev_int_next_arr_rev.join('');\n    var num_left_rev_int_next_arr_rev_int = parseInt(num_left_rev_int_next_arr_rev_str);\n    var num_left_rev_int_next_arr_rev_int_next = num_left_rev_int_next_arr_rev_int + 1;\n    var num_left_rev_int_next_arr_rev_int_next",
    "    var num_str = num.toString();\n    var num_len = num_str.length;\n    var mid_index = Math.floor(num_len/2);\n    var left_half = num_str.substring(0, mid_index);\n    var right_half = num_str.substring(mid_index + num_len % 2, num_len);\n    var right_half_rev = right_half.split(\"\").reverse().join(\"\");\n    if(left_half < right_half_rev){\n        return parseInt(left_half + right_half_rev);\n    }\n    else{\n        var left_half_int = parseInt(left_half);\n        var left_half_int_plus_1 = left_half_int + 1;\n        var left_half_plus_1 = left_half_int_plus_1.toString();\n        var left_half_plus_1_len = left_half_plus_1.length;\n        var left_half_plus_1_mid_index = Math.floor(left_half_plus_1_len/2);\n        var left_half_plus_1_left_half = left_half_plus_1.substring(0, left_half_plus_1_mid_index);\n        var left_half_plus_1_right_half = left_half_plus_1.substring(left_half_plus_1_mid_index + left_half_plus_1_len % 2, left_half_plus_1_len);\n        var left_half_plus_1_right_half_rev = left_half_plus_1_right_half.split(\"\").reverse().join(\"\");\n        return parseInt(left_half_plus_1_left_half + left_half_plus_1_right_half_rev);\n    }\n}\n",
    "  var str = num.toString();\n  var len = str.length;\n  var mid = Math.floor(len/2);\n  var left = str.substr(0, mid);\n  var right = str.substr(mid + len % 2, mid);\n  var next_palindrome = parseInt(left + (len % 2 ? str[mid] : '') + reverse(left));\n  if(next_palindrome > num){\n    return next_palindrome;\n  }\n  if(len % 2 && str[mid] < '9'){\n    return parseInt(left + (parseInt(str[mid]) + 1) + reverse(left));\n  }\n  if(len % 2){\n    left = (parseInt(left) + 1).toString();\n    mid = Math.floor(left.length/2);\n    return parseInt(left + reverse(left.substr(0, mid)));\n  }\n  return next_smallest_palindrome(parseInt(left + reverse(left)) + 1);\n}\n",
    "    //check if num is a palindrome\n    if(is_palindrome(num)){\n        //if it is, add 1 to num and check if that is a palindrome\n        num += 1;\n        if(is_palindrome(num)){\n            //if it is, return that number\n            return num;\n        }\n        else{\n            //if it isn't, add 1 to num and check if that is a palindrome\n            num += 1;\n            if(is_palindrome(num)){\n                //if it is, return that number\n                return num;\n            }\n            else{\n                //if it isn't, add 1 to num and check if that is a palindrome\n                num += 1;\n                if(is_palindrome(num)){\n                    //if it is, return that number\n                    return num;\n                }\n                else{\n                    //if it isn't, add 1 to num and check if that is a palindrome\n                    num += 1;\n                    if(is_palindrome(num)){\n                        //if it is, return that number\n                        return num;\n                    }\n                    else{\n                        //if it isn't, add 1 to num and check if that is a palindrome\n                        num += 1;\n                        if(is_palindrome(num)){\n                            //if it is, return that number\n                            return num;\n                        }\n                        else{\n                            //if it isn't, add 1 to num and check if that is a palindrome\n                            num += 1;\n                            if(is_palindrome(num)){\n                                //if it is, return that number\n                                return num;\n                            }\n                            else{\n                                //if it isn't, add 1 to num and check if that is a palindrome\n                                num += 1;\n                                if(is_palindrome(num)){\n                                    //if it is, return that number\n                                    return num;\n                                }\n                                else{\n                                    //if it isn't, add 1 to num and check if that is a palindrome\n                                    num += 1;\n                                    if(is_palindrome",
    "  var num_str = num.toString();\n  var num_arr = num_str.split('');\n  var num_len = num_arr.length;\n  var num_mid = Math.floor(num_len/2);\n  var num_left = num_arr.slice(0,num_mid);\n  var num_right = num_arr.slice(num_mid,num_len);\n  var num_left_rev = num_left.reverse();\n  var num_right_rev = num_right.reverse();\n  var num_left_rev_str = num_left_rev.join('');\n  var num_right_rev_str = num_right_rev.join('');\n  var num_left_rev_int = parseInt(num_left_rev_str);\n  var num_right_rev_int = parseInt(num_right_rev_str);\n  var num_left_rev_int_str = num_left_rev_int.toString();\n  var num_right_rev_int_str = num_right_rev_int.toString();\n  var num_left_rev_int_str_len = num_left_rev_int_str.length;\n  var num_right_rev_int_str_len = num_right_rev_int_str.length;\n  var num_left_rev_int_str_len_diff = num_mid - num_left_rev_int_str_len;\n  var num_right_rev_int_str_len_diff = num_mid - num_right_rev_int_str_len;\n  var num_left_rev_int_str_len_diff_str = '';\n  var num_right_rev_int_str_len_diff_str = '';\n  var num_left_rev_int_str_len_diff_str_arr = [];\n  var num_right_rev_int_str_len_diff_str_arr = [];\n  var num_left_rev_int_str_len_diff_str_arr_str = '';\n  var num_right_rev_int_str_len_diff_str_arr",
    "  let num_str = num.toString();\n  let num_len = num_str.length;\n  let num_half = Math.floor(num_len/2);\n  let num_left = num_str.slice(0,num_half);\n  let num_right = num_str.slice(num_len-num_half);\n  let num_left_rev = num_left.split('').reverse().join('');\n  let num_right_rev = num_right.split('').reverse().join('');\n  let num_left_rev_num = parseInt(num_left_rev);\n  let num_right_rev_num = parseInt(num_right_rev);\n  let num_left_num = parseInt(num_left);\n  let num_right_num = parseInt(num_right);\n  let num_left_rev_str = num_left_rev_num.toString();\n  let num_right_rev_str = num_right_rev_num.toString();\n  let num_left_str = num_left_num.toString();\n  let num_right_str = num_right_num.toString();\n  let num_left_rev_len = num_left_rev_str.length;\n  let num_right_rev_len = num_right_rev_str.length;\n  let num_left_len = num_left_str.length;\n  let num_right_len = num_right_str.length;\n  let num_left_rev_half = Math.floor(num_left_rev_len/2);\n  let num_right_rev_half = Math.floor(num_right_rev_len/2);\n  let num_left_half = Math.floor(num_left_len/2);\n  let num_right_half = Math.floor(num_right_len/2);\n  let num_left_rev_left = num_left_rev_str.slice(0,num_left_rev_half);\n  let num_right_rev_left = num_right_rev_str.slice(0,num_right_rev_half);\n ",
    "  var num_str = num.toString();\n  var num_len = num_str.length;\n  var left_half = num_str.substring(0, Math.floor(num_len/2));\n  var right_half = num_str.substring(Math.ceil(num_len/2));\n  var left_half_rev = left_half.split(\"\").reverse().join(\"\");\n  var palindrome = left_half + left_half_rev;\n  if(palindrome > num){\n    return palindrome;\n  }\n  else{\n    var left_half_int = parseInt(left_half);\n    var left_half_int_plus_one = left_half_int + 1;\n    var left_half_int_plus_one_str = left_half_int_plus_one.toString();\n    var left_half_int_plus_one_str_rev = left_half_int_plus_one_str.split(\"\").reverse().join(\"\");\n    var palindrome_plus_one = left_half_int_plus_one_str + left_half_int_plus_one_str_rev;\n    return palindrome_plus_one;\n  }\n}\n"
  ]
}