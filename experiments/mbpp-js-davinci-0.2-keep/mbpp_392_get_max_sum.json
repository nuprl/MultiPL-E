{
  "name": "mbpp_392_get_max_sum",
  "language": "js",
  "prompt": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_392_get_max_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    if(n<=0) return 0;\n    if(n<=5) return n;\n    return Math.max(n, get_max_sum(Math.floor(n/2)) + get_max_sum(Math.floor(n/3)) + get_max_sum(Math.floor(n/4)) + get_max_sum(Math.floor(n/5)));\n}\n",
    "    if(n<=0){\n        return 0;\n    }\n    let max_sum = n;\n    let sum = 0;\n    for(let i=2;i<=5;i++){\n        sum = get_max_sum(Math.floor(n/i));\n        if(sum>max_sum){\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}",
    "    if(n<=0) return 0;\n    if(n<=5) return n;\n    return Math.max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n);\n}",
    "\tif(n<=0)\n\t\treturn 0;\n\telse\n\t\treturn Math.max(n, get_max_sum(Math.floor(n/2))+get_max_sum(Math.floor(n/3))+get_max_sum(Math.floor(n/4))+get_max_sum(Math.floor(n/5)));\n}\n",
    "    if(n<=0)\n        return 0;\n    if(n<=5)\n        return n;\n    return Math.max(get_max_sum(n/2)+get_max_sum(n/3)+get_max_sum(n/4)+get_max_sum(n/5),n);\n}\n",
    "    if(n<=0) return 0;\n    if(n==1) return 1;\n    if(n==2) return 2;\n    if(n==3) return 3;\n    if(n==4) return 4;\n    if(n==5) return 5;\n    return Math.max(get_max_sum(n/2)+get_max_sum(n/3)+get_max_sum(n/4)+get_max_sum(n/5),n);\n}\n",
    "    if(n<=0){\n        return 0;\n    }\n    if(n<=5){\n        return n;\n    }\n    return Math.max(get_max_sum(n/2)+get_max_sum(n/3)+get_max_sum(n/4)+get_max_sum(n/5),n);\n}",
    "    if(n<=0) return 0;\n    if(n<=5) return n;\n    return Math.max(get_max_sum(n/2)+get_max_sum(n/3)+get_max_sum(n/4)+get_max_sum(n/5),n);\n}",
    "    if(n<=0)\n        return 0;\n    if(n<=5)\n        return n;\n    return Math.max(n, get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5));\n}\n",
    "    if(n<=0){\n        return 0;\n    }\n    let max = Math.max(n, get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5));\n    return max;\n}\n",
    "\tif(n<=0)\n\t\treturn 0;\n\telse if(n<=5)\n\t\treturn n;\n\telse\n\t\treturn Math.max(get_max_sum(n/2)+get_max_sum(n/3)+get_max_sum(n/4)+get_max_sum(n/5),n);\n}\n",
    "    if(n<=0) return 0;\n    if(n<=5) return n;\n    var sum = get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5);\n    return Math.max(sum, n);\n}\n",
    "    if(n<=0)\n        return 0;\n    else if(n<=5)\n        return n;\n    else\n        return Math.max(get_max_sum(n/2)+get_max_sum(n/3)+get_max_sum(n/4)+get_max_sum(n/5),n);\n}\n",
    "    if(n<=0) return 0;\n    if(n<=5) return n;\n    return Math.max(get_max_sum(n/2)+get_max_sum(n/3)+get_max_sum(n/4)+get_max_sum(n/5),n);\n}",
    "    if(n<=0) return 0;\n    if(n<=5) return n;\n    let sum = 0;\n    for(let i=2;i<=5;i++){\n        sum += get_max_sum(n/i);\n    }\n    return Math.max(sum,n);\n}\n",
    "    if(n<=0){\n        return 0;\n    }\n    if(n<=5){\n        return n;\n    }\n    let max_sum = 0;\n    for(let i=1; i<=5; i++){\n        max_sum = Math.max(max_sum, get_max_sum(n-i));\n    }\n    return max_sum;\n}",
    "    if(n<=0)\n        return 0;\n    if(n<=5)\n        return n;\n    return Math.max(n, get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5));\n}\n",
    "    if(n<=0) return 0;\n    if(n<=5) return n;\n    return Math.max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n);\n}\n",
    "    if(n<=0){\n        return 0;\n    }\n    let max_sum = n;\n    let sum = 0;\n    for(let i=1;i<=5;i++){\n        sum = get_max_sum(Math.floor(n/i));\n        if(sum>max_sum){\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\n",
    "    if(n<=0)\n        return 0;\n    if(n<=5)\n        return n;\n    return Math.max(n, get_max_sum(n/2)+get_max_sum(n/3)+get_max_sum(n/4)+get_max_sum(n/5));\n}\n"
  ]
}