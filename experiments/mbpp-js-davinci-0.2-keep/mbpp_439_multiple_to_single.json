{
  "name": "mbpp_439_multiple_to_single",
  "language": "js",
  "prompt": "//Write a function to join a list of multiple integers into a single integer.\nfunction multiple_to_single(L){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_439_multiple_to_single.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiple_to_single;\n  assert.deepEqual(candidate([11, 33, 50]),113350);\n  assert.deepEqual(candidate([-1, 2, 3, 4, 5, 6]),-123456);\n  assert.deepEqual(candidate([10, 15, 20, 25]),10152025);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var result = 0;\n    for(var i = 0; i < L.length; i++){\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    var result = 0;\n    var i = 0;\n    while(i < L.length){\n        result = result * 10 + L[i];\n        i++;\n    }\n    return result;\n}\n",
    "    return L.join(\"\");\n}\n",
    "    var s = L.join(\"\");\n    return s;\n}\n",
    "    return L.join('');\n}",
    "    var s = L.join(\"\");\n    return s;\n}\n",
    "  var str = L.join(\"\");\n  return str;\n}\n",
    "  var str = \"\";\n  for(var i=0; i<L.length; i++){\n    str += L[i];\n  }\n  return str;\n}\n",
    "  var result = 0;\n  for (var i = 0; i < L.length; i++){\n    result += L[i];\n  }\n  return result;\n}\n",
    "    var s = '';\n    for(var i = 0; i < L.length; i++){\n        s += L[i];\n    }\n    return s;\n}\n",
    "    var result = 0;\n    for(var i = 0; i < L.length; i++){\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    var sum = 0;\n    for (var i = 0; i < L.length; i++){\n        sum = sum + L[i];\n    }\n    return sum;\n}\n",
    "    return L.join('');\n}\n",
    "    var sum = 0;\n    for(var i = 0; i < L.length; i++){\n        sum += L[i];\n    }\n    return sum;\n}\n",
    "    return L.reduce(function(a,b){return a*10+b;});\n}",
    "    var result = 0;\n    for(var i = 0; i < L.length; i++){\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    var result = 0;\n    var i = 0;\n    while(i < L.length){\n        result = result * 10 + L[i];\n        i++;\n    }\n    return result;\n}\n",
    "    var sum = 0;\n    for (var i = 0; i < L.length; i++){\n        sum += L[i];\n    }\n    return sum;\n}\n",
    "    var result = 0;\n    for(var i = 0; i < L.length; i++){\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "\tvar sum = 0;\n\tfor(var i = 0; i < L.length; i++){\n\t\tsum += L[i];\n\t}\n\treturn sum;\n}\n"
  ]
}