{
  "name": "mbpp_576_is_Sub_Array",
  "language": "js",
  "prompt": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n        }\n        j++;\n    }\n    return (i == A.length);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n                break;\n            }\n            else{\n                flag = 0;\n            }\n        }\n        if(flag == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nvar C = [1, 2, 7];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    for(var i = 0; i < A.length; i++){\n        if(A[i] == B[0]){\n            var k = i;\n            var flag = 0;\n            for(var j = 0; j < B.length; j++){\n                if(A[k] != B[j]){\n                    flag = 1;\n                    break;\n                }\n                k++;\n            }\n            if(flag == 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nvar A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar B = [2, 3, 4, 5];\nvar C = [2, 4, 16];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = false;\n    for(i = 0; i < B.length; i++){\n        for(j = 0; j < A.length; j++){\n            if(B[i] == A[j]){\n                flag = true;\n                break;\n            }\n            else{\n                flag = false;\n            }\n        }\n        if(flag == false){\n            break;\n        }\n    }\n    if(flag == true){\n        console.log(\"It is a sublist\");\n    }\n    else{\n        console.log(\"It is not a sublist\");\n    }\n}\nis_Sub_Array([1,2,3,4,5,6,7], [1,2,3,4,5,6,7]);\nis_Sub_Array([1,2,3,4,5,6,7], [1,2,3,4,5,6]);\nis_Sub_Array([1,2,3,4,5,6,7], [1,2,3,4,5,6,7,8,9]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "It is a sublist\nIt is a sublist\nIt is not a sublist\nIt is not a sublist\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpegctok00.js:36:10)\n    at Object.<anonymous> (/tmp/tmpegctok00.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for (i=0; i<A.length; i++){\n        for (j=0; j<B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if (j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1,2,3,4,5,6];\nvar B = [1,2,3,4,5,6,7,8,9];\nvar C = [1,2,3,4,5,6,7,8,9,10,11,12];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n                break;\n            }\n            else{\n                flag = 0;\n            }\n        }\n        if(flag == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nvar C = [1, 2, 7];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for (i = 0; i < A.length; i++){\n        for (j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if (j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nvar C = [1, 2, 7];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    var flag = false;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        flag = true;\n    }\n    return flag;\n}\n\nvar A = [1,2,3,4,5,6,7,8,9];\nvar B = [2,3,4,5,6];\nvar C = [2,3,4,5,6,7,8,9];\nvar D = [2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        flag = 1;\n    }\n    if(flag == 1){\n        console.log(\"Yes, it is a sub array\");\n    }\n    else{\n        console.log(\"No, it is not a sub array\");\n    }\n}\nis_Sub_Array([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10]);\nis_Sub_Array([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9]);\nis_Sub_Array([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]);\nis_Sub_Array([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "/tmp/tmp6bcii_v6.js:29\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        flag = 1;\n    }\n    if(flag == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nvar A = [1,2,3,4,5,6,7,8,9,10];\nvar B = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20];\nvar C = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20];\nvar D = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n        }\n        j++;\n    }\n    return (i == A.length);\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar C = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    for(var i = 0; i < A.length; i++){\n        if(A[i] == B[0]){\n            for(var j = 0; j < B.length; j++){\n                if(A[i+j] != B[j]){\n                    break;\n                }\n                else if(j == B.length - 1){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        flag = 1;\n    }\n    if(flag == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nvar A = [1,2,3,4,5,6,7,8,9];\nvar B = [2,3,4,5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j])\n                break;\n        }\n        if (j == B.length)\n            return false;\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n            }\n            else{\n                flag = 0;\n            }\n        }\n    }\n    if(flag == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nvar C = [1, 2, 7];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i, j;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nvar C = [1, 2, 7];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var j = 0;\n    for (var i = 0; i < B.length; i++){\n        if (A[j] == B[i]){\n            j++;\n        }\n        if (j == A.length){\n            return true;\n        }\n    }\n    return false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    while (i < A.length && j < B.length) \n    { \n        if (A[i] == B[j]) \n        { \n            i++; \n            j++; \n        } \n        else\n        { \n            j = 0; \n            k++; \n            i = k; \n        } \n    } \n    if (j == B.length) \n    { \n        return true; \n    } \n    else\n    { \n        return false; \n    } \n}\n\nvar A = [1, 2, 3, 4, 5, 6]; \nvar B = [1, 2, 4]; \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var flag = 0;\n    for(var i = 0; i < A.length; i++){\n        if(A[i] == B[0]){\n            for(var j = 0; j < B.length; j++){\n                if(A[i+j] != B[j]){\n                    flag = 0;\n                    break;\n                }\n                else{\n                    flag = 1;\n                }\n            }\n        }\n        if(flag == 1){\n            break;\n        }\n    }\n    if(flag == 1){\n        console.log(\"It is a sublist\");\n    }\n    else{\n        console.log(\"It is not a sublist\");\n    }\n}\nis_Sub_Array([1,2,3,4,5,6,7,8,9], [2,3,4,5]);\nis_Sub_Array([1,2,3,4,5,6,7,8,9], [2,3,4,5,6,7,8,9]);\nis_Sub_Array([1,2,3,4,5,6,7,8,9], [2,3,4,5,6,7,8,9,10]);\nis_Sub_Array([1,2,3,4,5,6,7,8,9], [2,3,4,5,6,7,8,9,10,11]);\nis_Sub_Array([1,2,3,4,5,6,7,8,9], [2,3,4,5,6,7,8,9,10,11,12]);\nis_Sub_Array([1,2,3,4,5,6,7,8,9], [2,3,4,5,6,7,8,9,10,11,12,13]);\nis_Sub_Array([1,2,3,4,5,6,7,8,9], [2,3,4,5,6,7,8,9,10,11,12,13,14]);\nis_Sub_Array([1,2,3,4,5,6,7,8,9], [2,\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "/tmp/tmp_zudm_7d.js:35\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nvar C = [1, 6, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nvar A = [1,2,3,4,5,6,7,8,9];\nvar B = [2,4,6,8];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nvar A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar C = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\nvar D = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nvar E = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];\nvar F = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\nvar G = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\nvar H = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\nvar I = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17];\nvar J = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18];\nvar K = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19];\nvar L = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\nvar M\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var flag = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                for(k = 0; k < B.length; k++){\n                    if(A[i+k] == B[j+k]){\n                        flag = 1;\n                    }\n                    else{\n                        flag = 0;\n                        break;\n                    }\n                }\n                if(flag == 1){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for(i=0; i<A.length; i++){\n        for(j=0; j<B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nvar C = [1, 2, 7];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var flag = 0;\n    while(i < A.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n            j = 0;\n        }\n        if(j == B.length){\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nvar A = [1,2,3,4,5,6,7,8,9,10];\nvar B = [2,3,4,5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n                break;\n            }\n            else{\n                flag = 0;\n            }\n        }\n        if(flag == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nvar C = [1, 2, 7];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n            }\n            else{\n                flag = 0;\n            }\n        }\n    }\n    if(flag == 1){\n        console.log(\"A is a sublist of B\");\n    }\n    else{\n        console.log(\"A is not a sublist of B\");\n    }\n}\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nis_Sub_Array(A, B);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "A is not a sublist of B\nA is not a sublist of B\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpmkl6yvgn.js:32:10)\n    at Object.<anonymous> (/tmp/tmpmkl6yvgn.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        flag = 1;\n    }\n    if(flag == 1){\n        console.log(\"It is a sublist\");\n    }\n    else{\n        console.log(\"It is not a sublist\");\n    }\n}\nis_Sub_Array([1,2,3,4,5,6,7], [2,3,4]);\nis_Sub_Array([1,2,3,4,5,6,7], [2,3,4,5,6,7]);\nis_Sub_Array([1,2,3,4,5,6,7], [2,3,4,5,6,7,8]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "It is a sublist\nIt is a sublist\nIt is not a sublist\nIt is not a sublist\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpxc02u_ws.js:34:10)\n    at Object.<anonymous> (/tmp/tmpxc02u_ws.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for(i=0; i<A.length; i++){\n        for(j=0; j<B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 4, 5];\nvar C = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                break;\n            }\n        }\n        if (j == B.length) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var flag = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n                break;\n            }\n        }\n        if(flag == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpj2ft85y0.js:26:10)\n    at Object.<anonymous> (/tmp/tmpj2ft85y0.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n            }\n            else{\n                flag = 0;\n            }\n        }\n    }\n    if(flag == 1){\n        console.log(\"A is sublist of B\");\n    }\n    else{\n        console.log(\"A is not sublist of B\");\n    }\n}\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [0, 9, 8, 7, 6];\nis_Sub_Array(A, B);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "A is sublist of B\nA is not sublist of B\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpld7al8_n.js:32:10)\n    at Object.<anonymous> (/tmp/tmpld7al8_n.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar C = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nvar D = [1, 2, 3, 4, 5];\nvar E = [6, 7, 8, 9, 10, 11, 12];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar C = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nvar D = [1, 2, 3, 4, 5, 6, 13, 14];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                k++;\n            }\n        }\n    }\n    if(k == A.length){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpt2zfov7_.js:29:10)\n    at Object.<anonymous> (/tmp/tmpt2zfov7_.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nvar A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar B = [2, 4, 6, 8, 10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n                break;\n            }\n            else{\n                flag = 0;\n            }\n        }\n        if(flag == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nvar C = [1, 2, 7];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n            }\n            else{\n                flag = 0;\n            }\n        }\n    }\n    if(flag == 1){\n        console.log(\"It is a sublist\");\n    }\n    else{\n        console.log(\"It is not a sublist\");\n    }\n}\nvar A = [1, 1, 5];\nvar B = [1, 5, 6, 4, 1, 2, 3, 5];\nis_Sub_Array(A, B);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "It is a sublist\nIt is not a sublist\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpg4gs_6io.js:32:10)\n    at Object.<anonymous> (/tmp/tmpg4gs_6io.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < B.length; i++){\n        for(j = 0; j < A.length; j++){\n            if(B[i] == A[j]){\n                break;\n            }\n        }\n        if(j == A.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0ixwgbjk.js:24:10)\n    at Object.<anonymous> (/tmp/tmp0ixwgbjk.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    while (i < A.length && j < B.length)\n    {\n        if (A[i] == B[j])\n        {\n            i++;\n            j++;\n        }\n        else\n        {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == B.length)\n        return true;\n    else\n        return false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i, j;\n    for (i = 0; i < A.length; i++){\n        for (j = 0; j < B.length; j++){\n            if (A[i] == B[j])\n                break;\n        }\n        if (j == B.length)\n            return false;\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [2, 4, 6];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    if(A.length == 0){\n        return true;\n    }\n    if(B.length == 0){\n        return false;\n    }\n    if(A[0] == B[0]){\n        return is_Sub_Array(A.slice(1), B.slice(1));\n    }\n    return is_Sub_Array(A, B.slice(1));\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    for(i=0; i<A.length; i++){\n        for(j=0; j<B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n            }\n            else{\n                flag = 0;\n            }\n        }\n    }\n    if(flag == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nvar A = [1,2,3,4,5];\nvar B = [2,3,4,5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                for(k = 0; k < B.length; k++){\n                    if(A[i+k] != B[j+k]){\n                        break;\n                    }\n                }\n                if(k == B.length){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar C = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nvar D = [1, 2, 3, 4, 5, 6, 13, 14];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nvar A = [1,2,3,4,5,6,7,8,9];\nvar B = [3,4,5,6];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n        }\n        j++;\n    }\n    return (i == A.length);\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar C = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar D = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar E = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar F = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar G = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar H = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar I = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar J = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar K = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar L = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar M = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar N = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar O = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar P = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar Q = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar R = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar S = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar T = [1, 2, 3, 4, 5,\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "/tmp/tmpm_lh6qel.js:33\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    while(i < A.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n        if(j == B.length){\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nvar A = [1,2,3,4,5,6,7,8,9];\nvar B = [2,3,4,5,6];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    for(i=0; i<A.length; i++){\n        for(j=0; j<B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n                break;\n            }\n            else{\n                flag = 0;\n            }\n        }\n        if(flag == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nvar C = [1, 2, 7];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        flag = 1;\n    }\n    return flag;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nvar C = [1, 2, 7];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n        }\n        j++;\n    }\n    return (i == A.length);\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar C = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nvar D = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\nvar E = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for(i = 0; i < B.length; i++){\n        for(j = 0; j < A.length; j++){\n            if(B[i] == A[j]){\n                break;\n            }\n        }\n        if(j == A.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpgpghzz30.js:25:10)\n    at Object.<anonymous> (/tmp/tmpgpghzz30.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var result = true;\n    for(var i = 0; i < B.length; i++){\n        if(A.indexOf(B[i]) == -1){\n            result = false;\n            break;\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpjmas0llf.js:19:10)\n    at Object.<anonymous> (/tmp/tmpjmas0llf.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nvar C = [1, 2, 7];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nvar A = [1,2,3,4,5,6,7,8,9,10];\nvar B = [1,2,3,4,5,6,7,8,9,10];\nvar C = [1,2,3,4,5,6,7,8,9,10,11];\nvar D = [1,2,3,4,5,6,7,8,9,10,11,12];\nvar E = [1,2,3,4,5,6,7,8,9,10,11,12,13];\nvar F = [1,2,3,4,5,6,7,8,9,10,11,12,13,14];\nvar G = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];\nvar H = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16];\nvar I = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17];\nvar J = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18];\nvar K = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19];\nvar L = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20];\nvar M\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        flag = 1;\n    }\n    return flag;\n}\n\nvar A = [1,2,3,4,5,6,7,8,9,10];\nvar B = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];\nvar C = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20];\nvar D = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25];\nvar E = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30];\nvar F = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40];\nvar G = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "/tmp/tmpgpo0wxgc.js:28\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < B.length; i++){\n        if(A[j] == B[i]){\n            j++;\n        }\n        if(j == A.length){\n            return true;\n        }\n    }\n    return false;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nif(is_Sub_Array(A, B)){\n    console.log(\"A is a sub array of B\");\n}\nelse{\n    console.log(\"A is not a sub array of B\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "A is a sub array of B\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    while(i < A.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n            if(j == B.length){\n                flag = 1;\n                break;\n            }\n        }\n        else{\n            i++;\n            j = 0;\n        }\n    }\n    if(flag == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nvar A = [1,2,3,4,5,6,7,8,9];\nvar B = [1,2,3,4,5,6,7,8,9];\nvar C = [1,2,3,4,5,6,7,8,9,10];\nvar D = [1,2,3,4,5,6,7,8,9,10,11];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nvar A = [1,2,3,4,5,6,7,8,9];\nvar B = [2,3,4,5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nvar C = [1, 2, 7];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nvar A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar B = [2, 4, 6, 8, 10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    while (i < A.length && j < B.length)\n    {\n        if (A[i] != B[j])\n        {\n            j = 0;\n            i++;\n        }\n        else\n        {\n            i++;\n            j++;\n        }\n    }\n    if (j == B.length)\n        return true;\n    else\n        return false;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [2, 3];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3, 4, 5, 6];\nvar C = [1, 2, 3, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n        }\n        j++;\n    }\n    return i == A.length;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar C = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nvar D = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n        }\n        j++;\n    }\n    return i == A.length;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n            }\n            else{\n                flag = 0;\n            }\n        }\n    }\n    if(flag == 1){\n        console.log(\"It is a sublist\");\n    }\n    else{\n        console.log(\"It is not a sublist\");\n    }\n}\nis_Sub_Array([1,2,3,4,5,6], [1,2,3,4,5,6,7,8,9,10]);\nis_Sub_Array([1,2,3,4,5,6], [1,2,3,4,5,6]);\nis_Sub_Array([1,2,3,4,5,6], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]);\nis_Sub_Array([1,2,3,4,5,6], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "/tmp/tmpy95t8q9b.js:27\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        flag = 1;\n    }\n    if(flag == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nvar A = [1,2,3,4,5,6,7,8,9];\nvar B = [2,3,4,5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j])\n                break;\n        }\n        if (j == B.length)\n            return false;\n    }\n    return true;\n}\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nvar C = [1, 2, 7];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var flag = 0;\n    for(var i = 0; i < A.length; i++){\n        for(var j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n            }\n            else{\n                flag = 0;\n            }\n        }\n    }\n    if(flag == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n            }\n            else{\n                flag = 0;\n            }\n        }\n    }\n    if(flag == 1){\n        console.log(\"It is a sublist\");\n    }\n    else{\n        console.log(\"It is not a sublist\");\n    }\n}\n\nvar A = [1, 1, 5];\nvar B = [1, 1, 5, 6, 4, 1, 2, 3, 5];\nis_Sub_Array(A, B);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "It is a sublist\nIt is not a sublist\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpe_ikoxcd.js:33:10)\n    at Object.<anonymous> (/tmp/tmpe_ikoxcd.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar C = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nvar A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar B = [2, 4, 6, 8, 10];\nvar C = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20];\nvar D = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    while (i < A.length && j < B.length)\n    {\n        if (A[i] == B[j])\n        {\n            i++;\n            j++;\n        }\n        else\n        {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == B.length)\n        return true;\n    else\n        return false;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [2, 4];\nvar C = [7, 8, 9];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var flag = false;\n    for(var i = 0; i < A.length; i++){\n        if(A[i] == B[0]){\n            flag = true;\n            for(var j = 1; j < B.length; j++){\n                if(A[i+j] != B[j]){\n                    flag = false;\n                    break;\n                }\n            }\n        }\n        if(flag == true){\n            break;\n        }\n    }\n    return flag;\n}\n\nvar A = [1,2,3,4,5,6,7,8,9];\nvar B = [1,2,3,4,5,6,7,8,9];\nvar C = [1,2,3,4,5,6,7,8,9,10];\nvar D = [1,2,3,4,5,6,7,8,9,10,11];\nvar E = [1,2,3,4,5,6,7,8,9,10,11,12];\nvar F = [1,2,3,4,5,6,7,8,9,10,11,12,13];\nvar G = [1,2,3,4,5,6,7,8,9,10,11,12,13,14];\nvar H = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];\nvar I = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16];\nvar J = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17];\nvar K = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18];\nvar L = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19];\nvar\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "/tmp/tmpnri7r7vr.js:34\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n                break;\n            }\n            else{\n                flag = 0;\n            }\n        }\n        if(flag == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3];\nvar C = [1, 2, 3, 4, 5];\nvar D = [1, 2, 3, 4];\nvar E = [1, 2, 3, 4, 5];\nvar F = [1, 2, 3, 4, 5];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i, j;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j])\n                break;\n        }\n        if (j == B.length)\n            return false;\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nvar C = [1, 2, 4];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var flag = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n                break;\n            }\n        }\n        if(flag == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3];\nvar C = [1, 2, 3, 4, 5];\nvar D = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp7wchcpxq.js:31:10)\n    at Object.<anonymous> (/tmp/tmp7wchcpxq.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 4];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        flag = 1;\n    }\n    return flag;\n}\n\nvar A = [1,2,3,4,5,6,7,8,9,10];\nvar B = [2,3,4,5,6];\nvar C = [1,2,3,4,5,6,7,8,9,10];\nvar D = [2,3,4,5,6,7,8,9,10];\nvar E = [2,3,4,5,6,7,8,9,10,11];\nvar F = [2,3,4,5,6,7,8,9,10,11,12];\nvar G = [2,3,4,5,6,7,8,9,10,11,12,13];\nvar H = [2,3,4,5,6,7,8,9,10,11,12,13,14];\nvar I = [2,3,4,5,6,7,8,9,10,11,12,13,14,15];\nvar J = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16];\nvar K = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17];\nvar L = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18];\nvar M = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19];\nvar N = [2,3,4,5,6,7,8,9,10,11\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "/tmp/tmp69nh1bym.js:35\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n                break;\n            }\n            else{\n                flag = 0;\n            }\n        }\n        if(flag == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3];\nvar C = [1, 2, 3, 4, 5, 6, 7];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nvar C = [1, 2, 7];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var flag = true;\n    for(var i = 0; i < A.length; i++){\n        if(A[i] != B[i]){\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i, j;\n    for (i = 0; i < A.length; i++){\n        for (j = 0; j < B.length; j++){\n            if (A[i] == B[j])\n                break;\n        }\n        if (j == B.length)\n            return false;\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nvar C = [1, 2, 7];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar C = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nvar D = [1, 2, 3, 4, 5, 6, 13, 14];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nvar C = [1, 2, 7];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1,2,3,4,5,6,7,8,9];\nvar B = [1,2,3,4,5,6,7,8,9,10];\nvar C = [1,2,3,4,5,6,7,8,9,10,11];\nvar D = [1,2,3,4,5,6,7,8,9,10,11,12];\nvar E = [1,2,3,4,5,6,7,8,9,10,11,12,13];\nvar F = [1,2,3,4,5,6,7,8,9,10,11,12,13,14];\nvar G = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];\nvar H = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16];\nvar I = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17];\nvar J = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18];\nvar K = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19];\nvar L = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20];\nvar M\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n            }\n            else{\n                flag = 0;\n            }\n        }\n    }\n    if(flag == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [2, 3, 4];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var flag = false;\n    for(var i=0; i<A.length; i++){\n        if(A[i] == B[0]){\n            for(var j=0; j<B.length; j++){\n                if(A[i+j] != B[j]){\n                    flag = false;\n                    break;\n                }\n                else{\n                    flag = true;\n                }\n            }\n        }\n    }\n    return flag;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpg5r0efz7.js:26:10)\n    at Object.<anonymous> (/tmp/tmpg5r0efz7.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nvar A = [1,2,3,4,5,6,7,8,9,10];\nvar B = [2,3,4];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n            }\n            else{\n                flag = 0;\n            }\n        }\n    }\n    if(flag == 1){\n        console.log(\"A is a sublist of B\");\n    }\n    else{\n        console.log(\"A is not a sublist of B\");\n    }\n}\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [0, 1, 2, 3];\nis_Sub_Array(A, B);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "A is not a sublist of B\nA is not a sublist of B\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp_e0bqnyn.js:32:10)\n    at Object.<anonymous> (/tmp/tmp_e0bqnyn.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n                break;\n            }\n        }\n        if(flag == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3];\nvar C = [1, 2, 3, 4, 5];\nvar D = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpypmg6fo1.js:30:10)\n    at Object.<anonymous> (/tmp/tmpypmg6fo1.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n            }\n            else{\n                flag = 0;\n            }\n        }\n    }\n    if(flag == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nvar A = [1,2,3,4,5,6,7,8,9];\nvar B = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];\nvar C = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20];\nvar D = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30];\nvar E = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40];\nvar F = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50];\nvar G = [1,2,3,4,5,6,7,8,9,10,11,\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "/tmp/tmp9_ksqjr3.js:30\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var len_A = A.length;\n    var len_B = B.length;\n    while(i < len_A && j < len_B){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == len_B){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    for(var i = 0; i < B.length; i++){\n        if(A.indexOf(B[i]) == -1){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpp8bzdf8r.js:18:10)\n    at Object.<anonymous> (/tmp/tmpp8bzdf8r.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j])\n                break;\n        }\n        if (j == B.length)\n            return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n            }\n            else{\n                flag = 0;\n            }\n        }\n    }\n    if(flag == 1){\n        console.log(\"A is a sublist of B\");\n    }\n    else{\n        console.log(\"A is not a sublist of B\");\n    }\n}\nvar A = [1, 2, 3, 4, 5];\nvar B = [2, 3, 4, 5];\nis_Sub_Array(A, B);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "A is a sublist of B\nA is not a sublist of B\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmplz7jcxgm.js:32:10)\n    at Object.<anonymous> (/tmp/tmplz7jcxgm.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n                break;\n            }\n        }\n        if(flag == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp2bpdrqur.js:27:10)\n    at Object.<anonymous> (/tmp/tmp2bpdrqur.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    while (i < A.length && j < B.length)\n    {\n        if (A[i] == B[j])\n        {\n            i++;\n            j++;\n        }\n        else\n        {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == B.length)\n        return true;\n    else\n        return false;\n}\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [2, 4];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var flag = 0;\n    for(var i = 0; i < A.length; i++){\n        if(A[i] == B[0]){\n            for(var j = 0; j < B.length; j++){\n                if(A[i+j] == B[j]){\n                    flag = 1;\n                }\n                else{\n                    flag = 0;\n                    break;\n                }\n            }\n        }\n    }\n    if(flag == 1){\n        console.log(\"It is a sublist\");\n    }\n    else{\n        console.log(\"It is not a sublist\");\n    }\n}\nis_Sub_Array([1,2,3,4,5,6,7,8,9], [2,3,4]);\nis_Sub_Array([1,2,3,4,5,6,7,8,9], [2,3,4,5,6]);\nis_Sub_Array([1,2,3,4,5,6,7,8,9], [2,3,4,5,6,7,8,9]);\nis_Sub_Array([1,2,3,4,5,6,7,8,9], [2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "It is a sublist\nIt is a sublist\nIt is a sublist\nIt is not a sublist\nIt is not a sublist\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpf9yk_a3l.js:34:10)\n    at Object.<anonymous> (/tmp/tmpf9yk_a3l.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n                break;\n            }\n        }\n        if(flag == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nvar C = [1, 2, 7];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpno6z0oj0.js:28:10)\n    at Object.<anonymous> (/tmp/tmpno6z0oj0.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j])\n                break;\n        }\n        if (j == B.length)\n            return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    while (i < A.length && j < B.length)\n    {\n        if (A[i] == B[j])\n        {\n            i++;\n            j++;\n        }\n        else\n        {\n            i++;\n        }\n    }\n    if (j == B.length)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [2, 3, 4];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nvar A = [1, 2, 3, 4, 5];\nvar B = [2, 3, 4];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    if(A.length == 0){\n        return true;\n    }\n    if(B.length == 0){\n        return false;\n    }\n    if(A[0] == B[0]){\n        return is_Sub_Array(A.slice(1), B.slice(1));\n    }\n    return is_Sub_Array(A, B.slice(1));\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        flag = 1;\n    }\n    if(flag == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nvar C = [1, 2, 4];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar C = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nvar D = [1, 2, 3, 4, 5, 6, 13, 14];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var flag = 0;\n    for(var i = 0; i < A.length; i++){\n        if(A[i] == B[0]){\n            for(var j = 0; j < B.length; j++){\n                if(A[i+j] != B[j]){\n                    flag = 0;\n                    break;\n                }\n                else{\n                    flag = 1;\n                }\n            }\n        }\n        if(flag == 1){\n            break;\n        }\n    }\n    if(flag == 1){\n        console.log(\"B is sublist of A\");\n    }\n    else{\n        console.log(\"B is not sublist of A\");\n    }\n}\n\nis_Sub_Array([1,2,3,4,5,6,7,8,9],[3,4,5]);\nis_Sub_Array([1,2,3,4,5,6,7,8,9],[3,4,5,6,7,8,9]);\nis_Sub_Array([1,2,3,4,5,6,7,8,9],[3,4,5,6,7,8,9,10]);\nis_Sub_Array([1,2,3,4,5,6,7,8,9],[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "B is sublist of A\nB is sublist of A\nB is not sublist of A\nB is not sublist of A\nB is not sublist of A\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp3jsyvfu2.js:38:10)\n    at Object.<anonymous> (/tmp/tmp3jsyvfu2.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n            }\n            else{\n                flag = 0;\n            }\n        }\n    }\n    if(flag == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nvar A = [1, 2, 3, 4, 5];\nvar B = [2, 3, 4];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j])\n                break;\n        }\n        if (j == B.length)\n            return false;\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nvar C = [1, 2, 4];\nif (is_Sub_Array(B, A))\n    console.log(\"B is subarray of A\");\nelse\n    console.log(\"B is not sub array of A\");\nif (is_Sub_Array(C, A))\n    console.log(\"C is subarray of A\");\nelse\n    console.log(\"C is not sub array of A\");\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "B is subarray of A\nC is subarray of A\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nvar A = [1,2,3,4,5,6,7,8,9];\nvar B = [2,3,4,5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n                break;\n            }\n            else{\n                flag = 0;\n            }\n        }\n        if(flag == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    for(i=0; i<A.length; i++){\n        for(j=0; j<B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n                break;\n            }\n            else{\n                flag = 0;\n            }\n        }\n        if(flag == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nvar C = [1, 2, 7];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            j++;\n        }\n    }\n    if(i == A.length){\n        flag = 1;\n    }\n    if(flag == 1){\n        console.log(\"Array A is sub array of B\");\n    }\n    else{\n        console.log(\"Array A is not sub array of B\");\n    }\n}\nis_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6,7,8,9]);\nis_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10,11,12]);\nis_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]);\nis_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "/tmp/tmpq5v7mqa9.js:29\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var C = A.join('');\n    var D = B.join('');\n    if(C.indexOf(D) > -1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nvar A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar B = [3, 4, 5];\nvar C = [3, 4, 5, 6, 7, 8, 9, 10];\nvar D = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar E = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\nvar F = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n            }\n            else{\n                flag = 0;\n            }\n        }\n    }\n    if(flag == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    for(var i=0; i<B.length; i++){\n        if(A.indexOf(B[i]) == -1){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0oonhlye.js:18:10)\n    at Object.<anonymous> (/tmp/tmp0oonhlye.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n                break;\n            }\n        }\n        if(flag == 0){\n            return false;\n        }\n    }\n    return true;\n}\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nvar C = [1, 2, 7];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmptbdx2956.js:27:10)\n    at Object.<anonymous> (/tmp/tmptbdx2956.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3];\nvar C = [1, 2, 3, 4, 5];\nvar D = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        flag = 1;\n    }\n    return flag;\n}\n\nvar A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar B = [2, 4, 6, 8, 10];\nvar C = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20];\nvar D = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\nvar E = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    var n = A.length;\n    var m = B.length;\n    while(i < n && j < m){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == m){\n        flag = 1;\n    }\n    if(flag == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 4];\nvar C = [1, 2, 3, 4, 5, 6];\nvar D = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n            count++;\n        }\n        else{\n            j++;\n        }\n    }\n    if(count == A.length){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i, j;\n    for (i = 0; i < A.length; i++){\n        for (j = 0; j < B.length; j++){\n            if (A[i] == B[j])\n                break;\n        }\n        if (j == B.length)\n            return false;\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [2, 3, 4];\nvar C = [2, 3, 7];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n                break;\n            }\n            else{\n                flag = 0;\n            }\n        }\n        if(flag == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j])\n                break;\n        }\n        if (j == B.length)\n            return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    while (i < A.length && j < B.length){\n        if (A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if (j == B.length){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3, 4];\nvar C = [1, 2, 3, 4, 5, 6];\nvar D = [1, 2, 3, 4, 5, 6, 7, 8];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 4, 5];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n            }\n            else{\n                flag = 0;\n            }\n        }\n    }\n    if(flag == 1){\n        console.log(\"It is a sublist\");\n    }\n    else{\n        console.log(\"It is not a sublist\");\n    }\n}\nis_Sub_Array([1,2,3,4,5],[1,2,3]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "It is not a sublist\nIt is not a sublist\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpb_rm4jth.js:30:10)\n    at Object.<anonymous> (/tmp/tmpb_rm4jth.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        flag = 1;\n    }\n    return flag;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [2, 3, 4];\nvar C = [1, 2, 3, 4, 5, 6];\nvar D = [2, 3, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        flag = 1;\n    }\n    if(flag == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nvar A = [1,2,3,4,5,6,7,8,9,10];\nvar B = [2,3,4,5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n                break;\n            }\n            else{\n                flag = 0;\n            }\n        }\n        if(flag == 0){\n            break;\n        }\n    }\n    if(flag == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nvar A = [1,2,3,4,5,6];\nvar B = [1,2,3,4,5,6];\nvar C = [1,2,3,4,5,6,7];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var j = 0;\n    for (var i = 0; i < A.length; i++) {\n        if (A[i] == B[j]) {\n            j++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nvar A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar B = [2, 3, 4];\nvar C = [2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar D = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n                break;\n            }\n            else{\n                flag = 0;\n            }\n        }\n        if(flag == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var flag = 0;\n    while(i < A.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n            j = 0;\n        }\n        if(j == B.length){\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nvar A = [1,2,3,4,5,6,7,8,9,10];\nvar B = [2,3,4,5,6];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        flag = 1;\n    }\n    if(flag == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nvar C = [1, 2, 7];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n                break;\n            }\n            else{\n                flag = 0;\n            }\n        }\n        if(flag == 0){\n            return false;\n        }\n    }\n    return true;\n}\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nvar C = [1, 2, 7];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        return true;\n    }\n    return false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nvar A = [1,2,3,4,5];\nvar B = [1,2,3];\nvar C = [1,2,4];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        flag = 1;\n    }\n    if(flag == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nvar A = [1,2,3,4,5,6,7,8,9,10];\nvar B = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];\nvar C = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];\nvar D = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];\nvar E = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];\nvar F = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];\nvar G = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];\nvar H = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];\nvar I = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];\nvar J = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];\nvar K = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];\nvar L = [1,2,3,\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "/tmp/tmp27zo_js3.js:38\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        flag = 1;\n    }\n    return flag;\n}\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nvar C = [1, 2, 7];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nvar A = [1,2,3,4,5,6,7,8,9];\nvar B = [1,2,3,4,5,6,7,8,9,10];\nvar C = [1,2,3,4,5,6,7,8,9,10,11];\nvar D = [1,2,3,4,5,6,7,8,9,10,11,12];\nvar E = [1,2,3,4,5,6,7,8,9,10,11,12,13];\nvar F = [1,2,3,4,5,6,7,8,9,10,11,12,13,14];\nvar G = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];\nvar H = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16];\nvar I = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17];\nvar J = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18];\nvar K = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19];\nvar L = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20];\nvar\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "/tmp/tmpqmjhfv6p.js:35\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 4, 5];\nvar C = [1, 2, 3, 4, 5, 6];\nvar D = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n            }\n        }\n        if(flag == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpjqeq2g93.js:27:10)\n    at Object.<anonymous> (/tmp/tmpjqeq2g93.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n        }\n        j++;\n    }\n    return (i == A.length);\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nvar A = [1,2,3,4,5,6,7,8,9];\nvar B = [1,2,3,4,5,6,7,8,9];\nvar C = [1,2,3,4,5,6,7,8,9,10];\nvar D = [1,2,3,4,5,6,7,8,9,10,11];\nvar E = [1,2,3,4,5,6,7,8,9,10,11,12];\nvar F = [1,2,3,4,5,6,7,8,9,10,11,12,13];\nvar G = [1,2,3,4,5,6,7,8,9,10,11,12,13,14];\nvar H = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];\nvar I = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16];\nvar J = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17];\nvar K = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18];\nvar L = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19];\nvar M = [1,2,3,4,5,6,7,8,9,10\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "/tmp/tmpho6yj3mm.js:35\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nvar C = [1, 2, 7];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    for(var i=0; i<A.length; i++){\n        for(var j=0; j<B.length; j++){\n            if(A[i] == B[j]){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [0, 9, 8, 7, 6, 5];\nvar C = [1, 2, 3, 4, 5];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpd8ul7r0i.js:22:10)\n    at Object.<anonymous> (/tmp/tmpd8ul7r0i.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        flag = 1;\n    }\n    return flag;\n}\nvar A = [1,2,3,4,5];\nvar B = [3,4,5];\nvar C = [3,4,5,6];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        flag = 1;\n    }\n    return flag;\n}\nvar A = [1,2,3,4,5,6,7,8,9,10];\nvar B = [2,3,4,5,6];\nvar C = [2,3,4,5,6,7,8,9,10];\nvar D = [1,2,3,4,5,6,7,8,9,10];\nvar E = [1,2,3,4,5,6,7,8,9,10,11];\nvar F = [1,2,3,4,5,6,7,8,9,10,11,12];\nvar G = [1,2,3,4,5,6,7,8,9,10,11,12,13];\nvar H = [1,2,3,4,5,6,7,8,9,10,11,12,13,14];\nvar I = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];\nvar J = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16];\nvar K = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17];\nvar L = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18];\nvar M = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19];\nvar N = [1,\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "/tmp/tmpvowjdvn2.js:34\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nvar A = [1, 2, 3, 4, 5];\nvar B = [2, 3, 4];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var C = [];\n    var j = 0;\n    for (var i = 0; i < A.length; i++){\n        if (A[i] == B[j]){\n            C.push(A[i]);\n            j++;\n        }\n        else{\n            j = 0;\n            C = [];\n        }\n    }\n    if (C.length == B.length){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195,\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "/tmp/tmpp9n3lkse.js:24\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j])\n                break;\n        }\n        if (j == B.length)\n            return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j])\n                break;\n        }\n        if (j == B.length)\n            return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    while (i < A.length && j < B.length)\n    {\n        if (A[i] == B[j])\n        {\n            i++;\n            j++;\n        }\n        else\n        {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == B.length)\n        return true;\n    else\n        return false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n        }\n        j++;\n    }\n    return i == A.length;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var j = 0;\n    for(var i = 0; i < A.length; i++){\n        if(A[i] == B[j]){\n            j++;\n        }\n        else{\n            j = 0;\n        }\n        if(j == B.length){\n            return true;\n        }\n    }\n    return false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var flag = 0;\n    for(var i = 0; i < A.length; i++){\n        for(var j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n            }\n            else{\n                flag = 0;\n            }\n        }\n    }\n    if(flag == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n        }\n        j++;\n    }\n    return (i == A.length);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        flag = 1;\n    }\n    else{\n        flag = 0;\n    }\n    return flag;\n}\nvar A = [1, 2, 3, 4, 5, 6, 7];\nvar B = [2, 3, 4];\nvar C = [2, 3, 4, 5, 6, 7];\nvar D = [2, 3, 4, 5, 6, 7, 8];\nvar E = [1, 2, 3, 4, 5, 6, 7, 8];\nvar F = [2, 3, 4, 5, 6, 7, 8, 9];\nvar G = [2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar H = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\nvar I = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nvar J = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];\nvar K = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\nvar L = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\nvar M = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\nvar N = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17];\nvar O = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18];\nvar P = [2, 3, 4\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "/tmp/tmppc9vemcb.js:39\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    for(i = 0; i < A.length; i++){\n        if(A[i] == B[j]){\n            j++;\n            if(j == B.length){\n                flag = 1;\n                break;\n            }\n        }\n        else{\n            j = 0;\n        }\n    }\n    if(flag == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nvar A = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar B = [2, 3, 4];\nvar C = [2, 3, 4, 5, 6, 7, 8, 9];\nvar D = [2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar C = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n                break;\n            }\n            else{\n                flag = 0;\n            }\n        }\n        if(flag == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5, 6, 7];\nvar C = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j])\n                break;\n        }\n        if (j == B.length)\n            return false;\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [2, 3, 4];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    for(var i = 0; i < B.length; i++){\n        if(A[i] != B[i]){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n        }\n        j++;\n    }\n    return (i == A.length);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if(j == B.length){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [2, 3, 4];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                count++;\n            }\n        }\n    }\n    if (count == A.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmphhpjmjzv.js:26:10)\n    at Object.<anonymous> (/tmp/tmphhpjmjzv.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j])\n                break;\n        }\n        if (j == B.length)\n            return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nvar A = [1,2,3,4,5,6,7,8,9,10];\nvar B = [1,2,3,4,5,6,7,8,9,10];\nvar C = [1,2,3,4,5,6,7,8,9,10,11];\nvar D = [1,2,3,4,5,6,7,8,9,10,11,12];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        flag = 1;\n    }\n    if(flag == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nvar A = [1,2,3,4,5,6,7,8,9];\nvar B = [2,3,4];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        flag = 1;\n    }\n    if(flag == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == B.length){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nvar A = [1,2,3,4,5,6,7,8,9];\nvar B = [2,3,4,5,6];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}