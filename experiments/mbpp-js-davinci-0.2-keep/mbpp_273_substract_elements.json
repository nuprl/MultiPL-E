{
  "name": "mbpp_273_substract_elements",
  "language": "js",
  "prompt": "//Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\nfunction substract_elements(test_tup1, test_tup2){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_273_substract_elements.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = substract_elements;\n  assert.deepEqual(candidate([10, 4, 5], [2, 5, 18]),[8, -1, -13]);\n  assert.deepEqual(candidate([11, 2, 3], [24, 45, 16]),[-13, -43, -13]);\n  assert.deepEqual(candidate([7, 18, 9], [10, 11, 12]),[-3, 7, -3]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] - test_tup2[i]);\n    }\n    return result;\n}\n",
    "    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] - test_tup2[i]);\n    }\n    return result;\n}\n",
    "    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] - test_tup2[i]);\n    }\n    return result;\n}\n",
    "    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] - test_tup2[i]);\n    }\n    return result;\n}\n",
    "    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] - test_tup2[i]);\n    }\n    return result;\n}\n",
    "\tvar new_tup = [];\n\tfor (var i = 0; i < test_tup1.length; i++){\n\t\tnew_tup.push(test_tup1[i] - test_tup2[i]);\n\t}\n\treturn new_tup;\n}\n",
    "    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] - test_tup2[i]);\n    }\n    return result;\n}\n",
    "    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] - test_tup2[i]);\n    }\n    return result;\n}\n",
    "    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] - test_tup2[i]);\n    }\n    return result;\n}\n",
    "    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] - test_tup2[i]);\n    }\n    return result;\n}\n",
    "    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] - test_tup2[i]);\n    }\n    return result;\n}\n",
    "    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] - test_tup2[i]);\n    }\n    return result;\n}\n",
    "    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] - test_tup2[i]);\n    }\n    return result;\n}\n",
    "    var new_tup = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        new_tup.push(test_tup1[i] - test_tup2[i]);\n    }\n    return new_tup;\n}\n",
    "    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] - test_tup2[i]);\n    }\n    return result;\n}\n",
    "    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] - test_tup2[i]);\n    }\n    return result;\n}\n",
    "    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] - test_tup2[i]);\n    }\n    return result;\n}\n",
    "    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] - test_tup2[i]);\n    }\n    return result;\n}\n",
    "    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] - test_tup2[i]);\n    }\n    return result;\n}\n",
    "    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] - test_tup2[i]);\n    }\n    return result;\n}\n"
  ]
}