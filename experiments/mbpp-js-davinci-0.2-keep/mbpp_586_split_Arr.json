{
  "name": "mbpp_586_split_Arr",
  "language": "js",
  "prompt": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_586_split_Arr.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    l2 = l2.concat(l1);\n    return l2;\n}\n",
    "    var first = l.slice(0, n);\n    var second = l.slice(n);\n    return second.concat(first);\n}\n",
    "    var first = l.slice(0,n);\n    var second = l.slice(n);\n    return second.concat(first);\n}\n",
    "    var l1 = l.slice(0, n);\n    var l2 = l.slice(n, l.length);\n    var l3 = l2.concat(l1);\n    return l3;\n}\n",
    "    var arr = [];\n    for(var i = 0; i < l.length; i++){\n        if(i < n){\n            arr.push(l[i]);\n        }\n        else{\n            arr.unshift(l[i]);\n        }\n    }\n    return arr;\n}",
    "    var arr = l.slice(n);\n    var arr1 = l.slice(0, n);\n    arr.push(arr1);\n    return arr;\n}",
    "    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    var l3 = l2.concat(l1);\n    return l3;\n}",
    "    return l.slice(n).concat(l.slice(0, n));\n}\n",
    "    var first = l.slice(0, n);\n    var second = l.slice(n);\n    return second.concat(first);\n}",
    "    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}",
    "    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}\n",
    "    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}\n",
    "    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}\n",
    "    var arr = [];\n    for(var i = 0; i < l.length; i++){\n        if(i < n){\n            arr.push(l[i]);\n        }\n    }\n    for(var i = 0; i < l.length; i++){\n        if(i >= n){\n            arr.push(l[i]);\n        }\n    }\n    return arr;\n}",
    "    var first = l.slice(0, n);\n    var second = l.slice(n);\n    return second.concat(first);\n}\n",
    "    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}",
    "    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}",
    "    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}\n",
    "    var arr = [];\n    for(var i = 0; i < l.length; i++){\n        if(i < n){\n            arr.push(l[i]);\n        }\n    }\n    for(var i = 0; i < l.length; i++){\n        if(i >= n){\n            arr.push(l[i]);\n        }\n    }\n    return arr;\n}",
    "    var arr = l.slice(n);\n    var arr2 = l.slice(0, n);\n    return arr.concat(arr2);\n}"
  ]
}