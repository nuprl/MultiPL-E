{
  "name": "mbpp_394_check_distinct",
  "language": "js",
  "prompt": "//Write a function to check if given tuple contains no duplicates.\nfunction check_distinct(test_tup){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_394_check_distinct.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_distinct;\n  assert.deepEqual(candidate([1, 4, 5, 6, 1, 4]),false);\n  assert.deepEqual(candidate([1, 4, 5, 6]),true);\n  assert.deepEqual(candidate([2, 3, 4, 5, 6]),true);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var tup_set = new Set(test_tup);\n    if (tup_set.size == test_tup.length){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n",
    "    var res = test_tup.filter(function(elem, index, self) {\n        return index === self.indexOf(elem);\n    });\n    if(res.length == test_tup.length){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
    "    var distinct = true;\n    for (var i = 0; i < test_tup.length; i++){\n        for (var j = i + 1; j < test_tup.length; j++){\n            if (test_tup[i] == test_tup[j]){\n                distinct = false;\n            }\n        }\n    }\n    return distinct;\n}\n",
    "    var flag = true;\n    for(var i=0; i<test_tup.length; i++){\n        for(var j=i+1; j<test_tup.length; j++){\n            if(test_tup[i] == test_tup[j]){\n                flag = false;\n                break;\n            }\n        }\n    }\n    return flag;\n}\n\nvar test_tup = [1, 2, 3, 4, 5, 6, 7, 8, 9];",
    "    var test_tup = test_tup.sort();\n    for(var i=0;i<test_tup.length;i++){\n        if(test_tup[i] == test_tup[i+1]){\n            return false;\n        }\n    }\n    return true;\n}",
    "    var res = test_tup.filter(function(item, pos) {\n        return test_tup.indexOf(item) == pos;\n    })\n    if (res.length == test_tup.length){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n",
    "    var new_tup = new Set(test_tup);\n    if (new_tup.size == test_tup.length){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n",
    "    var s = new Set(test_tup);\n    if (s.size == test_tup.length){\n        console.log(\"No duplicates\");\n    }\n    else{\n        console.log(\"Duplicates\");\n    }\n}\ncheck_distinct([1,2,3,4,5,6,7,8,9,10]);\ncheck_distinct([1,2,3,4,5,6,7,8,9,10,10]);\n",
    "    var distinct = true;\n    for(var i = 0; i < test_tup.length; i++){\n        for(var j = i+1; j < test_tup.length; j++){\n            if(test_tup[i] == test_tup[j]){\n                distinct = false;\n                break;\n            }\n        }\n    }\n    return distinct;\n}\n",
    "    var test_tup = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    var unique_tup = [];\n    for (var i = 0; i < test_tup.length; i++) {\n        if (unique_tup.indexOf(test_tup[i]) == -1) {\n            unique_tup.push(test_tup[i]);\n        }\n    }\n    if (unique_tup.length == test_tup.length) {\n        console.log(\"Tuple contains no duplicates\");\n    } else {\n        console.log(\"Tuple contains duplicates\");\n    }\n}\ncheck_distinct();\n",
    "    var s = new Set(test_tup);\n    if (s.size == test_tup.length){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
    "    var test_tup = [1,2,3,4,5,6,7,8,9,10];\n    var test_tup_len = test_tup.length;\n    var result = true;\n    for (var i = 0; i < test_tup_len; i++) {\n        if (test_tup.indexOf(test_tup[i], i + 1) > -1) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n}",
    "    var distinct = true;\n    for(var i = 0; i < test_tup.length; i++){\n        for(var j = i+1; j < test_tup.length; j++){\n            if(test_tup[i] == test_tup[j]){\n                distinct = false;\n                break;\n            }\n        }\n    }\n    return distinct;\n}\n",
    "    var distinct = true;\n    for(var i = 0; i < test_tup.length; i++){\n        for(var j = i+1; j < test_tup.length; j++){\n            if(test_tup[i] == test_tup[j]){\n                distinct = false;\n                break;\n            }\n        }\n    }\n    return distinct;\n}\n",
    "    var test_tup = test_tup.split(\",\");\n    var set = new Set(test_tup);\n    if (set.size == test_tup.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}",
    "    var distinct = true;\n    for(var i = 0; i < test_tup.length; i++){\n        for(var j = i+1; j < test_tup.length; j++){\n            if(test_tup[i] == test_tup[j]){\n                distinct = false;\n                break;\n            }\n        }\n    }\n    return distinct;\n}\n",
    "    var test_tup = test_tup.split(\",\");\n    var flag = 0;\n    for(var i = 0; i < test_tup.length; i++){\n        for(var j = i+1; j < test_tup.length; j++){\n            if(test_tup[i] == test_tup[j]){\n                flag = 1;\n            }\n        }\n    }\n    if(flag == 0){\n        console.log(\"True\");\n    }\n    else{\n        console.log(\"False\");\n    }\n}\ncheck_distinct(\"1,2,3,4,5,6,7,8,9,10\");\n",
    "    var set = new Set(test_tup);\n    if (set.size == test_tup.length){\n        console.log(\"True\");\n    }\n    else{\n        console.log(\"False\");\n    }\n}\ncheck_distinct([1,2,3,4,5,6,7,8,9,10]);\ncheck_distinct([1,2,3,4,5,6,7,8,9,10,1]);\n",
    "    var new_tup = [];\n    for(var i = 0; i < test_tup.length; i++){\n        if(new_tup.indexOf(test_tup[i]) == -1){\n            new_tup.push(test_tup[i]);\n        }\n    }\n    if(new_tup.length == test_tup.length){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
    "    var result = true;\n    for (var i = 0; i < test_tup.length; i++){\n        for (var j = i + 1; j < test_tup.length; j++){\n            if (test_tup[i] == test_tup[j]){\n                result = false;\n                break;\n            }\n        }\n    }\n    return result;\n}\n"
  ]
}