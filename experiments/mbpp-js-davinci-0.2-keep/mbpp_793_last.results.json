{
  "name": "mbpp_793_last",
  "language": "js",
  "prompt": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_793_last.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    while(i < arr.length){\n        if(arr[i] == x){\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp22u7wnul.js:19:10)\n    at Object.<anonymous> (/tmp/tmp22u7wnul.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var i = 0;\n    var j = n-1;\n    var res = -1;\n    while(i<=j){\n        var mid = Math.floor((i+j)/2);\n        if(arr[mid] == x){\n            res = mid;\n            i = mid+1;\n        }\n        else if(arr[mid] < x){\n            i = mid+1;\n        }\n        else{\n            j = mid-1;\n        }\n    }\n    return res;\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nvar x = 5;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    for(let i=arr.length-1; i>=0; i--){\n        if(arr[i]==x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    for(var i=arr.length-1;i>=0;i--){\n        if(arr[i]==x){\n            return i;\n        }\n    }\n    return -1;\n}\nvar arr=[1,2,3,4,5,6,7,8,9,10];\nvar x=10;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var l = arr.length;\n    var i = 0;\n    while(i < l){\n        if(arr[i] == x){\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpsy1nvgmt.js:20:10)\n    at Object.<anonymous> (/tmp/tmpsy1nvgmt.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var i = 0;\n    var j = n-1;\n    var res = -1;\n    while(i<=j){\n        var mid = Math.floor((i+j)/2);\n        if(arr[mid] == x){\n            res = mid;\n            i = mid+1;\n        }\n        else if(arr[mid] < x){\n            i = mid+1;\n        }\n        else{\n            j = mid-1;\n        }\n    }\n    return res;\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nvar x = 10;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    for(var i=arr.length-1; i>=0; i--){\n        if(arr[i]==x){\n            return i;\n        }\n    }\n    return -1;\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    for(var i=arr.length-1; i>=0; i--){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    for(var i = arr.length-1; i >= 0; i--){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var pos = -1;\n    for(var i = 0; i < n; i++){\n        if(arr[i] == x){\n            pos = i;\n        }\n    }\n    return pos;\n}\nvar arr = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\nvar x = 2;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var i = 0;\n    var j = n-1;\n    var res = -1;\n    while(i<=j){\n        var mid = Math.floor((i+j)/2);\n        if(arr[mid] == x){\n            res = mid;\n            i = mid+1;\n        }\n        else if(arr[mid] < x){\n            i = mid+1;\n        }\n        else{\n            j = mid-1;\n        }\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    for(var i=arr.length-1; i>=0; i--){\n        if(arr[i]==x){\n            return i;\n        }\n    }\n    return -1;\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i;\n    for(i=0; i<arr.length; i++){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpzuef07s3.js:18:10)\n    at Object.<anonymous> (/tmp/tmpzuef07s3.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var result = -1;\n    for(var i=0; i<n; i++){\n        if(arr[i] == x){\n            result = i;\n        }\n    }\n    return result;\n}\nvar arr = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\nvar x = 2;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    for(var i=arr.length-1; i>=0; i--){\n        if(arr[i]==x){\n            return i;\n        }\n    }\n    return -1;\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var l = arr.length;\n    var i = 0;\n    while(i < l){\n        if(arr[i] == x){\n            var pos = i;\n        }\n        i++;\n    }\n    return pos;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i;\n    for(i=0;i<arr.length;i++){\n        if(arr[i]==x){\n            return i;\n        }\n    }\n    return -1;\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nvar x = 10;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp12xap0r5.js:19:10)\n    at Object.<anonymous> (/tmp/tmp12xap0r5.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    for(var i=arr.length-1; i>=0; i--){\n        if(arr[i]==x){\n            return i;\n        }\n    }\n    return -1;\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var l = 0;\n    var r = arr.length - 1;\n    var result = -1;\n    while (l <= r){\n        var m = Math.floor((l + r) / 2);\n        if (arr[m] == x){\n            result = m;\n            l = m + 1;\n        }\n        else if (arr[m] < x){\n            l = m + 1;\n        }\n        else{\n            r = m - 1;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var l = 0;\n    var r = arr.length - 1;\n    var result = -1;\n    while(l <= r){\n        var mid = Math.floor((l + r) / 2);\n        if(arr[mid] == x){\n            result = mid;\n            l = mid + 1;\n        }\n        else if(arr[mid] < x){\n            l = mid + 1;\n        }\n        else{\n            r = mid - 1;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var i = 0;\n    var j = n-1;\n    var res = -1;\n    while(i <= j){\n        var mid = Math.floor((i+j)/2);\n        if(arr[mid] == x){\n            res = mid;\n            i = mid + 1;\n        }\n        else if(arr[mid] < x){\n            i = mid + 1;\n        }\n        else{\n            j = mid - 1;\n        }\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i;\n    for(i=0; i<arr.length; i++){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpzuef07s3.js:18:10)\n    at Object.<anonymous> (/tmp/tmpzuef07s3.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var result = -1;\n    for(var i=0; i<n; i++){\n        if(arr[i] == x){\n            result = i;\n        }\n    }\n    return result;\n}\nvar arr = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\nvar x = 2;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0){\n        if(arr[i] == x){\n            return i;\n        }\n        i--;\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var i = 0;\n    var j = n-1;\n    var res = -1;\n    while(i<=j){\n        var mid = Math.floor((i+j)/2);\n        if(arr[mid] == x){\n            res = mid;\n            i = mid+1;\n        }\n        else if(arr[mid] < x){\n            i = mid+1;\n        }\n        else{\n            j = mid-1;\n        }\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i <= j){\n        var mid = Math.floor((i + j) / 2);\n        if(arr[mid] == x && (mid == arr.length - 1 || arr[mid + 1] != x)){\n            return mid;\n        }\n        else if(arr[mid] <= x){\n            i = mid + 1;\n        }\n        else{\n            j = mid - 1;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i <= j){\n        var mid = Math.floor((i + j) / 2);\n        if(arr[mid] == x && (mid == arr.length - 1 || arr[mid + 1] != x)){\n            return mid;\n        }\n        else if(arr[mid] <= x){\n            i = mid + 1;\n        }\n        else{\n            j = mid - 1;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(arr[i] != x && i >= 0){\n        i--;\n    }\n    if(i >= 0){\n        return i;\n    }\n    else{\n        return -1;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    for(var i=arr.length-1; i>=0; i--){\n        if(arr[i]==x){\n            return i;\n        }\n    }\n    return -1;\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nvar x = 5;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var result = -1;\n    for(var i = 0; i < n; i++){\n        if(arr[i] == x){\n            result = i;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length-1;\n    while(arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var index = arr.lastIndexOf(x);\n    return index;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i;\n    for(i=0; i<arr.length; i++){\n        if(arr[i]==x){\n            var pos = i;\n        }\n    }\n    return pos;\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nvar x = 4;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i;\n    for(i=0;i<arr.length;i++){\n        if(arr[i]==x){\n            return i;\n        }\n    }\n    return -1;\n}\nvar arr=[1,2,3,4,5,6,7,8,9,10];\nvar x=10;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpxsbobxlg.js:19:10)\n    at Object.<anonymous> (/tmp/tmpxsbobxlg.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var i = 0;\n    var j = n-1;\n    var res = -1;\n    while(i<=j){\n        var mid = Math.floor((i+j)/2);\n        if(arr[mid] == x){\n            res = mid;\n            i = mid + 1;\n        }\n        else if(arr[mid] < x){\n            i = mid + 1;\n        }\n        else{\n            j = mid - 1;\n        }\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i < j){\n        var mid = Math.floor((i + j) / 2);\n        if(arr[mid] <= x){\n            i = mid + 1;\n        }\n        else{\n            j = mid;\n        }\n    }\n    if(arr[i] == x){\n        return i;\n    }\n    return -1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmp86qj8ikn.js:24:10)\n    at Object.<anonymous> (/tmp/tmp86qj8ikn.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var l = arr.length;\n    var i = 0;\n    while(i < l){\n        if(arr[i] == x){\n            var j = i;\n            while(arr[j] == x){\n                j++;\n            }\n            return j-1;\n        }\n        i++;\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpvylsagid.js:25:10)\n    at Object.<anonymous> (/tmp/tmpvylsagid.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i;\n    for(i=arr.length-1; i>=0; i--){\n        if(arr[i]==x){\n            return i;\n        }\n    }\n    return -1;\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100];\nvar x = 100;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var i = 0;\n    var result = -1;\n    while(i<n){\n        if(arr[i]==x){\n            result = i;\n        }\n        i++;\n    }\n    return result;\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var l = 0;\n    var r = arr.length - 1;\n    var result = -1;\n    while(l <= r){\n        var mid = Math.floor((l + r) / 2);\n        if(arr[mid] == x){\n            result = mid;\n            l = mid + 1;\n        }\n        else if(arr[mid] > x){\n            r = mid - 1;\n        }\n        else{\n            l = mid + 1;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var l = arr.length;\n    for(var i = l-1; i >= 0; i--){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i;\n    for(i=0;i<arr.length;i++){\n        if(arr[i]==x){\n            return i;\n        }\n    }\n    return -1;\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nvar x = 10;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp12xap0r5.js:19:10)\n    at Object.<anonymous> (/tmp/tmp12xap0r5.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i;\n    for(i=0; i<arr.length; i++){\n        if(arr[i]==x){\n            return i;\n        }\n    }\n    return -1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpoj02plvn.js:17:10)\n    at Object.<anonymous> (/tmp/tmpoj02plvn.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var i = 0;\n    var index = -1;\n    while(i < n){\n        if(arr[i] == x){\n            index = i;\n        }\n        i++;\n    }\n    return index;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    var j = arr.length - 1;\n    while (i <= j){\n        var mid = Math.floor((i + j) / 2);\n        if (arr[mid] === x){\n            if (arr[mid + 1] !== x){\n                return mid;\n            }\n            i = mid + 1;\n        }\n        else if (arr[mid] > x){\n            j = mid - 1;\n        }\n        else{\n            i = mid + 1;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    while(i < arr.length){\n        if(arr[i] == x){\n            var last = i;\n        }\n        i++;\n    }\n    return last;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    var j = arr.length - 1;\n    var mid = Math.floor((i + j) / 2);\n    while(i <= j){\n        if(arr[mid] == x && (mid == arr.length - 1 || arr[mid + 1] != x)){\n            return mid;\n        }\n        else if(arr[mid] <= x){\n            i = mid + 1;\n        }\n        else{\n            j = mid - 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    var j = arr.length - 1;\n    var mid = 0;\n    while(i <= j){\n        mid = Math.floor((i + j) / 2);\n        if(arr[mid] == x){\n            if(arr[mid + 1] == x){\n                i = mid + 1;\n            }else{\n                return mid;\n            }\n        }else if(arr[mid] > x){\n            j = mid - 1;\n        }else{\n            i = mid + 1;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var len = arr.length;\n    var i = 0;\n    while(i < len){\n        if(arr[i] == x){\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp8vdnusfc.js:20:10)\n    at Object.<anonymous> (/tmp/tmp8vdnusfc.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    var n = arr.length;\n    while(i < n){\n        if(arr[i] == x){\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp2ddgz5d1.js:20:10)\n    at Object.<anonymous> (/tmp/tmp2ddgz5d1.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i;\n    for(i=0;i<arr.length;i++){\n        if(arr[i]==x){\n            var index=i;\n        }\n    }\n    return index;\n}\nvar arr=[1,2,3,4,5,6,7,8,9,10];\nvar x=10;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var l = arr.length;\n    for(var i = l-1; i>=0; i--){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    for(var i = arr.length - 1; i >= 0; i--){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i <= j){\n        var mid = Math.floor((i + j) / 2);\n        if(arr[mid] == x){\n            if(arr[mid + 1] != x){\n                return mid;\n            }\n            else{\n                i = mid + 1;\n            }\n        }\n        else if(arr[mid] > x){\n            j = mid - 1;\n        }\n        else{\n            i = mid + 1;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var i = 0;\n    var j = n-1;\n    var res = -1;\n    while(i<=j){\n        var mid = Math.floor((i+j)/2);\n        if(arr[mid]==x){\n            res = mid;\n            i = mid+1;\n        }\n        else if(arr[mid]<x){\n            i = mid+1;\n        }\n        else{\n            j = mid-1;\n        }\n    }\n    return res;\n}\nvar arr = [1,2,3,4,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "/tmp/tmp0oqbtoag.js:23\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    for(var i=arr.length-1; i>=0; i--){\n        if(arr[i]==x){\n            return i;\n        }\n    }\n    return -1;\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0){\n        if(arr[i] == x){\n            return i;\n        }\n        i--;\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    while(i < arr.length){\n        if(arr[i] == x){\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp22u7wnul.js:19:10)\n    at Object.<anonymous> (/tmp/tmp22u7wnul.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var i = 0;\n    var j = n-1;\n    var res = -1;\n    while(i<=j){\n        var mid = Math.floor((i+j)/2);\n        if(arr[mid] == x){\n            res = mid;\n            i = mid+1;\n        }\n        else if(arr[mid] < x){\n            i = mid+1;\n        }\n        else{\n            j = mid-1;\n        }\n    }\n    return res;\n}\nvar arr = [1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "/tmp/tmpd3ghktnt.js:23\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i;\n    for(i=arr.length-1;i>=0;i--){\n        if(arr[i]==x){\n            return i;\n        }\n    }\n    return -1;\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nvar x = 5;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    for(var i=arr.length-1; i>=0; i--){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    for(var i=arr.length-1; i>=0; i--){\n        if(arr[i]==x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while (i >= 0 && arr[i] != x)\n        i--;\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    for(i = 0; i < arr.length; i++){\n        if(arr[i] == x){\n            var index = i;\n        }\n    }\n    return index;\n}\nvar arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar x = 10;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var i = 0;\n    var j = n-1;\n    var res = -1;\n    while(i<=j){\n        var mid = Math.floor((i+j)/2);\n        if(arr[mid] == x){\n            res = mid;\n            i = mid+1;\n        }\n        else if(arr[mid] < x){\n            i = mid+1;\n        }\n        else{\n            j = mid-1;\n        }\n    }\n    return res;\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    while(i < arr.length){\n        if(arr[i] == x){\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp22u7wnul.js:19:10)\n    at Object.<anonymous> (/tmp/tmp22u7wnul.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    var j = arr.length - 1;\n    var mid;\n    while(i <= j){\n        mid = Math.floor((i + j) / 2);\n        if(arr[mid] == x){\n            if(arr[mid + 1] != x){\n                return mid;\n            }\n            else{\n                i = mid + 1;\n            }\n        }\n        else if(arr[mid] > x){\n            j = mid - 1;\n        }\n        else{\n            i = mid + 1;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    for(var i=arr.length-1; i>=0; i--){\n        if(arr[i]==x){\n            return i;\n        }\n    }\n    return -1;\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nvar x = 10;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var i = 0;\n    var result = -1;\n    while(i<n){\n        if(arr[i] == x){\n            result = i;\n        }\n        i = i + 1;\n    }\n    return result;\n}\nvar arr = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\nvar x = 2;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i <= j){\n        var mid = Math.floor((i + j) / 2);\n        if(arr[mid] === x && (arr[mid + 1] !== x || mid === arr.length - 1)){\n            return mid;\n        }\n        else if(arr[mid] <= x){\n            i = mid + 1;\n        }\n        else{\n            j = mid - 1;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var l = arr.length;\n    var i = 0;\n    while(i < l){\n        if(arr[i] == x){\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpsy1nvgmt.js:20:10)\n    at Object.<anonymous> (/tmp/tmpsy1nvgmt.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var l = arr.length;\n    var i = 0;\n    while(i < l){\n        if(arr[i] == x){\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpsy1nvgmt.js:20:10)\n    at Object.<anonymous> (/tmp/tmpsy1nvgmt.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var result = -1;\n    for(var i=0; i<n; i++){\n        if(arr[i] == x){\n            result = i;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var l = arr.length;\n    var i = 0;\n    while(i < l){\n        if(arr[i] == x){\n            var j = i;\n        }\n        i++;\n    }\n    return j;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i;\n    for(i=0;i<arr.length;i++){\n        if(arr[i]==x){\n            return i;\n        }\n    }\n    return -1;\n}\nvar arr = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8]; \nvar x = 2; \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpmfga4peq.js:19:10)\n    at Object.<anonymous> (/tmp/tmpmfga4peq.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i;\n    for(i=0;i<arr.length;i++){\n        if(arr[i]==x){\n            var j=i;\n        }\n    }\n    return j;\n}\nvar arr=[1,2,3,4,5,6,7,8,9,10];\nvar x=10;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var i = 0;\n    var j = n-1;\n    var res = -1;\n    while(i<=j){\n        var mid = Math.floor((i+j)/2);\n        if(arr[mid] == x){\n            res = mid;\n            i = mid+1;\n        }\n        else if(arr[mid] > x){\n            j = mid-1;\n        }\n        else{\n            i = mid+1;\n        }\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var l = arr.length;\n    for(var i = l-1; i >= 0; i--){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nvar x = 6;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i <= j){\n        var mid = Math.floor((i + j) / 2);\n        if(arr[mid] == x){\n            if(arr[mid + 1] != x){\n                return mid;\n            }\n            else{\n                i = mid + 1;\n            }\n        }\n        else if(arr[mid] < x){\n            i = mid + 1;\n        }\n        else{\n            j = mid - 1;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    for(var i = arr.length-1; i >= 0; i--){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var result = -1;\n    for(var i = 0; i < n; i++){\n        if(arr[i] == x){\n            result = i;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    let i = 0;\n    while(i < arr.length){\n        if(arr[i] == x){\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp6eek7p3t.js:19:10)\n    at Object.<anonymous> (/tmp/tmp6eek7p3t.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    for(i = 0; i < arr.length; i++){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpv546m3bu.js:18:10)\n    at Object.<anonymous> (/tmp/tmpv546m3bu.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    while(arr[i] != x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpyhz43nh_.js:16:10)\n    at Object.<anonymous> (/tmp/tmpyhz43nh_.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i;\n    for(i=0; i<arr.length; i++){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpzuef07s3.js:18:10)\n    at Object.<anonymous> (/tmp/tmpzuef07s3.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    var n = arr.length;\n    while(i < n){\n        if(arr[i] == x){\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp2ddgz5d1.js:20:10)\n    at Object.<anonymous> (/tmp/tmp2ddgz5d1.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    for(var i=arr.length-1; i>=0; i--){\n        if(arr[i]==x){\n            return i;\n        }\n    }\n    return -1;\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i;\n    for(i=0; i<arr.length; i++){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nvar x = 10;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp6r2c7eof.js:19:10)\n    at Object.<anonymous> (/tmp/tmp6r2c7eof.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    for(var i=arr.length-1; i>=0; i--){\n        if(arr[i]==x){\n            return i;\n        }\n    }\n    return -1;\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nvar x = 10;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i < j){\n        var mid = Math.floor((i + j) / 2);\n        if(arr[mid] <= x){\n            i = mid + 1;\n        }\n        else{\n            j = mid;\n        }\n    }\n    if(arr[i] == x){\n        return i;\n    }\n    else{\n        return -1;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpi5_e2qxr.js:27:10)\n    at Object.<anonymous> (/tmp/tmpi5_e2qxr.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var i = 0;\n    var j = n-1;\n    var res = -1;\n    while(i<=j){\n        var mid = Math.floor((i+j)/2);\n        if(arr[mid]==x){\n            res = mid;\n            i = mid+1;\n        }\n        else if(arr[mid]>x){\n            j = mid-1;\n        }\n        else{\n            i = mid+1;\n        }\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i;\n    for(i=0; i<arr.length; i++){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpzuef07s3.js:18:10)\n    at Object.<anonymous> (/tmp/tmpzuef07s3.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0){\n        if(arr[i] == x){\n            return i;\n        }\n        i--;\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var i = 0;\n    var index = -1;\n    for(i = 0; i < n; i++){\n        if(arr[i] == x){\n            index = i;\n        }\n    }\n    return index;\n}\nvar arr = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\nvar x = 2;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var len = arr.length;\n    var i = 0;\n    var flag = 0;\n    for(i=0; i<len; i++){\n        if(arr[i] == x){\n            flag = i;\n        }\n    }\n    if(flag == 0){\n        return -1;\n    }\n    else{\n        return flag;\n    }\n}\nvar arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar x = 10;\nvar result = last(arr, x);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmp6ugthf1d.js:26:10)\n    at Object.<anonymous> (/tmp/tmp6ugthf1d.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    for(var i=0;i<arr.length;i++){\n        if(arr[i]==x){\n            return i;\n        }\n    }\n    return -1;\n}\nvar arr=[1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpo4tttmwh.js:17:10)\n    at Object.<anonymous> (/tmp/tmpo4tttmwh.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    for(var i = arr.length - 1; i >= 0; i--){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    for(var i=arr.length-1; i>=0; i--){\n        if(arr[i]==x){\n            return i;\n        }\n    }\n    return -1;\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100];\nvar x = 100;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var len = arr.length;\n    var i = 0;\n    for(i = 0; i < len; i++){\n        if(arr[i] == x){\n            var pos = i;\n        }\n    }\n    return pos;\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nvar x = 10;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i;\n    for(i=0;i<arr.length;i++){\n        if(arr[i]==x){\n            return i;\n        }\n    }\n    return -1;\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nvar x = 10;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp12xap0r5.js:19:10)\n    at Object.<anonymous> (/tmp/tmp12xap0r5.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var i = 0;\n    var j = n;\n    while(i < j){\n        var m = Math.floor((i+j)/2);\n        if(arr[m] <= x){\n            i = m+1;\n        }\n        else{\n            j = m;\n        }\n    }\n    if(arr[i-1] == x){\n        return i-1;\n    }\n    else{\n        return -1;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i;\n    for(i=0;i<arr.length;i++){\n        if(arr[i]==x){\n            return i;\n        }\n    }\n    return -1;\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nvar x = 5;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpdkqbmfbi.js:19:10)\n    at Object.<anonymous> (/tmp/tmpdkqbmfbi.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var l = arr.length;\n    for(var i=0; i<l; i++){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpm9zfr4ql.js:18:10)\n    at Object.<anonymous> (/tmp/tmpm9zfr4ql.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i < j){\n        var mid = Math.floor((i + j) / 2);\n        if(arr[mid] <= x){\n            i = mid + 1;\n        }else{\n            j = mid;\n        }\n    }\n    if(arr[i] == x){\n        return i;\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmposjecd3t.js:24:10)\n    at Object.<anonymous> (/tmp/tmposjecd3t.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var i = 0;\n    var result = -1;\n    for(i = 0; i < n; i++){\n        if(arr[i] == x){\n            result = i;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var index = -1;\n    for(var i = 0; i < n; i++){\n        if(arr[i] == x){\n            index = i;\n        }\n    }\n    return index;\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nvar x = 5;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    while(i < arr.length){\n        if(arr[i] == x){\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp22u7wnul.js:19:10)\n    at Object.<anonymous> (/tmp/tmp22u7wnul.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i <= j){\n        var mid = Math.floor((i + j) / 2);\n        if(arr[mid] == x){\n            if(arr[mid + 1] != x){\n                return mid;\n            }\n            else{\n                i = mid + 1;\n            }\n        }\n        else if(arr[mid] > x){\n            j = mid - 1;\n        }\n        else{\n            i = mid + 1;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i;\n    for(i=0;i<arr.length;i++){\n        if(arr[i]==x){\n            return i;\n        }\n    }\n    return -1;\n}\nvar arr=[1,2,3,4,5,6,7,8,9];\nvar x=5;\nvar result=last(arr,x);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpfqehxgh0.js:20:10)\n    at Object.<anonymous> (/tmp/tmpfqehxgh0.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var l = arr.length;\n    var i = 0;\n    while(i < l){\n        if(arr[i] == x){\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpsy1nvgmt.js:20:10)\n    at Object.<anonymous> (/tmp/tmpsy1nvgmt.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var i = 0;\n    var j = n-1;\n    var res = -1;\n    while(i<=j){\n        var mid = Math.floor((i+j)/2);\n        if(arr[mid]==x){\n            res = mid;\n            i = mid+1;\n        }\n        else if(arr[mid]>x){\n            j = mid-1;\n        }\n        else{\n            i = mid+1;\n        }\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length;\n    while(i--){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i <= j){\n        var mid = Math.floor((i + j) / 2);\n        if(arr[mid] == x){\n            if(arr[mid + 1] == x){\n                i = mid + 1;\n            }\n            else{\n                return mid;\n            }\n        }\n        else if(arr[mid] < x){\n            i = mid + 1;\n        }\n        else{\n            j = mid - 1;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    for(var i=arr.length-1; i>=0; i--){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var i = 0;\n    while(i < n){\n        if(arr[i] == x){\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpn2hq0u53.js:20:10)\n    at Object.<anonymous> (/tmp/tmpn2hq0u53.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    while(arr[i] != x){\n        i++;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpcanj8bco.js:15:10)\n    at Object.<anonymous> (/tmp/tmpcanj8bco.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    while(i < arr.length){\n        if(arr[i] == x){\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp22u7wnul.js:19:10)\n    at Object.<anonymous> (/tmp/tmp22u7wnul.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var l = arr.length;\n    var i = 0;\n    while(i < l){\n        if(arr[i] == x){\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpsy1nvgmt.js:20:10)\n    at Object.<anonymous> (/tmp/tmpsy1nvgmt.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0){\n        if(arr[i] == x){\n            return i;\n        }\n        i--;\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var index = -1;\n    for(var i = 0; i < n; i++){\n        if(arr[i] == x){\n            index = i;\n        }\n    }\n    return index;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    for(var i = arr.length-1; i >= 0; i--){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var l = arr.length;\n    for(var i = l-1; i>=0; i--){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.indexOf(x);\n    if(i == -1){\n        return -1;\n    }\n    return arr.lastIndexOf(x);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0){\n        if(arr[i] == x){\n            return i;\n        }\n        i--;\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var result = -1;\n    for(var i=0; i<n; i++){\n        if(arr[i] == x){\n            result = i;\n        }\n    }\n    return result;\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nvar x = 10;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i <= j){\n        var mid = Math.floor((i + j) / 2);\n        if(arr[mid] == x && (mid == arr.length - 1 || arr[mid + 1] != x)){\n            return mid;\n        }\n        else if(arr[mid] <= x){\n            i = mid + 1;\n        }\n        else{\n            j = mid - 1;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    var j = arr.length - 1;\n    while (i <= j){\n        var mid = Math.floor((i + j) / 2);\n        if (arr[mid] == x){\n            if (arr[mid + 1] == x){\n                i = mid + 1;\n            }\n            else{\n                return mid;\n            }\n        }\n        else if (arr[mid] < x){\n            i = mid + 1;\n        }\n        else{\n            j = mid - 1;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0){\n        if(arr[i] === x){\n            return i;\n        }\n        i--;\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    for(var i=arr.length-1; i>=0; i--){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var l = arr.length;\n    for(var i = l-1; i >= 0; i--){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0){\n        if(arr[i] == x){\n            return i;\n        }\n        i--;\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var l = arr.length;\n    for(var i = l-1; i>=0; i--){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    for(var i=arr.length-1; i>=0; i--){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var l = arr.length;\n    var i = 0;\n    while(i < l){\n        if(arr[i] == x){\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpsy1nvgmt.js:20:10)\n    at Object.<anonymous> (/tmp/tmpsy1nvgmt.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    while(arr[i] != x){\n        i++;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpcanj8bco.js:15:10)\n    at Object.<anonymous> (/tmp/tmpcanj8bco.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    while(arr[i] != x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpyhz43nh_.js:16:10)\n    at Object.<anonymous> (/tmp/tmpyhz43nh_.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i;\n    for(i=arr.length-1; i>=0; i--){\n        if(arr[i]==x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(arr[i] != x && i >= 0){\n        i--;\n    }\n    if(i < 0){\n        return -1;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var i = 0;\n    var j = n-1;\n    while(i<=j){\n        var mid = Math.floor((i+j)/2);\n        if(arr[mid]==x && (mid==n-1 || arr[mid+1]>x)){\n            return mid;\n        }\n        else if(arr[mid]>x){\n            j = mid-1;\n        }\n        else{\n            i = mid+1;\n        }\n    }\n    return -1;\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nvar x = 10;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i <= j){\n        var mid = Math.floor((i + j) / 2);\n        if(arr[mid] == x && (arr[mid + 1] == undefined || arr[mid + 1] != x)){\n            return mid;\n        }\n        else if(arr[mid] <= x){\n            i = mid + 1;\n        }\n        else{\n            j = mid - 1;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var l = arr.length;\n    for(var i = l-1; i >= 0; i--){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var l = arr.length;\n    for(var i = l-1; i >= 0; i--){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nvar x = 10;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var i = 0;\n    var j = n-1;\n    var res = -1;\n    while(i<=j){\n        var mid = Math.floor((i+j)/2);\n        if(arr[mid] == x){\n            res = mid;\n            i = mid+1;\n        }\n        else if(arr[mid] < x){\n            i = mid+1;\n        }\n        else{\n            j = mid-1;\n        }\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var l = 0;\n    var r = arr.length - 1;\n    var result = -1;\n    while(l <= r){\n        var mid = Math.floor((l + r) / 2);\n        if(arr[mid] == x){\n            result = mid;\n            l = mid + 1;\n        }else if(arr[mid] < x){\n            l = mid + 1;\n        }else{\n            r = mid - 1;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length-1;\n    while(i>=0){\n        if(arr[i]==x){\n            return i;\n        }\n        i--;\n    }\n    return -1;\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var i = 0;\n    var j = n-1;\n    var res = -1;\n    while(i <= j){\n        var mid = Math.floor((i+j)/2);\n        if(arr[mid] == x){\n            res = mid;\n            i = mid + 1;\n        }\n        else if(arr[mid] < x){\n            i = mid + 1;\n        }\n        else{\n            j = mid - 1;\n        }\n    }\n    return res;\n}\n\nvar arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "/tmp/tmp1wnvhxfn.js:24\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var i = 0;\n    var j = n-1;\n    var res = -1;\n    while(i <= j){\n        var mid = Math.floor((i+j)/2);\n        if(arr[mid] == x){\n            res = mid;\n            i = mid + 1;\n        }\n        else if(arr[mid] < x){\n            i = mid + 1;\n        }\n        else{\n            j = mid - 1;\n        }\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var i = 0;\n    for(i = 0; i < n; i++){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmplxa87pdg.js:19:10)\n    at Object.<anonymous> (/tmp/tmplxa87pdg.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    for(var i = arr.length-1; i >= 0; i--){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i;\n    for(i=0; i<arr.length; i++){\n        if(arr[i]==x){\n            return i;\n        }\n    }\n    return -1;\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20];\nvar x = 10;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp_oi0g5j2.js:19:10)\n    at Object.<anonymous> (/tmp/tmp_oi0g5j2.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var len = arr.length;\n    var i = 0;\n    while(i < len){\n        if(arr[i] == x){\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmprb1l97xg.js:19:10)\n    at Object.<anonymous> (/tmp/tmprb1l97xg.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    for(var i=arr.length-1; i>=0; i--){\n        if(arr[i]==x){\n            return i;\n        }\n    }\n    return -1;\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    var j = arr.length - 1;\n    var mid = 0;\n    while(i < j){\n        mid = Math.floor((i + j) / 2);\n        if(arr[mid] == x){\n            i = mid + 1;\n        }\n        else if(arr[mid] < x){\n            i = mid + 1;\n        }\n        else{\n            j = mid - 1;\n        }\n    }\n    if(arr[i] == x){\n        return i;\n    }\n    else{\n        return -1;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp3062pnhk.js:32:10)\n    at Object.<anonymous> (/tmp/tmp3062pnhk.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var l = 0;\n    var r = arr.length - 1;\n    while(l <= r){\n        var mid = Math.floor((l + r) / 2);\n        if(arr[mid] == x){\n            if(mid == arr.length - 1 || arr[mid + 1] != x){\n                return mid;\n            }\n            else{\n                l = mid + 1;\n            }\n        }\n        else if(arr[mid] < x){\n            l = mid + 1;\n        }\n        else{\n            r = mid - 1;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    for(var i=arr.length-1; i>=0; i--){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var i = 0;\n    var j = n-1;\n    var res = -1;\n    while(i<=j){\n        var mid = Math.floor((i+j)/2);\n        if(arr[mid] == x){\n            res = mid;\n            i = mid+1;\n        }\n        else if(arr[mid] < x){\n            i = mid+1;\n        }\n        else{\n            j = mid-1;\n        }\n    }\n    return res;\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nvar x = 8;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var l = 0;\n    var h = arr.length - 1;\n    while(l <= h){\n        var mid = Math.floor((l + h) / 2);\n        if(arr[mid] == x){\n            if(mid == arr.length - 1 || arr[mid + 1] != x){\n                return mid;\n            }\n            else{\n                l = mid + 1;\n            }\n        }\n        else if(arr[mid] < x){\n            l = mid + 1;\n        }\n        else{\n            h = mid - 1;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0){\n        if(arr[i] == x){\n            return i;\n        }\n        i--;\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    for(var i=arr.length-1; i>=0; i--){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0){\n        if(arr[i] == x){\n            return i;\n        }\n        i--;\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var l = arr.length;\n    var i = 0;\n    while(i<l){\n        if(arr[i]==x){\n            var pos = i;\n        }\n        i++;\n    }\n    return pos;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var index = arr.lastIndexOf(x);\n    return index;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    for(var i=0; i<arr.length; i++){\n        if(arr[i]==x){\n            var a=i;\n        }\n    }\n    return a;\n}\nvar arr=[1,2,3,4,5,6,7,8,9,10];\nvar x=8;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var res = -1;\n    for(var i = 0; i < n; i++){\n        if(arr[i] == x){\n            res = i;\n        }\n    }\n    return res;\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nvar x = 10;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var l = 0;\n    var r = arr.length - 1;\n    var result = -1;\n    while(l <= r){\n        var mid = Math.floor((l + r) / 2);\n        if(arr[mid] == x){\n            result = mid;\n            l = mid + 1;\n        }\n        else if(arr[mid] > x){\n            r = mid - 1;\n        }\n        else{\n            l = mid + 1;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    return arr.lastIndexOf(x);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var result = -1;\n    for(var i = 0; i < n; i++){\n        if(arr[i] == x){\n            result = i;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    while(arr[i] != x){\n        i++;\n    }\n    return i;\n}\n\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nvar x = 10;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp959a50xu.js:18:10)\n    at Object.<anonymous> (/tmp/tmp959a50xu.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0){\n        if(arr[i] == x){\n            return i;\n        }\n        i--;\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var index = -1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] == x){\n            index = i;\n        }\n    }\n    return index;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var l = arr.length;\n    for(var i=l-1; i>=0; i--){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var l = arr.length;\n    for(var i = l-1; i >= 0; i--){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var i = 0;\n    var j = n-1;\n    var res = -1;\n    while(i<=j){\n        var mid = Math.floor((i+j)/2);\n        if(arr[mid] == x){\n            res = mid;\n            i = mid+1;\n        }\n        else if(arr[mid]<x){\n            i = mid+1;\n        }\n        else{\n            j = mid-1;\n        }\n    }\n    return res;\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nvar x = 5;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    while(i < arr.length){\n        if(arr[i] == x){\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp22u7wnul.js:19:10)\n    at Object.<anonymous> (/tmp/tmp22u7wnul.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i <= j){\n        var mid = Math.floor((i + j) / 2);\n        if(arr[mid] == x){\n            if(arr[mid + 1] != x){\n                return mid;\n            }\n            else{\n                i = mid + 1;\n            }\n        }\n        else if(arr[mid] > x){\n            j = mid - 1;\n        }\n        else{\n            i = mid + 1;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var res = -1;\n    for(var i = 0; i < n; i++){\n        if(arr[i] == x){\n            res = i;\n        }\n    }\n    return res;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    while(i < arr.length){\n        if(arr[i] == x){\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp22u7wnul.js:19:10)\n    at Object.<anonymous> (/tmp/tmp22u7wnul.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    for(var i=arr.length-1; i>=0; i--){\n        if(arr[i]==x){\n            return i;\n        }\n    }\n    return -1;\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nvar x = 10;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    var len = arr.length;\n    for(i = 0; i < len; i++){\n        if(arr[i] == x){\n            var pos = i;\n        }\n    }\n    return pos;\n}\nvar arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar x = 5;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}