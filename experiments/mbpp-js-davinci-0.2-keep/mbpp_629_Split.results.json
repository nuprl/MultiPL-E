{
  "name": "mbpp_629_Split",
  "language": "js",
  "prompt": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_629_Split.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    var odd = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Even Numbers are : \"+even);\n    console.log(\"Odd Numbers are : \"+odd);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "Even Numbers are : 2,4,6,8,10\nOdd Numbers are : 1,3,5,7,9\nEven Numbers are : 2,4\nOdd Numbers are : 1,3,5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  4\n]\n    at test (/tmp/tmp3x_47uff.js:23:10)\n    at Object.<anonymous> (/tmp/tmp3x_47uff.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Even Numbers: \" + even);\n    console.log(\"Odd Numbers: \" + odd);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "Even Numbers: 2,4,6,8,10\nOdd Numbers: 1,3,5,7,9\nEven Numbers: 2,4\nOdd Numbers: 1,3,5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  4\n]\n    at test (/tmp/tmpvn084t4u.js:23:10)\n    at Object.<anonymous> (/tmp/tmpvn084t4u.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for (var i = 0; i < list.length; i++){\n        if (list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even=[];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list=[1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0; i<list.length; i++){\n        if(list[i]%2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even=[];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list=[1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i<list.length; i++){\n        if(list[i]%2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Even numbers are: \" + even);\n    console.log(\"Odd numbers are: \" + odd);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "Even numbers are: 2,4,6,8,10\nOdd numbers are: 1,3,5,7,9\nEven numbers are: 2,4\nOdd numbers are: 1,3,5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  4\n]\n    at test (/tmp/tmprccj8o_7.js:23:10)\n    at Object.<anonymous> (/tmp/tmprccj8o_7.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0; i<list.length; i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0; i<list.length; i++){\n        if(list[i]%2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even=[]\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i])\n        }\n    }\n    return even\n}\nvar list=[1,2,3,4,5,6,7,8,9,10]\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123633,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    var odd = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Even numbers are: \"+even);\n    console.log(\"Odd numbers are: \"+odd);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "Even numbers are: 2,4,6,8,10\nOdd numbers are: 1,3,5,7,9\nEven numbers are: 2,4\nOdd numbers are: 1,3,5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  4\n]\n    at test (/tmp/tmp1hqv6rkc.js:23:10)\n    at Object.<anonymous> (/tmp/tmp1hqv6rkc.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for (var i = 0; i < list.length; i++){\n        if (list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Even numbers are: \" + even);\n    console.log(\"Odd numbers are: \" + odd);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "Even numbers are: 2,4,6,8,10\nOdd numbers are: 1,3,5,7,9\nEven numbers are: 2,4\nOdd numbers are: 1,3,5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  4\n]\n    at test (/tmp/tmprccj8o_7.js:23:10)\n    at Object.<anonymous> (/tmp/tmprccj8o_7.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Even numbers: \" + even);\n    console.log(\"Odd numbers: \" + odd);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "Even numbers: 2,4,6,8,10\nOdd numbers: 1,3,5,7,9\nEven numbers: 2,4\nOdd numbers: 1,3,5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  4\n]\n    at test (/tmp/tmpxsunvcsd.js:23:10)\n    at Object.<anonymous> (/tmp/tmpxsunvcsd.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even=[];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list=[1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    var odd = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Even numbers are: \"+even);\n    console.log(\"Odd numbers are: \"+odd);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "Even numbers are: 2,4,6,8,10\nOdd numbers are: 1,3,5,7,9\nEven numbers are: 2,4\nOdd numbers are: 1,3,5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  4\n]\n    at test (/tmp/tmp1hqv6rkc.js:23:10)\n    at Object.<anonymous> (/tmp/tmp1hqv6rkc.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for (var i = 0; i < list.length; i++){\n        if (list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even=[];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list=[1,2,3,4,5,6,7,8,9];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    var odd = [];\n    for(var i=0; i<list.length; i++){\n        if(list[i]%2 == 0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Even Numbers: \"+even);\n    console.log(\"Odd Numbers: \"+odd);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "Even Numbers: 2,4,6,8,10\nOdd Numbers: 1,3,5,7,9\nEven Numbers: 2,4\nOdd Numbers: 1,3,5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  4\n]\n    at test (/tmp/tmpya__lfg3.js:23:10)\n    at Object.<anonymous> (/tmp/tmpya__lfg3.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    var odd = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(even);\n    console.log(odd);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n[ 1, 3, 5, 7, 9 ]\n[ 2, 4 ]\n[ 1, 3, 5 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  4\n]\n    at test (/tmp/tmp49ii_v6_.js:23:10)\n    at Object.<anonymous> (/tmp/tmp49ii_v6_.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even=[];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list=[1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    var odd = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Even numbers are: \"+even);\n    console.log(\"Odd numbers are: \"+odd);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "Even numbers are: 2,4,6,8,10\nOdd numbers are: 1,3,5,7,9\nEven numbers are: 2,4\nOdd numbers are: 1,3,5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  4\n]\n    at test (/tmp/tmp1hqv6rkc.js:23:10)\n    at Object.<anonymous> (/tmp/tmp1hqv6rkc.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even=[];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list=[1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Even numbers: \" + even);\n    console.log(\"Odd numbers: \" + odd);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "Even numbers: 2,4,6,8,10\nOdd numbers: 1,3,5,7,9\nEven numbers: 2,4\nOdd numbers: 1,3,5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  4\n]\n    at test (/tmp/tmpxsunvcsd.js:23:10)\n    at Object.<anonymous> (/tmp/tmpxsunvcsd.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Even numbers are: \" + even);\n    console.log(\"Odd numbers are: \" + odd);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "Even numbers are: 2,4,6,8,10\nOdd numbers are: 1,3,5,7,9\nEven numbers are: 2,4\nOdd numbers are: 1,3,5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  4\n]\n    at test (/tmp/tmprccj8o_7.js:23:10)\n    at Object.<anonymous> (/tmp/tmprccj8o_7.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0; i<list.length; i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Even: \" + even);\n    console.log(\"Odd: \" + odd);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "Even: 2,4,6,8,10\nOdd: 1,3,5,7,9\nEven: 2,4\nOdd: 1,3,5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  4\n]\n    at test (/tmp/tmp493pbka6.js:23:10)\n    at Object.<anonymous> (/tmp/tmp493pbka6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    var odd = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Even numbers are: \"+even);\n    console.log(\"Odd numbers are: \"+odd);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "Even numbers are: 2,4,6,8,10\nOdd numbers are: 1,3,5,7,9\nEven numbers are: 2,4\nOdd numbers are: 1,3,5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  4\n]\n    at test (/tmp/tmp1hqv6rkc.js:23:10)\n    at Object.<anonymous> (/tmp/tmp1hqv6rkc.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Even numbers are: \" + even);\n    console.log(\"Odd numbers are: \" + odd);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "Even numbers are: 2,4,6,8,10\nOdd numbers are: 1,3,5,7,9\nEven numbers are: 2,4\nOdd numbers are: 1,3,5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  4\n]\n    at test (/tmp/tmprccj8o_7.js:23:10)\n    at Object.<anonymous> (/tmp/tmprccj8o_7.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0; i<list.length; i++){\n        if(list[i]%2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    var odd = [];\n    for (var i = 0; i < list.length; i++) {\n        if (list[i] % 2 == 0) {\n            even.push(list[i]);\n        }\n        else {\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Even Numbers: \" + even);\n    console.log(\"Odd Numbers: \" + odd);\n}\nSplit([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "Even Numbers: 2,4,6,8\nOdd Numbers: 1,3,5,7,9\nEven Numbers: 2,4\nOdd Numbers: 1,3,5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  4\n]\n    at test (/tmp/tmp6p8br5at.js:23:10)\n    at Object.<anonymous> (/tmp/tmp6p8br5at.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even=[];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list=[1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    var odd = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Even numbers are: \"+even);\n    console.log(\"Odd numbers are: \"+odd);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "Even numbers are: 2,4,6,8,10\nOdd numbers are: 1,3,5,7,9\nEven numbers are: 2,4\nOdd numbers are: 1,3,5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  4\n]\n    at test (/tmp/tmp1hqv6rkc.js:23:10)\n    at Object.<anonymous> (/tmp/tmp1hqv6rkc.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0; i<list.length; i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    var odd = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Even numbers are: \"+even);\n    console.log(\"Odd numbers are: \"+odd);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "Even numbers are: 2,4,6,8,10\nOdd numbers are: 1,3,5,7,9\nEven numbers are: 2,4\nOdd numbers are: 1,3,5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  4\n]\n    at test (/tmp/tmp1hqv6rkc.js:23:10)\n    at Object.<anonymous> (/tmp/tmp1hqv6rkc.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Even numbers are: \" + even);\n    console.log(\"Odd numbers are: \" + odd);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "Even numbers are: 2,4,6,8,10\nOdd numbers are: 1,3,5,7,9\nEven numbers are: 2,4\nOdd numbers are: 1,3,5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  4\n]\n    at test (/tmp/tmpiqrxn762.js:22:10)\n    at Object.<anonymous> (/tmp/tmpiqrxn762.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even=[];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list=[1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    var odd = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Even numbers are: \"+even);\n    console.log(\"Odd numbers are: \"+odd);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "Even numbers are: 2,4,6,8,10\nOdd numbers are: 1,3,5,7,9\nEven numbers are: 2,4\nOdd numbers are: 1,3,5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  4\n]\n    at test (/tmp/tmp1hqv6rkc.js:23:10)\n    at Object.<anonymous> (/tmp/tmp1hqv6rkc.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even=[]\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i])\n        }\n    }\n    return even\n}\nvar list=[1,2,3,4,5,6,7,8,9,10]\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123633,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    var odd = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Even numbers are: \"+even);\n    console.log(\"Odd numbers are: \"+odd);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "Even numbers are: 2,4,6,8,10\nOdd numbers are: 1,3,5,7,9\nEven numbers are: 2,4\nOdd numbers are: 1,3,5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  4\n]\n    at test (/tmp/tmp1hqv6rkc.js:23:10)\n    at Object.<anonymous> (/tmp/tmp1hqv6rkc.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Even Numbers: \" + even);\n    console.log(\"Odd Numbers: \" + odd);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "Even Numbers: 2,4,6,8,10\nOdd Numbers: 1,3,5,7,9\nEven Numbers: 2,4\nOdd Numbers: 1,3,5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  4\n]\n    at test (/tmp/tmpvn084t4u.js:23:10)\n    at Object.<anonymous> (/tmp/tmpvn084t4u.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Even Numbers: \" + even);\n    console.log(\"Odd Numbers: \" + odd);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "Even Numbers: 2,4,6,8,10\nOdd Numbers: 1,3,5,7,9\nEven Numbers: 2,4\nOdd Numbers: 1,3,5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  4\n]\n    at test (/tmp/tmpvn084t4u.js:23:10)\n    at Object.<anonymous> (/tmp/tmpvn084t4u.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Even numbers are: \" + even);\n    console.log(\"Odd numbers are: \" + odd);\n}\nSplit([1,2,3,4,5,6,7,8,9]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "Even numbers are: 2,4,6,8\nOdd numbers are: 1,3,5,7,9\nEven numbers are: 2,4\nOdd numbers are: 1,3,5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  4\n]\n    at test (/tmp/tmp_k8s5lh_.js:23:10)\n    at Object.<anonymous> (/tmp/tmp_k8s5lh_.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even_list = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even_list.push(list[i]);\n        }\n    }\n    return even_list;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Even numbers are: \" + even);\n    console.log(\"Odd numbers are: \" + odd);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "Even numbers are: 2,4,6,8,10\nOdd numbers are: 1,3,5,7,9\nEven numbers are: 2,4\nOdd numbers are: 1,3,5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  4\n]\n    at test (/tmp/tmprccj8o_7.js:23:10)\n    at Object.<anonymous> (/tmp/tmprccj8o_7.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    var odd = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Even Numbers: \"+even);\n    console.log(\"Odd Numbers: \"+odd);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "Even Numbers: 2,4,6,8,10\nOdd Numbers: 1,3,5,7,9\nEven Numbers: 2,4\nOdd Numbers: 1,3,5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  4\n]\n    at test (/tmp/tmpa60aqz71.js:23:10)\n    at Object.<anonymous> (/tmp/tmpa60aqz71.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Even numbers are: \" + even);\n    console.log(\"Odd numbers are: \" + odd);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "Even numbers are: 2,4,6,8,10\nOdd numbers are: 1,3,5,7,9\nEven numbers are: 2,4\nOdd numbers are: 1,3,5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  4\n]\n    at test (/tmp/tmprccj8o_7.js:23:10)\n    at Object.<anonymous> (/tmp/tmprccj8o_7.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    var odd = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Even Numbers are : \"+even);\n    console.log(\"Odd Numbers are : \"+odd);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "Even Numbers are : 2,4,6,8,10\nOdd Numbers are : 1,3,5,7,9\nEven Numbers are : 2,4\nOdd Numbers are : 1,3,5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  4\n]\n    at test (/tmp/tmp3x_47uff.js:23:10)\n    at Object.<anonymous> (/tmp/tmp3x_47uff.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    var odd = [];\n    for(var i=0; i<list.length; i++){\n        if(list[i]%2 == 0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Even numbers are: \" + even);\n    console.log(\"Odd numbers are: \" + odd);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "Even numbers are: 2,4,6,8,10\nOdd numbers are: 1,3,5,7,9\nEven numbers are: 2,4\nOdd numbers are: 1,3,5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  4\n]\n    at test (/tmp/tmptvv30tq5.js:23:10)\n    at Object.<anonymous> (/tmp/tmptvv30tq5.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for (var i = 0; i < list.length; i++) {\n        if (list[i] % 2 == 0) {\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for (var i = 0; i < list.length; i++) {\n        if (list[i] % 2 == 0) {\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0; i<list.length; i++){\n        if(list[i]%2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    var odd = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Even numbers are: \"+even);\n    console.log(\"Odd numbers are: \"+odd);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "Even numbers are: 2,4,6,8,10\nOdd numbers are: 1,3,5,7,9\nEven numbers are: 2,4\nOdd numbers are: 1,3,5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  4\n]\n    at test (/tmp/tmp1hqv6rkc.js:23:10)\n    at Object.<anonymous> (/tmp/tmp1hqv6rkc.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    var odd = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Even numbers are : \"+even);\n    console.log(\"Odd numbers are : \"+odd);\n}\nSplit([1,2,3,4,5,6,7,8,9]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "Even numbers are : 2,4,6,8\nOdd numbers are : 1,3,5,7,9\nEven numbers are : 2,4\nOdd numbers are : 1,3,5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  4\n]\n    at test (/tmp/tmpzg_fmpkd.js:23:10)\n    at Object.<anonymous> (/tmp/tmpzg_fmpkd.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    var odd = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Even numbers are: \"+even);\n    console.log(\"Odd numbers are: \"+odd);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "Even numbers are: 2,4,6,8,10\nOdd numbers are: 1,3,5,7,9\nEven numbers are: 2,4\nOdd numbers are: 1,3,5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  4\n]\n    at test (/tmp/tmp1hqv6rkc.js:23:10)\n    at Object.<anonymous> (/tmp/tmp1hqv6rkc.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    var odd = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Even numbers are : \"+even);\n    console.log(\"Odd numbers are : \"+odd);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "Even numbers are : 2,4,6,8,10\nOdd numbers are : 1,3,5,7,9\nEven numbers are : 2,4\nOdd numbers are : 1,3,5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  4\n]\n    at test (/tmp/tmpz4s0z1y3.js:23:10)\n    at Object.<anonymous> (/tmp/tmpz4s0z1y3.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even=[];\n    var odd=[];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Even numbers are: \"+even);\n    console.log(\"Odd numbers are: \"+odd);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "Even numbers are: 2,4,6,8,10\nOdd numbers are: 1,3,5,7,9\nEven numbers are: 2,4\nOdd numbers are: 1,3,5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  4\n]\n    at test (/tmp/tmp5aaxk7fi.js:23:10)\n    at Object.<anonymous> (/tmp/tmp5aaxk7fi.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0; i<list.length; i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Even numbers are: \" + even);\n    console.log(\"Odd numbers are: \" + odd);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "Even numbers are: 2,4,6,8,10\nOdd numbers are: 1,3,5,7,9\nEven numbers are: 2,4\nOdd numbers are: 1,3,5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  4\n]\n    at test (/tmp/tmprccj8o_7.js:23:10)\n    at Object.<anonymous> (/tmp/tmprccj8o_7.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even=[];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list=[1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Even numbers are: \" + even);\n    console.log(\"Odd numbers are: \" + odd);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "Even numbers are: 2,4,6,8,10\nOdd numbers are: 1,3,5,7,9\nEven numbers are: 2,4\nOdd numbers are: 1,3,5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  4\n]\n    at test (/tmp/tmprccj8o_7.js:23:10)\n    at Object.<anonymous> (/tmp/tmprccj8o_7.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    var odd = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Even numbers are: \"+even);\n    console.log(\"Odd numbers are: \"+odd);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "Even numbers are: 2,4,6,8,10\nOdd numbers are: 1,3,5,7,9\nEven numbers are: 2,4\nOdd numbers are: 1,3,5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  4\n]\n    at test (/tmp/tmp1hqv6rkc.js:23:10)\n    at Object.<anonymous> (/tmp/tmp1hqv6rkc.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    var odd = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Even numbers are: \"+even);\n    console.log(\"Odd numbers are: \"+odd);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "Even numbers are: 2,4,6,8,10\nOdd numbers are: 1,3,5,7,9\nEven numbers are: 2,4\nOdd numbers are: 1,3,5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  4\n]\n    at test (/tmp/tmp1hqv6rkc.js:23:10)\n    at Object.<anonymous> (/tmp/tmp1hqv6rkc.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    var odd = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Even numbers are: \"+even);\n    console.log(\"Odd numbers are: \"+odd);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "Even numbers are: 2,4,6,8,10\nOdd numbers are: 1,3,5,7,9\nEven numbers are: 2,4\nOdd numbers are: 1,3,5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  4\n]\n    at test (/tmp/tmp1hqv6rkc.js:23:10)\n    at Object.<anonymous> (/tmp/tmp1hqv6rkc.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    var odd = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Even Numbers: \" + even);\n    console.log(\"Odd Numbers: \" + odd);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "Even Numbers: 2,4,6,8,10\nOdd Numbers: 1,3,5,7,9\nEven Numbers: 2,4\nOdd Numbers: 1,3,5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  4\n]\n    at test (/tmp/tmpvn084t4u.js:23:10)\n    at Object.<anonymous> (/tmp/tmpvn084t4u.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    var odd = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Even numbers are: \"+even);\n    console.log(\"Odd numbers are: \"+odd);\n}\nSplit([1,2,3,4,5,6,7,8,9,10]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "Even numbers are: 2,4,6,8,10\nOdd numbers are: 1,3,5,7,9\nEven numbers are: 2,4\nOdd numbers are: 1,3,5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  4\n]\n    at test (/tmp/tmp1hqv6rkc.js:23:10)\n    at Object.<anonymous> (/tmp/tmp1hqv6rkc.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0; i<list.length; i++){\n        if(list[i]%2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even=[];\n    for(var i=0;i<list.length;i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\nvar list=[1,2,3,4,5,6,7,8,9];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    var odd = [];\n    for(var i=0; i<list.length; i++){\n        if(list[i]%2==0){\n            even.push(list[i]);\n        }\n        else{\n            odd.push(list[i]);\n        }\n    }\n    console.log(\"Even numbers are: \"+even);\n    console.log(\"Odd numbers are: \"+odd);\n}\nSplit([1,2,3,4,5,6,7,8,9]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1666123634,
      "stdout": "Even numbers are: 2,4,6,8\nOdd numbers are: 1,3,5,7,9\nEven numbers are: 2,4\nOdd numbers are: 1,3,5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  4\n]\n    at test (/tmp/tmpimc5_d4c.js:23:10)\n    at Object.<anonymous> (/tmp/tmpimc5_d4c.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find even numbers from a list of numbers.\nfunction Split(list){\n    var even = [];\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 0){\n            even.push(list[i]);\n        }\n    }\n    return even;\n}\n\nvar list = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);\n  assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);\n  assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);\n}\n\ntest();",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}