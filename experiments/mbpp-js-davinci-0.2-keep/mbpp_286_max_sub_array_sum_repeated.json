{
  "name": "mbpp_286_max_sub_array_sum_repeated",
  "language": "js",
  "prompt": "//Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nfunction max_sub_array_sum_repeated(a, n, k){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sub_array_sum_repeated;\n  assert.deepEqual(candidate([10, 20, -30, -1], 4, 3),30);\n  assert.deepEqual(candidate([-1, 10, 20], 3, 2),59);\n  assert.deepEqual(candidate([-1, -2, -3], 3, 3),-1);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var max_sum = 0;\n    var max_ending_here = 0;\n    var i, j;\n    for(i=0; i<n; i++){\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0){\n            max_ending_here = 0;\n        }\n        if(max_sum < max_ending_here){\n            max_sum = max_ending_here;\n        }\n    }\n    var max_sum_so_far = max_sum;\n    for(i=1; i<k; i++){\n        for(j=0; j<n; j++){\n            max_ending_here = max_ending_here + a[j];\n            if(max_ending_here < 0){\n                max_ending_here = 0;\n            }\n            if(max_sum < max_ending_here){\n                max_sum = max_ending_here;\n            }\n        }\n        max_sum_so_far = max_sum_so_far + max_sum;\n    }\n    return max_sum_so_far;\n}\n",
    "    let max_sum = 0,\n        window_sum;\n    for (let i = 0; i < n; i++) {\n        let current_sum = 0;\n        for (let j = i; j < n; j++) {\n            current_sum += a[j];\n            if (current_sum > max_sum)\n                max_sum = current_sum;\n        }\n    }\n    window_sum = max_sum;\n    for (let i = 0; i < n; i++) {\n        window_sum += (a[i] * (k - 2));\n        if (window_sum > max_sum)\n            max_sum = window_sum;\n    }\n    return max_sum;\n}\n",
    "    let max_sum = 0, max_ending_here = 0;\n    for(let i = 0; i < n; i++){\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0){\n            max_ending_here = 0;\n        }\n        if(max_sum < max_ending_here){\n            max_sum = max_ending_here;\n        }\n    }\n    let max_wrap_sum = 0;\n    for(let i = 0; i < n; i++){\n        max_wrap_sum += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap_sum = max_wrap_sum + max_sub_array_sum(a, n);\n    if(max_wrap_sum > max_sum){\n        max_sum = max_wrap_sum;\n    }\n    max_sum = max_sum * k;\n    return max_sum;\n}\n",
    "    let max_sum = 0;\n    let max_sum_so_far = 0;\n    let max_element = a[0];\n    let sum_of_all_elements = 0;\n    for(let i = 0; i < n; i++){\n        max_element = Math.max(max_element, a[i]);\n        max_sum_so_far = Math.max(a[i], max_sum_so_far + a[i]);\n        max_sum = Math.max(max_sum, max_sum_so_far);\n        sum_of_all_elements += a[i];\n    }\n    if(max_sum < 0){\n        return max_sum;\n    }\n    if(k == 2){\n        return max_sum + sum_of_all_elements;\n    }\n    return max_sum + (sum_of_all_elements * (k - 2));\n}\n",
    "    let max_sum = 0;\n    let max_ending_here = 0;\n    let max_so_far = 0;\n    let start = 0;\n    let end = 0;\n    let s = 0;\n    for(let i = 0; i < n*k; i++){\n        max_ending_here = max_ending_here + a[i%n];\n        if(max_so_far < max_ending_here){\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if(max_ending_here < 0){\n            max_ending_here = 0;\n            s = i+1;\n        }\n    }\n    console.log(max_so_far);\n    console.log(start, end);\n}",
    "    var max_sum = 0;\n    var curr_sum = 0;\n    for(var i = 0; i < n; i++){\n        curr_sum += a[i];\n    }\n    max_sum = curr_sum;\n    for(var i = n; i < n * k; i++){\n        curr_sum += a[i % n] - a[(i - n) % n];\n        max_sum = Math.max(max_sum, curr_sum);\n    }\n    return max_sum;\n}\n",
    "    var max_sum = 0;\n    var max_ending_here = 0;\n    var max_so_far = 0;\n    var start = 0;\n    var end = 0;\n    var s = 0;\n    for (var i = 0; i < n * k; i++) {\n        max_ending_here += a[i % n];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n    }\n    return max_so_far;\n}\n",
    "    var max_sum = 0;\n    var curr_sum = 0;\n    for(var i = 0; i < n; i++){\n        curr_sum += a[i];\n        if(curr_sum < 0){\n            curr_sum = 0;\n        }\n        max_sum = Math.max(max_sum, curr_sum);\n    }\n    var max_wrap = 0;\n    for(var i = 0; i < n; i++){\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    curr_sum = 0;\n    for(var i = 0; i < n; i++){\n        curr_sum += a[i];\n        if(curr_sum < 0){\n            curr_sum = 0;\n        }\n        max_wrap = Math.max(max_wrap, curr_sum);\n    }\n    max_wrap = max_wrap + max_wrap;\n    if(k == 1){\n        return max_sum;\n    }\n    return Math.max(max_sum, max_wrap);\n}\n",
    "    let max_sum = 0;\n    let max_ending_here = 0;\n    for(let i = 0; i < n; i++){\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0){\n            max_ending_here = 0;\n        }\n        if(max_sum < max_ending_here){\n            max_sum = max_ending_here;\n        }\n    }\n    let max_wrap = 0;\n    for(let i = 0; i < n; i++){\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    let max_ending_here_wrap = 0;\n    for(let i = 0; i < n; i++){\n        max_ending_here_wrap = max_ending_here_wrap + a[i];\n        if(max_ending_here_wrap < 0){\n            max_ending_here_wrap = 0;\n        }\n        if(max_wrap < max_ending_here_wrap){\n            max_wrap = max_ending_here_wrap;\n        }\n    }\n    max_wrap = max_wrap + max_wrap;\n    if(k == 1){\n        return max_sum;\n    }\n    return Math.max(max_sum, max_wrap);\n}\n",
    "    let max_sum = 0;\n    let max_ending_here = 0;\n    let max_so_far = 0;\n    let i = 0;\n    let j = 0;\n    let max_index = 0;\n    let min_index = 0;\n    let max_array = [];\n    let min_array = [];\n    let max_array_sum = 0;\n    let min_array_sum = 0;\n    let max_array_sum_index = 0;\n    let min_array_sum_index = 0;\n    let max_array_sum_ending_here = 0;\n    let min_array_sum_ending_here = 0;\n    let max_array_sum_so_far = 0;\n    let min_array_sum_so_far = 0;\n    let max_array_sum_repeated = 0;\n    let min_array_sum_repeated = 0;\n    let max_array_sum_repeated_index = 0;\n    let min_array_sum_repeated_index = 0;\n    let max_array_sum_repeated_ending_here = 0;\n    let min_array_sum_repeated_ending_here = 0;\n    let max_array_sum_repeated_so_far = 0;\n    let min_array_sum_repeated_so_far = 0;\n    let max_array_sum_repeated_array = [];\n    let min_array_sum_repeated_array = [];\n    for(i = 0; i < n; i++){\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0){\n            max_ending_here = 0;\n            j = i + 1;\n        }\n        if(max_so_far < max_ending_here){\n            max_so_far = max_ending_here;\n            max_index = i;\n        }\n    }\n    for(i = max_index; i >= j; i--){\n        max_array.push(a[i]);\n    }\n    for(i = 0; i < max_array.length; i++){\n       ",
    "    let max_so_far = 0, max_ending_here = 0;\n    for (let i=0; i<n*k; i++){\n        max_ending_here = max_ending_here + a[i%n];\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n    }\n    return max_so_far;\n}\n",
    "    var max_sum = 0;\n    var curr_sum = 0;\n    for(var i=0; i<n; i++){\n        curr_sum += a[i];\n        if(curr_sum < 0){\n            curr_sum = 0;\n        }\n        max_sum = Math.max(max_sum, curr_sum);\n    }\n    var max_wrap = 0;\n    for(var i=0; i<n; i++){\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    curr_sum = 0;\n    for(var i=0; i<n; i++){\n        curr_sum += a[i];\n        if(curr_sum < 0){\n            curr_sum = 0;\n        }\n        max_wrap = Math.max(max_wrap, curr_sum);\n    }\n    max_wrap = max_wrap + max_wrap;\n    if(k == 1){\n        return max_sum;\n    }\n    return Math.max(max_wrap, max_sum);\n}\n",
    "    let max_sum = 0;\n    let max_ending_here = 0;\n    let max_so_far = 0;\n    let start = 0;\n    let end = 0;\n    let s = 0;\n    for(let i = 0; i < n*k; i++){\n        max_ending_here += a[i%n];\n        if(max_so_far < max_ending_here){\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if(max_ending_here < 0){\n            max_ending_here = 0;\n            s = i+1;\n        }\n    }\n    return [max_so_far, start, end];\n}\n",
    "    let max_sum = 0,\n        window_sum = 0,\n        window_start = 0;\n    for(let window_end = 0; window_end < n; window_end++){\n        window_sum += a[window_end];\n        if(window_end >= k - 1){\n            max_sum = Math.max(max_sum, window_sum);\n            window_sum -= a[window_start];\n            window_start += 1;\n        }\n    }\n    return max_sum;\n}\n",
    "    let max_sum = 0;\n    let max_ending_here = 0;\n    let max_so_far = 0;\n    let start = 0;\n    let end = 0;\n    let s = 0;\n    for (let i = 0; i < n * k; i++) {\n        max_ending_here = max_ending_here + a[i % n];\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    for (let i = start; i <= end; i++) {\n        max_sum = max_sum + a[i % n];\n    }\n    return max_sum;\n}\n",
    "    let max_sum = 0,\n        window_sum = 0,\n        window_start = 0;\n    for (let window_end = 0; window_end < n; window_end++) {\n        window_sum += a[window_end];\n        if (window_end >= k - 1) {\n            max_sum = Math.max(max_sum, window_sum);\n            window_sum -= a[window_start];\n            window_start += 1;\n        }\n    }\n    return max_sum;\n}\n",
    "    let max_sum = 0;\n    let curr_sum = 0;\n    for(let i = 0; i < n; i++){\n        curr_sum += a[i];\n        if(curr_sum > max_sum){\n            max_sum = curr_sum;\n        }\n        if(curr_sum < 0){\n            curr_sum = 0;\n        }\n    }\n    let max_wrap = 0;\n    for(let i = 0; i < n; i++){\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    curr_sum = 0;\n    for(let i = 0; i < n; i++){\n        curr_sum += a[i];\n        if(curr_sum > max_sum){\n            max_sum = curr_sum;\n        }\n        if(curr_sum < 0){\n            curr_sum = 0;\n        }\n    }\n    max_wrap = max_wrap + max_sum;\n    if(k == 1){\n        return max_sum;\n    }\n    return Math.max(max_wrap, max_sum);\n}\n",
    "    var max_sum = 0;\n    var curr_sum = 0;\n    for(var i = 0; i < n; i++){\n        curr_sum += a[i];\n        if(curr_sum < 0){\n            curr_sum = 0;\n        }\n        max_sum = Math.max(max_sum, curr_sum);\n    }\n    var max_wrap = 0;\n    for(var i = 0; i < n; i++){\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    curr_sum = 0;\n    for(var i = 0; i < n; i++){\n        curr_sum += a[i];\n        if(curr_sum < 0){\n            curr_sum = 0;\n        }\n        max_wrap = Math.max(max_wrap, curr_sum);\n    }\n    max_wrap = max_wrap + max_wrap;\n    if(k == 1){\n        return max_sum;\n    }\n    return Math.max(max_sum, max_wrap);\n}\n",
    "    let max_sum = 0;\n    let curr_sum = 0;\n    let max_sum_so_far = 0;\n    for(let i = 0; i < n * k; i++){\n        curr_sum += a[i % n];\n        if(curr_sum < 0){\n            curr_sum = 0;\n        }\n        max_sum_so_far = Math.max(max_sum_so_far, curr_sum);\n    }\n    return max_sum_so_far;\n}\n",
    "    let max_so_far = 0, max_ending_here = 0;\n    for (let i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    let max_wrap = 0;\n    for (let i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum(a, n);\n    if (max_wrap > max_so_far)\n        return max_wrap * k;\n    return max_so_far * k;\n}\n"
  ]
}