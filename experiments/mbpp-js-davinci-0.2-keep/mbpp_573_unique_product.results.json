{
  "name": "mbpp_573_unique_product",
  "language": "js",
  "prompt": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_573_unique_product.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0; i<unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0; i<unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0; i<unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var i = 0; i < unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    for(var i=0; i<list_data.length; i++){\n        if(list_data.indexOf(list_data[i]) == i){\n            product = product * list_data[i];\n        }\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    var unique_list = [];\n    for (var i = 0; i < list_data.length; i++){\n        if (unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for (var j = 0; j < unique_list.length; j++){\n        product *= unique_list[j];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    var unique_list = [];\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var i=0; i<unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    var unique_list = [];\n    for(var i=0;i<list_data.length;i++){\n        if(unique_list.indexOf(list_data[i])==-1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var i=0;i<unique_list.length;i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var i = 0; i < unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0;i<list_data.length;i++){\n        if(unique_list.indexOf(list_data[i])==-1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0;i<unique_list.length;i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i = 0; i < unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    for(var i=0; i<list_data.length; i++){\n        if(list_data.indexOf(list_data[i]) == i){\n            product = product * list_data[i];\n        }\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    for(var i = 0; i < list_data.length; i++){\n        if(list_data.indexOf(list_data[i]) == i){\n            product *= list_data[i];\n        }\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var j = 0; j < unique_list.length; j++){\n        product = product * unique_list[j];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    var product = 1;\n    for (var i = 0; i < list_data.length; i++){\n        if (unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for (var i = 0; i < unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for (var i = 0; i < list_data.length; i++) {\n        if (unique_list.indexOf(list_data[i]) == -1) {\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for (var i = 0; i < unique_list.length; i++) {\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    var product = 1;\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var i = 0; i < unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i = 0; i < unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i = 0; i < unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0;i<list_data.length;i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0;i<unique_list.length;i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    var product = 1;\n    for(var i=0;i<list_data.length;i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var i=0;i<unique_list.length;i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0;i<list_data.length;i++){\n        if(unique_list.indexOf(list_data[i])==-1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0;i<unique_list.length;i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i = 0; i < unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0;i<list_data.length;i++){\n        if(unique_list.indexOf(list_data[i])==-1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0;i<unique_list.length;i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    var list_data_length = list_data.length;\n    for(var i = 0; i < list_data_length; i++){\n        if(list_data.indexOf(list_data[i]) == i){\n            product *= list_data[i];\n        }\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0; i<unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i = 0; i < unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    var product = 1;\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var i = 0; i < unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var prod = 1;\n    for(var i = 0; i < list_data.length; i++){\n        if(list_data.indexOf(list_data[i]) == i){\n            prod *= list_data[i];\n        }\n    }\n    return prod;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    var product = 1;\n    for(var i=0;i<list_data.length;i++){\n        if(unique_list.indexOf(list_data[i])==-1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var i=0;i<unique_list.length;i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0; i<unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i = 0; i < unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i = 0; i < unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var i = 0; i < unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i = 0; i < unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    for(var i=0; i<list_data.length; i++){\n        if(list_data.indexOf(list_data[i]) == i){\n            product *= list_data[i];\n        }\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    for (var i = 0; i < list_data.length; i++){\n        if (list_data.indexOf(list_data[i]) == list_data.lastIndexOf(list_data[i])){\n            product *= list_data[i];\n        }\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n900000\n\nshould loosely deep-equal\n\n720000000\n    at test (/tmp/tmp7ehndl9e.js:16:10)\n    at Object.<anonymous> (/tmp/tmp7ehndl9e.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 900000,\n  expected: 720000000,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0;i<list_data.length;i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0;i<unique_list.length;i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i = 0; i < unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0; i<unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0; i<unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i = 0; i < unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for (var i = 0; i < list_data.length; i++) {\n        if (unique_list.indexOf(list_data[i]) == -1) {\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for (var i = 0; i < unique_list.length; i++) {\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    var product = 1;\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var i=0; i<unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0; i<unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i = 0; i < unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var i = 0; i < unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    for(var i=0; i<list_data.length; i++){\n        if(list_data.indexOf(list_data[i]) == list_data.lastIndexOf(list_data[i])){\n            product *= list_data[i];\n        }\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n900000\n\nshould loosely deep-equal\n\n720000000\n    at test (/tmp/tmpnhaq8bnx.js:16:10)\n    at Object.<anonymous> (/tmp/tmpnhaq8bnx.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 900000,\n  expected: 720000000,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    for(var i = 0; i < list_data.length; i++){\n        if(list_data[i] != list_data[i+1]){\n            product *= list_data[i];\n        }\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n576000000000\n\nshould loosely deep-equal\n\n720000000\n    at test (/tmp/tmpjxojuugv.js:16:10)\n    at Object.<anonymous> (/tmp/tmpjxojuugv.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 576000000000,\n  expected: 720000000,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    for(var i=0;i<list_data.length;i++){\n        if(list_data.indexOf(list_data[i]) == i){\n            product = product * list_data[i];\n        }\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    var product = 1;\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n            product *= list_data[i];\n        }\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    var product = 1;\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var i=0; i<unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    var product = 1;\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var i = 0; i < unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i = 0; i < unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for (var i = 0; i < list_data.length; i++) {\n        if (unique_list.indexOf(list_data[i]) == -1) {\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for (var i = 0; i < unique_list.length; i++) {\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0;i<list_data.length;i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0;i<unique_list.length;i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = list_data.filter(function(item, pos) {\n        return list_data.indexOf(item) == pos;\n    })\n    var product = 1;\n    for (var i=0; i<unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0; i<unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0;i<list_data.length;i++){\n        if(unique_list.indexOf(list_data[i])==-1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0;i<unique_list.length;i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    for(var i=0; i<list_data.length; i++){\n        if(list_data.indexOf(list_data[i]) == i){\n            product *= list_data[i];\n        }\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    var unique_list = [];\n    for (var i = 0; i < list_data.length; i++) {\n        if (unique_list.indexOf(list_data[i]) == -1) {\n            unique_list.push(list_data[i]);\n        }\n    }\n    for (var i = 0; i < unique_list.length; i++) {\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    for(var i=0; i<list_data.length; i++){\n        if(list_data.indexOf(list_data[i]) == i){\n            product = product * list_data[i];\n        }\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i = 0; i < unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0; i<unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    var unique_list = [];\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var i=0; i<unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0; i<unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    var product = 1;\n    for(var i=0;i<list_data.length;i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var i=0;i<unique_list.length;i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n  var product = 1;\n  var unique_list = [];\n  for(var i = 0; i < list_data.length; i++){\n    if(unique_list.indexOf(list_data[i]) == -1){\n      unique_list.push(list_data[i]);\n    }\n  }\n  for(var i = 0; i < unique_list.length; i++){\n    product = product * unique_list[i];\n  }\n  return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    for(var i=0; i<list_data.length; i++){\n        if(list_data[i] in list_data.slice(i+1)){\n            continue;\n        }\n        else{\n            product *= list_data[i];\n        }\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n576000000000\n\nshould loosely deep-equal\n\n720000000\n    at test (/tmp/tmp5e9gq78m.js:19:10)\n    at Object.<anonymous> (/tmp/tmp5e9gq78m.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 576000000000,\n  expected: 720000000,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    for(var i = 0; i < list_data.length; i++){\n        if(list_data.indexOf(list_data[i]) == i){\n            product *= list_data[i];\n        }\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for (var i = 0; i < list_data.length; i++) {\n        if (unique_list.indexOf(list_data[i]) == -1) {\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for (var i = 0; i < unique_list.length; i++) {\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i = 0; i < unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for (var i = 0; i < list_data.length; i++) {\n        if (unique_list.indexOf(list_data[i]) == -1) {\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for (var i = 0; i < unique_list.length; i++) {\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for (var i = 0; i < list_data.length; i++) {\n        if (unique_list.indexOf(list_data[i]) == -1) {\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for (var i = 0; i < unique_list.length; i++) {\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    var product = 1;\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var i=0; i<unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0;i<list_data.length;i++){\n        if(unique_list.indexOf(list_data[i])==-1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0;i<unique_list.length;i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    var list_data_set = new Set(list_data);\n    for (let item of list_data_set) {\n        product *= item;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0; i<unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i = 0; i < unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0;i<list_data.length;i++){\n        if(unique_list.indexOf(list_data[i])==-1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0;i<unique_list.length;i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0; i<unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var prod = 1;\n    var unique_list = [];\n    for (var i = 0; i < list_data.length; i++) {\n        if (unique_list.indexOf(list_data[i]) == -1) {\n            unique_list.push(list_data[i]);\n        }\n    }\n    for (var i = 0; i < unique_list.length; i++) {\n        prod = prod * unique_list[i];\n    }\n    return prod;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var j = 0; j < unique_list.length; j++){\n        product = product * unique_list[j];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for (var i = 0; i < list_data.length; i++) {\n        if (unique_list.indexOf(list_data[i]) == -1) {\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for (var i = 0; i < unique_list.length; i++) {\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var i = 0; i < unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0; i<unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for (var i = 0; i < list_data.length; i++){\n        if (unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for (var i = 0; i < unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0; i<unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    for(var i = 0; i < list_data.length; i++){\n        if(list_data.indexOf(list_data[i]) == i){\n            product *= list_data[i];\n        }\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i = 0; i < unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    for(var i = 0; i < list_data.length; i++){\n        if(list_data.indexOf(list_data[i]) == i){\n            product *= list_data[i];\n        }\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    var unique_list = [];\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var i=0; i<unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i = 0; i < unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    for(var i=0; i<list_data.length; i++){\n        if(list_data[i] != list_data[i+1]){\n            product = product * list_data[i];\n        }\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n576000000000\n\nshould loosely deep-equal\n\n720000000\n    at test (/tmp/tmpazdbjfrl.js:16:10)\n    at Object.<anonymous> (/tmp/tmpazdbjfrl.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 576000000000,\n  expected: 720000000,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i = 0; i < unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0; i<unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for (var i = 0; i < list_data.length; i++) {\n        if (unique_list.indexOf(list_data[i]) == -1) {\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for (var i = 0; i < unique_list.length; i++) {\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    for(var i=0; i<list_data.length; i++){\n        if(list_data.indexOf(list_data[i]) == i){\n            product = product * list_data[i];\n        }\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0;i<list_data.length;i++){\n        if(unique_list.indexOf(list_data[i])==-1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0;i<unique_list.length;i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var i = 0; i < unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for (var i = 0; i < list_data.length; i++){\n        if (unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for (var i = 0; i < unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0;i<list_data.length;i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0;i<unique_list.length;i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i = 0; i < unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for (var i = 0; i < list_data.length; i++) {\n        if (unique_list.indexOf(list_data[i]) == -1) {\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for (var i = 0; i < unique_list.length; i++) {\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i = 0; i < unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i = 0; i < unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0; i<unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var i = 0; i < unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var i = 0; i < unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    for(var i = 0; i < list_data.length; i++){\n        if(list_data.indexOf(list_data[i]) == list_data.lastIndexOf(list_data[i])){\n            product *= list_data[i];\n        }\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n900000\n\nshould loosely deep-equal\n\n720000000\n    at test (/tmp/tmphf50geae.js:16:10)\n    at Object.<anonymous> (/tmp/tmphf50geae.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 900000,\n  expected: 720000000,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    var unique_list = [];\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var i=0; i<unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    var product = 1;\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var i=0; i<unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0; i<unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0; i<unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    for(var i = 0; i < list_data.length; i++){\n        if(list_data.indexOf(list_data[i]) == i){\n            product *= list_data[i];\n        }\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    for(var i=0; i<list_data.length; i++){\n        if(list_data.indexOf(list_data[i]) == list_data.lastIndexOf(list_data[i])){\n            product *= list_data[i];\n        }\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n900000\n\nshould loosely deep-equal\n\n720000000\n    at test (/tmp/tmpnhaq8bnx.js:16:10)\n    at Object.<anonymous> (/tmp/tmpnhaq8bnx.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 900000,\n  expected: 720000000,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    var product = 1;\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var i=0; i<unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i = 0; i < unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0; i<unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    var unique_list = [];\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var i=0; i<unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0; i<unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    for(var i = 0; i < list_data.length; i++){\n        if(list_data.indexOf(list_data[i]) == i){\n            product *= list_data[i];\n        }\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var i = 0; i < unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0; i<unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    for(var i=0; i<list_data.length; i++){\n        if(list_data.indexOf(list_data[i]) == i){\n            product = product * list_data[i];\n        }\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i = 0; i < unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i = 0; i < unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var j = 0; j < unique_list.length; j++){\n        product *= unique_list[j];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0; i<unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0; i<unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i = 0; i < unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0; i<unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0;i<list_data.length;i++){\n        if(unique_list.indexOf(list_data[i])==-1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0;i<unique_list.length;i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    for(var i = 0; i < list_data.length; i++){\n        if(list_data.indexOf(list_data[i]) == i){\n            product *= list_data[i];\n        }\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i = 0; i < unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    var product = 1;\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var i = 0; i < unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var i = 0; i < unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0;i<list_data.length;i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0;i<unique_list.length;i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0; i<unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0; i<unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    for(var i=0; i<list_data.length; i++){\n        if(list_data.indexOf(list_data[i]) == i){\n            product = product * list_data[i];\n        }\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i = 0; i < unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0; i<unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    var product = 1;\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var i = 0; i < unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0;i<list_data.length;i++){\n        if(unique_list.indexOf(list_data[i])==-1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0;i<unique_list.length;i++){\n        product = product*unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for (var i = 0; i < list_data.length; i++) {\n        if (unique_list.indexOf(list_data[i]) == -1) {\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for (var i = 0; i < unique_list.length; i++) {\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0; i<unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i = 0; i < unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var i = 0; i < unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    for(var i=0;i<list_data.length;i++){\n        if(list_data.indexOf(list_data[i]) == i){\n            product = product * list_data[i];\n        }\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0;i<list_data.length;i++){\n        if(unique_list.indexOf(list_data[i])==-1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0;i<unique_list.length;i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var i = 0; i < unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for (var i = 0; i < list_data.length; i++) {\n        if (unique_list.indexOf(list_data[i]) == -1) {\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for (var i = 0; i < unique_list.length; i++) {\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i = 0; i < unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    for(var i = 0; i < list_data.length; i++){\n        if(list_data.indexOf(list_data[i]) == i){\n            product *= list_data[i];\n        }\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0; i<unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    for(var i=0; i<list_data.length; i++){\n        if(list_data.indexOf(list_data[i]) == i){\n            product = product * list_data[i];\n        }\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0; i<unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    for(var i=0; i<list_data.length; i++){\n        if(list_data.indexOf(list_data[i]) == list_data.lastIndexOf(list_data[i])){\n            product = product * list_data[i];\n        }\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n900000\n\nshould loosely deep-equal\n\n720000000\n    at test (/tmp/tmpz3gve0kn.js:16:10)\n    at Object.<anonymous> (/tmp/tmpz3gve0kn.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 900000,\n  expected: 720000000,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    for(var i = 0; i < list_data.length; i++){\n        if(list_data.indexOf(list_data[i]) == i){\n            product *= list_data[i];\n        }\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0;i<list_data.length;i++){\n        if(unique_list.indexOf(list_data[i])==-1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0;i<unique_list.length;i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    var product = 1;\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var i=0; i<unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var i = 0; i < unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\n\nvar list_data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0;i<list_data.length;i++){\n        if(unique_list.indexOf(list_data[i])==-1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0;i<unique_list.length;i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var i = 0; i < unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    var unique_list = [];\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var i=0; i<unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0;i<list_data.length;i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0;i<unique_list.length;i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    for(var i = 0; i < list_data.length; i++){\n        if(list_data.indexOf(list_data[i]) == i){\n            product *= list_data[i];\n        }\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    for(var i = 0; i < list_data.length; i++){\n        if(list_data.indexOf(list_data[i]) == i){\n            product *= list_data[i];\n        }\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var j = 0; j < unique_list.length; j++){\n        product = product * unique_list[j];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    var product = 1;\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var i = 0; i < unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    for(var i=0; i<list_data.length; i++){\n        var count = 0;\n        for(var j=0; j<list_data.length; j++){\n            if(list_data[i] == list_data[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            product *= list_data[i];\n        }\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n900000\n\nshould loosely deep-equal\n\n720000000\n    at test (/tmp/tmp3ptq0zka.js:22:10)\n    at Object.<anonymous> (/tmp/tmp3ptq0zka.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 900000,\n  expected: 720000000,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0; i<unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var i = 0; i < unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0; i<unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    for (var i = 0; i < list_data.length; i++) {\n        if (list_data.indexOf(list_data[i]) == i) {\n            product = product * list_data[i];\n        }\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    for(var i=0;i<list_data.length;i++){\n        if(list_data.indexOf(list_data[i]) == list_data.lastIndexOf(list_data[i])){\n            product = product * list_data[i];\n        }\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n900000\n\nshould loosely deep-equal\n\n720000000\n    at test (/tmp/tmp709y2ulm.js:16:10)\n    at Object.<anonymous> (/tmp/tmp709y2ulm.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 900000,\n  expected: 720000000,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i = 0; i < unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0;i<list_data.length;i++){\n        if(unique_list.indexOf(list_data[i])==-1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0;i<unique_list.length;i++){\n        product = product*unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    var unique_list = [];\n    for(var i=0;i<list_data.length;i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var i=0;i<unique_list.length;i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    for(var i=0; i<list_data.length; i++){\n        if(list_data.indexOf(list_data[i]) == list_data.lastIndexOf(list_data[i])){\n            product = product * list_data[i];\n        }\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n900000\n\nshould loosely deep-equal\n\n720000000\n    at test (/tmp/tmpz3gve0kn.js:16:10)\n    at Object.<anonymous> (/tmp/tmpz3gve0kn.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 900000,\n  expected: 720000000,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for (var i = 0; i < list_data.length; i++) {\n        if (unique_list.indexOf(list_data[i]) == -1) {\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for (var i = 0; i < unique_list.length; i++) {\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i = 0; i < unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i = 0; i < unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0;i<list_data.length;i++){\n        if(unique_list.indexOf(list_data[i])==-1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0;i<unique_list.length;i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var i = 0; i < unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0;i<list_data.length;i++){\n        if(unique_list.indexOf(list_data[i])==-1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0;i<unique_list.length;i++){\n        product = product*unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    var product = 1;\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var i = 0; i < unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    var unique_list = [];\n    for(var i=0;i<list_data.length;i++){\n        if(unique_list.indexOf(list_data[i])==-1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var i=0;i<unique_list.length;i++){\n        product = product*unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0;i<list_data.length;i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0;i<unique_list.length;i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i = 0; i < unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i = 0; i < unique_list.length; i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    var product = 1;\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var i=0; i<unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    for(var i = 0; i < list_data.length; i++){\n        if(list_data.indexOf(list_data[i]) == i){\n            product *= list_data[i];\n        }\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i = 0; i < unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0; i<list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0; i<unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    for(var i=0;i<list_data.length;i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for(var i=0;i<unique_list.length;i++){\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var unique_list = [];\n    var product = 1;\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var i = 0; i < unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    for(var i = 0; i < list_data.length; i++){\n        if(list_data.indexOf(list_data[i]) == list_data.lastIndexOf(list_data[i])){\n            product *= list_data[i];\n        }\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1666123603,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n900000\n\nshould loosely deep-equal\n\n720000000\n    at test (/tmp/tmphf50geae.js:16:10)\n    at Object.<anonymous> (/tmp/tmphf50geae.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 900000,\n  expected: 720000000,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product(list_data){\n    var product = 1;\n    var unique_list = [];\n    for(var i = 0; i < list_data.length; i++){\n        if(unique_list.indexOf(list_data[i]) == -1){\n            unique_list.push(list_data[i]);\n        }\n    }\n    for(var i = 0; i < unique_list.length; i++){\n        product *= unique_list[i];\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}