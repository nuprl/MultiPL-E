{
  "name": "mbpp_736_left_insertion",
  "language": "js",
  "prompt": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "\tvar i = 0;\n\twhile(i < a.length && a[i] < x){\n\t\ti++;\n\t}\n\treturn i;\n}\n",
    "    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n",
    "  var i = 0;\n  while(i < a.length && a[i] < x){\n    i++;\n  }\n  return i;\n}\n",
    "    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n",
    "    if(a.length == 0){\n        return 0;\n    }\n    if(a[a.length - 1] < x){\n        return a.length;\n    }\n    for(var i = 0; i < a.length; i++){\n        if(a[i] > x){\n            return i;\n        }\n    }\n}\n",
    "    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n",
    "    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n",
    "    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n",
    "    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n",
    "    var i = 0;\n    while(a[i] < x){\n        i++;\n    }\n    return i;\n}\n",
    "  var i = 0;\n  while(i < a.length && a[i] < x){\n    i++;\n  }\n  return i;\n}\n",
    "    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n",
    "    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n",
    "    var l = 0;\n    var r = a.length - 1;\n    var m;\n    while(l < r){\n        m = Math.floor((l + r) / 2);\n        if(a[m] < x){\n            l = m + 1;\n        }\n        else{\n            r = m;\n        }\n    }\n    return l;\n}\n",
    "    let i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n",
    "    for(var i = 0; i < a.length; i++){\n        if(a[i] > x){\n            return i;\n        }\n    }\n    return a.length;\n}\n",
    "    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n",
    "    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n",
    "\tvar i = 0;\n\twhile(i < a.length && a[i] < x){\n\t\ti++;\n\t}\n\treturn i;\n}\n",
    "    let i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n"
  ]
}