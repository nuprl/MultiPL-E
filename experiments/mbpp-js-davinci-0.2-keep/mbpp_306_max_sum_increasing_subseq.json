{
  "name": "mbpp_306_max_sum_increasing_subseq",
  "language": "js",
  "prompt": "//Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunction max_sum_increasing_subseq(a, n, index, k){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_increasing_subseq;\n  assert.deepEqual(candidate([1, 101, 2, 3, 100, 4, 5], 7, 4, 6),11);\n  assert.deepEqual(candidate([1, 101, 2, 3, 100, 4, 5], 7, 2, 5),7);\n  assert.deepEqual(candidate([11, 15, 19, 21, 26, 28, 31], 7, 2, 4),71);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    if(index == 0){\n        return a[index];\n    }\n    if(index == k){\n        return a[index];\n    }\n    var max_sum = 0;\n    for(var i = 0; i < index; i++){\n        if(a[i] < a[index]){\n            var sum = max_sum_increasing_subseq(a, n, i, k);\n            if(sum > max_sum){\n                max_sum = sum;\n            }\n        }\n    }\n    return max_sum + a[index];\n}\n",
    "    if(index == n){\n        return 0;\n    }\n    if(index == k){\n        return a[index];\n    }\n    let sum1 = max_sum_increasing_subseq(a, n, index + 1, k);\n    let sum2 = 0;\n    if(a[index] < a[k]){\n        sum2 = max_sum_increasing_subseq(a, n, index + 1, k) + a[index];\n    }\n    return Math.max(sum1, sum2);\n}\n",
    "    if(index == n) return 0;\n    if(k == n) return 0;\n    if(index > k) return 0;\n    return Math.max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, k+1));\n}\n",
    "    if(index == n) return 0;\n    if(k == n) return 0;\n    if(index == k) return a[index];\n    return Math.max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1));\n}\n",
    "    if(index == n){\n        return 0;\n    }\n    if(index == n-1){\n        return a[n-1];\n    }\n    if(index == k){\n        return a[index];\n    }\n    if(index > k){\n        return 0;\n    }\n    return Math.max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, k));\n}\n",
    "    var sum = 0;\n    for(var i = index; i < k; i++){\n        sum += a[i];\n    }\n    return sum;\n}\n",
    "    if(index == n) return 0;\n    if(k == n) return 0;\n    if(a[index] > a[k]){\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1);\n    }\n    else{\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1);\n    }\n}\n",
    "    if(index == n) return 0;\n    let sum = 0;\n    for(let i = index; i < n; i++){\n        if(a[i] < a[k]){\n            sum = Math.max(sum, max_sum_increasing_subseq(a, n, i+1, k) + a[i]);\n        }\n    }\n    return sum;\n}\n",
    "\tif(index == n)\n\t\treturn 0;\n\tif(a[index] > a[k])\n\t\treturn a[index] + max_sum_increasing_subseq(a, n, index + 1, index);\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index + 1, k);\n}\n",
    "    if(index == n)\n        return 0;\n    if(index == k)\n        return a[index];\n    if(index > k)\n        return 0;\n    return Math.max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, k));\n}\n",
    "    if(index == n){\n        return 0;\n    }\n    if(index == k){\n        return a[index];\n    }\n    let sum = 0;\n    for(let i = index; i < k; i++){\n        if(a[i] < a[k]){\n            sum = Math.max(sum, max_sum_increasing_subseq(a, n, i, k) + a[k]);\n        }\n    }\n    return sum;\n}\n",
    "\tif(index == 0) return a[0];\n\tif(k == 0) return 0;\n\tvar max = 0;\n\tfor(var i = 0; i < index; i++){\n\t\tvar temp = max_sum_increasing_subseq(a, n, i, k-1);\n\t\tif(temp > max && a[i] < a[k]){\n\t\t\tmax = temp;\n\t\t}\n\t}\n\treturn max + a[k];\n}\n",
    "    if(index == n)\n        return 0;\n    if(k == n)\n        return 0;\n    if(a[index] > a[k])\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1);\n    else\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1);\n}\n",
    "    if(index == n) return 0;\n    let sum = 0;\n    for(let i = index; i < n; i++){\n        if(a[i] < a[k]){\n            sum = Math.max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    return sum;\n}\n",
    "    if(index == n) return 0;\n    if(k == n) return 0;\n    if(k <= index) return 0;\n    let incl = a[k] + max_sum_increasing_subseq(a, n, index, k+1);\n    let excl = max_sum_increasing_subseq(a, n, index, k+1);\n    return Math.max(incl, excl);\n}\n",
    "    if(index == n)\n        return 0;\n    if(k == n)\n        return 0;\n    if(k < index)\n        return 0;\n    return Math.max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1));\n}\n",
    "    if(index == n)\n        return 0;\n    if(index == k)\n        return a[index];\n    if(index > k)\n        return 0;\n    return Math.max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, k+1));\n}\n",
    "    var sum = 0;\n    for(var i = index; i < k; i++){\n        sum += a[i];\n    }\n    return sum;\n}\n",
    "    var sum = 0;\n    var max_sum = 0;\n    for(var i = index; i < k; i++){\n        sum += a[i];\n        if(sum > max_sum)\n            max_sum = sum;\n    }\n    return max_sum;\n}\n",
    "    if(index == n){\n        return 0;\n    }\n    let sum = 0;\n    for(let i = index; i < n; i++){\n        if(a[i] < a[k]){\n            sum = Math.max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    return sum;\n}\n"
  ]
}