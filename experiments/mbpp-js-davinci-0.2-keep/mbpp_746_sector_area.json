{
  "name": "mbpp_746_sector_area",
  "language": "js",
  "prompt": "//Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfunction sector_area(r, a){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_746_sector_area.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sector_area;\n  assert.deepEqual(candidate(4, 45),6.283185307179586);\n  assert.deepEqual(candidate(9, 45),31.808625617596654);\n  assert.deepEqual(candidate(9, 361),undefined);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    if (a > 360){\n        return null;\n    }\n    else{\n        return (Math.PI * r * r * a) / 360;\n    }\n}\n",
    "    if(a>360){\n        return null;\n    }\n    else{\n        return (a/360)*(Math.PI*r*r);\n    }\n}",
    "    if(a>360){\n        return null;\n    }\n    else{\n        return (a/360)*(Math.PI*r*r);\n    }\n}",
    "    if(a>360){\n        return \"None\";\n    }\n    else{\n        return (a/360)*(Math.PI*r*r);\n    }\n}\n",
    "    if(a>360){\n        return null;\n    }\n    else{\n        return (a/360)*(Math.PI*r*r);\n    }\n}\n",
    "    if(a > 360){\n        return \"None\";\n    }\n    else{\n        return (a/360)*Math.PI*r*r;\n    }\n}\n",
    "    if(a > 360){\n        return \"None\";\n    }\n    else{\n        return (a*r*r)/360;\n    }\n}",
    "    if(a > 360){\n        return null;\n    }\n    else{\n        let area = (a/360)*(Math.PI*r*r);\n        return area;\n    }\n}\n",
    "    if(a>360){\n        return null;\n    }\n    else{\n        return (a/360)*(Math.PI*r*r);\n    }\n}",
    "    if(a>360){\n        return \"None\";\n    }\n    else{\n        return (a*(Math.PI*r*r))/360;\n    }\n}",
    "    if (a > 360){\n        return null;\n    }\n    else{\n        return (a/360)*Math.PI*r*r;\n    }\n}",
    "    if(a > 360){\n        return null;\n    }\n    else{\n        return (Math.PI * r * r * a) / 360;\n    }\n}\n",
    "    if(a>360){\n        return null;\n    }\n    else{\n        return (a/360)*(Math.PI*r*r);\n    }\n}\n",
    "    if(a>360){\n        return null;\n    }\n    else{\n        return (a/360)*(3.14*r*r);\n    }\n}\n",
    "    if(a>360){\n        return null;\n    }\n    else{\n        return (a/360)*(Math.PI*r*r);\n    }\n}",
    "    if(a>360){\n        return null;\n    }\n    else{\n        return (a/360)*Math.PI*r*r;\n    }\n}\n",
    "    if(a > 360){\n        return null;\n    }\n    else{\n        return (a/360)*Math.PI*r*r;\n    }\n}\n",
    "    if(a > 360){\n        return null;\n    }\n    else{\n        return (a/360)*Math.PI*r*r;\n    }\n}",
    "    if(a > 360){\n        return \"None\";\n    }\n    else{\n        return (a/360)*Math.PI*r*r;\n    }\n}",
    "    if(a > 360){\n        return \"None\";\n    }\n    else{\n        return (a/360)*(Math.PI*r*r);\n    }\n}\n"
  ]
}