{
  "name": "mbpp_583_catalan_number",
  "language": "js",
  "prompt": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_583_catalan_number.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var c = 1;\n    for(var i = 0; i < num; i++){\n        c = c * (2 * num - i) / (i + 1);\n    }\n    return c;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n184756\n\nshould loosely deep-equal\n\n16796\n    at test (/tmp/tmp8xwfsuf2.js:14:10)\n    at Object.<anonymous> (/tmp/tmp8xwfsuf2.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 184756,\n  expected: 16796,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num<=1){\n        return 1;\n    }\n    var res=0;\n    for(var i=0;i<num;i++){\n        res+=catalan_number(i)*catalan_number(num-i-1);\n    }\n    return res;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num == 0){\n        return 1;\n    }\n    var catalan = 0;\n    for(var i = 0; i < num; i++){\n        catalan += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return catalan;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan_number = 1;\n    if(num <= 1){\n        return 1;\n    }\n    for(var i = 2; i <= num; i++){\n        catalan_number = catalan_number * (num + i)/i;\n    }\n    return catalan_number;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n  if(num <= 1){\n    return 1;\n  }\n  var res = 0;\n  for(var i = 0; i < num; i++){\n    res += catalan_number(i) * catalan_number(num - i - 1);\n  }\n  return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num<=1){\n        return 1;\n    }\n    var res=0;\n    for(var i=0;i<num;i++){\n        res+=catalan_number(i)*catalan_number(num-i-1);\n    }\n    return res;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan_number = 1;\n    for(var i = 0; i < num; i++){\n        catalan_number = catalan_number * (2*num - i)/(i + 1);\n    }\n    return catalan_number;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n184756\n\nshould loosely deep-equal\n\n16796\n    at test (/tmp/tmp4p_aoddw.js:15:10)\n    at Object.<anonymous> (/tmp/tmp4p_aoddw.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 184756,\n  expected: 16796,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan_num = 1;\n    for(var i = 0; i < num; i++){\n        catalan_num = catalan_num * (num + i) / (i + 1);\n    }\n    return catalan_num;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92378\n\nshould loosely deep-equal\n\n16796\n    at test (/tmp/tmpjct0i6g3.js:14:10)\n    at Object.<anonymous> (/tmp/tmpjct0i6g3.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92378,\n  expected: 16796,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var c = 1;\n    for(var i=0;i<num;i++){\n        c = c*(2*num-i)/(i+1);\n    }\n    return c/(num+1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan = [];\n    catalan[0] = catalan[1] = 1;\n    for(var i=2; i<=num; i++){\n        catalan[i] = 0;\n        for(var j=0; j<i; j++){\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan_number = 1;\n    for(var i = 0; i < num; i++){\n        catalan_number = catalan_number * (2*num - i);\n        catalan_number = catalan_number / (i + 1);\n    }\n    return catalan_number / (num + 1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var result = 0;\n    for(var i = 0; i < num; i++){\n        result += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num<=1){\n        return 1;\n    }\n    var res = 0;\n    for(var i=0;i<num;i++){\n        res += catalan_number(i)*catalan_number(num-i-1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan_number = 1;\n    for(var i = 2; i <= num; i++){\n        catalan_number = catalan_number * (num + i)/i;\n    }\n    return catalan_number;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan = [];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for(var i = 2; i <= num; i++){\n        catalan[i] = 0;\n        for(var j = 0; j < i; j++){\n            catalan[i] += catalan[j] * catalan[i - j - 1];\n        }\n    }\n    return catalan[num];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num<=1){\n        return 1;\n    }\n    var res=0;\n    for(var i=0;i<num;i++){\n        res+=catalan_number(i)*catalan_number(num-i-1);\n    }\n    return res;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num<=1){\n        return 1;\n    }\n    var res = 0;\n    for(var i=0;i<num;i++){\n        res += catalan_number(i)*catalan_number(num-i-1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan_number = 1;\n    for(var i = 0; i < num; i++){\n        catalan_number = catalan_number * (2 * num - i) / (i + 1);\n    }\n    return catalan_number;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n184756\n\nshould loosely deep-equal\n\n16796\n    at test (/tmp/tmpcjmpttwo.js:14:10)\n    at Object.<anonymous> (/tmp/tmpcjmpttwo.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 184756,\n  expected: 16796,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var c = 1;\n    for(var i = 0; i < num; i++){\n        c = c * (2 * num - i) / (i + 1);\n    }\n    return c;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n184756\n\nshould loosely deep-equal\n\n16796\n    at test (/tmp/tmpkkq_03e1.js:15:10)\n    at Object.<anonymous> (/tmp/tmpkkq_03e1.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 184756,\n  expected: 16796,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan = [];\n    catalan[0] = catalan[1] = 1;\n    for(var i = 2; i <= num; i++){\n        catalan[i] = 0;\n        for(var j = 0; j < i; j++){\n            catalan[i] += catalan[j] * catalan[i - j - 1];\n        }\n    }\n    return catalan[num];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var c = 1;\n    for(var i = 0; i < num; i++){\n        c = c * (2*num - i)/(i + 1);\n    }\n    return c;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n184756\n\nshould loosely deep-equal\n\n16796\n    at test (/tmp/tmpk2qitjlr.js:15:10)\n    at Object.<anonymous> (/tmp/tmpk2qitjlr.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 184756,\n  expected: 16796,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan = [];\n    catalan[0] = catalan[1] = 1;\n    for(var i = 2; i <= num; i++){\n        catalan[i] = 0;\n        for(var j = 0; j < i; j++){\n            catalan[i] += catalan[j] * catalan[i - j - 1];\n        }\n    }\n    return catalan[num];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan_number = 1;\n    for(var i=0; i<num; i++){\n        catalan_number = catalan_number * (num+i)/(i+1);\n    }\n    return catalan_number;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92378\n\nshould loosely deep-equal\n\n16796\n    at test (/tmp/tmpki4gs6na.js:14:10)\n    at Object.<anonymous> (/tmp/tmpki4gs6na.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92378,\n  expected: 16796,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan_num = 0;\n    if(num <= 1){\n        return 1;\n    }\n    for(var i = 0; i < num; i++){\n        catalan_num += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return catalan_num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1)\n        return 1;\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1)\n        return 1;\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan_array = [1,1];\n    for(var i=2; i<=num; i++){\n        catalan_array[i] = 0;\n        for(var j=0; j<i; j++){\n            catalan_array[i] += catalan_array[j] * catalan_array[i-j-1];\n        }\n    }\n    return catalan_array[num];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan = [];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for(var i=2; i<=num; i++){\n        catalan[i] = 0;\n        for(var j=0; j<i; j++){\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan_number = new Array(num);\n    catalan_number[0] = 1;\n    catalan_number[1] = 1;\n    for(var i = 2; i <= num; i++){\n        catalan_number[i] = 0;\n        for(var j = 0; j < i; j++){\n            catalan_number[i] += catalan_number[j] * catalan_number[i - j - 1];\n        }\n    }\n    return catalan_number[num];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num<=1){\n        return 1;\n    }\n    var res=0;\n    for(var i=0;i<num;i++){\n        res+=catalan_number(i)*catalan_number(num-i-1);\n    }\n    return res;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var result = 1;\n    for(var i = 0; i < num; i++){\n        result = result * (2*num - i) / (i + 1);\n    }\n    return result / (num + 1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var result = 1;\n    for(var i = 0; i < num; i++){\n        result = result * (num + i)/(i + 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92378\n\nshould loosely deep-equal\n\n16796\n    at test (/tmp/tmp5x0gyrjy.js:15:10)\n    at Object.<anonymous> (/tmp/tmp5x0gyrjy.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92378,\n  expected: 16796,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan = [];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for(var i=2; i<=num; i++){\n        catalan[i] = 0;\n        for(var j=0; j<i; j++){\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var c = 1;\n    for(var i=0; i<num; i++){\n        c = c * (2*num - i)/(i+1);\n    }\n    return c;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n184756\n\nshould loosely deep-equal\n\n16796\n    at test (/tmp/tmp4dg3dens.js:14:10)\n    at Object.<anonymous> (/tmp/tmp4dg3dens.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 184756,\n  expected: 16796,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n\tif(num <= 1)\n\t\treturn 1;\n\tvar res = 0;\n\tfor(var i = 0; i < num; i++){\n\t\tres += catalan_number(i) * catalan_number(num - i - 1);\n\t}\n\treturn res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan = [];\n    catalan[0] = catalan[1] = 1;\n    for(var i = 2; i <= num; i++){\n        catalan[i] = 0;\n        for(var j = 0; j < i; j++){\n            catalan[i] += catalan[j] * catalan[i - j - 1];\n        }\n    }\n    return catalan[num];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var res = 1;\n    for(var i = 0; i < num; i++){\n        res = res * (num + i) / (i + 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92378\n\nshould loosely deep-equal\n\n16796\n    at test (/tmp/tmp8nl_0x81.js:15:10)\n    at Object.<anonymous> (/tmp/tmp8nl_0x81.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92378,\n  expected: 16796,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan = [];\n    catalan[0] = catalan[1] = 1;\n    for(var i = 2; i <= num; i++){\n        catalan[i] = 0;\n        for(var j = 0; j < i; j++){\n            catalan[i] += catalan[j] * catalan[i - j - 1];\n        }\n    }\n    return catalan[num];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n\tvar catalan_numbers = [1,1,2,5,14,42,132,429,1430,4862,16796,58786,208012,742900,2674440,9694845,35357670,129644790,477638700,1767263190,6564120420,24466267020,91482563640,343059613650,1289904147324,4861946401452,18367353072152,69533550916004,263747951750360,1002242216651368,3814986502092304];\n\treturn catalan_numbers[num];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num<=1){\n        return 1;\n    }\n    var res = 0;\n    for(var i=0;i<num;i++){\n        res += catalan_number(i)*catalan_number(num-i-1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan_number = 1;\n    for(var i=0; i<num; i++){\n        catalan_number = catalan_number * (2*num - i)/(i+1);\n    }\n    return catalan_number;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n184756\n\nshould loosely deep-equal\n\n16796\n    at test (/tmp/tmpljbareay.js:14:10)\n    at Object.<anonymous> (/tmp/tmpljbareay.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 184756,\n  expected: 16796,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var sum = 0;\n    for(var i = 0; i < num; i++){\n        sum += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n\tvar catalan = [];\n\tcatalan[0] = 1;\n\tcatalan[1] = 1;\n\tfor(var i=2; i<=num; i++){\n\t\tcatalan[i] = 0;\n\t\tfor(var j=0; j<i; j++){\n\t\t\tcatalan[i] += catalan[j]*catalan[i-j-1];\n\t\t}\n\t}\n\treturn catalan[num];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num == 0){\n        return 1;\n    }\n    var sum = 0;\n    for(var i = 0; i < num; i++){\n        sum += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan = [];\n    catalan[0] = catalan[1] = 1;\n    for(var i = 2; i <= num; i++){\n        catalan[i] = 0;\n        for(var j = 0; j < i; j++){\n            catalan[i] += catalan[j] * catalan[i - j - 1];\n        }\n    }\n    return catalan[num];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan = [];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for(var i=2; i<=num; i++){\n        catalan[i] = 0;\n        for(var j=0; j<i; j++){\n            catalan[i] += catalan[j]*catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1)\n        return 1;\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num<=1){\n        return 1;\n    }\n    var res = 0;\n    for(var i=0;i<num;i++){\n        res += catalan_number(i)*catalan_number(num-i-1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num<=1){\n        return 1;\n    }\n    var res=0;\n    for(var i=0;i<num;i++){\n        res+=catalan_number(i)*catalan_number(num-i-1);\n    }\n    return res;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num<=1){\n        return 1;\n    }\n    var res=0;\n    for(var i=0;i<num;i++){\n        res+=catalan_number(i)*catalan_number(num-i-1);\n    }\n    return res;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1)\n        return 1;\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1)\n        return 1;\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n\tif(num <= 1){\n\t\treturn 1;\n\t}\n\tvar res = 0;\n\tfor(var i = 0; i < num; i++){\n\t\tres += catalan_number(i) * catalan_number(num - i - 1);\n\t}\n\treturn res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan_number = 1;\n    for(var i = 2; i <= num; i++){\n        catalan_number = catalan_number * (num + i)/i;\n    }\n    return catalan_number;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num==0 || num==1){\n        return 1;\n    }\n    var res=0;\n    for(var i=0;i<num;i++){\n        res+=catalan_number(i)*catalan_number(num-i-1);\n    }\n    return res;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var res = 1;\n    for(var i=0;i<num;i++){\n        res = res * (num+i)/(i+1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92378\n\nshould loosely deep-equal\n\n16796\n    at test (/tmp/tmppdnzg7zl.js:15:10)\n    at Object.<anonymous> (/tmp/tmppdnzg7zl.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92378,\n  expected: 16796,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan_array = [1,1];\n    for(var i=2; i<=num; i++){\n        catalan_array[i] = 0;\n        for(var j=0; j<i; j++){\n            catalan_array[i] += catalan_array[j] * catalan_array[i-j-1];\n        }\n    }\n    return catalan_array[num];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n\tif(num <= 1){\n\t\treturn 1;\n\t}\n\tvar res = 0;\n\tfor(var i = 0; i < num; i++){\n\t\tres += catalan_number(i) * catalan_number(num - i - 1);\n\t}\n\treturn res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan_number = 1;\n    for(var i = 0; i < num; i++){\n        catalan_number = catalan_number * (2*num - i)/(i+1);\n    }\n    return catalan_number;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n184756\n\nshould loosely deep-equal\n\n16796\n    at test (/tmp/tmpbxu7jrot.js:14:10)\n    at Object.<anonymous> (/tmp/tmpbxu7jrot.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 184756,\n  expected: 16796,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num == 0){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n\tvar catalan = [];\n\tcatalan[0] = 1;\n\tcatalan[1] = 1;\n\tfor(var i = 2; i <= num; i++){\n\t\tcatalan[i] = 0;\n\t\tfor(var j = 0; j < i; j++){\n\t\t\tcatalan[i] += catalan[j] * catalan[i - j - 1];\n\t\t}\n\t}\n\treturn catalan[num];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan = [];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for(var i = 2; i <= num; i++){\n        catalan[i] = 0;\n        for(var j = 0; j < i; j++){\n            catalan[i] += catalan[j] * catalan[i - j - 1];\n        }\n    }\n    return catalan[num];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num<=1){\n        return 1;\n    }\n    var res=0;\n    for(var i=0;i<num;i++){\n        res+=catalan_number(i)*catalan_number(num-i-1);\n    }\n    return res;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan = [1,1];\n    for(var i = 2; i <= num; i++){\n        catalan[i] = 0;\n        for(var j = 0; j < i; j++){\n            catalan[i] += catalan[j] * catalan[i - j - 1];\n        }\n    }\n    return catalan[num];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var c = 1;\n    for(var i = 0; i < num; i++){\n        c = c * (2 * num - i) / (i + 1);\n    }\n    return c;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n184756\n\nshould loosely deep-equal\n\n16796\n    at test (/tmp/tmp8xwfsuf2.js:14:10)\n    at Object.<anonymous> (/tmp/tmp8xwfsuf2.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 184756,\n  expected: 16796,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan = [];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for(var i = 2; i <= num; i++){\n        catalan[i] = 0;\n        for(var j = 0; j < i; j++){\n            catalan[i] += catalan[j] * catalan[i - j - 1];\n        }\n    }\n    return catalan[num];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1)\n        return 1;\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var result = 1;\n    for(var i = 0; i < num; i++){\n        result = result * (num + i)/(i + 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92378\n\nshould loosely deep-equal\n\n16796\n    at test (/tmp/tmp5x0gyrjy.js:15:10)\n    at Object.<anonymous> (/tmp/tmp5x0gyrjy.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92378,\n  expected: 16796,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan_number = 1;\n    for(var i=0; i<num; i++){\n        catalan_number = catalan_number * (2*num - i)/(i+1);\n    }\n    return catalan_number;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n184756\n\nshould loosely deep-equal\n\n16796\n    at test (/tmp/tmpljbareay.js:14:10)\n    at Object.<anonymous> (/tmp/tmpljbareay.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 184756,\n  expected: 16796,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var c = 1;\n    for(var i = 0; i < num; i++){\n        c = c * (2*num - i)/(i + 1);\n    }\n    return c;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n184756\n\nshould loosely deep-equal\n\n16796\n    at test (/tmp/tmp51jqdgt7.js:14:10)\n    at Object.<anonymous> (/tmp/tmp51jqdgt7.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 184756,\n  expected: 16796,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num<=1){\n        return 1;\n    }\n    var res=0;\n    for(var i=0;i<num;i++){\n        res+=catalan_number(i)*catalan_number(num-i-1);\n    }\n    return res;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan = [1,1];\n    for(var i=2; i<=num; i++){\n        catalan[i] = 0;\n        for(var j=0; j<i; j++){\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var result = 0;\n    for(var i = 0; i < num; i++){\n        result += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num<=1){\n        return 1;\n    }\n    var res=0;\n    for(var i=0;i<num;i++){\n        res+=catalan_number(i)*catalan_number(num-i-1);\n    }\n    return res;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var c = 1;\n    for(var i = 0; i < num; i++){\n        c = c * 2 * (2 * i + 1) / (i + 2);\n    }\n    return c;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan = [];\n    catalan[0] = catalan[1] = 1;\n    for(var i = 2; i <= num; i++){\n        catalan[i] = 0;\n        for(var j = 0; j < i; j++){\n            catalan[i] += catalan[j] * catalan[i - j - 1];\n        }\n    }\n    return catalan[num];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num<=1){\n        return 1;\n    }\n    var res=0;\n    for(var i=0;i<num;i++){\n        res+=catalan_number(i)*catalan_number(num-i-1);\n    }\n    return res;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num<=1){\n        return 1;\n    }\n    var res = 0;\n    for(var i=0;i<num;i++){\n        res += catalan_number(i)*catalan_number(num-i-1);\n    }\n    return res;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var c = 1;\n    for(var i = 0; i < num; i++){\n        c = c * (2 * num - i) / (i + 1);\n    }\n    return c;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n184756\n\nshould loosely deep-equal\n\n16796\n    at test (/tmp/tmp8xwfsuf2.js:14:10)\n    at Object.<anonymous> (/tmp/tmp8xwfsuf2.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 184756,\n  expected: 16796,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var c = 1;\n    for(var i = 0; i < num; i++){\n        c = c * (2*num - i)/(i + 1);\n    }\n    return c;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n184756\n\nshould loosely deep-equal\n\n16796\n    at test (/tmp/tmp51jqdgt7.js:14:10)\n    at Object.<anonymous> (/tmp/tmp51jqdgt7.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 184756,\n  expected: 16796,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num == 0){\n        return 1;\n    }\n    let result = 0;\n    for(let i = 0; i < num; i++){\n        result += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan_number = 1;\n    for(var i = 0; i < num; i++){\n        catalan_number = catalan_number * (2 * num - i) / (i + 1);\n    }\n    return catalan_number;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n184756\n\nshould loosely deep-equal\n\n16796\n    at test (/tmp/tmpcjmpttwo.js:14:10)\n    at Object.<anonymous> (/tmp/tmpcjmpttwo.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 184756,\n  expected: 16796,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num<=1){\n        return 1;\n    }\n    var res=0;\n    for(var i=0;i<num;i++){\n        res+=catalan_number(i)*catalan_number(num-i-1);\n    }\n    return res;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan = [];\n    catalan[0] = catalan[1] = 1;\n    for(var i=2; i<=num; i++){\n        catalan[i] = 0;\n        for(var j=0; j<i; j++){\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan = [];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for(var i = 2; i <= num; i++){\n        catalan[i] = 0;\n        for(var j = 0; j < i; j++){\n            catalan[i] += catalan[j] * catalan[i - j - 1];\n        }\n    }\n    return catalan[num];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan_number = 1;\n    for(var i = 0; i < num; i++){\n        catalan_number *= (num + i);\n        catalan_number /= (i + 1);\n    }\n    return catalan_number;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92378\n\nshould loosely deep-equal\n\n16796\n    at test (/tmp/tmpt6k4y29b.js:15:10)\n    at Object.<anonymous> (/tmp/tmpt6k4y29b.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92378,\n  expected: 16796,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan = [];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for(var i=2; i<=num; i++){\n        catalan[i] = 0;\n        for(var j=0; j<i; j++){\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan = [];\n    catalan[0] = catalan[1] = 1;\n    for(var i=2; i<=num; i++){\n        catalan[i] = 0;\n        for(var j=0; j<i; j++){\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1)\n        return 1;\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan = [];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for(var i = 2; i <= num; i++){\n        catalan[i] = 0;\n        for(var j = 0; j < i; j++){\n            catalan[i] += catalan[j] * catalan[i - j - 1];\n        }\n    }\n    return catalan[num];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan = [];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for(var i = 2; i <= num; i++){\n        catalan[i] = 0;\n        for(var j = 0; j < i; j++){\n            catalan[i] += catalan[j] * catalan[i - j - 1];\n        }\n    }\n    return catalan[num];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan = [1,1];\n    for(var i=2;i<=num;i++){\n        catalan[i] = 0;\n        for(var j=0;j<i;j++){\n            catalan[i] += catalan[j]*catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan = [];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for(var i = 2; i <= num; i++){\n        catalan[i] = 0;\n        for(var j = 0; j < i; j++){\n            catalan[i] += catalan[j] * catalan[i - j - 1];\n        }\n    }\n    return catalan[num];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n\tif(num <= 1){\n\t\treturn 1;\n\t}\n\tvar res = 0;\n\tfor(var i = 0; i < num; i++){\n\t\tres += catalan_number(i) * catalan_number(num - i - 1);\n\t}\n\treturn res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var c = 1;\n    for (var i = 0; i < num; i++){\n        c = c * 2 * (2 * i + 1) / (i + 2);\n    }\n    return c;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num<=1){\n        return 1;\n    }\n    var res=0;\n    for(var i=0;i<num;i++){\n        res+=catalan_number(i)*catalan_number(num-i-1);\n    }\n    return res;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var c = 1;\n    for(var i = 0; i < num; i++){\n        c = c * (2*num - i)/(i + 1);\n    }\n    return c;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n184756\n\nshould loosely deep-equal\n\n16796\n    at test (/tmp/tmp51jqdgt7.js:14:10)\n    at Object.<anonymous> (/tmp/tmp51jqdgt7.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 184756,\n  expected: 16796,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan = [];\n    catalan[0] = catalan[1] = 1;\n    for(var i = 2; i <= num; i++){\n        catalan[i] = 0;\n        for(var j = 0; j < i; j++){\n            catalan[i] += catalan[j] * catalan[i - j - 1];\n        }\n    }\n    return catalan[num];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan = [];\n    catalan[0] = catalan[1] = 1;\n    for(var i = 2; i <= num; i++){\n        catalan[i] = 0;\n        for(var j = 0; j < i; j++){\n            catalan[i] += catalan[j] * catalan[i - j - 1];\n        }\n    }\n    return catalan[num];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1)\n        return 1;\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n\tvar catalan = [];\n\tcatalan[0] = 1;\n\tcatalan[1] = 1;\n\tfor(var i=2; i<=num; i++){\n\t\tcatalan[i] = 0;\n\t\tfor(var j=0; j<i; j++){\n\t\t\tcatalan[i] += catalan[j] * catalan[i-j-1];\n\t\t}\n\t}\n\treturn catalan[num];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num<=1){\n        return 1;\n    }\n    var res = 0;\n    for(var i=0;i<num;i++){\n        res += catalan_number(i)*catalan_number(num-i-1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan_number = [];\n    catalan_number[0] = 1;\n    catalan_number[1] = 1;\n    for(var i = 2; i <= num; i++){\n        catalan_number[i] = 0;\n        for(var j = 0; j < i; j++){\n            catalan_number[i] += catalan_number[j] * catalan_number[i - j - 1];\n        }\n    }\n    return catalan_number[num];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num<=1){\n        return 1;\n    }\n    var res=0;\n    for(var i=0;i<num;i++){\n        res+=catalan_number(i)*catalan_number(num-i-1);\n    }\n    return res;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num<=1){\n        return 1;\n    }\n    var res = 0;\n    for(var i=0;i<num;i++){\n        res += catalan_number(i)*catalan_number(num-i-1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan_number = 1;\n    for(var i = 0; i < num; i++){\n        catalan_number = catalan_number * (2*num - i)/(i + 1);\n    }\n    return catalan_number;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n184756\n\nshould loosely deep-equal\n\n16796\n    at test (/tmp/tmp4p_aoddw.js:15:10)\n    at Object.<anonymous> (/tmp/tmp4p_aoddw.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 184756,\n  expected: 16796,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan = [];\n    catalan[0] = catalan[1] = 1;\n    for(var i = 2; i <= num; i++){\n        catalan[i] = 0;\n        for(var j = 0; j < i; j++){\n            catalan[i] += catalan[j] * catalan[i - j - 1];\n        }\n    }\n    return catalan[num];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan = [];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for(var i = 2; i <= num; i++){\n        catalan[i] = 0;\n        for(var j = 0; j < i; j++){\n            catalan[i] += catalan[j] * catalan[i - j - 1];\n        }\n    }\n    return catalan[num];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan_number = 1;\n    for(var i=0;i<num;i++){\n        catalan_number = catalan_number*(2*num-i)/(i+1);\n    }\n    return catalan_number;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n184756\n\nshould loosely deep-equal\n\n16796\n    at test (/tmp/tmpb3uc_m9x.js:14:10)\n    at Object.<anonymous> (/tmp/tmpb3uc_m9x.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 184756,\n  expected: 16796,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var c = 1;\n    for(var i = 0; i < num; i++){\n        c = c * (2*num - i)/(i + 1);\n    }\n    return c;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n184756\n\nshould loosely deep-equal\n\n16796\n    at test (/tmp/tmpk2qitjlr.js:15:10)\n    at Object.<anonymous> (/tmp/tmpk2qitjlr.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 184756,\n  expected: 16796,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1)\n        return 1;\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num<=1){\n        return 1;\n    }\n    var res=0;\n    for(var i=0;i<num;i++){\n        res+=catalan_number(i)*catalan_number(num-i-1);\n    }\n    return res;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1) return 1;\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1) return 1;\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num-i-1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan = [];\n    catalan[0] = catalan[1] = 1;\n    for(var i = 2; i <= num; i++){\n        catalan[i] = 0;\n        for(var j = 0; j < i; j++){\n            catalan[i] += catalan[j] * catalan[i - j - 1];\n        }\n    }\n    return catalan[num];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan_number = 1;\n    for(var i = 2; i <= num; i++){\n        catalan_number *= (num + i)/i;\n    }\n    return catalan_number;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n428.99999999999994\n\nshould loosely deep-equal\n\n429\n    at test (/tmp/tmpsews5tle.js:17:10)\n    at Object.<anonymous> (/tmp/tmpsews5tle.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 428.99999999999994,\n  expected: 429,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan = [];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for(var i = 2; i <= num; i++){\n        catalan[i] = 0;\n        for(var j = 0; j < i; j++){\n            catalan[i] += catalan[j] * catalan[i - j - 1];\n        }\n    }\n    return catalan[num];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num == 0){\n        return 1;\n    }\n    var sum = 0;\n    for(var i = 0; i < num; i++){\n        sum += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan = [];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for(var i = 2; i <= num; i++){\n        catalan[i] = 0;\n        for(var j = 0; j < i; j++){\n            catalan[i] += catalan[j] * catalan[i - j - 1];\n        }\n    }\n    return catalan[num];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num == 0){\n        return 1;\n    }\n    var sum = 0;\n    for(var i = 0; i < num; i++){\n        sum += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan = [];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for(var i = 2; i <= num; i++){\n        catalan[i] = 0;\n        for(var j = 0; j < i; j++){\n            catalan[i] = catalan[i] + catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var result = 0;\n    for(var i = 0; i < num; i++){\n        result += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var c = 1;\n    for(var i=0;i<num;i++){\n        c = c * (2*num - i)/(i+1);\n    }\n    return c;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n184756\n\nshould loosely deep-equal\n\n16796\n    at test (/tmp/tmphf2b0wtp.js:14:10)\n    at Object.<anonymous> (/tmp/tmphf2b0wtp.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 184756,\n  expected: 16796,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    var catalan = [];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for(var i=2; i<=num; i++){\n        catalan[i] = 0;\n        for(var j=0; j<i; j++){\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num<=1){\n        return 1;\n    }\n    var res=0;\n    for(var i=0;i<num;i++){\n        res+=catalan_number(i)*catalan_number(num-i-1);\n    }\n    return res;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which returns nth catalan number.\nfunction catalan_number(num){\n    if(num <= 1){\n        return 1;\n    }\n    var res = 0;\n    for(var i = 0; i < num; i++){\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = catalan_number;\n  assert.deepEqual(candidate(10),16796);\n  assert.deepEqual(candidate(9),4862);\n  assert.deepEqual(candidate(7),429);\n}\n\ntest();",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}