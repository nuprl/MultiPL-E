{
  "name": "mbpp_799_left_rotate",
  "language": "js",
  "prompt": "//Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate(n, d){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_rotate;\n  assert.deepEqual(candidate(16, 2),64);\n  assert.deepEqual(candidate(10, 2),40);\n  assert.deepEqual(candidate(99, 3),792);\n  assert.deepEqual(candidate(99, 3),792);\n  assert.deepEqual(candidate(1, 3),8);\n  assert.deepEqual(candidate(5, 3),40);\n  assert.deepEqual(candidate(29, 3),232);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    return ((n << d) | (n >> (32 - d)));\n}\n",
    "    var result = 0;\n    var mask = 0xFFFFFFFF;\n    var mask_d = 0xFFFFFFFF << d;\n    var mask_32_d = 0xFFFFFFFF >>> (32 - d);\n    var n_mask_d = n & mask_d;\n    var n_mask_32_d = n & mask_32_d;\n    result = (n_mask_d >>> d) | (n_mask_32_d << (32 - d));\n    return result;\n}\n",
    "    var a = n.toString(2);\n    var b = a.slice(d);\n    var c = a.slice(0, d);\n    return parseInt(b+c, 2);\n}\n",
    "    var result = n << d;\n    result = result | (n >> (32 - d));\n    return result;\n}\n",
    "\treturn (n << d) | (n >> (32 - d));\n}\n",
    "    var a = n.toString(2);\n    var b = a.slice(d);\n    var c = a.slice(0,d);\n    var d = b+c;\n    var e = parseInt(d, 2);\n    return e;\n}\n",
    "\tvar left_rotate = (n << d) | (n >> (32 - d));\n\treturn left_rotate;\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    var result = (n << d) | (n >> (32 - d));\n    return result;\n}\n",
    "    var a = n.toString(2);\n    var b = a.slice(d) + a.slice(0, d);\n    return parseInt(b, 2);\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    var a = n.toString(2);\n    var b = a.slice(d, a.length);\n    var c = a.slice(0, d);\n    var d = b + c;\n    return parseInt(d, 2);\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "\treturn (n << d) | (n >> (32 - d));\n}\n",
    "    var bits = 32;\n    var mask = (1 << bits) - 1;\n    return ((n << d) & mask) | (n >> (bits - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "  var a = n.toString(2);\n  var b = a.slice(d);\n  var c = a.slice(0,d);\n  var d = b+c;\n  return parseInt(d,2);\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "\treturn (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n"
  ]
}