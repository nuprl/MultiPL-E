{
  "name": "mbpp_308_large_product",
  "language": "js",
  "prompt": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_308_large_product.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let result = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            result.push(nums1[i] * nums2[j]);\n        }\n    }\n    result.sort((a, b) => b - a);\n    return result.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a, b){\n        return b - a;\n    });\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var result = [];\n    var max = 0;\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            var product = nums1[i] * nums2[j];\n            if(result.length < N){\n                result.push(product);\n            }else{\n                result.sort(function(a, b){return a - b});\n                if(product > result[0]){\n                    result[0] = product;\n                }\n            }\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  50,\n  54,\n  60\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpmd_ui913.js:26:10)\n    at Object.<anonymous> (/tmp/tmpmd_ui913.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 50, 54, 60 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  let products = [];\n  for(let i = 0; i < nums1.length; i++){\n    for(let j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort((a, b) => b - a);\n  return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let result = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            result.push(nums1[i] * nums2[j]);\n        }\n    }\n    result.sort((a, b) => b - a);\n    return result.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  let products = [];\n  for(let i = 0; i < nums1.length; i++){\n    for(let j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort((a, b) => b - a);\n  return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  var products = [];\n  for(var i = 0; i < nums1.length; i++){\n    for(var j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort(function(a, b){return b - a});\n  return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a, b){\n        return b - a;\n    });\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  let products = [];\n  for(let i = 0; i < nums1.length; i++){\n    for(let j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort((a, b) => b - a);\n  return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a, b){return b - a});\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let max_products = [];\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    for(let i = 0; i < N; i++){\n        max_products.push(products[i]);\n    }\n    return max_products;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a, b){return b - a});\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  var products = [];\n  for(var i = 0; i < nums1.length; i++){\n    for(var j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort(function(a, b){\n    return b - a;\n  });\n  return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  var result = [];\n  for(var i = 0; i < N; i++){\n    var max = 0;\n    var max_index = 0;\n    for(var j = 0; j < nums1.length; j++){\n      for(var k = 0; k < nums2.length; k++){\n        var product = nums1[j] * nums2[k];\n        if(product > max){\n          max = product;\n          max_index = [j, k];\n        }\n      }\n    }\n    result.push(max);\n    nums1.splice(max_index[0], 1);\n    nums2.splice(max_index[1], 1);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpp40mpiat.js:28:10)\n    at Object.<anonymous> (/tmp/tmpp40mpiat.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var arr = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            arr.push(nums1[i] * nums2[j]);\n        }\n    }\n    arr.sort(function(a, b){return b - a});\n    return arr.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  var products = [];\n  for (var i = 0; i < nums1.length; i++){\n    for (var j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort(function(a, b){return b - a});\n  return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a, b){return b - a});\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  var products = [];\n  for(var i = 0; i < nums1.length; i++){\n    for(var j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort(function(a, b){return b - a});\n  return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  let arr = [];\n  for(let i = 0; i < nums1.length; i++){\n    for(let j = 0; j < nums2.length; j++){\n      arr.push(nums1[i] * nums2[j]);\n    }\n  }\n  arr.sort((a,b) => b - a);\n  return arr.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  var result = [];\n  for(var i = 0; i < N; i++){\n    var max = 0;\n    var max_index = 0;\n    for(var j = 0; j < nums1.length; j++){\n      for(var k = 0; k < nums2.length; k++){\n        if(nums1[j] * nums2[k] > max){\n          max = nums1[j] * nums2[k];\n          max_index = [j, k];\n        }\n      }\n    }\n    result.push(max);\n    nums1.splice(max_index[0], 1);\n    nums2.splice(max_index[1], 1);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpishhh6il.js:27:10)\n    at Object.<anonymous> (/tmp/tmpishhh6il.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a, b){\n        return b - a;\n    });\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  var products = [];\n  for(var i = 0; i < nums1.length; i++){\n    for(var j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort(function(a, b){return b - a});\n  return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a, b){\n        return b - a;\n    });\n    return products.slice(0, N);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  var products = [];\n  for(var i = 0; i < nums1.length; i++){\n    for(var j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort(function(a, b){\n    return b - a;\n  });\n  return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  var products = [];\n  for(var i = 0; i < nums1.length; i++){\n    for(var j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort(function(a,b){return b-a});\n  return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a, b){\n        return b - a;\n    });\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n\tvar result = [];\n\tfor(var i = 0; i < nums1.length; i++){\n\t\tfor(var j = 0; j < nums2.length; j++){\n\t\t\tresult.push(nums1[i] * nums2[j]);\n\t\t}\n\t}\n\tresult.sort(function(a, b){\n\t\treturn b - a;\n\t});\n\treturn result.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  var result = [];\n  var sorted1 = nums1.sort(function(a, b){return b-a});\n  var sorted2 = nums2.sort(function(a, b){return b-a});\n  for(var i = 0; i < N; i++){\n    result.push(sorted1[i] * sorted2[i]);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpa9ar3lzb.js:17:10)\n    at Object.<anonymous> (/tmp/tmpa9ar3lzb.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a, b){return b - a});\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a,b){return b-a});\n    return products.slice(0,N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a, b){\n        return b - a;\n    });\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  let products = [];\n  for(let i = 0; i < nums1.length; i++){\n    for(let j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort((a, b) => b - a);\n  return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var result = [];\n    for(var i = 0; i < N; i++){\n        var max1 = Math.max(...nums1);\n        var max2 = Math.max(...nums2);\n        result.push(max1 * max2);\n        nums1.splice(nums1.indexOf(max1), 1);\n        nums2.splice(nums2.indexOf(max2), 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmp5wjy1xrd.js:19:10)\n    at Object.<anonymous> (/tmp/tmp5wjy1xrd.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let arr = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            arr.push(nums1[i] * nums2[j]);\n        }\n    }\n    arr.sort((a, b) => b - a);\n    return arr.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  let products = [];\n  for(let i = 0; i < nums1.length; i++){\n    for(let j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort((a, b) => b - a);\n  return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let result = [];\n    for(let i = 0; i < N; i++){\n        let max1 = Math.max(...nums1);\n        let max2 = Math.max(...nums2);\n        result.push(max1 * max2);\n        nums1.splice(nums1.indexOf(max1), 1);\n        nums2.splice(nums2.indexOf(max2), 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpf1z5o4__.js:19:10)\n    at Object.<anonymous> (/tmp/tmpf1z5o4__.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a, b){return b-a});\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a,b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  var products = [];\n  for(var i = 0; i < nums1.length; i++){\n    for(var j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort(function(a, b){\n    return b - a;\n  });\n  return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var result = [];\n    for(var i = 0; i < N; i++){\n        var max1 = Math.max.apply(null, nums1);\n        var max2 = Math.max.apply(null, nums2);\n        result.push(max1 * max2);\n        nums1.splice(nums1.indexOf(max1), 1);\n        nums2.splice(nums2.indexOf(max2), 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpzedih8fs.js:19:10)\n    at Object.<anonymous> (/tmp/tmpzedih8fs.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    return products.sort(function(a, b){return b - a}).slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a, b){\n        return b - a;\n    });\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var nums1 = nums1.sort((a,b)=>b-a);\n    var nums2 = nums2.sort((a,b)=>b-a);\n    var result = [];\n    for(var i = 0; i < N; i++){\n        result.push(nums1[i]*nums2[i]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpmvifmhwj.js:17:10)\n    at Object.<anonymous> (/tmp/tmpmvifmhwj.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a, b){\n        return b - a;\n    });\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var result = [];\n    var temp = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            temp.push(nums1[i] * nums2[j]);\n        }\n    }\n    temp.sort(function(a, b){\n        return b - a;\n    });\n    for(var k = 0; k < N; k++){\n        result.push(temp[k]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  var products = [];\n  for(var i = 0; i < nums1.length; i++){\n    for(var j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort(function(a, b){\n    return b - a;\n  });\n  return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a, b){\n        return b - a;\n    });\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var result = [];\n    var max = 0;\n    var max_index = 0;\n    for(var i = 0; i < N; i++){\n        max = 0;\n        max_index = 0;\n        for(var j = 0; j < nums1.length; j++){\n            if(nums1[j] > max){\n                max = nums1[j];\n                max_index = j;\n            }\n        }\n        nums1[max_index] = 0;\n        max = 0;\n        max_index = 0;\n        for(var k = 0; k < nums2.length; k++){\n            if(nums2[k] > max){\n                max = nums2[k];\n                max_index = k;\n            }\n        }\n        nums2[max_index] = 0;\n        result.push(max * max);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  100,\n  81,\n  64\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpexpjsq0x.js:35:10)\n    at Object.<anonymous> (/tmp/tmpexpjsq0x.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 100, 81, 64 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  var products = [];\n  for(var i = 0; i < nums1.length; i++){\n    for(var j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort(function(a, b){\n    return b - a;\n  });\n  return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var result = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            result.push(nums1[i] * nums2[j]);\n        }\n    }\n    result.sort(function(a, b){return b - a});\n    return result.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  var products = [];\n  for(var i = 0; i < nums1.length; i++){\n    for(var j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort(function(a, b){\n    return b - a;\n  });\n  return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  var products = [];\n  for(var i = 0; i < nums1.length; i++){\n    for(var j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort(function(a, b){return b-a});\n  return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  var products = [];\n  for(var i = 0; i < nums1.length; i++){\n    for(var j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort(function(a, b){return b - a});\n  return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a, b){\n        return b - a;\n    });\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a,b){return b-a});\n    return products.slice(0,N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let result = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            result.push(nums1[i] * nums2[j]);\n        }\n    }\n    result.sort((a, b) => b - a);\n    return result.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var result = [];\n    for(var i = 0; i < N; i++){\n        var max1 = Math.max.apply(null, nums1);\n        var max2 = Math.max.apply(null, nums2);\n        result.push(max1 * max2);\n        nums1.splice(nums1.indexOf(max1), 1);\n        nums2.splice(nums2.indexOf(max2), 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpzedih8fs.js:19:10)\n    at Object.<anonymous> (/tmp/tmpzedih8fs.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var result = [];\n    var max = 0;\n    var max_index = 0;\n    for(var i = 0; i < N; i++){\n        for(var j = 0; j < nums1.length; j++){\n            if(nums1[j] > max){\n                max = nums1[j];\n                max_index = j;\n            }\n        }\n        nums1[max_index] = 0;\n        max = 0;\n        for(var k = 0; k < nums2.length; k++){\n            if(nums2[k] > max){\n                max = nums2[k];\n                max_index = k;\n            }\n        }\n        result.push(nums1[max_index] * nums2[max_index]);\n        nums2[max_index] = 0;\n        max = 0;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  50,\n  36,\n  24\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpazqnwyah.js:33:10)\n    at Object.<anonymous> (/tmp/tmpazqnwyah.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 50, 36, 24 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a, b){return b - a});\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a, b){\n        return b - a;\n    });\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  var arr = [];\n  for(var i = 0; i < nums1.length; i++){\n    for(var j = 0; j < nums2.length; j++){\n      arr.push(nums1[i] * nums2[j]);\n    }\n  }\n  arr.sort(function(a, b){\n    return b - a;\n  });\n  return arr.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a, b){return b - a});\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  var products = [];\n  for(var i = 0; i < nums1.length; i++){\n    for(var j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort(function(a, b){return b - a});\n  return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n\tvar products = [];\n\tfor(var i = 0; i < nums1.length; i++){\n\t\tfor(var j = 0; j < nums2.length; j++){\n\t\t\tproducts.push(nums1[i] * nums2[j]);\n\t\t}\n\t}\n\tproducts.sort(function(a, b){return b - a});\n\treturn products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  var products = [];\n  for(var i = 0; i < nums1.length; i++){\n    for(var j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort(function(a, b){return b - a});\n  return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a, b){return b - a});\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a, b){\n        return b - a;\n    });\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let result = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            result.push(nums1[i] * nums2[j]);\n        }\n    }\n    result.sort((a, b) => b - a);\n    return result.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a, b){return b - a});\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  let products = [];\n  for (let i = 0; i < nums1.length; i++){\n    for (let j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  return products.sort((a, b) => b - a).slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => a - b);\n    return products[products.length - N];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n50\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmp0copgaa0.js:17:10)\n    at Object.<anonymous> (/tmp/tmp0copgaa0.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 50,\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  var products = [];\n  for(var i = 0; i < nums1.length; i++){\n    for(var j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort(function(a, b){return b - a});\n  return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a, b){\n        return b - a;\n    });\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  var products = [];\n  for(var i = 0; i < nums1.length; i++){\n    for(var j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort(function(a, b){return b - a});\n  return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  var products = [];\n  for(var i = 0; i < nums1.length; i++){\n    for(var j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort(function(a, b){return b-a});\n  var largest = [];\n  for(var k = 0; k < N; k++){\n    largest.push(products[k]);\n  }\n  return largest;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a, b){\n        return b - a;\n    });\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  var products = [];\n  for(var i = 0; i < nums1.length; i++){\n    for(var j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort(function(a, b){\n    return b - a;\n  });\n  return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a, b){\n        return b - a;\n    });\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n\tvar products = [];\n\tfor(var i = 0; i < nums1.length; i++){\n\t\tfor(var j = 0; j < nums2.length; j++){\n\t\t\tproducts.push(nums1[i] * nums2[j]);\n\t\t}\n\t}\n\tproducts.sort(function(a, b){\n\t\treturn b - a;\n\t});\n\treturn products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let max = 0;\n    let max_i = 0;\n    let max_j = 0;\n    let res = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            if(nums1[i] * nums2[j] > max){\n                max = nums1[i] * nums2[j];\n                max_i = i;\n                max_j = j;\n            }\n        }\n    }\n    res.push(max_i);\n    res.push(max_j);\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpyd3ijcqw.js:26:10)\n    at Object.<anonymous> (/tmp/tmpyd3ijcqw.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  var products = [];\n  for(var i = 0; i < nums1.length; i++){\n    for(var j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort(function(a, b){return b - a});\n  return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  var products = [];\n  for(var i = 0; i < nums1.length; i++){\n    for(var j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort(function(a, b){\n    return b - a;\n  });\n  return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a, b){return b-a});\n    return products.slice(0, N);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a,b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  var products = [];\n  for(var i = 0; i < nums1.length; i++){\n    for(var j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort(function(a, b){return b - a});\n  return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a,b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var nums1 = nums1.sort((a,b) => b-a);\n    var nums2 = nums2.sort((a,b) => b-a);\n    var result = [];\n    for(var i = 0; i < N; i++){\n        result.push(nums1[i] * nums2[i]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpkprmq307.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkprmq307.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  var products = [];\n  for(var i = 0; i < nums1.length; i++){\n    for(var j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort(function(a, b){\n    return b - a;\n  });\n  return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let result = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            result.push(nums1[i] * nums2[j]);\n        }\n    }\n    result.sort((a,b) => b - a);\n    return result.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var nums1 = nums1.sort(function(a, b){return b-a});\n    var nums2 = nums2.sort(function(a, b){return b-a});\n    var result = [];\n    for(var i = 0; i < N; i++){\n        result.push(nums1[i] * nums2[i]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmp9ih9ky7p.js:17:10)\n    at Object.<anonymous> (/tmp/tmp9ih9ky7p.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  var products = [];\n  for(var i = 0; i < nums1.length; i++){\n    for(var j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort(function(a, b){\n    return b - a;\n  });\n  return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  var products = [];\n  for(var i = 0; i < nums1.length; i++){\n    for(var j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort(function(a,b){\n    return b - a;\n  });\n  return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  var products = [];\n  for(var i = 0; i < nums1.length; i++){\n    for(var j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort(function(a, b){\n    return b - a;\n  });\n  return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a, b){return b - a});\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  var products = [];\n  for(var i = 0; i < nums1.length; i++){\n    for(var j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort(function(a, b){return b - a});\n  return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var result = [];\n    for(var i = 0; i < N; i++){\n        var max1 = Math.max.apply(null, nums1);\n        var max2 = Math.max.apply(null, nums2);\n        result.push(max1 * max2);\n        nums1.splice(nums1.indexOf(max1), 1);\n        nums2.splice(nums2.indexOf(max2), 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpzedih8fs.js:19:10)\n    at Object.<anonymous> (/tmp/tmpzedih8fs.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  let products = [];\n  for(let i = 0; i < nums1.length; i++){\n    for(let j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort((a, b) => b - a);\n  return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a, b){return b - a});\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let result = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            result.push(nums1[i] * nums2[j]);\n        }\n    }\n    result.sort((a, b) => b - a);\n    return result.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a, b){return b - a});\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n\tvar products = [];\n\tfor(var i = 0; i < nums1.length; i++){\n\t\tfor(var j = 0; j < nums2.length; j++){\n\t\t\tproducts.push(nums1[i] * nums2[j]);\n\t\t}\n\t}\n\tproducts.sort(function(a, b){return b - a});\n\treturn products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var result = [];\n    var max = 0;\n    var max_index = 0;\n    var max_index2 = 0;\n    for(var i = 0; i < N; i++){\n        for(var j = 0; j < nums1.length; j++){\n            for(var k = 0; k < nums2.length; k++){\n                if(nums1[j] * nums2[k] > max){\n                    max = nums1[j] * nums2[k];\n                    max_index = j;\n                    max_index2 = k;\n                }\n            }\n        }\n        result.push(max);\n        nums1.splice(max_index, 1);\n        nums2.splice(max_index2, 1);\n        max = 0;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmp6fgmhoqt.js:30:10)\n    at Object.<anonymous> (/tmp/tmp6fgmhoqt.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a, b){return b - a});\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  let products = [];\n  for(let i = 0; i < nums1.length; i++){\n    for(let j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort((a, b) => b - a);\n  return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var result = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            result.push(nums1[i] * nums2[j]);\n        }\n    }\n    result.sort(function(a, b){return b - a});\n    return result.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  var products = [];\n  for(var i = 0; i < nums1.length; i++){\n    for(var j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort(function(a, b){return b-a});\n  return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a, b){return b - a});\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  var products = [];\n  for(var i = 0; i < nums1.length; i++){\n    for(var j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort(function(a, b){\n    return b - a;\n  });\n  return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a, b){\n        return b - a;\n    });\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var result = [];\n    for(var i = 0; i < N; i++){\n        var max1 = Math.max.apply(null, nums1);\n        var max2 = Math.max.apply(null, nums2);\n        result.push(max1 * max2);\n        nums1.splice(nums1.indexOf(max1), 1);\n        nums2.splice(nums2.indexOf(max2), 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpzedih8fs.js:19:10)\n    at Object.<anonymous> (/tmp/tmpzedih8fs.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  var products = [];\n  for(var i = 0; i < nums1.length; i++){\n    for(var j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort(function(a, b){\n    return b - a;\n  });\n  return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  var products = [];\n  for(var i = 0; i < nums1.length; i++){\n    for(var j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort(function(a, b){\n    return b - a;\n  });\n  return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let result = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            result.push(nums1[i] * nums2[j]);\n        }\n    }\n    result.sort((a, b) => b - a);\n    return result.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a, b){return b - a});\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let result = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            result.push(nums1[i] * nums2[j]);\n        }\n    }\n    result.sort((a, b) => b - a);\n    return result.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  var products = [];\n  for(var i = 0; i < nums1.length; i++){\n    for(var j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort(function(a, b){\n    return b - a;\n  });\n  return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a, b){return b - a});\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a, b){\n        return b - a;\n    });\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for (let i = 0; i < nums1.length; i++){\n        for (let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  var products = [];\n  for(var i = 0; i < nums1.length; i++){\n    for(var j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort(function(a, b){\n    return b - a;\n  });\n  return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var max = 0;\n    var result = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            var product = nums1[i] * nums2[j];\n            if(product > max){\n                max = product;\n                result.push(product);\n            }\n        }\n    }\n    return result.sort(function(a, b){return b - a}).slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  54,\n  50,\n  45\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50,\n  48\n]\n    at test (/tmp/tmp7sftjdup.js:23:10)\n    at Object.<anonymous> (/tmp/tmp7sftjdup.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 54, 50, 45 ],\n  expected: [ 60, 54, 50, 48 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let result = [];\n    for (let i = 0; i < N; i++){\n        let max = 0;\n        let max_index = 0;\n        for (let j = 0; j < nums1.length; j++){\n            if (nums1[j] > max){\n                max = nums1[j];\n                max_index = j;\n            }\n        }\n        nums1[max_index] = 0;\n        max = 0;\n        for (let j = 0; j < nums2.length; j++){\n            if (nums2[j] > max){\n                max = nums2[j];\n            }\n        }\n        result.push(max * max_index);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  50,\n  40,\n  30\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmphy0pc366.js:30:10)\n    at Object.<anonymous> (/tmp/tmphy0pc366.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 50, 40, 30 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  var products = [];\n  for(var i = 0; i < nums1.length; i++){\n    for(var j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort(function(a, b){return a - b});\n  return products[products.length - N];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n50\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmp7m4ndoej.js:18:10)\n    at Object.<anonymous> (/tmp/tmp7m4ndoej.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 50,\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a, b){\n        return b - a;\n    });\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let result = [];\n    for(let i = 0; i < N; i++){\n        let max1 = Math.max(...nums1);\n        let max2 = Math.max(...nums2);\n        result.push(max1 * max2);\n        nums1.splice(nums1.indexOf(max1), 1);\n        nums2.splice(nums2.indexOf(max2), 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpf1z5o4__.js:19:10)\n    at Object.<anonymous> (/tmp/tmpf1z5o4__.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a, b){return b - a});\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a,b){return b-a});\n    return products.slice(0,N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  var result = [];\n  for(var i = 0; i < nums1.length; i++){\n    for(var j = 0; j < nums2.length; j++){\n      result.push(nums1[i] * nums2[j]);\n    }\n  }\n  return result.sort(function(a, b){return b - a}).slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a,b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  var products = [];\n  for(var i = 0; i < nums1.length; i++){\n    for(var j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort(function(a,b){return a-b;});\n  return products.slice(products.length - N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  50,\n  54,\n  60\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmp96rmlthz.js:18:10)\n    at Object.<anonymous> (/tmp/tmp96rmlthz.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 50, 54, 60 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var result = [];\n    for(var i = 0; i < N; i++){\n        var max = 0;\n        var index = 0;\n        for(var j = 0; j < nums1.length; j++){\n            for(var k = 0; k < nums2.length; k++){\n                if(nums1[j] * nums2[k] > max){\n                    max = nums1[j] * nums2[k];\n                    index = [j, k];\n                }\n            }\n        }\n        result.push(max);\n        nums1.splice(index[0], 1);\n        nums2.splice(index[1], 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpmdbii8us.js:27:10)\n    at Object.<anonymous> (/tmp/tmpmdbii8us.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a, b){return b-a});\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var result = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            result.push(nums1[i] * nums2[j]);\n        }\n    }\n    result.sort(function(a, b){return b - a});\n    return result.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a, b){return a - b});\n    return products.slice(products.length - N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  50,\n  54,\n  60\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpo8x7t465.js:18:10)\n    at Object.<anonymous> (/tmp/tmpo8x7t465.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 50, 54, 60 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a,b){return b-a});\n    return products.slice(0,N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let result = [];\n    for(let i=0; i<nums1.length; i++){\n        for(let j=0; j<nums2.length; j++){\n            result.push(nums1[i]*nums2[j]);\n        }\n    }\n    result.sort((a,b)=>b-a);\n    return result.slice(0,N);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let result = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            result.push(nums1[i] * nums2[j]);\n        }\n    }\n    result.sort((a, b) => b - a);\n    return result.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  var products = [];\n  for(var i = 0; i < nums1.length; i++){\n    for(var j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort(function(a, b){return b - a});\n  return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  var products = [];\n  for(var i = 0; i < nums1.length; i++){\n    for(var j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort(function(a, b){return b - a});\n  return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var result = [];\n    for(var i = 0; i < N; i++){\n        var max = 0;\n        var max_index = 0;\n        for(var j = 0; j < nums1.length; j++){\n            for(var k = 0; k < nums2.length; k++){\n                if(nums1[j] * nums2[k] > max){\n                    max = nums1[j] * nums2[k];\n                    max_index = [j, k];\n                }\n            }\n        }\n        result.push(max);\n        nums1.splice(max_index[0], 1);\n        nums2.splice(max_index[1], 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpyygbm17w.js:27:10)\n    at Object.<anonymous> (/tmp/tmpyygbm17w.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var results = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            results.push(nums1[i] * nums2[j]);\n        }\n    }\n    return results.sort(function(a, b){return b - a}).slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  let products = [];\n  for(let i = 0; i < nums1.length; i++){\n    for(let j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort((a,b) => b - a);\n  return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  var products = [];\n  for(var i = 0; i < nums1.length; i++){\n    for(var j = 0; j < nums2.length; j++){\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort(function(a, b){return b-a});\n  return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n  var result = [];\n  for(var i = 0; i < nums1.length; i++){\n    for(var j = 0; j < nums2.length; j++){\n      result.push(nums1[i] * nums2[j]);\n    }\n  }\n  return result.sort(function(a, b){return b - a}).slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let result = [];\n    for(let i = 0; i < N; i++){\n        let max1 = Math.max(...nums1);\n        let max2 = Math.max(...nums2);\n        result.push(max1 * max2);\n        nums1.splice(nums1.indexOf(max1), 1);\n        nums2.splice(nums2.indexOf(max2), 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpf1z5o4__.js:19:10)\n    at Object.<anonymous> (/tmp/tmpf1z5o4__.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a, b){\n        return b - a;\n    });\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var result = [];\n    for(var i = 0; i < N; i++){\n        var max1 = Math.max.apply(null, nums1);\n        var max2 = Math.max.apply(null, nums2);\n        result.push(max1 * max2);\n        nums1.splice(nums1.indexOf(max1), 1);\n        nums2.splice(nums2.indexOf(max2), 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpzedih8fs.js:19:10)\n    at Object.<anonymous> (/tmp/tmpzedih8fs.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a, b){\n        return b - a;\n    });\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let result = [];\n    for(let i = 0; i < N; i++){\n        let max1 = Math.max(...nums1);\n        let max2 = Math.max(...nums2);\n        result.push(max1 * max2);\n        nums1.splice(nums1.indexOf(max1), 1);\n        nums2.splice(nums2.indexOf(max2), 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpf1z5o4__.js:19:10)\n    at Object.<anonymous> (/tmp/tmpf1z5o4__.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let products = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    let result = [];\n    for(let i = 0; i < N; i++){\n        let max = -Infinity;\n        let max_i = -1;\n        let max_j = -1;\n        for(let j = 0; j < nums1.length; j++){\n            for(let k = 0; k < nums2.length; k++){\n                if(nums1[j] * nums2[k] > max){\n                    max = nums1[j] * nums2[k];\n                    max_i = j;\n                    max_j = k;\n                }\n            }\n        }\n        result.push(max);\n        nums1[max_i] = -Infinity;\n        nums2[max_j] = -Infinity;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  Infinity,\n  Infinity\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpu_e2vxqt.js:29:10)\n    at Object.<anonymous> (/tmp/tmpu_e2vxqt.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, Infinity, Infinity ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1, nums2, N){\n    var products = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort(function(a, b){return b - a});\n    return products.slice(0, N);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}