{
  "name": "mbpp_623_nth_nums",
  "language": "js",
  "prompt": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_623_nth_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  return nums.map(function(num){\n    return Math.pow(num, n);\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  return nums.map(function(num){\n    return Math.pow(num, n);\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    var result = [];\n    for(var i = 0; i < nums.length; i++){\n        result.push(Math.pow(nums[i], n));\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(num => Math.pow(num, n));\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  return nums.map(function(num){\n    return Math.pow(num, n);\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  var new_nums = [];\n  for(var i = 0; i < nums.length; i++){\n    new_nums.push(Math.pow(nums[i], n));\n  }\n  return new_nums;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    var result = [];\n    for(var i = 0; i < nums.length; i++){\n        result.push(Math.pow(nums[i], n));\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(num => Math.pow(num, n));\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    var result = [];\n    for(var i = 0; i < nums.length; i++){\n        result.push(Math.pow(nums[i], n));\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  return nums.map(function(num){\n    return Math.pow(num, n);\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  var result = [];\n  for(var i = 0; i < nums.length; i++){\n    result.push(Math.pow(nums[i], n));\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    var result = [];\n    for(var i = 0; i < nums.length; i++){\n        result.push(Math.pow(nums[i], n));\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    var new_nums = [];\n    for(var i = 0; i < nums.length; i++){\n        new_nums.push(Math.pow(nums[i], n));\n    }\n    return new_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  return nums.map(function(num){\n    return Math.pow(num, n);\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    var result = [];\n    for(var i = 0; i < nums.length; i++){\n        result.push(Math.pow(nums[i], n));\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  return nums.map(function(num){\n    return Math.pow(num, n);\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  var result = [];\n  for(var i = 0; i < nums.length; i++){\n    result.push(Math.pow(nums[i], n));\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  return nums.map(function(num){\n    return Math.pow(num, n);\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  return nums.map(function(num){\n    return Math.pow(num, n);\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  return nums.map(function(num){\n    return Math.pow(num, n);\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  return nums.map(function(num){\n    return Math.pow(num, n);\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    var result = [];\n    for(var i = 0; i < nums.length; i++){\n        result.push(Math.pow(nums[i], n));\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  var new_nums = [];\n  for(var i = 0; i < nums.length; i++){\n    new_nums.push(Math.pow(nums[i], n));\n  }\n  return new_nums;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  return nums.map(function(num){\n    return Math.pow(num, n);\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  var new_nums = [];\n  for (var i = 0; i < nums.length; i++){\n    new_nums.push(Math.pow(nums[i], n));\n  }\n  return new_nums;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  return nums.map(function(num){\n    return Math.pow(num, n);\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  var result = [];\n  for(var i = 0; i < nums.length; i++){\n    result.push(Math.pow(nums[i], n));\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    var result = [];\n    for(var i = 0; i < nums.length; i++){\n        result.push(Math.pow(nums[i], n));\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  var new_nums = [];\n  for (var i = 0; i < nums.length; i++){\n    new_nums.push(Math.pow(nums[i], n));\n  }\n  return new_nums;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    var result = [];\n    for(var i = 0; i < nums.length; i++){\n        result.push(Math.pow(nums[i], n));\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  return nums.map(function(num){\n    return Math.pow(num, n);\n  })\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  return nums.map(function(num){\n    return Math.pow(num, n);\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    var new_nums = [];\n    for (var i = 0; i < nums.length; i++){\n        new_nums.push(Math.pow(nums[i], n));\n    }\n    return new_nums;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  var new_nums = [];\n  for (var i = 0; i < nums.length; i++){\n    new_nums.push(Math.pow(nums[i], n));\n  }\n  return new_nums;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  return nums.map(function(num){\n    return Math.pow(num, n);\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  return nums.map(function(num){\n    return Math.pow(num, n);\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    let result = [];\n    for(let i = 0; i < nums.length; i++){\n        result.push(Math.pow(nums[i], n));\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    var new_nums = [];\n    for(var i = 0; i < nums.length; i++){\n        new_nums.push(Math.pow(nums[i], n));\n    }\n    return new_nums;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    var new_nums = [];\n    for(var i = 0; i < nums.length; i++){\n        new_nums.push(Math.pow(nums[i], n));\n    }\n    return new_nums;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(x => Math.pow(x, n));\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  var new_nums = [];\n  for (var i = 0; i < nums.length; i++){\n    new_nums.push(Math.pow(nums[i], n));\n  }\n  return new_nums;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  return nums.map(function(num){\n    return Math.pow(num, n);\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    var result = [];\n    for(var i = 0; i < nums.length; i++){\n        result.push(Math.pow(nums[i], n));\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  return nums.map(function(num){\n    return Math.pow(num, n);\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  var result = [];\n  for(var i = 0; i < nums.length; i++){\n    result.push(Math.pow(nums[i], n));\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  var result = [];\n  for(var i = 0; i < nums.length; i++){\n    result.push(Math.pow(nums[i], n));\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  var new_nums = [];\n  for(var i = 0; i < nums.length; i++){\n    new_nums.push(Math.pow(nums[i], n));\n  }\n  return new_nums;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  return nums.map(function(num){\n    return Math.pow(num, n);\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  return nums.map(function(num){\n    return Math.pow(num, n);\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  return nums.map(function(num){\n    return Math.pow(num, n);\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n)\n    })\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    var result = [];\n    for(var i = 0; i < nums.length; i++){\n        result.push(Math.pow(nums[i], n));\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(num => Math.pow(num, n));\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  var new_nums = [];\n  for(var i = 0; i < nums.length; i++){\n    new_nums.push(Math.pow(nums[i], n));\n  }\n  return new_nums;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  return nums.map(function(num){\n    return Math.pow(num, n);\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    var result = [];\n    for(var i = 0; i < nums.length; i++){\n        result.push(Math.pow(nums[i], n));\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    var result = [];\n    for(var i = 0; i < nums.length; i++){\n        result.push(Math.pow(nums[i], n));\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  return nums.map(function(num){\n    return Math.pow(num, n);\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  return nums.map(function(num){\n    return Math.pow(num, n);\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    var new_nums = [];\n    for(var i = 0; i < nums.length; i++){\n        new_nums.push(Math.pow(nums[i], n));\n    }\n    return new_nums;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    var new_nums = [];\n    for (var i = 0; i < nums.length; i++){\n        new_nums.push(Math.pow(nums[i], n));\n    }\n    return new_nums;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    })\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    var result = [];\n    for(var i = 0; i < nums.length; i++){\n        result.push(Math.pow(nums[i], n));\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    var result = [];\n    for(var i = 0; i < nums.length; i++){\n        result.push(Math.pow(nums[i], n));\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    var result = [];\n    for(var i = 0; i < nums.length; i++){\n        result.push(Math.pow(nums[i], n));\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  return nums.map(function(num){\n    return Math.pow(num, n);\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  return nums.map(function(num){\n    return Math.pow(num, n);\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  var result = [];\n  for(var i = 0; i < nums.length; i++){\n    result.push(Math.pow(nums[i], n));\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  var result = [];\n  for (var i = 0; i < nums.length; i++){\n    result.push(Math.pow(nums[i], n));\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  return nums.map(function(num){\n    return Math.pow(num, n);\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  var result = [];\n  for (var i = 0; i < nums.length; i++){\n    result.push(Math.pow(nums[i], n));\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    var result = [];\n    for(var i = 0; i < nums.length; i++){\n        result.push(Math.pow(nums[i], n));\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  return nums.map(function(num){\n    return Math.pow(num, n);\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  return nums.map(function(num){\n    return Math.pow(num, n);\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  var new_nums = [];\n  for (var i = 0; i < nums.length; i++){\n    new_nums.push(Math.pow(nums[i], n));\n  }\n  return new_nums;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  var new_nums = [];\n  for(var i = 0; i < nums.length; i++){\n    new_nums.push(Math.pow(nums[i], n));\n  }\n  return new_nums;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  return nums.map(function(num){\n    return Math.pow(num, n);\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  var result = [];\n  for(var i = 0; i < nums.length; i++){\n    result.push(Math.pow(nums[i], n));\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  var result = [];\n  for(var i = 0; i < nums.length; i++){\n    result.push(Math.pow(nums[i], n));\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(x => Math.pow(x, n));\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    var result = [];\n    for(var i = 0; i < nums.length; i++){\n        result.push(Math.pow(nums[i], n));\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  return nums.map(function(num){\n    return Math.pow(num, n);\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    var result = [];\n    for(var i = 0; i < nums.length; i++){\n        result.push(Math.pow(nums[i], n));\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    var new_nums = [];\n    for(var i = 0; i < nums.length; i++){\n        new_nums.push(Math.pow(nums[i], n));\n    }\n    return new_nums;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  return nums.map(function(num){\n    return Math.pow(num, n);\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  return nums.map(function(num){\n    return Math.pow(num, n);\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    var result = [];\n    for(var i = 0; i < nums.length; i++){\n        result.push(Math.pow(nums[i], n));\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  return nums.map(function(num){\n    return Math.pow(num, n);\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  return nums.map(function(num){\n    return Math.pow(num, n);\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    var result = [];\n    for (var i = 0; i < nums.length; i++){\n        result.push(Math.pow(nums[i], n));\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    var result = [];\n    for(var i = 0; i < nums.length; i++){\n        result.push(Math.pow(nums[i], n));\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n    return nums.map(function(num){\n        return Math.pow(num, n);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to compute the n-th power of each number in a list.\nfunction nth_nums(nums, n){\n  var new_nums = [];\n  for (var i = 0; i < nums.length; i++){\n    new_nums.push(Math.pow(nums[i], n));\n  }\n  return new_nums;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}