{
  "name": "mbpp_785_tuple_str_int",
  "language": "js",
  "prompt": "//Write a function to convert tuple string to integer tuple.\nfunction tuple_str_int(test_str){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_785_tuple_str_int.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tuple_str_int;\n  assert.deepEqual(candidate(\"(7, 8, 9)\"),[7, 8, 9]);\n  assert.deepEqual(candidate(\"(1, 2, 3)\"),[1, 2, 3]);\n  assert.deepEqual(candidate(\"(4, 5, 6)\"),[4, 5, 6]);\n  assert.deepEqual(candidate(\"(7, 81, 19)\"),[7, 81, 19]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var res = test_str.split(\",\");\n    var res_int = res.map(Number);\n    return res_int;\n}\nvar test_str = \"1, 2, 3, 4\";",
    "    var test_tuple = test_str.split(\",\");\n    var test_tuple_int = test_tuple.map(Number);\n    return test_tuple_int;\n}",
    "    var res = test_str.split(\",\"); \n    var tuple = []; \n    for (var i = 0; i < res.length; i++) { \n        tuple.push(parseInt(res[i])); \n    } \n    return tuple; \n}",
    "    var res = test_str.split(\",\");\n    var tuple = [];\n    for (var i = 0; i < res.length; i++){\n        tuple.push(parseInt(res[i]));\n    }\n    return tuple;\n}\n",
    "    var res = test_str.split(\",\");\n    var tuple = [];\n    for (var i = 0; i < res.length; i++) {\n        tuple.push(parseInt(res[i]));\n    }\n    return tuple;\n}",
    "    var res = test_str.split(\",\");\n    var tuple = [];\n    for (var i = 0; i < res.length; i++) {\n        tuple.push(parseInt(res[i]));\n    }\n    return tuple;\n}",
    "    var res = test_str.split(\",\");\n    var tuple = [];\n    for (var x=0; x<res.length; x++){\n        tuple.push(parseInt(res[x]));\n    }\n    return tuple;\n}",
    "    var test_tuple = test_str.split(\",\");\n    var test_tuple_int = test_tuple.map(Number);\n    return test_tuple_int;\n}",
    "    var test_tuple = test_str.split(\",\");\n    var test_tuple_int = test_tuple.map(Number);\n    return test_tuple_int;\n}",
    "    var res = test_str.split(\",\"); \n    var tuple = []; \n    for (var i = 0; i < res.length; i++) { \n        tuple.push(parseInt(res[i])); \n    } \n    return tuple; \n}",
    "    var res = test_str.split(\",\");\n    var tuple = [];\n    for (var i = 0; i < res.length; i++){\n        tuple.push(parseInt(res[i]));\n    }\n    return tuple;\n}",
    "    var test_tuple = test_str.split(\",\");\n    var test_tuple_int = test_tuple.map(Number);\n    return test_tuple_int;\n}",
    "    var test_tuple = test_str.split(\",\");\n    var test_tuple_int = test_tuple.map(Number);\n    return test_tuple_int;\n}",
    "    var res = test_str.split(\",\");\n    var tuple = [];\n    for (var i = 0; i < res.length; i++) {\n        tuple.push(parseInt(res[i]));\n    }\n    return tuple;\n}",
    "    var test_tuple = test_str.split(\",\");\n    var test_tuple_int = test_tuple.map(Number);\n    return test_tuple_int;\n}",
    "    var test_tuple = test_str.split(\",\");\n    var test_tuple_int = test_tuple.map(Number);\n    return test_tuple_int;\n}",
    "    var test_tuple = test_str.split(\",\");\n    var test_tuple_int = [];\n    for (var i = 0; i < test_tuple.length; i++){\n        test_tuple_int.push(parseInt(test_tuple[i]));\n    }\n    return test_tuple_int;\n}",
    "    var res = test_str.split(\",\");\n    var tuple = [];\n    for (var x = 0; x < res.length; x++) {\n        tuple.push(parseInt(res[x]));\n    }\n    return tuple;\n}",
    "    var res = test_str.split(\",\"); \n    var tuple = []; \n    for (var i = 0; i < res.length; i++) { \n        tuple.push(parseInt(res[i])); \n    } \n    return tuple; \n}",
    "    var res = test_str.split(\",\");\n    var tuple = [];\n    for(var i = 0; i < res.length; i++){\n        tuple.push(parseInt(res[i]));\n    }\n    return tuple;\n}"
  ]
}