{
  "name": "mbpp_301_dict_depth",
  "language": "js",
  "prompt": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_301_dict_depth.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var max = 0;\n    for(var k in d){\n        if(typeof d[k] == \"object\"){\n            var depth = dict_depth(d[k]) + 1;\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp14z4ab_7.js:20:10)\n    at Object.<anonymous> (/tmp/tmp14z4ab_7.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var depth = 1;\n    for(var key in d){\n        if(typeof d[key] == \"object\"){\n            var depth2 = dict_depth(d[key]) + 1;\n            if(depth2 > depth){\n                depth = depth2;\n            }\n        }\n    }\n    return depth;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n  var max = 0;\n  for(var k in d){\n    if(typeof d[k] == \"object\"){\n      var depth = dict_depth(d[k]) + 1;\n      if(depth > max){\n        max = depth;\n      }\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp14ltd3zg.js:20:10)\n    at Object.<anonymous> (/tmp/tmp14ltd3zg.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var depth = 0;\n    for(var key in d){\n        if(typeof(d[key]) == \"object\"){\n            var depth2 = dict_depth(d[key]) + 1;\n            if(depth2 > depth){\n                depth = depth2;\n            }\n        }\n    }\n    return depth;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp8mbx7j5w.js:20:10)\n    at Object.<anonymous> (/tmp/tmp8mbx7j5w.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n\tvar max = 0;\n\tfor(var key in d){\n\t\tif(typeof d[key] == \"object\"){\n\t\t\tvar depth = dict_depth(d[key]) + 1;\n\t\t\tif(depth > max){\n\t\t\t\tmax = depth;\n\t\t\t}\n\t\t}\n\t}\n\treturn max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpucpc_jmj.js:20:10)\n    at Object.<anonymous> (/tmp/tmpucpc_jmj.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === {}) return 0;\n    return 1 + Math.max(...Object.values(d).map(dict_depth));\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-Infinity\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp7uctqihr.js:12:10)\n    at Object.<anonymous> (/tmp/tmp7uctqihr.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -Infinity,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var depth = 0;\n    for(var k in d){\n        if(typeof d[k] === 'object'){\n            var depth2 = dict_depth(d[k]) + 1;\n            if(depth2 > depth){\n                depth = depth2;\n            }\n        }\n    }\n    return depth;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpvfwthcys.js:20:10)\n    at Object.<anonymous> (/tmp/tmpvfwthcys.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var max_depth = 0;\n    function depth(d, depth){\n        for(var k in d){\n            if (typeof d[k] == 'object'){\n                depth(d[k], depth+1);\n            }\n            else{\n                if (depth > max_depth){\n                    max_depth = depth;\n                }\n            }\n        }\n    }\n    depth(d, 1);\n    return max_depth;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "/tmp/tmp70hnl9u4.js:7\n                depth(d[k], depth+1);\n                ^\n\nTypeError: depth is not a function\n    at depth (/tmp/tmp70hnl9u4.js:7:17)\n    at dict_depth (/tmp/tmp70hnl9u4.js:16:5)\n    at test (/tmp/tmp70hnl9u4.js:25:20)\n    at Object.<anonymous> (/tmp/tmp70hnl9u4.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === {}){\n        return 0;\n    }\n    var max = 1;\n    for(var key in d){\n        if(typeof d[key] === 'object'){\n            var depth = dict_depth(d[key]) + 1;\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var max_depth = 0;\n    for (var key in d){\n        if (typeof d[key] == \"object\"){\n            var depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth){\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpuzxumxsk.js:20:10)\n    at Object.<anonymous> (/tmp/tmpuzxumxsk.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(!d || typeof d !== 'object'){\n        return 0;\n    }\n    var max = 0;\n    for(var key in d){\n        var depth = dict_depth(d[key]);\n        if(depth > max){\n            max = depth;\n        }\n    }\n    return max + 1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n  var depth = 0;\n  for(var k in d){\n    if(typeof d[k] == 'object'){\n      var temp_depth = dict_depth(d[k]) + 1;\n      if(temp_depth > depth){\n        depth = temp_depth;\n      }\n    }\n  }\n  return depth;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp6z144vv6.js:20:10)\n    at Object.<anonymous> (/tmp/tmp6z144vv6.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === {}) return 0;\n    var max = 1;\n    for(var k in d){\n        if(typeof d[k] === 'object'){\n            var depth = dict_depth(d[k]) + 1;\n            if(depth > max) max = depth;\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var depth = 0;\n    for(var k in d){\n        if(typeof d[k] == 'object'){\n            var depth_k = dict_depth(d[k]) + 1;\n            if(depth_k > depth){\n                depth = depth_k;\n            }\n        }\n    }\n    return depth;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp_xe31cib.js:20:10)\n    at Object.<anonymous> (/tmp/tmp_xe31cib.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n\tvar depth = 1;\n\tfor(var k in d){\n\t\tif(typeof d[k] == 'object'){\n\t\t\tvar depth2 = dict_depth(d[k]) + 1;\n\t\t\tif(depth2 > depth)\n\t\t\t\tdepth = depth2;\n\t\t}\n\t}\n\treturn depth;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d=={}){\n        return 0;\n    }\n    else{\n        var max=0;\n        for(var i in d){\n            var depth=dict_depth(d[i]);\n            if(depth>max){\n                max=depth;\n            }\n        }\n        return max+1;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "/tmp/tmp9zqf4dyb.js:3\n    if(d=={}){\n        ^\n\nRangeError: Maximum call stack size exceeded\n    at Object.valueOf (<anonymous>)\n    at dict_depth (/tmp/tmp9zqf4dyb.js:3:9)\n    at dict_depth (/tmp/tmp9zqf4dyb.js:9:23)\n    at dict_depth (/tmp/tmp9zqf4dyb.js:9:23)\n    at dict_depth (/tmp/tmp9zqf4dyb.js:9:23)\n    at dict_depth (/tmp/tmp9zqf4dyb.js:9:23)\n    at dict_depth (/tmp/tmp9zqf4dyb.js:9:23)\n    at dict_depth (/tmp/tmp9zqf4dyb.js:9:23)\n    at dict_depth (/tmp/tmp9zqf4dyb.js:9:23)\n    at dict_depth (/tmp/tmp9zqf4dyb.js:9:23)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor === Object){\n        return 1 + Math.max(...Object.values(d).map(dict_depth));\n    }\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp0pwk9rcj.js:14:10)\n    at Object.<anonymous> (/tmp/tmp0pwk9rcj.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === {}){\n        return 0;\n    }\n    var max = 1;\n    for(var key in d){\n        if(typeof d[key] === 'object'){\n            var depth = dict_depth(d[key]) + 1;\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor === Object){\n        var max = 0;\n        for(var key in d){\n            var v = dict_depth(d[key]);\n            if(v > max){\n                max = v;\n            }\n        }\n        return max + 1;\n    }\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var max = 0;\n    for(var i in d){\n        if(typeof d[i] == \"object\"){\n            var depth = dict_depth(d[i]) + 1;\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp4tughpeu.js:20:10)\n    at Object.<anonymous> (/tmp/tmp4tughpeu.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === null || typeof d !== 'object'){\n        return 0;\n    }\n    var max = 0;\n    for(var key in d){\n        var depth = dict_depth(d[key]) + 1;\n        if(depth > max){\n            max = depth;\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpuwtwuhjw.js:21:10)\n    at Object.<anonymous> (/tmp/tmpuwtwuhjw.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === {}){\n        return 0;\n    }\n    var max = 1;\n    for(var key in d){\n        if(typeof d[key] === 'object'){\n            var depth = dict_depth(d[key]) + 1;\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var max = 0;\n    for(var k in d){\n        if(typeof d[k] == \"object\"){\n            var depth = dict_depth(d[k]) + 1;\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp14z4ab_7.js:20:10)\n    at Object.<anonymous> (/tmp/tmp14z4ab_7.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d==={}){\n        return 0;\n    }\n    var max=1;\n    for(var key in d){\n        if(typeof d[key]==='object'){\n            var depth=dict_depth(d[key])+1;\n            if(depth>max){\n                max=depth;\n            }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var max = 0;\n    for(var i in d){\n        if(typeof d[i] == \"object\"){\n            var depth = dict_depth(d[i]) + 1;\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp4tughpeu.js:20:10)\n    at Object.<anonymous> (/tmp/tmp4tughpeu.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var depth = 0;\n    for(var k in d){\n        if(typeof d[k] == \"object\"){\n            var temp_depth = dict_depth(d[k]) + 1;\n            if(temp_depth > depth){\n                depth = temp_depth;\n            }\n        }\n    }\n    return depth;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpuhdh6e5i.js:20:10)\n    at Object.<anonymous> (/tmp/tmpuhdh6e5i.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === {}){\n        return 0;\n    }\n    var max = 0;\n    for(var key in d){\n        if(typeof d[key] === 'object'){\n            var depth = dict_depth(d[key]);\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor === Object){\n        return 1 + Math.max(...Object.values(d).map(dict_depth));\n    }\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp0pwk9rcj.js:14:10)\n    at Object.<anonymous> (/tmp/tmp0pwk9rcj.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var max = 0;\n    for(var key in d){\n        if(typeof d[key] == \"object\"){\n            var depth = dict_depth(d[key]) + 1;\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpi_ojbv6a.js:20:10)\n    at Object.<anonymous> (/tmp/tmpi_ojbv6a.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === {}){\n        return 0;\n    }\n    else{\n        var max = 0;\n        for(var key in d){\n            if(typeof d[key] === 'object'){\n                var depth = dict_depth(d[key]);\n                if(depth > max){\n                    max = depth;\n                }\n            }\n        }\n        return max + 1;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === {}) return 0;\n    var max = 1;\n    for(var k in d){\n        if(typeof d[k] === 'object'){\n            var depth = dict_depth(d[k]) + 1;\n            if(depth > max) max = depth;\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === {}) return 0;\n    var max = 1;\n    for(var key in d){\n        if(typeof d[key] === 'object'){\n            var depth = dict_depth(d[key]) + 1;\n            if(depth > max) max = depth;\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === null || typeof d !== 'object'){\n        return 0;\n    }\n    let max_depth = 0;\n    for(let key in d){\n        max_depth = Math.max(max_depth, dict_depth(d[key]));\n    }\n    return max_depth + 1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === null){\n        return 0;\n    }\n    if(!d.hasOwnProperty('value')){\n        return 1;\n    }\n    return 1 + dict_depth(d.value);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp0rriu6yv.js:17:10)\n    at Object.<anonymous> (/tmp/tmp0rriu6yv.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor !== Object) return 0;\n    var max = 0;\n    for(var k in d){\n        var v = d[k];\n        if(v.constructor === Object){\n            var depth = dict_depth(v) + 1;\n            if(depth > max) max = depth;\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp1_wbjz77.js:20:10)\n    at Object.<anonymous> (/tmp/tmp1_wbjz77.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === null){\n        return 0;\n    }\n    if(!d.hasOwnProperty('value')){\n        return 1;\n    }\n    return 1 + dict_depth(d.value);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp0rriu6yv.js:17:10)\n    at Object.<anonymous> (/tmp/tmp0rriu6yv.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === null || typeof d !== 'object'){\n        return 0;\n    }\n    var max = 0;\n    for(var key in d){\n        var depth = dict_depth(d[key]);\n        if(depth > max){\n            max = depth;\n        }\n    }\n    return max + 1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var max = 0;\n    for(var key in d){\n        if(typeof d[key] == \"object\"){\n            var depth = dict_depth(d[key]) + 1;\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpi_ojbv6a.js:20:10)\n    at Object.<anonymous> (/tmp/tmpi_ojbv6a.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor === Object){\n        var max = 0;\n        for(var key in d){\n            var v = dict_depth(d[key]);\n            if(v > max){\n                max = v;\n            }\n        }\n        return max + 1;\n    }\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d instanceof Object){\n        var max = 0;\n        for(var i in d){\n            var depth = dict_depth(d[i]);\n            if(depth > max){\n                max = depth;\n            }\n        }\n        return max + 1;\n    }\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n\tvar max = 0;\n\tfor(var k in d){\n\t\tif(typeof d[k] == \"object\"){\n\t\t\tvar depth = dict_depth(d[k]) + 1;\n\t\t\tif(depth > max){\n\t\t\t\tmax = depth;\n\t\t\t}\n\t\t}\n\t}\n\treturn max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpm87wjcen.js:20:10)\n    at Object.<anonymous> (/tmp/tmpm87wjcen.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === {}){\n        return 0;\n    }\n    var max = 1;\n    for(var key in d){\n        if(typeof d[key] === 'object'){\n            var depth = dict_depth(d[key]) + 1;\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor === Object){\n        return 1 + Math.max(...Object.values(d).map(dict_depth));\n    }\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp0pwk9rcj.js:14:10)\n    at Object.<anonymous> (/tmp/tmp0pwk9rcj.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor === Object){\n        var max = 0;\n        for(var key in d){\n            var v = dict_depth(d[key]);\n            if(v > max){\n                max = v;\n            }\n        }\n        return max + 1;\n    }\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n  var max = 0;\n  for (var k in d) {\n    if (typeof d[k] == \"object\") {\n      var depth = dict_depth(d[k]) + 1;\n      if (depth > max) {\n        max = depth;\n      }\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpzu3w6j1j.js:20:10)\n    at Object.<anonymous> (/tmp/tmpzu3w6j1j.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === {}){\n        return 0;\n    }\n    var max = 1;\n    for(var key in d){\n        if(typeof d[key] === 'object'){\n            var depth = dict_depth(d[key]) + 1;\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var depth = 0;\n    for(var key in d){\n        if(typeof d[key] == \"object\"){\n            var depth_of_key = dict_depth(d[key]) + 1;\n            if(depth < depth_of_key){\n                depth = depth_of_key;\n            }\n        }\n    }\n    return depth;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmphpj_d_1o.js:20:10)\n    at Object.<anonymous> (/tmp/tmphpj_d_1o.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d=={}){\n        return 0;\n    }\n    else{\n        return 1+dict_depth(d[Object.keys(d)[0]]);\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "/tmp/tmpkgf8vy4q.js:7\n        return 1+dict_depth(d[Object.keys(d)[0]]);\n                                     ^\n\nTypeError: Cannot convert undefined or null to object\n    at Function.keys (<anonymous>)\n    at dict_depth (/tmp/tmpkgf8vy4q.js:7:38)\n    at dict_depth (/tmp/tmpkgf8vy4q.js:7:18)\n    at dict_depth (/tmp/tmpkgf8vy4q.js:7:18)\n    at test (/tmp/tmpkgf8vy4q.js:16:20)\n    at Object.<anonymous> (/tmp/tmpkgf8vy4q.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var max = 0;\n    for(var key in d){\n        if(typeof d[key] == \"object\"){\n            var depth = dict_depth(d[key]) + 1;\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpi_ojbv6a.js:20:10)\n    at Object.<anonymous> (/tmp/tmpi_ojbv6a.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor !== Object) return 0;\n    var max = 1;\n    for(var k in d){\n        if(d.hasOwnProperty(k)){\n            var depth = dict_depth(d[k]) + 1;\n            if(depth > max) max = depth;\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var depth = 0;\n    var key;\n    for(key in d){\n        if(typeof d[key] == \"object\"){\n            var depth2 = dict_depth(d[key]) + 1;\n            if(depth2 > depth){\n                depth = depth2;\n            }\n        }\n    }\n    return depth;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp0xq1e4nh.js:21:10)\n    at Object.<anonymous> (/tmp/tmp0xq1e4nh.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n\tvar max = 0;\n\tfor(var key in d){\n\t\tif(typeof d[key] == \"object\"){\n\t\t\tvar depth = dict_depth(d[key]) + 1;\n\t\t\tif(depth > max){\n\t\t\t\tmax = depth;\n\t\t\t}\n\t\t}\n\t}\n\treturn max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpucpc_jmj.js:20:10)\n    at Object.<anonymous> (/tmp/tmpucpc_jmj.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var depth = 0;\n    for(var k in d){\n        if(typeof d[k] == 'object'){\n            var temp_depth = dict_depth(d[k]) + 1;\n            if(temp_depth > depth){\n                depth = temp_depth;\n            }\n        }\n    }\n    return depth;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpbi2yq9jx.js:20:10)\n    at Object.<anonymous> (/tmp/tmpbi2yq9jx.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var max_depth = 0;\n    for(var key in d){\n        if(typeof d[key] == \"object\"){\n            var depth = dict_depth(d[key]) + 1;\n            if(depth > max_depth){\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp21efpuat.js:20:10)\n    at Object.<anonymous> (/tmp/tmp21efpuat.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    let max = 0;\n    for(let key in d){\n        if(typeof d[key] == 'object'){\n            let depth = dict_depth(d[key]) + 1;\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpp63snzwu.js:20:10)\n    at Object.<anonymous> (/tmp/tmpp63snzwu.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === {}){\n        return 0;\n    }\n    var max = 1;\n    for(var key in d){\n        if(typeof d[key] === 'object'){\n            var depth = dict_depth(d[key]) + 1;\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === {}){\n        return 0;\n    }\n    var max = 1;\n    for(var key in d){\n        if(typeof d[key] === 'object'){\n            var depth = dict_depth(d[key]) + 1;\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var max = 0;\n    for(var key in d){\n        if(typeof d[key] == \"object\"){\n            var depth = dict_depth(d[key]) + 1;\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpi_ojbv6a.js:20:10)\n    at Object.<anonymous> (/tmp/tmpi_ojbv6a.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor === Object){\n        var max = 0;\n        for(var key in d){\n            var v = dict_depth(d[key]);\n            if(v > max){\n                max = v;\n            }\n        }\n        return max + 1;\n    }\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var max = 0;\n    for(var i in d){\n        if(typeof d[i] == 'object'){\n            var depth = dict_depth(d[i]) + 1;\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpuq77_9wp.js:20:10)\n    at Object.<anonymous> (/tmp/tmpuq77_9wp.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor !== Object) return 0;\n    var max = 1;\n    for(var k in d){\n        if(d.hasOwnProperty(k)){\n            var depth = dict_depth(d[k]) + 1;\n            if(depth > max) max = depth;\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor === Object){\n        var max = 0;\n        for(var i in d){\n            var v = dict_depth(d[i]);\n            if(v > max){\n                max = v;\n            }\n        }\n        return max + 1;\n    }\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor === Object){\n        return 1 + Math.max(...Object.values(d).map(dict_depth));\n    }\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp0pwk9rcj.js:14:10)\n    at Object.<anonymous> (/tmp/tmp0pwk9rcj.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var max = 0;\n    for(var k in d){\n        if(typeof d[k] == \"object\"){\n            var depth = dict_depth(d[k]) + 1;\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp14z4ab_7.js:20:10)\n    at Object.<anonymous> (/tmp/tmp14z4ab_7.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor === Object){\n        var max = 0;\n        for(var key in d){\n            var v = dict_depth(d[key]);\n            if(v > max){\n                max = v;\n            }\n        }\n        return max + 1;\n    }\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === {}) return 0;\n    let max = 1;\n    for(let key in d){\n        if(typeof d[key] === 'object'){\n            let depth = 1 + dict_depth(d[key]);\n            if(depth > max) max = depth;\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var max = 0;\n    for(var k in d){\n        if(typeof d[k] == \"object\"){\n            var depth = dict_depth(d[k]) + 1;\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp14z4ab_7.js:20:10)\n    at Object.<anonymous> (/tmp/tmp14z4ab_7.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor === Object){\n        var max = 0;\n        for(var k in d){\n            var v = d[k];\n            var t = dict_depth(v);\n            if(max < t){\n                max = t;\n            }\n        }\n        return max + 1;\n    }\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor === Object){\n        var max = 1;\n        for(var k in d){\n            var depth = dict_depth(d[k]);\n            if(depth > max){\n                max = depth;\n            }\n        }\n        return max + 1;\n    }\n    return 1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpblugz25f.js:21:10)\n    at Object.<anonymous> (/tmp/tmpblugz25f.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor === Object){\n        var max = 1;\n        for(var k in d){\n            var depth = dict_depth(d[k]);\n            if(depth > max){\n                max = depth;\n            }\n        }\n        return max + 1;\n    }\n    return 1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpblugz25f.js:21:10)\n    at Object.<anonymous> (/tmp/tmpblugz25f.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor === Object){\n        var max = 0;\n        for(var key in d){\n            var v = dict_depth(d[key]);\n            if(v > max){\n                max = v;\n            }\n        }\n        return max + 1;\n    }\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor === Object){\n        var max = 0;\n        for(var key in d){\n            var v = dict_depth(d[key]);\n            if(v > max){\n                max = v;\n            }\n        }\n        return max + 1;\n    }\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === {}){\n        return 0;\n    }\n    var max = 1;\n    for(var key in d){\n        if(typeof d[key] === 'object'){\n            var depth = dict_depth(d[key]) + 1;\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor === Object){\n        return 1 + Math.max(...Object.values(d).map(dict_depth));\n    }\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp0pwk9rcj.js:14:10)\n    at Object.<anonymous> (/tmp/tmp0pwk9rcj.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor === Object){\n        var max = 0;\n        for(var key in d){\n            var depth = dict_depth(d[key]);\n            if(depth > max){\n                max = depth;\n            }\n        }\n        return max + 1;\n    }\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === {}){\n        return 0;\n    }\n    var max = 1;\n    for(var key in d){\n        if(typeof d[key] === 'object'){\n            var depth = dict_depth(d[key]) + 1;\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === {}){\n        return 0;\n    }\n    var max = 1;\n    for(var key in d){\n        if(typeof d[key] === 'object'){\n            var depth = dict_depth(d[key]) + 1;\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var depth = 0;\n    for (var k in d){\n        if (typeof d[k] == \"object\"){\n            var depth2 = dict_depth(d[k]) + 1;\n            if (depth2 > depth)\n                depth = depth2;\n        }\n    }\n    return depth;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpbiivzsa6.js:19:10)\n    at Object.<anonymous> (/tmp/tmpbiivzsa6.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === {}){\n        return 0;\n    }\n    var max = 0;\n    for(var key in d){\n        if(typeof(d[key]) == \"object\"){\n            var depth = dict_depth(d[key]) + 1;\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp5y3lwr30.js:23:10)\n    at Object.<anonymous> (/tmp/tmp5y3lwr30.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d==={}){\n        return 0;\n    }\n    else{\n        var max=0;\n        for(var key in d){\n            if(typeof(d[key])=='object'){\n                var depth=dict_depth(d[key])+1;\n                if(depth>max){\n                    max=depth;\n                }\n            }\n        }\n        return max;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp7h4uuti6.js:25:10)\n    at Object.<anonymous> (/tmp/tmp7h4uuti6.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === {}){\n        return 0;\n    }\n    var max = 0;\n    for(var key in d){\n        if(typeof d[key] === 'object'){\n            var depth = dict_depth(d[key]);\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d == {}){\n        return 0;\n    }\n    else{\n        var max = 0;\n        for(var key in d){\n            var depth = dict_depth(d[key]);\n            if(depth > max){\n                max = depth;\n            }\n        }\n        return max + 1;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "/tmp/tmpl5idq_ua.js:3\n    if(d == {}){\n         ^\n\nRangeError: Maximum call stack size exceeded\n    at Object.valueOf (<anonymous>)\n    at dict_depth (/tmp/tmpl5idq_ua.js:3:10)\n    at dict_depth (/tmp/tmpl5idq_ua.js:9:25)\n    at dict_depth (/tmp/tmpl5idq_ua.js:9:25)\n    at dict_depth (/tmp/tmpl5idq_ua.js:9:25)\n    at dict_depth (/tmp/tmpl5idq_ua.js:9:25)\n    at dict_depth (/tmp/tmpl5idq_ua.js:9:25)\n    at dict_depth (/tmp/tmpl5idq_ua.js:9:25)\n    at dict_depth (/tmp/tmpl5idq_ua.js:9:25)\n    at dict_depth (/tmp/tmpl5idq_ua.js:9:25)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n\tvar max = 0;\n\tfor(var key in d){\n\t\tif(typeof d[key] === \"object\"){\n\t\t\tvar depth = dict_depth(d[key]);\n\t\t\tif(depth > max){\n\t\t\t\tmax = depth;\n\t\t\t}\n\t\t}\n\t}\n\treturn max + 1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor === Object){\n        var max = 0;\n        for(var key in d){\n            var depth = dict_depth(d[key]);\n            if(depth > max){\n                max = depth;\n            }\n        }\n        return max + 1;\n    }\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === {}){\n        return 0;\n    }\n    else{\n        var max = 0;\n        for(var key in d){\n            if(typeof d[key] === 'object'){\n                var depth = dict_depth(d[key]);\n                if(depth > max){\n                    max = depth;\n                }\n            }\n        }\n        return max + 1;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var max = 0;\n    for(var key in d){\n        if(typeof d[key] == \"object\"){\n            var depth = dict_depth(d[key]) + 1;\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpi_ojbv6a.js:20:10)\n    at Object.<anonymous> (/tmp/tmpi_ojbv6a.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor === Object){\n        var max = 0;\n        for(var key in d){\n            var depth = dict_depth(d[key]);\n            if(depth > max){\n                max = depth;\n            }\n        }\n        return max + 1;\n    }\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor === Object){\n        var max = 0;\n        for(var key in d){\n            var v = dict_depth(d[key]);\n            if(v > max){\n                max = v;\n            }\n        }\n        return max + 1;\n    }\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n\tvar max = 0;\n\tfor(var key in d){\n\t\tif(typeof d[key] == 'object'){\n\t\t\tvar depth = dict_depth(d[key]) + 1;\n\t\t\tif(depth > max){\n\t\t\t\tmax = depth;\n\t\t\t}\n\t\t}\n\t}\n\treturn max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpnpotcd7o.js:20:10)\n    at Object.<anonymous> (/tmp/tmpnpotcd7o.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === {}){\n        return 0;\n    }\n    var max = 1;\n    for(var key in d){\n        if(typeof d[key] === 'object'){\n            var depth = dict_depth(d[key]) + 1;\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var depth = 0;\n    for(var key in d){\n        if(d.hasOwnProperty(key)){\n            if(typeof d[key] === 'object'){\n                var depth_of_key = dict_depth(d[key]);\n                if(depth_of_key > depth){\n                    depth = depth_of_key;\n                }\n            }\n        }\n    }\n    return 1 + depth;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var depth = 0;\n    for (var k in d){\n        if (typeof d[k] == \"object\"){\n            var temp_depth = dict_depth(d[k]) + 1;\n            if (temp_depth > depth){\n                depth = temp_depth;\n            }\n        }\n    }\n    return depth;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp7t8cpa31.js:20:10)\n    at Object.<anonymous> (/tmp/tmp7t8cpa31.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var depth = 0;\n    for(var k in d){\n        if(typeof d[k] == \"object\"){\n            var depth_k = dict_depth(d[k]) + 1;\n            if(depth_k > depth){\n                depth = depth_k;\n            }\n        }\n    }\n    return depth;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpc_kaq5jd.js:20:10)\n    at Object.<anonymous> (/tmp/tmpc_kaq5jd.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d==={}){\n        return 0;\n    }\n    else{\n        return 1+dict_depth(d[Object.keys(d)[0]]);\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "/tmp/tmpyun5jrxo.js:7\n        return 1+dict_depth(d[Object.keys(d)[0]]);\n                                     ^\n\nTypeError: Cannot convert undefined or null to object\n    at Function.keys (<anonymous>)\n    at dict_depth (/tmp/tmpyun5jrxo.js:7:38)\n    at dict_depth (/tmp/tmpyun5jrxo.js:7:18)\n    at dict_depth (/tmp/tmpyun5jrxo.js:7:18)\n    at test (/tmp/tmpyun5jrxo.js:16:20)\n    at Object.<anonymous> (/tmp/tmpyun5jrxo.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n\tvar max = 0;\n\tfor(var key in d){\n\t\tif(typeof d[key] == \"object\"){\n\t\t\tvar depth = dict_depth(d[key]) + 1;\n\t\t\tif(depth > max){\n\t\t\t\tmax = depth;\n\t\t\t}\n\t\t}\n\t}\n\treturn max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpucpc_jmj.js:20:10)\n    at Object.<anonymous> (/tmp/tmpucpc_jmj.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === {}) return 0;\n    var max = 1;\n    for(var key in d){\n        if(typeof d[key] === 'object'){\n            var depth = dict_depth(d[key]) + 1;\n            if(depth > max) max = depth;\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor === Object){\n        return 1 + Math.max(...Object.values(d).map(dict_depth));\n    }\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp0pwk9rcj.js:14:10)\n    at Object.<anonymous> (/tmp/tmp0pwk9rcj.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var depth = 0;\n    for(var k in d){\n        if(typeof d[k] == \"object\"){\n            var temp_depth = dict_depth(d[k]) + 1;\n            if(temp_depth > depth){\n                depth = temp_depth;\n            }\n        }\n    }\n    return depth;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpuhdh6e5i.js:20:10)\n    at Object.<anonymous> (/tmp/tmpuhdh6e5i.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === {}) return 0;\n    var max = 1;\n    for(var key in d){\n        if(typeof d[key] === 'object'){\n            var depth = dict_depth(d[key]) + 1;\n            if(depth > max) max = depth;\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var depth = 0;\n    for(var k in d){\n        if(d[k] instanceof Object){\n            var temp_depth = dict_depth(d[k]) + 1;\n            if(temp_depth > depth){\n                depth = temp_depth;\n            }\n        }\n    }\n    return depth;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp2rjajrvj.js:20:10)\n    at Object.<anonymous> (/tmp/tmp2rjajrvj.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor === Object){\n        var max = 0;\n        for(var key in d){\n            var v = dict_depth(d[key]);\n            if(v > max){\n                max = v;\n            }\n        }\n        return max + 1;\n    }\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var max = 0;\n    for(var key in d){\n        if(typeof d[key] == 'object'){\n            var depth = dict_depth(d[key]) + 1;\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmptg96on7w.js:20:10)\n    at Object.<anonymous> (/tmp/tmptg96on7w.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var max = 0;\n    for (var k in d) {\n        if (typeof d[k] == \"object\") {\n            var depth = dict_depth(d[k]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp18yg28dv.js:20:10)\n    at Object.<anonymous> (/tmp/tmp18yg28dv.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var max_depth = 0;\n    function recurse(d, depth){\n        if(typeof d == \"object\"){\n            for(var k in d){\n                if(d.hasOwnProperty(k)){\n                    recurse(d[k], depth+1);\n                }\n            }\n        }\n        else{\n            max_depth = Math.max(max_depth, depth);\n        }\n    }\n    recurse(d, 1);\n    return max_depth;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpiocyls4s.js:25:10)\n    at Object.<anonymous> (/tmp/tmpiocyls4s.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor === Object){\n        let max = 0;\n        for(let key in d){\n            let depth = dict_depth(d[key]);\n            if(depth > max){\n                max = depth;\n            }\n        }\n        return max + 1;\n    }\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === {}){\n        return 0;\n    }\n    else{\n        var max = 0;\n        for(var key in d){\n            if(typeof d[key] === 'object'){\n                var depth = dict_depth(d[key]);\n                if(depth > max){\n                    max = depth;\n                }\n            }\n        }\n        return max + 1;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var max = 0;\n    for(var key in d){\n        if(typeof d[key] == 'object'){\n            var depth = dict_depth(d[key]) + 1;\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmptg96on7w.js:20:10)\n    at Object.<anonymous> (/tmp/tmptg96on7w.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var depth = 0;\n    for (var k in d) {\n        if (d.hasOwnProperty(k)) {\n            if (typeof d[k] == \"object\") {\n                var depth2 = dict_depth(d[k]) + 1;\n                if (depth2 > depth) {\n                    depth = depth2;\n                }\n            }\n        }\n    }\n    return depth;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpmjrk75c2.js:22:10)\n    at Object.<anonymous> (/tmp/tmpmjrk75c2.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d==={}){\n        return 0;\n    }\n    else{\n        return 1+dict_depth(d[Object.keys(d)[0]]);\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "/tmp/tmpyun5jrxo.js:7\n        return 1+dict_depth(d[Object.keys(d)[0]]);\n                                     ^\n\nTypeError: Cannot convert undefined or null to object\n    at Function.keys (<anonymous>)\n    at dict_depth (/tmp/tmpyun5jrxo.js:7:38)\n    at dict_depth (/tmp/tmpyun5jrxo.js:7:18)\n    at dict_depth (/tmp/tmpyun5jrxo.js:7:18)\n    at test (/tmp/tmpyun5jrxo.js:16:20)\n    at Object.<anonymous> (/tmp/tmpyun5jrxo.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor === Object){\n        var max = 1;\n        for(var k in d){\n            var depth = dict_depth(d[k]);\n            if(depth > max){\n                max = depth;\n            }\n        }\n        return max + 1;\n    }\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp38jq19tc.js:21:10)\n    at Object.<anonymous> (/tmp/tmp38jq19tc.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === {}) return 0;\n    var max = 1;\n    for(var key in d){\n        if(typeof d[key] === 'object'){\n            var depth = dict_depth(d[key]) + 1;\n            if(depth > max) max = depth;\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor === Object){\n        return 1 + Math.max(...Object.values(d).map(dict_depth));\n    }\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp0pwk9rcj.js:14:10)\n    at Object.<anonymous> (/tmp/tmp0pwk9rcj.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d == {}){\n        return 0;\n    }\n    var max = 0;\n    for(var key in d){\n        var value = d[key];\n        if(typeof value == \"object\"){\n            var depth = dict_depth(value);\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(!d || typeof d !== 'object'){\n        return 0;\n    }\n    var max = 0;\n    for(var key in d){\n        var depth = dict_depth(d[key]);\n        if(depth > max){\n            max = depth;\n        }\n    }\n    return max + 1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var depth = 0;\n    for(var key in d){\n        if(typeof d[key] == \"object\"){\n            var depth2 = dict_depth(d[key]) + 1;\n            if(depth2 > depth){\n                depth = depth2;\n            }\n        }\n    }\n    return depth;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp4rd39es8.js:20:10)\n    at Object.<anonymous> (/tmp/tmp4rd39es8.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var depth = 0;\n    var key;\n    for(key in d){\n        if(typeof d[key] === 'object'){\n            var depth_of_key = dict_depth(d[key]) + 1;\n            if(depth < depth_of_key){\n                depth = depth_of_key;\n            }\n        }\n    }\n    return depth;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpgl3bgkq2.js:21:10)\n    at Object.<anonymous> (/tmp/tmpgl3bgkq2.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d instanceof Array){\n        return 1;\n    }\n    else{\n        var max = 0;\n        for(var i in d){\n            var depth = dict_depth(d[i]);\n            if(depth > max){\n                max = depth;\n            }\n        }\n        return max + 1;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "/tmp/tmphxrm9wwr.js:3\n    if(d instanceof Array){\n         ^\n\nRangeError: Maximum call stack size exceeded\n    at [Symbol.hasInstance] (<anonymous>)\n    at dict_depth (/tmp/tmphxrm9wwr.js:3:10)\n    at dict_depth (/tmp/tmphxrm9wwr.js:9:25)\n    at dict_depth (/tmp/tmphxrm9wwr.js:9:25)\n    at dict_depth (/tmp/tmphxrm9wwr.js:9:25)\n    at dict_depth (/tmp/tmphxrm9wwr.js:9:25)\n    at dict_depth (/tmp/tmphxrm9wwr.js:9:25)\n    at dict_depth (/tmp/tmphxrm9wwr.js:9:25)\n    at dict_depth (/tmp/tmphxrm9wwr.js:9:25)\n    at dict_depth (/tmp/tmphxrm9wwr.js:9:25)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === {}) return 0;\n    var max = 1;\n    for(var key in d){\n        if(typeof d[key] === 'object'){\n            var depth = dict_depth(d[key]) + 1;\n            if(depth > max) max = depth;\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor === Object){\n        return 1 + Math.max(...Object.values(d).map(dict_depth));\n    }\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp0pwk9rcj.js:14:10)\n    at Object.<anonymous> (/tmp/tmp0pwk9rcj.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === {}){\n        return 0;\n    }\n    var max = 0;\n    for(var key in d){\n        if(typeof d[key] === 'object'){\n            var depth = dict_depth(d[key]) + 1;\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpu0d1kued.js:23:10)\n    at Object.<anonymous> (/tmp/tmpu0d1kued.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === {}) return 0;\n    var max = 1;\n    for(var key in d){\n        if(typeof d[key] === 'object'){\n            var depth = dict_depth(d[key]) + 1;\n            if(depth > max) max = depth;\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === {}){\n        return 0;\n    }\n    let max = 0;\n    for(let key in d){\n        if(typeof d[key] === 'object'){\n            let depth = dict_depth(d[key]);\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === {}) return 0;\n    var max = 1;\n    for(var key in d){\n        if(typeof d[key] === 'object'){\n            var depth = dict_depth(d[key]) + 1;\n            if(depth > max) max = depth;\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var depth = 0;\n    for (var k in d) {\n        if (d.hasOwnProperty(k)) {\n            if (typeof d[k] == \"object\") {\n                var depth2 = dict_depth(d[k]) + 1;\n                if (depth2 > depth) {\n                    depth = depth2;\n                }\n            }\n        }\n    }\n    return depth;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpmjrk75c2.js:22:10)\n    at Object.<anonymous> (/tmp/tmpmjrk75c2.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor === Object){\n        var max = 0;\n        for(var k in d){\n            var t = dict_depth(d[k]);\n            if(t > max){\n                max = t;\n            }\n        }\n        return max + 1;\n    }\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d == {}){\n        return 0;\n    }\n    var max = 0;\n    for(var key in d){\n        if(typeof d[key] == \"object\"){\n            var depth = dict_depth(d[key]);\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var max = 0;\n    for(var key in d){\n        if(typeof d[key] == \"object\"){\n            var depth = dict_depth(d[key]) + 1;\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpi_ojbv6a.js:20:10)\n    at Object.<anonymous> (/tmp/tmpi_ojbv6a.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n\tvar max = 0;\n\tfor (var key in d){\n\t\tif (typeof d[key] == 'object'){\n\t\t\tvar depth = dict_depth(d[key]) + 1;\n\t\t\tif (depth > max){\n\t\t\t\tmax = depth;\n\t\t\t}\n\t\t}\n\t}\n\treturn max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp0fwzfjrn.js:20:10)\n    at Object.<anonymous> (/tmp/tmp0fwzfjrn.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor === Object){\n        return 1 + Math.max(...Object.values(d).map(dict_depth));\n    }\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp0pwk9rcj.js:14:10)\n    at Object.<anonymous> (/tmp/tmp0pwk9rcj.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === {}){\n        return 0;\n    }\n    else{\n        var max = 1;\n        for(var key in d){\n            if(typeof(d[key]) === 'object'){\n                var depth = dict_depth(d[key]) + 1;\n                if(depth > max){\n                    max = depth;\n                }\n            }\n        }\n        return max;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === {}){\n        return 0;\n    }\n    var max = 0;\n    for(var key in d){\n        if(typeof d[key] === 'object'){\n            var dep = dict_depth(d[key]);\n            if(dep > max){\n                max = dep;\n            }\n        }\n    }\n    return max + 1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor === Object){\n        var max = 0;\n        for(var key in d){\n            var v = dict_depth(d[key]);\n            if(v > max){\n                max = v;\n            }\n        }\n        return max + 1;\n    }\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d==={}){\n        return 0;\n    }\n    else{\n        return 1+dict_depth(d[Object.keys(d)[0]]);\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "/tmp/tmpyun5jrxo.js:7\n        return 1+dict_depth(d[Object.keys(d)[0]]);\n                                     ^\n\nTypeError: Cannot convert undefined or null to object\n    at Function.keys (<anonymous>)\n    at dict_depth (/tmp/tmpyun5jrxo.js:7:38)\n    at dict_depth (/tmp/tmpyun5jrxo.js:7:18)\n    at dict_depth (/tmp/tmpyun5jrxo.js:7:18)\n    at test (/tmp/tmpyun5jrxo.js:16:20)\n    at Object.<anonymous> (/tmp/tmpyun5jrxo.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === {}){\n        return 0;\n    }\n    var max = 1;\n    for(var key in d){\n        if(typeof d[key] === 'object'){\n            var depth = dict_depth(d[key]) + 1;\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor !== Object) return 0;\n    var max = 1;\n    for(var k in d){\n        if(d.hasOwnProperty(k)){\n            var depth = dict_depth(d[k]) + 1;\n            if(depth > max) max = depth;\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if (d === {}) return 0;\n    var max = 1;\n    for (var key in d){\n        if (typeof d[key] === 'object'){\n            var depth = dict_depth(d[key]) + 1;\n            if (depth > max) max = depth;\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var depth = 0;\n    for(var k in d){\n        if(typeof d[k] == 'object'){\n            var depth = dict_depth(d[k]) + 1;\n        }\n    }\n    return depth;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmprhx1p1kk.js:17:10)\n    at Object.<anonymous> (/tmp/tmprhx1p1kk.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === {}){\n        return 0;\n    }\n    var max = 1;\n    for(var key in d){\n        if(typeof d[key] === 'object'){\n            var depth = dict_depth(d[key]) + 1;\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var max = 0;\n    for(var k in d){\n        if(typeof d[k] == \"object\"){\n            var depth = dict_depth(d[k]) + 1;\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp14z4ab_7.js:20:10)\n    at Object.<anonymous> (/tmp/tmp14z4ab_7.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n  var max = 0;\n  for(var key in d){\n    if(typeof d[key] == 'object'){\n      var depth = dict_depth(d[key]) + 1;\n      if(depth > max){\n        max = depth;\n      }\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpq85bw24g.js:20:10)\n    at Object.<anonymous> (/tmp/tmpq85bw24g.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var max = 0;\n    for(var k in d){\n        if(typeof d[k] == \"object\"){\n            var depth = dict_depth(d[k]) + 1;\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp14z4ab_7.js:20:10)\n    at Object.<anonymous> (/tmp/tmp14z4ab_7.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(typeof d !== 'object'){\n        return 0;\n    }\n    var max = 0;\n    for(var key in d){\n        var depth = dict_depth(d[key]);\n        if(depth > max){\n            max = depth;\n        }\n    }\n    return max + 1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor === Object){\n        return 1 + Math.max(...Object.values(d).map(dict_depth));\n    }\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp0pwk9rcj.js:14:10)\n    at Object.<anonymous> (/tmp/tmp0pwk9rcj.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor === Object){\n        return 1 + Math.max(...Object.values(d).map(dict_depth));\n    }\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp0pwk9rcj.js:14:10)\n    at Object.<anonymous> (/tmp/tmp0pwk9rcj.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var depth = 0;\n    for(var k in d){\n        if(typeof d[k] == \"object\"){\n            var temp_depth = dict_depth(d[k]) + 1;\n            if(temp_depth > depth){\n                depth = temp_depth;\n            }\n        }\n    }\n    return depth;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpuhdh6e5i.js:20:10)\n    at Object.<anonymous> (/tmp/tmpuhdh6e5i.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor === Object){\n        var max = 0;\n        for(var k in d){\n            var t = dict_depth(d[k]);\n            if(t > max){\n                max = t;\n            }\n        }\n        return max + 1;\n    }\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if (d === {}) return 0;\n    var max = 1;\n    for (var k in d) {\n        if (typeof d[k] === 'object') {\n            var depth = dict_depth(d[k]) + 1;\n            if (depth > max)\n                max = depth;\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(!d){\n        return 0;\n    }\n    var max = 0;\n    for(var key in d){\n        var depth = dict_depth(d[key]);\n        if(depth > max){\n            max = depth;\n        }\n    }\n    return max + 1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "/tmp/tmpxm944ym3.js:3\n    if(!d){\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at dict_depth (/tmp/tmpxm944ym3.js:3:5)\n    at dict_depth (/tmp/tmpxm944ym3.js:8:21)\n    at dict_depth (/tmp/tmpxm944ym3.js:8:21)\n    at dict_depth (/tmp/tmpxm944ym3.js:8:21)\n    at dict_depth (/tmp/tmpxm944ym3.js:8:21)\n    at dict_depth (/tmp/tmpxm944ym3.js:8:21)\n    at dict_depth (/tmp/tmpxm944ym3.js:8:21)\n    at dict_depth (/tmp/tmpxm944ym3.js:8:21)\n    at dict_depth (/tmp/tmpxm944ym3.js:8:21)\n    at dict_depth (/tmp/tmpxm944ym3.js:8:21)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(!d){\n        return 0;\n    }\n    var max = 0;\n    for(var key in d){\n        var depth = dict_depth(d[key]);\n        if(depth > max){\n            max = depth;\n        }\n    }\n    return max + 1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "/tmp/tmpxm944ym3.js:3\n    if(!d){\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at dict_depth (/tmp/tmpxm944ym3.js:3:5)\n    at dict_depth (/tmp/tmpxm944ym3.js:8:21)\n    at dict_depth (/tmp/tmpxm944ym3.js:8:21)\n    at dict_depth (/tmp/tmpxm944ym3.js:8:21)\n    at dict_depth (/tmp/tmpxm944ym3.js:8:21)\n    at dict_depth (/tmp/tmpxm944ym3.js:8:21)\n    at dict_depth (/tmp/tmpxm944ym3.js:8:21)\n    at dict_depth (/tmp/tmpxm944ym3.js:8:21)\n    at dict_depth (/tmp/tmpxm944ym3.js:8:21)\n    at dict_depth (/tmp/tmpxm944ym3.js:8:21)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === null || d === undefined){\n        return 0;\n    }\n    if(!d.hasOwnProperty('key')){\n        return 1;\n    }\n    return 1 + dict_depth(d.key);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp__z64z0q.js:17:10)\n    at Object.<anonymous> (/tmp/tmp__z64z0q.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor === Object){\n        var max = 0;\n        for(var k in d){\n            var v = d[k];\n            var t = dict_depth(v);\n            if(t > max){\n                max = t;\n            }\n        }\n        return max + 1;\n    }\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var max = 0;\n    for(var k in d){\n        if(typeof d[k] == \"object\"){\n            var depth = dict_depth(d[k]) + 1;\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp14z4ab_7.js:20:10)\n    at Object.<anonymous> (/tmp/tmp14z4ab_7.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d==={}){\n        return 0;\n    }\n    else{\n        return 1+dict_depth(d[Object.keys(d)[0]]);\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "/tmp/tmpyun5jrxo.js:7\n        return 1+dict_depth(d[Object.keys(d)[0]]);\n                                     ^\n\nTypeError: Cannot convert undefined or null to object\n    at Function.keys (<anonymous>)\n    at dict_depth (/tmp/tmpyun5jrxo.js:7:38)\n    at dict_depth (/tmp/tmpyun5jrxo.js:7:18)\n    at dict_depth (/tmp/tmpyun5jrxo.js:7:18)\n    at test (/tmp/tmpyun5jrxo.js:16:20)\n    at Object.<anonymous> (/tmp/tmpyun5jrxo.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor === Object){\n        var max = 0;\n        for(var key in d){\n            var v = dict_depth(d[key]);\n            if(v > max){\n                max = v;\n            }\n        }\n        return max + 1;\n    }\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === null){\n        return 0;\n    }\n    if(!d.hasOwnProperty('value')){\n        return 1;\n    }\n    return 1 + dict_depth(d.value);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp0rriu6yv.js:17:10)\n    at Object.<anonymous> (/tmp/tmp0rriu6yv.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === {}){\n        return 0;\n    }\n    var max = 1;\n    for(var key in d){\n        if(typeof d[key] === 'object'){\n            var depth = dict_depth(d[key]) + 1;\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var max = 0;\n    for(var key in d){\n        if(typeof d[key] == \"object\"){\n            var depth = dict_depth(d[key]) + 1;\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpi_ojbv6a.js:20:10)\n    at Object.<anonymous> (/tmp/tmpi_ojbv6a.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d==={}){\n        return 0;\n    }\n    else{\n        return 1+dict_depth(d[Object.keys(d)[0]]);\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "/tmp/tmpyun5jrxo.js:7\n        return 1+dict_depth(d[Object.keys(d)[0]]);\n                                     ^\n\nTypeError: Cannot convert undefined or null to object\n    at Function.keys (<anonymous>)\n    at dict_depth (/tmp/tmpyun5jrxo.js:7:38)\n    at dict_depth (/tmp/tmpyun5jrxo.js:7:18)\n    at dict_depth (/tmp/tmpyun5jrxo.js:7:18)\n    at test (/tmp/tmpyun5jrxo.js:16:20)\n    at Object.<anonymous> (/tmp/tmpyun5jrxo.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var depth = 0;\n    for(var k in d){\n        if(typeof d[k] == 'object'){\n            var depth2 = dict_depth(d[k]) + 1;\n            if(depth2 > depth){\n                depth = depth2;\n            }\n        }\n    }\n    return depth;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp4z3tq_m9.js:20:10)\n    at Object.<anonymous> (/tmp/tmp4z3tq_m9.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor !== Object) return 0;\n    var max = 0;\n    for(var k in d){\n        if(d.hasOwnProperty(k)){\n            var depth = dict_depth(d[k]);\n            if(depth > max) max = depth;\n        }\n    }\n    return max + 1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === null){\n        return 0;\n    }\n    if(!d.hasOwnProperty('key')){\n        return 1;\n    }\n    return 1 + dict_depth(d['key']);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpzfjt16d8.js:17:10)\n    at Object.<anonymous> (/tmp/tmpzfjt16d8.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor === Object){\n        return 1 + Math.max(...Object.values(d).map(dict_depth));\n    }\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp0pwk9rcj.js:14:10)\n    at Object.<anonymous> (/tmp/tmp0pwk9rcj.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor !== Object){\n        return 0;\n    }\n    var max = 1;\n    for(var key in d){\n        var depth = dict_depth(d[key]);\n        if(depth > max){\n            max = depth;\n        }\n    }\n    return max + 1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpe6cl4vqp.js:21:10)\n    at Object.<anonymous> (/tmp/tmpe6cl4vqp.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(!d){\n        return 0;\n    }\n    var max = 0;\n    for(var key in d){\n        var depth = dict_depth(d[key]);\n        if(depth > max){\n            max = depth;\n        }\n    }\n    return max + 1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "/tmp/tmpxm944ym3.js:3\n    if(!d){\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at dict_depth (/tmp/tmpxm944ym3.js:3:5)\n    at dict_depth (/tmp/tmpxm944ym3.js:8:21)\n    at dict_depth (/tmp/tmpxm944ym3.js:8:21)\n    at dict_depth (/tmp/tmpxm944ym3.js:8:21)\n    at dict_depth (/tmp/tmpxm944ym3.js:8:21)\n    at dict_depth (/tmp/tmpxm944ym3.js:8:21)\n    at dict_depth (/tmp/tmpxm944ym3.js:8:21)\n    at dict_depth (/tmp/tmpxm944ym3.js:8:21)\n    at dict_depth (/tmp/tmpxm944ym3.js:8:21)\n    at dict_depth (/tmp/tmpxm944ym3.js:8:21)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d instanceof Object){\n        var max = 0;\n        for(var k in d){\n            var t = dict_depth(d[k]);\n            if(t > max) max = t;\n        }\n        return max + 1;\n    }\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(Object.keys(d).length === 0){\n        return 0;\n    }\n    var max = 0;\n    for(var key in d){\n        if(typeof d[key] === 'object'){\n            var depth = dict_depth(d[key]) + 1;\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpnk23q8n7.js:23:10)\n    at Object.<anonymous> (/tmp/tmpnk23q8n7.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === {}) return 0;\n    var max = 1;\n    for(var key in d){\n        if(typeof d[key] === 'object'){\n            var depth = dict_depth(d[key]) + 1;\n            if(depth > max) max = depth;\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d == {}) return 0;\n    var max = 1;\n    for(var key in d){\n        if(typeof d[key] == \"object\"){\n            var depth = dict_depth(d[key]) + 1;\n            if(depth > max) max = depth;\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var depth = 0;\n    for(var k in d){\n        if(typeof d[k] == \"object\"){\n            var temp_depth = dict_depth(d[k]) + 1;\n            if(temp_depth > depth){\n                depth = temp_depth;\n            }\n        }\n    }\n    return depth;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpuhdh6e5i.js:20:10)\n    at Object.<anonymous> (/tmp/tmpuhdh6e5i.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor !== Object) return 0;\n    var max = 1;\n    for(var k in d){\n        if(d.hasOwnProperty(k)){\n            var depth = dict_depth(d[k]) + 1;\n            if(depth > max) max = depth;\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor === Object){\n        var max = 0;\n        for(var k in d){\n            var v = d[k];\n            var t = dict_depth(v);\n            if(t > max){\n                max = t;\n            }\n        }\n        return max + 1;\n    }\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor === Object){\n        return 1 + Math.max(...Object.values(d).map(dict_depth));\n    }\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp0pwk9rcj.js:14:10)\n    at Object.<anonymous> (/tmp/tmp0pwk9rcj.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d==={}){\n        return 0;\n    }\n    else{\n        return 1+dict_depth(d[Object.keys(d)[0]]);\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "/tmp/tmpyun5jrxo.js:7\n        return 1+dict_depth(d[Object.keys(d)[0]]);\n                                     ^\n\nTypeError: Cannot convert undefined or null to object\n    at Function.keys (<anonymous>)\n    at dict_depth (/tmp/tmpyun5jrxo.js:7:38)\n    at dict_depth (/tmp/tmpyun5jrxo.js:7:18)\n    at dict_depth (/tmp/tmpyun5jrxo.js:7:18)\n    at test (/tmp/tmpyun5jrxo.js:16:20)\n    at Object.<anonymous> (/tmp/tmpyun5jrxo.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor === Object){\n        var max = 0;\n        for(var i in d){\n            var v = dict_depth(d[i]);\n            if(v > max){\n                max = v;\n            }\n        }\n        return max + 1;\n    }\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor === Object){\n        var max = 0;\n        for(var i in d){\n            var v = dict_depth(d[i]);\n            if(v > max){\n                max = v;\n            }\n        }\n        return max + 1;\n    }\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === {}){\n        return 0;\n    }\n    else{\n        return 1 + dict_depth(d[Object.keys(d)[0]]);\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "/tmp/tmpp498mm47.js:7\n        return 1 + dict_depth(d[Object.keys(d)[0]]);\n                                       ^\n\nTypeError: Cannot convert undefined or null to object\n    at Function.keys (<anonymous>)\n    at dict_depth (/tmp/tmpp498mm47.js:7:40)\n    at dict_depth (/tmp/tmpp498mm47.js:7:20)\n    at dict_depth (/tmp/tmpp498mm47.js:7:20)\n    at test (/tmp/tmpp498mm47.js:16:20)\n    at Object.<anonymous> (/tmp/tmpp498mm47.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n  var max_depth = 1;\n  function depth(d, depth){\n    for(var k in d){\n      if(typeof d[k] == 'object'){\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n        depth(d[k], depth);\n      }\n    }\n  }\n  depth(d, 1);\n  return max_depth;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "/tmp/tmpaha0_z05.js:9\n        depth(d[k], depth);\n        ^\n\nTypeError: depth is not a function\n    at depth (/tmp/tmpaha0_z05.js:9:9)\n    at dict_depth (/tmp/tmpaha0_z05.js:13:3)\n    at test (/tmp/tmpaha0_z05.js:22:20)\n    at Object.<anonymous> (/tmp/tmpaha0_z05.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor !== Object) return 0;\n    var max = 0;\n    for(var k in d){\n        if(d.hasOwnProperty(k)){\n            var depth = dict_depth(d[k]);\n            if(depth > max) max = depth;\n        }\n    }\n    return max + 1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor === Object){\n        var max = 1;\n        for(var k in d){\n            var depth = dict_depth(d[k]);\n            if(depth > max){\n                max = depth;\n            }\n        }\n        return max + 1;\n    }\n    return 1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpblugz25f.js:21:10)\n    at Object.<anonymous> (/tmp/tmpblugz25f.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n  var max = 0;\n  for(var k in d){\n    if(typeof d[k] == 'object'){\n      var depth = dict_depth(d[k]) + 1;\n      if(depth > max){\n        max = depth;\n      }\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpq5tcuwj_.js:20:10)\n    at Object.<anonymous> (/tmp/tmpq5tcuwj_.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === {}){\n        return 0;\n    }\n    var max = 1;\n    for(var key in d){\n        if(typeof d[key] === 'object'){\n            var depth = dict_depth(d[key]) + 1;\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === {}){\n        return 0;\n    }\n    var max = 0;\n    for(var key in d){\n        var value = d[key];\n        if(typeof value === 'object'){\n            var depth = dict_depth(value);\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor === Object){\n        var max = 0;\n        for(var key in d){\n            var v = dict_depth(d[key]);\n            if(v > max){\n                max = v;\n            }\n        }\n        return max + 1;\n    }\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d==={}){\n        return 0;\n    }\n    else{\n        var max=0;\n        for(var key in d){\n            if(typeof(d[key])==\"object\"){\n                var temp_depth=dict_depth(d[key])\n                if(temp_depth>max){\n                    max=temp_depth;\n                }\n            }\n        }\n        return max+1;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor === Object){\n        var max = 0;\n        for(var k in d){\n            var v = d[k];\n            var t = dict_depth(v);\n            if(t > max){\n                max = t;\n            }\n        }\n        return max + 1;\n    }\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var max_depth = 0;\n    for(var key in d){\n        if(typeof d[key] == \"object\"){\n            var depth = dict_depth(d[key]) + 1;\n            if(depth > max_depth){\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp21efpuat.js:20:10)\n    at Object.<anonymous> (/tmp/tmp21efpuat.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor === Object){\n        var max = 0;\n        for(var key in d){\n            var v = dict_depth(d[key]);\n            if(v > max){\n                max = v;\n            }\n        }\n        return max + 1;\n    }\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d==={}){\n        return 0;\n    }\n    else{\n        return 1+dict_depth(d[Object.keys(d)[0]]);\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "/tmp/tmpyun5jrxo.js:7\n        return 1+dict_depth(d[Object.keys(d)[0]]);\n                                     ^\n\nTypeError: Cannot convert undefined or null to object\n    at Function.keys (<anonymous>)\n    at dict_depth (/tmp/tmpyun5jrxo.js:7:38)\n    at dict_depth (/tmp/tmpyun5jrxo.js:7:18)\n    at dict_depth (/tmp/tmpyun5jrxo.js:7:18)\n    at test (/tmp/tmpyun5jrxo.js:16:20)\n    at Object.<anonymous> (/tmp/tmpyun5jrxo.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor !== Object) return 0;\n    var max = 1;\n    for(var k in d){\n        if(d.hasOwnProperty(k)){\n            var depth = dict_depth(d[k]) + 1;\n            if(depth > max) max = depth;\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var depth = 0;\n    for(var k in d){\n        if(typeof d[k] == \"object\"){\n            var temp_depth = dict_depth(d[k]) + 1;\n            if(temp_depth > depth){\n                depth = temp_depth;\n            }\n        }\n    }\n    return depth;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpuhdh6e5i.js:20:10)\n    at Object.<anonymous> (/tmp/tmpuhdh6e5i.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d.constructor === Object){\n        return 1 + Math.max(...Object.values(d).map(dict_depth));\n    }\n    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp0pwk9rcj.js:14:10)\n    at Object.<anonymous> (/tmp/tmp0pwk9rcj.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d=={}){\n        return 0;\n    }\n    var max=1;\n    for(var key in d){\n        if(typeof d[key]==\"object\"){\n            var temp_depth=dict_depth(d[key])+1;\n            if(temp_depth>max){\n                max=temp_depth;\n            }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === {}){\n        return 0;\n    }\n    var max = 1;\n    for(var key in d){\n        if(typeof d[key] === 'object'){\n            var depth = dict_depth(d[key]) + 1;\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d == {}){\n        return 0;\n    }\n    var max = 0;\n    for(var key in d){\n        if(typeof(d[key]) == 'object'){\n            var depth = dict_depth(d[key]);\n            if(depth > max){\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var depth = 0;\n    for(var k in d){\n        if(typeof d[k] == 'object'){\n            var depth_k = dict_depth(d[k]);\n            if(depth_k > depth){\n                depth = depth_k;\n            }\n        }\n    }\n    return 1 + depth;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === null || typeof d !== \"object\"){\n        return 0;\n    }\n    var max = 0;\n    for(var key in d){\n        var depth = dict_depth(d[key]);\n        if(depth > max){\n            max = depth;\n        }\n    }\n    return max + 1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === {}) return 0;\n    var max = 1;\n    for(var k in d){\n        if(typeof d[k] === 'object'){\n            var depth = dict_depth(d[k]) + 1;\n            if(depth > max) max = depth;\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    if(d === null || d === undefined){\n        return 0;\n    }\n    if(!(d instanceof Object)){\n        return 1;\n    }\n    var max = 0;\n    for(var key in d){\n        var depth = dict_depth(d[key]);\n        if(depth > max){\n            max = depth;\n        }\n    }\n    return max + 1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpjskeh6hf.js:25:10)\n    at Object.<anonymous> (/tmp/tmpjskeh6hf.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n    var depth = 1;\n    for(var key in d){\n        if (typeof d[key] == 'object'){\n            var depth2 = dict_depth(d[key])+1;\n            if (depth2>depth) depth = depth2;\n        }\n    }\n    return depth;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d){\n\tvar max = 0;\n\tfor(var key in d){\n\t\tif(typeof d[key] == \"object\"){\n\t\t\tvar depth = dict_depth(d[key]) + 1;\n\t\t\tif(depth > max){\n\t\t\t\tmax = depth;\n\t\t\t}\n\t\t}\n\t}\n\treturn max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509724,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpucpc_jmj.js:20:10)\n    at Object.<anonymous> (/tmp/tmpucpc_jmj.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    }
  ]
}