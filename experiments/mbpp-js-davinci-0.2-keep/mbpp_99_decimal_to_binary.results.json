{
  "name": "mbpp_99_decimal_to_binary",
  "language": "js",
  "prompt": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_99_decimal_to_binary.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var result = \"\";\n  while(n > 0){\n    result = (n % 2) + result;\n    n = Math.floor(n / 2);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    let binary = '';\n    while(n > 0){\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = '';\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var bin = \"\";\n  while(n>0){\n    bin = (n%2) + bin;\n    n = Math.floor(n/2);\n  }\n  return bin;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    var binary = \"\";\n    while(n > 0){\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    let binary = \"\";\n    while(n > 0){\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    var binary = \"\";\n    while(n > 0){\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = \"\";\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var bin = '';\n  while(n > 0){\n    bin = (n % 2) + bin;\n    n = Math.floor(n / 2);\n  }\n  return bin;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = '';\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = \"\";\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  return n.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = \"\";\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    var binary = \"\";\n    while(n>0){\n        binary = n%2 + binary;\n        n = Math.floor(n/2);\n    }\n    return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    var binary = '';\n    while(n > 0){\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = \"\";\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var result = \"\";\n  while(n > 0){\n    result = (n % 2) + result;\n    n = Math.floor(n / 2);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var bin = '';\n  while(n > 0){\n    bin = (n % 2) + bin;\n    n = Math.floor(n / 2);\n  }\n  return bin;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    var binary = \"\";\n    while(n > 0){\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    let binary = '';\n    while(n > 0){\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    return n.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var result = \"\";\n  while(n>0){\n    result = (n%2).toString() + result;\n    n = Math.floor(n/2);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124269,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  return n.toString(2)\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    return n.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    var bin = \"\";\n    while(n > 0){\n        bin = n % 2 + bin;\n        n = Math.floor(n / 2);\n    }\n    return bin;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = \"\";\n  while(n > 0){\n    binary = n%2 + binary;\n    n = Math.floor(n/2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var bin = '';\n  while(n > 0){\n    bin = (n % 2) + bin;\n    n = Math.floor(n / 2);\n  }\n  return bin;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = \"\";\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    return n.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = '';\n  while(n > 0){\n    binary = n % 2 + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = '';\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    var binary = '';\n    while(n > 0){\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    return n.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = \"\";\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n\tvar binary = \"\";\n\twhile(n > 0){\n\t\tbinary = (n%2).toString() + binary;\n\t\tn = Math.floor(n/2);\n\t}\n\treturn binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124269,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    let binary = '';\n    while(n>0){\n        binary = (n%2) + binary;\n        n = Math.floor(n/2);\n    }\n    return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124269,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n\tvar binary = '';\n\twhile(n > 0){\n\t\tbinary = (n % 2) + binary;\n\t\tn = Math.floor(n / 2);\n\t}\n\treturn binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124269,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    let binary = '';\n    while(n > 0){\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = \"\";\n  while(n>0){\n    binary = (n%2).toString() + binary;\n    n = Math.floor(n/2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = '';\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    return n.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = \"\";\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    return n.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    var binary = \"\";\n    while(n > 0){\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = '';\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = \"\";\n  while(n > 0){\n    binary = n % 2 + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    return n.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = \"\";\n  var remainder;\n  while(n > 0){\n    remainder = n % 2;\n    n = Math.floor(n/2);\n    binary = remainder + binary;\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124269,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = '';\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = \"\";\n  while(n > 0){\n    if(n % 2 == 0){\n      binary = \"0\" + binary;\n    }\n    else{\n      binary = \"1\" + binary;\n    }\n    n = Math.floor(n/2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124269,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = \"\";\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = \"\";\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  let binary = '';\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = \"\";\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var result = '';\n  while(n > 0){\n    result = (n % 2) + result;\n    n = Math.floor(n / 2);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var result = '';\n  while(n > 0){\n    result = (n % 2) + result;\n    n = Math.floor(n / 2);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  return n.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    var binary = '';\n    while(n > 0){\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    return n.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = '';\n  while(n>0){\n    binary = (n%2) + binary;\n    n = Math.floor(n/2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124269,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = \"\";\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    return n.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = \"\";\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = \"\";\n  while(n > 0){\n    binary = n%2 + binary;\n    n = Math.floor(n/2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    let binary = \"\";\n    while(n > 0){\n        binary = n % 2 + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var bin = \"\";\n  while(n > 0){\n    bin = n % 2 + bin;\n    n = Math.floor(n / 2);\n  }\n  return bin;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    return n.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var bin = \"\";\n  while(n > 0){\n    bin = n%2 + bin;\n    n = Math.floor(n/2);\n  }\n  return bin;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    let result = \"\";\n    while(n > 0){\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124269,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = \"\";\n  while(n > 0){\n    binary = n % 2 + binary;\n    n = Math.floor(n/2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124269,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var result = '';\n  while(n > 0){\n    result = (n % 2) + result;\n    n = Math.floor(n / 2);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = '';\n  while(n > 0){\n    binary = n % 2 + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  return n.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n\tvar binary = \"\";\n\twhile(n>0){\n\t\tbinary = (n%2).toString() + binary;\n\t\tn = Math.floor(n/2);\n\t}\n\treturn binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124269,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    return n.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    let binary = \"\";\n    while(n > 0){\n        binary = n % 2 + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = '';\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = \"\";\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    return n.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var bin = \"\";\n  while(n > 0){\n    bin = n%2 + bin;\n    n = Math.floor(n/2);\n  }\n  return bin;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    var bin = '';\n    while(n > 0){\n        bin = (n % 2) + bin;\n        n = Math.floor(n / 2);\n    }\n    return bin;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124269,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    return n.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = '';\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n\tvar binary = \"\";\n\twhile(n > 0){\n\t\tbinary = (n % 2) + binary;\n\t\tn = Math.floor(n / 2);\n\t}\n\treturn binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124269,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = '';\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    var bin = \"\";\n    while(n > 0){\n        bin = n % 2 + bin;\n        n = Math.floor(n / 2);\n    }\n    return bin;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    var binary = '';\n    while(n > 0){\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var bin = '';\n  while(n > 0){\n    bin = (n % 2) + bin;\n    n = Math.floor(n / 2);\n  }\n  return bin;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = \"\";\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    var binary = \"\";\n    while(n > 0){\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    return n.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var bin = \"\";\n  while(n > 0){\n    bin = (n % 2) + bin;\n    n = Math.floor(n / 2);\n  }\n  return bin;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  let binary = '';\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    let binary = '';\n    while(n > 0){\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var result = \"\";\n  while(n > 0){\n    result = (n % 2) + result;\n    n = Math.floor(n / 2);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    return n.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var bin = \"\";\n  while(n > 0){\n    bin = (n % 2) + bin;\n    n = Math.floor(n / 2);\n  }\n  return bin;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    return n.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    return (n >>> 0).toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124269,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var bin = '';\n  while(n > 0){\n    bin = (n % 2) + bin;\n    n = Math.floor(n / 2);\n  }\n  return bin;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n\tvar binary = \"\";\n\twhile(n > 0){\n\t\tbinary = (n % 2) + binary;\n\t\tn = Math.floor(n / 2);\n\t}\n\treturn binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124269,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = \"\";\n  while(n>0){\n    binary = (n%2) + binary;\n    n = Math.floor(n/2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var bin = \"\";\n  while(n > 0){\n    bin = n % 2 + bin;\n    n = Math.floor(n / 2);\n  }\n  return bin;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n\tvar bin = '';\n\twhile(n > 0){\n\t\tbin = (n % 2) + bin;\n\t\tn = Math.floor(n / 2);\n\t}\n\treturn bin;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124269,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    let binary = '';\n    while(n > 0){\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  return n.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    var binary = \"\";\n    while(n>0){\n        binary = n%2 + binary;\n        n = Math.floor(n/2);\n    }\n    return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var bin = \"\";\n  while(n > 0){\n    bin = (n % 2) + bin;\n    n = Math.floor(n / 2);\n  }\n  return bin;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = '';\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    return n.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    var binary = \"\";\n    while(n > 0){\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    return n.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    return n.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = \"\";\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n\tvar binary = \"\";\n\twhile(n > 0){\n\t\tbinary = n%2 + binary;\n\t\tn = Math.floor(n/2);\n\t}\n\treturn binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124269,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    let binary = \"\";\n    while(n>0){\n        binary = (n%2).toString() + binary;\n        n = Math.floor(n/2);\n    }\n    return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124269,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var bin = \"\";\n  while(n > 0){\n    bin = (n % 2) + bin;\n    n = Math.floor(n / 2);\n  }\n  return bin;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    return n.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  return n.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = \"\";\n  while(n > 0){\n    binary = n % 2 + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    return n.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var bin = \"\";\n  while(n > 0){\n    bin = n%2 + bin;\n    n = Math.floor(n/2);\n  }\n  return bin;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var bin = '';\n  while(n > 0){\n    bin = (n % 2) + bin;\n    n = Math.floor(n / 2);\n  }\n  return bin;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n\tvar binary = '';\n\twhile(n > 0){\n\t\tbinary = n%2 + binary;\n\t\tn = Math.floor(n/2);\n\t}\n\treturn binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124269,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    var binary = \"\";\n    while(n > 0){\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = \"\";\n  while(n > 0){\n    binary = n%2 + binary;\n    n = Math.floor(n/2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    return n.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = \"\";\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = '';\n  while(n > 0){\n    var remainder = n % 2;\n    binary = remainder + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124269,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = \"\";\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = \"\";\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    var result = '';\n    while(n > 0){\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = '';\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n/2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = \"\";\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    let binary = '';\n    while(n > 0){\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    var binary = \"\";\n    while(n > 0){\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var bin = '';\n  while(n > 0){\n    bin = (n % 2) + bin;\n    n = Math.floor(n / 2);\n  }\n  return bin;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    return n.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    let binary = '';\n    while(n > 0){\n        binary = n % 2 + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124269,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    return n.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = \"\";\n  while(n > 0){\n    binary = n%2 + binary;\n    n = Math.floor(n/2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = \"\";\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    return n.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  return n.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    return n.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = \"\";\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = \"\";\n  while(n > 0){\n    binary = n % 2 + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    return n.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var result = \"\";\n  while(n > 0){\n    result = (n % 2) + result;\n    n = Math.floor(n / 2);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    var binary = \"\";\n    while(n > 0){\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    var bin = \"\";\n    while(n > 0){\n        bin = (n % 2) + bin;\n        n = Math.floor(n / 2);\n    }\n    return bin;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124269,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = '';\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = \"\";\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n\tvar binary = \"\";\n\twhile(n > 0){\n\t\tbinary = n%2 + binary;\n\t\tn = Math.floor(n/2);\n\t}\n\treturn binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124269,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    var binary = '';\n    while(n > 0){\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    return n.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var bin = \"\";\n  while(n > 0){\n    bin = (n % 2) + bin;\n    n = Math.floor(n / 2);\n  }\n  return bin;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = \"\";\n  while(n > 0){\n    var remainder = n % 2;\n    binary = remainder + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124269,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  return n.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    let binary = '';\n    while(n > 0){\n        binary += n % 2;\n        n = Math.floor(n / 2);\n    }\n    return binary.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124269,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    return n.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    let binary = \"\";\n    while(n > 0){\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    return n.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var result = '';\n  while(n > 0){\n    result = (n % 2) + result;\n    n = Math.floor(n/2);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124269,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    var binary = \"\";\n    while(n > 0){\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = \"\";\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    var binary = \"\";\n    while(n > 0){\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  let binary = \"\";\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124269,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = '';\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    var result = '';\n    while(n > 0){\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    return n.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    var binary = [];\n    while(n > 0){\n        binary.push(n % 2);\n        n = Math.floor(n / 2);\n    }\n    return binary.reverse().join('');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124269,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    var binary = '';\n    while(n > 0){\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    let binary = '';\n    while(n>0){\n        binary = (n%2) + binary;\n        n = Math.floor(n/2);\n    }\n    return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124269,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    return n.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    var binary = \"\";\n    while(n > 0){\n        binary = n % 2 + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = \"\";\n  while(n>0){\n    binary = (n%2) + binary;\n    n = Math.floor(n/2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var result = '';\n  while(n > 0){\n    result = (n % 2) + result;\n    n = Math.floor(n / 2);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    return n.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = '';\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = \"\";\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = \"\";\n  while(n>0){\n    binary = (n%2) + binary;\n    n = Math.floor(n/2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = \"\";\n  while (n > 0){\n    binary = n % 2 + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124269,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    return n.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    return n.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    var binary = \"\";\n    while(n > 0){\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = '';\n  while(n > 0){\n    binary = n % 2 + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    var result = \"\";\n    while(n > 0){\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = \"\";\n  while(n > 0){\n    binary = (n % 2).toString() + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = \"\";\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    var bin = '';\n    while(n > 0){\n        bin = (n % 2) + bin;\n        n = Math.floor(n / 2);\n    }\n    return bin;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124269,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var result = \"\";\n  while(n > 0){\n    result = (n % 2) + result;\n    n = Math.floor(n / 2);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var bin = \"\";\n  while(n>0){\n    bin = (n%2) + bin;\n    n = Math.floor(n/2);\n  }\n  return bin;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = '';\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    return n.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n\tvar binary = \"\";\n\twhile(n > 0){\n\t\tbinary = (n%2) + binary;\n\t\tn = Math.floor(n/2);\n\t}\n\treturn binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124269,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    return n.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = '';\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n    var binary = \"\";\n    while(n > 0){\n        binary = n % 2 + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n  var binary = \"\";\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}