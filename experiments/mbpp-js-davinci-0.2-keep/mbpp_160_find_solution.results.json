{
  "name": "mbpp_160_find_solution",
  "language": "js",
  "prompt": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_160_find_solution.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x < n; x++){\n        for(var y = 0; y < n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y === n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for (var x = 0; x <= n; x++){\n        for (var y = 0; y <= n; y++){\n            if (a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    if(a > n || b > n){\n        return null;\n    }\n    if(a == n){\n        return [0, b];\n    }\n    if(b == n){\n        return [a, 0];\n    }\n    if(a < b){\n        return find_solution(a, b-a, n);\n    }\n    return find_solution(a-b, b, n);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "/tmp/tmpx0k9kr5k.js:3\n    if(a > n || b > n){\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at find_solution (/tmp/tmpx0k9kr5k.js:3:5)\n    at find_solution (/tmp/tmpx0k9kr5k.js:13:16)\n    at find_solution (/tmp/tmpx0k9kr5k.js:13:16)\n    at find_solution (/tmp/tmpx0k9kr5k.js:13:16)\n    at find_solution (/tmp/tmpx0k9kr5k.js:13:16)\n    at find_solution (/tmp/tmpx0k9kr5k.js:13:16)\n    at find_solution (/tmp/tmpx0k9kr5k.js:13:16)\n    at find_solution (/tmp/tmpx0k9kr5k.js:13:16)\n    at find_solution (/tmp/tmpx0k9kr5k.js:13:16)\n    at find_solution (/tmp/tmpx0k9kr5k.js:13:16)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x < n; x++){\n        for(var y = 0; y < n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n\tfor(var x = 0; x <= n; x++){\n\t\tfor(var y = 0; y <= n; y++){\n\t\t\tif(a * x + b * y == n){\n\t\t\t\treturn [x, y];\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y === n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y === n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n  for(let x = 0; x <= n; x++){\n    for(let y = 0; y <= n; y++){\n      if(a * x + b * y == n){\n        return [x, y];\n      }\n    }\n  }\n  return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for (var x = 0; x <= n; x++){\n        for (var y = 0; y <= n; y++){\n            if (a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y === n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n\tfor(var x = 0; x <= n; x++){\n\t\tfor(var y = 0; y <= n; y++){\n\t\t\tif(a * x + b * y == n){\n\t\t\t\treturn [x, y];\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y === n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a*x + b*y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y === n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y === n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n  if(n % gcd(a, b) != 0){\n    return null;\n  }\n  var x = 0;\n  var y = n / b;\n  var d = gcd(a, b);\n  return [x, y];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "/tmp/tmp22606x89.js:3\n  if(n % gcd(a, b) != 0){\n  ^\n\nReferenceError: gcd is not defined\n    at find_solution (/tmp/tmp22606x89.js:3:3)\n    at test (/tmp/tmp22606x89.js:17:20)\n    at Object.<anonymous> (/tmp/tmp22606x89.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "ReferenceError"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n  for(let x = 0; x <= n; x++){\n    for(let y = 0; y <= n; y++){\n      if(a * x + b * y == n){\n        return [x, y];\n      }\n    }\n  }\n  return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y === n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y === n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    if(a == 0 && b == 0){\n        return null;\n    }\n    if(a == 0){\n        return [0, n/b];\n    }\n    if(b == 0){\n        return [n/a, 0];\n    }\n    var x = 0;\n    var y = 0;\n    while(a*x + b*y != n){\n        if(a*x + b*y > n){\n            y--;\n        }\n        else{\n            x++;\n        }\n    }\n    return [x, y];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp5suewnxs.js:30:10)\n    at Object.<anonymous> (/tmp/tmp5suewnxs.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -1 ],\n  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y === n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x < n; x++){\n        for(var y = 0; y < n; y++){\n            if(a*x + b*y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y === n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y === n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y === n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x < n; x++){\n        for(let y = 0; y < n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for (var x = 0; x < n; x++){\n        for (var y = 0; y < n; y++){\n            if (a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y === n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n  for(var x = 0; x <= n; x++){\n    for(var y = 0; y <= n; y++){\n      if(a * x + b * y === n){\n        return [x, y];\n      }\n    }\n  }\n  return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n  for(var x = 0; x <= n; x++){\n    for(var y = 0; y <= n; y++){\n      if(a * x + b * y == n){\n        return [x, y];\n      }\n    }\n  }\n  return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x=0; x<n; x++){\n        for(var y=0; y<n; y++){\n            if(a*x + b*y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n  for(let x = 0; x <= n; x++){\n    for(let y = 0; y <= n; y++){\n      if(a * x + b * y == n){\n        return [x, y];\n      }\n    }\n  }\n  return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for (let x = 0; x <= n; x++){\n        for (let y = 0; y <= n; y++){\n            if (a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for (var x = 0; x <= n; x++){\n        for (var y = 0; y <= n; y++){\n            if (a*x + b*y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y === n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y === n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x < n; x++){\n        for(var y = 0; y < n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a*x + b*y === n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y === n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n  for(var x = 0; x <= n; x++){\n    for(var y = 0; y <= n; y++){\n      if(a * x + b * y == n){\n        return [x, y];\n      }\n    }\n  }\n  return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n\tfor(var x = 0; x <= n; x++){\n\t\tfor(var y = 0; y <= n; y++){\n\t\t\tif(a * x + b * y == n){\n\t\t\t\treturn [x, y];\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n  for(let x = 0; x <= n; x++){\n    for(let y = 0; y <= n; y++){\n      if(a * x + b * y === n){\n        return [x, y];\n      }\n    }\n  }\n  return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a*x + b*y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a*x + b*y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x < n; x++){\n        for(var y = 0; y < n; y++){\n            if(a * x + b * y === n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n  for(var x = 0; x <= n; x++){\n    for(var y = 0; y <= n; y++){\n      if(a * x + b * y == n){\n        return [x, y];\n      }\n    }\n  }\n  return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n  for(let x = 0; x <= n; x++){\n    for(let y = 0; y <= n; y++){\n      if(a * x + b * y == n){\n        return [x, y];\n      }\n    }\n  }\n  return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y === n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x < n; x++){\n        for(var y = 0; y < n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for (let x = 0; x <= n; x++){\n        for (let y = 0; y <= n; y++){\n            if (a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n  for(var x = 0; x <= n; x++){\n    for(var y = 0; y <= n; y++){\n      if(a * x + b * y == n){\n        return [x, y];\n      }\n    }\n  }\n  return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a*x + b*y === n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x < n; x++){\n        for(let y = 0; y < n; y++){\n            if(a * x + b * y === n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x < n; x++){\n        for(var y = 0; y < n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x < n; x++){\n        for(let y = 0; y < n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y === n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y === n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for (var x = 0; x <= n; x++){\n        for (var y = 0; y <= n; y++){\n            if (a*x + b*y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for (let x = 0; x <= n; x++){\n        for (let y = 0; y <= n; y++){\n            if (a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y === n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y === n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for (var x = 0; x <= n; x++){\n        for (var y = 0; y <= n; y++){\n            if (a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for (let x = 0; x <= n; x++){\n        for (let y = 0; y <= n; y++){\n            if (a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n  for(var x = 0; x <= n; x++){\n    for(var y = 0; y <= n; y++){\n      if(a * x + b * y == n){\n        return [x, y];\n      }\n    }\n  }\n  return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y === n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a*x + b*y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y === n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n  for(var x = 0; x <= n; x++){\n    for(var y = 0; y <= n; y++){\n      if(a*x + b*y == n){\n        return [x, y];\n      }\n    }\n  }\n  return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n  for(let x = 0; x <= n; x++){\n    for(let y = 0; y <= n; y++){\n      if(a * x + b * y == n){\n        return [x, y];\n      }\n    }\n  }\n  return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y === n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n\tfor(var x = 0; x <= n; x++){\n\t\tfor(var y = 0; y <= n; y++){\n\t\t\tif(a * x + b * y == n){\n\t\t\t\treturn [x, y];\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n  for(var x = 0; x <= n; x++){\n    for(var y = 0; y <= n; y++){\n      if(a * x + b * y == n){\n        return [x, y];\n      }\n    }\n  }\n  return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for (let x = 0; x <= n; x++){\n        for (let y = 0; y <= n; y++){\n            if (a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n  for(let x = 0; x <= n; x++){\n    for(let y = 0; y <= n; y++){\n      if(a * x + b * y == n){\n        return [x, y];\n      }\n    }\n  }\n  return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n\tfor(var x = 0; x <= n; x++){\n\t\tfor(var y = 0; y <= n; y++){\n\t\t\tif(a * x + b * y == n){\n\t\t\t\treturn [x, y];\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(var x = 0; x <= n; x++){\n        for(var y = 0; y <= n; y++){\n            if(a*x + b*y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n  for(let x = 0; x <= n; x++){\n    for(let y = 0; y <= n; y++){\n      if(a * x + b * y === n){\n        return [x, y];\n      }\n    }\n  }\n  return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution(a, b, n){\n    for(let x = 0; x <= n; x++){\n        for(let y = 0; y <= n; y++){\n            if(a * x + b * y == n){\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_solution;\n  assert.deepEqual(candidate(2, 3, 7),[2, 1]);\n  assert.deepEqual(candidate(4, 2, 7),undefined);\n  assert.deepEqual(candidate(1, 13, 17),[4, 1]);\n}\n\ntest();",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}