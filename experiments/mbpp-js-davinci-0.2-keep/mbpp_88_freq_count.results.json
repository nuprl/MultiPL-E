{
  "name": "mbpp_88_freq_count",
  "language": "js",
  "prompt": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_88_freq_count.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0; i<list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0;i<list1.length;i++){\n        if(list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0;i<list1.length;i++){\n        if(dict[list1[i]]==undefined){\n            dict[list1[i]]=1;\n        }\n        else{\n            dict[list1[i]]+=1;\n        }\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0; i<list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0; i<list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0;i<list1.length;i++){\n        if(list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if(freq[element]){\n            freq[element]++;\n        }\n        else{\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\nvar list1 = [1,2,3,4,5,6,7,8,9,10];\nvar freq = freq_count(list1);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict1 = {};\n    for(var i=0;i<list1.length;i++){\n        if(list1[i] in dict1){\n            dict1[list1[i]] += 1;\n        }\n        else{\n            dict1[list1[i]] = 1;\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if(freq[element]){\n            freq[element]++;\n        }\n        else{\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\nvar list1 = [1,2,3,4,5,6,7,8,9,10];\nvar result = freq_count(list1);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0; i<list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if(freq[element]){\n            freq[element]++;\n        }\n        else{\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0;i<list1.length;i++){\n        if(dict[list1[i]]==undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if(freq[element]){\n            freq[element]++;\n        }\n        else{\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0; i<list1.length; i++){\n        if(dict[list1[i]]==undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if(freq[element]){\n            freq[element]++;\n        }\n        else{\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0;i<list1.length;i++){\n        var element = list1[i];\n        if(element in dict){\n            dict[element] += 1;\n        }\n        else{\n            dict[element] = 1;\n        }\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0; i<list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(dict[list1[i]]){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0; i<list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if(freq[element]){\n            freq[element]++;\n        }\n        else{\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if(freq[element]){\n            freq[element]++;\n        }\n        else{\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict1 = {};\n    for(var i=0; i<list1.length; i++){\n        if(dict1[list1[i]] == undefined){\n            dict1[list1[i]] = 1;\n        }\n        else{\n            dict1[list1[i]] += 1;\n        }\n    }\n    return dict1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if(freq[element]){\n            freq[element]++;\n        }\n        else{\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0; i<list1.length; i++){\n        var element = list1[i];\n        if(element in dict){\n            dict[element] += 1;\n        }\n        else{\n            dict[element] = 1;\n        }\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for (var i = 0; i < list1.length; i++){\n        if (list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict1 = {};\n    for(var i=0; i<list1.length; i++){\n        if(dict1[list1[i]] == undefined){\n            dict1[list1[i]] = 1;\n        }\n        else{\n            dict1[list1[i]] += 1;\n        }\n    }\n    return dict1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n  var dict = {};\n  for (var i = 0; i < list1.length; i++){\n    if (dict[list1[i]] == undefined){\n      dict[list1[i]] = 1;\n    }\n    else{\n      dict[list1[i]] += 1;\n    }\n  }\n  return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for (var i = 0; i < list1.length; i++){\n        var element = list1[i];\n        if (element in dict){\n            dict[element] += 1;\n        }\n        else{\n            dict[element] = 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for (var i = 0; i < list1.length; i++){\n        if (list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for (var i = 0; i < list1.length; i++){\n        if (list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0; i<list1.length; i++){\n        if(list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if(freq[element]){\n            freq[element]++;\n        }\n        else{\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0; i<list1.length; i++){\n        if(list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict1 = {};\n    for(var i=0;i<list1.length;i++){\n        if(list1[i] in dict1){\n            dict1[list1[i]] += 1;\n        }\n        else{\n            dict1[list1[i]] = 1;\n        }\n    }\n    return dict1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0; i<list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0; i<list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0; i<list1.length;i++){\n        if(freq[list1[i]] == undefined){\n            freq[list1[i]] = 1;\n        }\n        else{\n            freq[list1[i]] += 1;\n        }\n    }\n    return freq;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if(freq[element]){\n            freq[element]++;\n        }\n        else{\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if(freq[element]){\n            freq[element]++;\n        }\n        else{\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\nvar list1 = [1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "/tmp/tmpdp2xk12v.js:16\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0;i<list1.length;i++){\n        if(dict[list1[i]]==undefined){\n            dict[list1[i]]=1;\n        }\n        else{\n            dict[list1[i]]+=1;\n        }\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0;i<list1.length;i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if(freq[element]){\n            freq[element]++;\n        }\n        else{\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0; i<list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if(freq[element]){\n            freq[element]++;\n        }\n        else{\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\nvar list1 = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10];\nvar frequency = freq_count(list1);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0; i<list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if(freq[element]){\n            freq[element]++;\n        }\n        else{\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\nvar list1 = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10];\nvar frequency = freq_count(list1);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0; i<list1.length; i++){\n        if(list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if(freq[element]){\n            freq[element]++;\n        }\n        else{\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\nvar list1 = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10];\nvar frequency = freq_count(list1);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0;i<list1.length;i++){\n        if(list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0; i<list1.length; i++){\n        if(list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0; i<list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0;i<list1.length;i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0; i<list1.length; i++){\n        if(list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\nvar list1 = [1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if(freq[element]){\n            freq[element]++;\n        }\n        else{\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if(freq[element]){\n            freq[element]++;\n        }\n        else{\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0;i<list1.length;i++){\n        if(list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for (var i = 0; i < list1.length; i++){\n        if (list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if(freq[element]){\n            freq[element]++;\n        }\n        else{\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if(freq[element]){\n            freq[element]++;\n        }\n        else{\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\nvar list1 = [1,2,3,4,5,6,7,8,9,10];\nvar freq = freq_count(list1);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if(freq[element]){\n            freq[element]++;\n        }\n        else{\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(dict[list1[i]]){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0; i<list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0; i<list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if(freq[element]){\n            freq[element]++;\n        }\n        else{\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if(freq[element]){\n            freq[element]++;\n        }\n        else{\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\nvar list1 = [1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "/tmp/tmp3xfm92ua.js:16\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0; i<list1.length; i++){\n        var element = list1[i];\n        if(element in dict){\n            dict[element] += 1;\n        }\n        else{\n            dict[element] = 1;\n        }\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0;i<list1.length;i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for (var i = 0; i < list1.length; i++){\n        if (dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if(freq[element]){\n            freq[element]++;\n        }\n        else{\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if(freq[element]){\n            freq[element]++;\n        }\n        else{\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0;i<list1.length;i++){\n        if(list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n\tvar dict = {};\n\tfor (var i = 0; i < list1.length; i++){\n\t\tif (dict[list1[i]]){\n\t\t\tdict[list1[i]] += 1;\n\t\t}\n\t\telse{\n\t\t\tdict[list1[i]] = 1;\n\t\t}\n\t}\n\treturn dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0;i<list1.length;i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict1 = {};\n    for(var i = 0; i < list1.length; i++){\n        if(dict1[list1[i]]){\n            dict1[list1[i]] += 1;\n        }\n        else{\n            dict1[list1[i]] = 1;\n        }\n    }\n    return dict1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for (var i = 0; i < list1.length; i++){\n        if (list1[i] in dict){\n            dict[list1[i]] += 1;\n        } else {\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0;i<list1.length;i++){\n        if(list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for (var i = 0; i < list1.length; i++){\n        if (list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for (var i = 0; i < list1.length; i++){\n        if (list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0; i<list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\nvar list1 = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0; i<list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if(freq[element]){\n            freq[element]++;\n        }\n        else{\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0;i<list1.length;i++){\n        if(list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0; i<list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for (var i = 0; i < list1.length; i++){\n        if (dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0; i<list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0;i<list1.length;i++){\n        if(list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\n\nvar list1 = [1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "/tmp/tmp5pbrbc2t.js:16\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0; i<list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if(freq[element]){\n            freq[element]++;\n        }\n        else{\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0; i<list1.length; i++){\n        if(list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict1 = {};\n    for(var i=0; i<list1.length; i++){\n        if(list1[i] in dict1){\n            dict1[list1[i]] += 1;\n        }\n        else{\n            dict1[list1[i]] = 1;\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0;i<list1.length;i++){\n        if(dict[list1[i]]==undefined){\n            dict[list1[i]]=1;\n        }\n        else{\n            dict[list1[i]]+=1;\n        }\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if(freq[element]){\n            freq[element]++;\n        }\n        else{\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if(freq[element]){\n            freq[element]++;\n        }\n        else{\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\n\nvar list1 = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10];\nvar freq_list = freq_count(list1);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0;i<list1.length;i++){\n        if(freq[list1[i]] == undefined){\n            freq[list1[i]] = 1;\n        }\n        else{\n            freq[list1[i]] += 1;\n        }\n    }\n    return freq;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0; i<list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for (var i = 0; i < list1.length; i++){\n        if (list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if(freq[element]){\n            freq[element]++;\n        }\n        else{\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0;i<list1.length;i++){\n        if(dict[list1[i]]==undefined){\n            dict[list1[i]]=1;\n        }\n        else{\n            dict[list1[i]]+=1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if(freq[element]){\n            freq[element]++;\n        }\n        else{\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\nvar list1 = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0; i<list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for (var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if (freq[element]){\n           freq[element]++;\n        }\n        else{\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0; i<list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if(freq[element]){\n            freq[element]++;\n        }\n        else{\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\nvar list1 = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0; i<list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0; i<list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if(freq[element]){\n            freq[element]++;\n        }\n        else{\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\n\nvar list1 = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10];\nvar frequency = freq_count(list1);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict1 = {};\n    for(var i=0; i<list1.length; i++){\n        if(list1[i] in dict1){\n            dict1[list1[i]] += 1;\n        }\n        else{\n            dict1[list1[i]] = 1;\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0; i<list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if(freq[element]){\n            freq[element]++;\n        }\n        else{\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0;i<list1.length;i++){\n        if(dict[list1[i]]==undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if(freq[element]){\n            freq[element]++;\n        }\n        else{\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if(freq[element]){\n            freq[element]++;\n        }\n        else{\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict1 = {};\n    for(var i = 0; i < list1.length; i++){\n        if(dict1[list1[i]] == undefined){\n            dict1[list1[i]] = 1;\n        }\n        else{\n            dict1[list1[i]] += 1;\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for (var i = 0; i < list1.length; i++){\n        var element = list1[i];\n        if (element in dict){\n            dict[element] += 1;\n        }\n        else{\n            dict[element] = 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq_dict = {};\n    for(var i=0;i<list1.length;i++){\n        if(list1[i] in freq_dict){\n            freq_dict[list1[i]] += 1;\n        }\n        else{\n            freq_dict[list1[i]] = 1;\n        }\n    }\n    return freq_dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for (var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if (freq[element]){\n           freq[element]++;\n        }\n        else{\n           freq[element] = 1;\n        }\n    }\n    return freq;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for (var i = 0; i < list1.length; i++) {\n        var element = list1[i];\n        if (element in dict) {\n            dict[element] += 1;\n        }\n        else {\n            dict[element] = 1;\n        }\n    }\n    return dict;\n}\nvar list1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0;i<list1.length;i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for (var i = 0; i < list1.length; i++){\n        if (list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0; i<list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for (var i = 0; i < list1.length; i++){\n        if (list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0;i<list1.length;i++){\n        if(list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0;i<list1.length;i++){\n        if(list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0;i<list1.length;i++){\n        if(list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if(freq[element]){\n            freq[element]++;\n        }\n        else{\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\nvar list1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0; i<list1.length; i++){\n        if(list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0; i<list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if(freq[element]){\n            freq[element]++;\n        }\n        else{\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for (var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if (freq[element]){\n           freq[element]++;\n        }\n        else{\n           freq[element] = 1;\n        }\n    }\n    return freq;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if(freq[element]){\n            freq[element]++;\n        }\n        else{\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for (var i = 0; i < list1.length; i++){\n        if (list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0; i<list1.length; i++){\n        if(list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if(freq[element]){\n            freq[element]++;\n        }\n        else{\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if(freq[element]){\n            freq[element]++;\n        }\n        else{\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0; i<list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for (var i = 0; i < list1.length; i++){\n        if (list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0;i<list1.length;i++){\n        if(freq[list1[i]] == undefined){\n            freq[list1[i]] = 1;\n        }\n        else{\n            freq[list1[i]] += 1;\n        }\n    }\n    return freq;\n}\nvar list1 = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0; i<list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n  var dict = {};\n  for(var i=0; i<list1.length; i++){\n    if(list1[i] in dict){\n      dict[list1[i]] += 1;\n    }\n    else{\n      dict[list1[i]] = 1;\n    }\n  }\n  return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for (var i = 0; i < list1.length; i++){\n        if (dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0; i<list1.length; i++){\n        if(list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if(freq[element]){\n            freq[element]++;\n        }\n        else{\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0;i<list1.length;i++){\n        if(dict[list1[i]]){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0; i<list1.length; i++){\n        if(list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0; i<list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0;i<list1.length;i++){\n        if(dict[list1[i]]==undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0; i<list1.length;i++){\n        var element = list1[i];\n        if(freq[element]){\n            freq[element]++;\n        }\n        else{\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for (var i = 0; i < list1.length; i++){\n        if (list1[i] in dict){\n            dict[list1[i]] += 1;\n        }\n        else{\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i=0; i<list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var dict = {};\n    for(var i = 0; i < list1.length; i++){\n        if(dict[list1[i]] == undefined){\n            dict[list1[i]] = 1;\n        }\n        else{\n            dict[list1[i]] += 1;\n        }\n    }\n    return dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count(list1){\n    var freq = {};\n    for(var i=0;i<list1.length;i++){\n        if(freq[list1[i]] == undefined){\n            freq[list1[i]] = 1;\n        }\n        else{\n            freq[list1[i]] += 1;\n        }\n    }\n    return freq;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}