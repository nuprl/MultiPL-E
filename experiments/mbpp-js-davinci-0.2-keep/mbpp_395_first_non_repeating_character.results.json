{
  "name": "mbpp_395_first_non_repeating_character",
  "language": "js",
  "prompt": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1.split('');\n    var ctr = 0;\n    var count = 0;\n    for(var i=0;i<str.length;i++){\n        ctr = 0;\n        for(var j=0;j<str.length;j++){\n            if(str[i] == str[j]){\n                ctr += 1;\n            }\n        }\n        if(ctr < 2){\n            return str[i];\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var arr = str1.split('');\n    var result = '';\n    var ctr = 0;\n    for(var x = 0; x < arr.length; x++){\n        ctr = 0;\n        for(var y = 0; y < arr.length; y++){\n            if(arr[x] === arr[y]){\n                ctr+= 1;\n            }\n        }\n        if(ctr < 2){\n            result = arr[x];\n            break;\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmp6hfjckjc.js:25:10)\n    at Object.<anonymous> (/tmp/tmp6hfjckjc.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var arr = str1.split('');\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = 0; j < arr.length; j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            return arr[i];\n        }\n        count = 0;\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1.split(\"\");\n    for(var i=0;i<str.length;i++){\n        if(str.indexOf(str[i]) == str.lastIndexOf(str[i])){\n            return str[i];\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1.split(\"\");\n    for(var i = 0; i < str.length; i++){\n        if(str.indexOf(str[i]) == str.lastIndexOf(str[i])){\n            return str[i];\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1.split(\"\");\n    for(var i = 0; i < str.length; i++){\n        if(str.indexOf(str[i]) == str.lastIndexOf(str[i])){\n            return str[i];\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var count = 0;\n    var index;\n    for(var i = 0; i < str1.length; i++){\n        for(var j = 0; j < str1.length; j++){\n            if(str1[i] == str1[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            index = i;\n            break;\n        }\n        count = 0;\n    }\n    return str1[index];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1.toLowerCase();\n    for(var i = 0; i < str.length; i++){\n        if(str.indexOf(str[i]) == str.lastIndexOf(str[i])){\n            return str[i];\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var arr = str1.split('');\n    for(var i=0;i<arr.length;i++){\n        if(arr.indexOf(arr[i]) == arr.lastIndexOf(arr[i])){\n            return arr[i];\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var arr = str1.split('');\n    var count = 0;\n    var index = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = 0; j < arr.length; j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            index = i;\n            break;\n        }\n        count = 0;\n    }\n    return arr[index];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'a'\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmp_64cm2g1.js:25:10)\n    at Object.<anonymous> (/tmp/tmp_64cm2g1.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    var len = str.length;\n    var char;\n    var charCount = {};\n    for(var i = 0; i < len; i++){\n        char = str[i];\n        if(charCount[char]){\n            charCount[char]++;\n        }\n        else\n            charCount[char] = 1;\n    }\n    for (var j in charCount){\n        if (charCount[j]==1)\n           return j;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++){\n        if (str.indexOf(str[i]) == str.lastIndexOf(str[i])){\n            return str[i];\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var count = 0;\n    var index;\n    for(var i = 0; i < str1.length; i++){\n        for(var j = 0; j < str1.length; j++){\n            if(str1[i] == str1[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            index = i;\n            break;\n        }\n        count = 0;\n    }\n    return str1[index];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var arr = str1.split('');\n    for(var i = 0; i < arr.length; i++){\n        if(arr.indexOf(arr[i]) == arr.lastIndexOf(arr[i])){\n            return arr[i];\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var arr = str1.split('');\n    for(var i=0;i<arr.length;i++){\n        if(arr.indexOf(arr[i])==arr.lastIndexOf(arr[i])){\n            return arr[i];\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1.split('');\n    for(var i = 0; i < str.length; i++){\n        if(str.indexOf(str[i]) == str.lastIndexOf(str[i])){\n            return str[i];\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for(var i = 0; i < str.length; i++){\n        var c = str.charAt(i);\n        if(str.indexOf(c) == i && str.indexOf(c, i + 1) == -1){\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    var len = str.length;\n    var char;\n    var charCount = {};\n    for(var i = 0; i < len; i++){\n        char = str[i];\n        if(charCount[char]){\n            charCount[char]++;\n        }\n        else\n            charCount[char] = 1;\n    }\n    for (var j in charCount){\n        if (charCount[j]==1)\n           return j;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var arr = str1.split('');\n    var count = 0;\n    for(var i=0; i<arr.length; i++){\n        for(var j=0; j<arr.length; j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            return arr[i];\n        }\n        count = 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++){\n        if (str.indexOf(str[i]) == str.lastIndexOf(str[i])){\n            return str[i];\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var arr = str1.split('');\n    var result = '';\n    var ctr = 0;\n    for(var x = 0; x < arr.length; x++){\n        ctr = 0;\n        for(var y = 0; y < arr.length; y++){\n            if(arr[x] === arr[y]){\n                ctr+= 1;\n            }\n        }\n        if(ctr < 2){\n            result = arr[x];\n            break;\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmp6hfjckjc.js:25:10)\n    at Object.<anonymous> (/tmp/tmp6hfjckjc.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++){\n        if (str.indexOf(str[i]) == str.lastIndexOf(str[i])){\n            return str[i];\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var len = str1.length;\n    var char = '';\n    var char_count = {};\n    for(var i = 0; i < len; i++){\n        char = str1[i];\n        if(char_count[char]){\n            char_count[char]++;\n        }\n        else{\n            char_count[char] = 1;\n        }\n    }\n    for(var j in char_count){\n        if(char_count[j] == 1){\n            return j;\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var len = str1.length;\n    var char;\n    for(var i = 0; i < len; i++){\n        char = str1[i];\n        if(str1.indexOf(char) == i && str1.indexOf(char, i + 1) == -1){\n            return char;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var count = 0;\n    var string = str1;\n    for(var i = 0; i < string.length; i++){\n        if(string.charAt(i) == string.charAt(i+1)){\n            count++;\n        }\n    }\n    if(count == 0){\n        console.log(string.charAt(0));\n    }\n    else{\n        console.log(-1);\n    }\n}\nfirst_non_repeating_character('abcdab');\nfirst_non_repeating_character('abcd');\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "a\na\na\na\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n'a'\n    at test (/tmp/tmp9r3g2ier.js:26:10)\n    at Object.<anonymous> (/tmp/tmp9r3g2ier.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 'a',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++){\n        if (str.indexOf(str[i]) == str.lastIndexOf(str[i])){\n            return str[i];\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var arr = str1.split('');\n    for(var i=0;i<arr.length;i++){\n        if(arr.indexOf(arr[i]) == arr.lastIndexOf(arr[i])){\n            return arr[i];\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var count = 0;\n    var str = str1.toLowerCase();\n    for(var i = 0; i < str.length; i++){\n        if(str.indexOf(str[i]) == str.lastIndexOf(str[i])){\n            return str[i];\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1.split('');\n    var ctr = 0;\n    for(var i = 0; i < str.length; i++){\n        ctr = 0;\n        for(var j = 0; j < str.length; j++){\n            if(str[i] == str[j]){\n                ctr+= 1;\n            }\n        }\n        if(ctr < 2){\n            return str[i];\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1.split('');\n    var ctr = 0;\n    var count = 0;\n    var temp = '';\n    var answer = '';\n    for(var i = 0; i < str.length; i++){\n        ctr = 0;\n        for(var j = 0; j < str.length; j++){\n            if(i != j){\n                if(str[i] == str[j]){\n                    ctr+=1;\n                }\n            }\n        }\n        if(ctr < 1){\n            temp = str[i];\n            count+=1;\n            break;\n        }\n    }\n    if(count > 0){\n        return temp;\n    }\n    else{\n        return '-1';\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-1'\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmpef9kzyqj.js:35:10)\n    at Object.<anonymous> (/tmp/tmpef9kzyqj.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-1',\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1.split(\"\");\n    for(var i = 0; i < str.length; i++){\n        if(str.indexOf(str[i]) == str.lastIndexOf(str[i])){\n            return str[i];\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str=str1;\n    for(var i=0;i<str.length;i++){\n        if(str.indexOf(str[i]) == str.lastIndexOf(str[i])){\n            return str[i];\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1.toLowerCase();\n    for(var i = 0; i < str.length; i++){\n        if(str.indexOf(str[i]) == str.lastIndexOf(str[i])){\n            return str[i];\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++){\n        if (str.indexOf(str[i]) == str.lastIndexOf(str[i])){\n            return str[i]\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var arr1 = str1.split('');\n    var arr2 = [];\n    var arr3 = [];\n    for(var i = 0; i < arr1.length; i++){\n        if(arr2.indexOf(arr1[i]) == -1){\n            arr2.push(arr1[i]);\n            arr3.push(1);\n        }\n        else{\n            arr3[arr2.indexOf(arr1[i])] += 1;\n        }\n    }\n    for(var j = 0; j < arr2.length; j++){\n        if(arr3[j] == 1){\n            return arr2[j];\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str=str1;\n    for(var i=0;i<str.length;i++){\n        if(str.indexOf(str[i]) == str.lastIndexOf(str[i])){\n            return str[i];\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var count = 0;\n    var index;\n    for(var i = 0; i < str1.length; i++){\n        for(var j = 0; j < str1.length; j++){\n            if(str1[i] == str1[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            index = i;\n            break;\n        }\n        count = 0;\n    }\n    return str1[index];\n}\nvar str1 = \"abcdabcd\";\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1.split(\"\");\n    var ctr = 0;\n    var x;\n    for(var i = 0; i < str.length; i++){\n        ctr = 0;\n        for(var j = 0; j < str.length; j++){\n            if(i != j && str[i] == str[j]){\n                ctr++;\n            }\n        }\n        if(ctr < 1){\n            x = str[i];\n            break;\n        }\n    }\n    return x;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var count = 0;\n    var index;\n    for(var i = 0; i < str1.length; i++){\n        for(var j = 0; j < str1.length; j++){\n            if(str1[i] == str1[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            index = i;\n            break;\n        }\n        count = 0;\n    }\n    return str1[index];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1.split('');\n    for(var i = 0; i < str.length; i++){\n        if(str.indexOf(str[i]) == str.lastIndexOf(str[i])){\n            return str[i];\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++){\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1){\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var count = 0;\n    var index;\n    var i;\n    for(i = 0; i < str1.length; i++){\n        if(str1.indexOf(str1[i]) == str1.lastIndexOf(str1[i])){\n            count++;\n            index = i;\n            break;\n        }\n    }\n    if(count == 0){\n        return -1;\n    }\n    else{\n        return str1[index];\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmpmbe5wvyy.js:25:10)\n    at Object.<anonymous> (/tmp/tmpmbe5wvyy.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var count = 0;\n    var index;\n    for(var i = 0; i < str1.length; i++){\n        for(var j = 0; j < str1.length; j++){\n            if(str1[i] == str1[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            index = i;\n            break;\n        }\n        count = 0;\n    }\n    return str1[index];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var count = 0;\n    var index;\n    for(var i = 0; i < str1.length; i++){\n        for(var j = 0; j < str1.length; j++){\n            if(str1[i] == str1[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            index = i;\n            break;\n        }\n        count = 0;\n    }\n    return str1[index];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var count = 0;\n    var index = 0;\n    for(var i = 0; i < str1.length; i++){\n        for(var j = 0; j < str1.length; j++){\n            if(str1[i] == str1[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            index = i;\n            break;\n        }\n        count = 0;\n    }\n    return str1[index];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'a'\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmpp_x3gud0.js:24:10)\n    at Object.<anonymous> (/tmp/tmpp_x3gud0.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var count = 0;\n    var index;\n    for(var i = 0; i < str1.length; i++){\n        for(var j = 0; j < str1.length; j++){\n            if(str1[i] == str1[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            index = i;\n            break;\n        }\n        count = 0;\n    }\n    return str1[index];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var count = 0;\n    var first_non_repeating_character;\n    for(var i = 0; i < str1.length; i++){\n        for(var j = 0; j < str1.length; j++){\n            if(str1[i] == str1[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            first_non_repeating_character = str1[i];\n            break;\n        }\n        count = 0;\n    }\n    return first_non_repeating_character;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var len = str1.length;\n    var char, char_count = {};\n    for(var i = 0; i < len; i++){\n        char = str1[i];\n        if(char_count[char]){\n            char_count[char] += 1;\n        }\n        else\n            char_count[char] = 1;\n    }\n    for (var j in char_count){\n        if (char_count[j] == 1)\n        return j;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var count = 0;\n    var index;\n    for(var i = 0; i < str1.length; i++){\n        for(var j = 0; j < str1.length; j++){\n            if(str1[i] == str1[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            index = i;\n            break;\n        }\n        count = 0;\n    }\n    return str1[index];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1.split('');\n    var ctr = 0;\n    for(var i = 0; i < str.length; i++){\n        ctr = 0;\n        for(var j = 0; j < str.length; j++){\n            if(i != j && str[i] == str[j]){\n                ctr++;\n                break;\n            }\n        }\n        if(ctr == 0){\n            return str[i];\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++){\n        if (str.indexOf(str[i]) == str.lastIndexOf(str[i])){\n            return str[i];\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var count = 0;\n    var index;\n    for(var i = 0; i < str1.length; i++){\n        for(var j = 0; j < str1.length; j++){\n            if(str1[i] == str1[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            index = i;\n            break;\n        }\n        count = 0;\n    }\n    return str1[index];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var len = str1.length;\n    var count = 0;\n    for(var i = 0; i < len; i++){\n        for(var j = 0; j < len; j++){\n            if(str1[i] == str1[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            return str1[i];\n        }\n        count = 0;\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++){\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1){\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1.toLowerCase();\n    for(var i = 0; i < str.length; i++){\n        if(str.indexOf(str[i]) == str.lastIndexOf(str[i])){\n            return str[i]\n        }\n    }\n}\nfirst_non_repeating_character('abcdefghijklmnopqrstuvwxyz')\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1.split('');\n    for(var i=0; i<str.length; i++){\n        if(str.indexOf(str[i]) == str.lastIndexOf(str[i])){\n            return str[i];\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++){\n        if(str.indexOf(str[i]) == str.lastIndexOf(str[i])){\n            return str[i];\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1.toLowerCase();\n    for(var i=0; i<str.length; i++){\n        if(str.indexOf(str[i]) == str.lastIndexOf(str[i])){\n            return str[i];\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1.split('');\n    for(var i = 0; i < str.length; i++){\n        if(str.indexOf(str[i]) == str.lastIndexOf(str[i])){\n            return str[i];\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++){\n        if (str.indexOf(str[i]) == str.lastIndexOf(str[i])){\n            return str[i];\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++){\n        if (str.indexOf(str[i]) == str.lastIndexOf(str[i])){\n            return str[i];\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1.split(\"\");\n    for(var i = 0; i < str.length; i++){\n        if(str.indexOf(str[i]) == str.lastIndexOf(str[i])){\n            return str[i];\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var result = '';\n    for(var i = 0; i < str1.length; i++){\n        var count = 0;\n        for(var j = 0; j < str1.length; j++){\n            if(str1[i] == str1[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            result = str1[i];\n            break;\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmpwj8ud9dq.js:23:10)\n    at Object.<anonymous> (/tmp/tmpwj8ud9dq.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var arr = str1.split('');\n    var count = 0;\n    for(var i=0; i<arr.length; i++){\n        for(var j=0; j<arr.length; j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            return arr[i];\n        }\n        count = 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var arr = str1.split('');\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = 0; j < arr.length; j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            return arr[i];\n        }\n        count = 0;\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1.split(\"\");\n    for(var i = 0; i < str.length; i++){\n        if(str.indexOf(str[i]) == str.lastIndexOf(str[i])){\n            return str[i];\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str=str1;\n    for (var i=0; i<str.length; i++){\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i+1) == -1){\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}