{
  "name": "mbpp_255_combinations_colors",
  "language": "js",
  "prompt": "//Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\nfunction combinations_colors(l, n){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_255_combinations_colors.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = combinations_colors;\n  assert.deepEqual(candidate([\"Red\", \"Green\", \"Blue\"], 1),[[\"Red\"], [\"Green\"], [\"Blue\"]]);\n  assert.deepEqual(candidate([\"Red\", \"Green\", \"Blue\"], 2),[[\"Red\", \"Red\"], [\"Red\", \"Green\"], [\"Red\", \"Blue\"], [\"Green\", \"Green\"], [\"Green\", \"Blue\"], [\"Blue\", \"Blue\"]]);\n  assert.deepEqual(candidate([\"Red\", \"Green\", \"Blue\"], 3),[[\"Red\", \"Red\", \"Red\"], [\"Red\", \"Red\", \"Green\"], [\"Red\", \"Red\", \"Blue\"], [\"Red\", \"Green\", \"Green\"], [\"Red\", \"Green\", \"Blue\"], [\"Red\", \"Blue\", \"Blue\"], [\"Green\", \"Green\", \"Green\"], [\"Green\", \"Green\", \"Blue\"], [\"Green\", \"Blue\", \"Blue\"], [\"Blue\", \"Blue\", \"Blue\"]]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            result.push(prefix.concat(l[i]));\n            f(prefix.concat(l[i]), l.slice(i));\n        }\n    }\n    f([], l);\n    return result.filter(function(a){\n        return a.length == n;\n    });\n}\n",
    "\tvar result = [];\n\tvar recurse = function(l, n, combo){\n\t\tif(n === 0){\n\t\t\tresult.push(combo);\n\t\t\treturn;\n\t\t}\n\t\tfor(var i = 0; i < l.length; i++){\n\t\t\trecurse(l, n - 1, combo.concat(l[i]));\n\t\t}\n\t}\n\trecurse(l, n, []);\n\treturn result;\n}\n",
    "    if(n == 0){\n        return [[]];\n    }\n    var result = [];\n    for(var i = 0; i < l.length; i++){\n        var sub_combinations = combinations_colors(l.slice(i), n - 1);\n        for(var j = 0; j < sub_combinations.length; j++){\n            result.push([l[i]].concat(sub_combinations[j]));\n        }\n    }\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            var new_prefix = prefix.concat(l[i]);\n            if(new_prefix.length == n){\n                result.push(new_prefix);\n            } else {\n                f(new_prefix, l.slice(i));\n            }\n        }\n    };\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    for(var i = 0; i < l.length; i++){\n        for(var j = 0; j < l.length; j++){\n            for(var k = 0; k < l.length; k++){\n                result.push([l[i], l[j], l[k]]);\n            }\n        }\n    }\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        if(prefix.length == n){\n            result.push(prefix);\n            return;\n        }\n        for(var i = 0; i < l.length; i++){\n            f(prefix.concat(l[i]), l);\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    function recurse(l, n, start, current){\n        if (n == 0){\n            result.push(current);\n            return;\n        }\n        for (var i = start; i < l.length; i++){\n            recurse(l, n-1, i, current.concat(l[i]));\n        }\n    }\n    recurse(l, n, 0, []);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i=0; i<l.length; i++){\n            var new_prefix = prefix.concat(l[i]);\n            if(new_prefix.length == n){\n                result.push(new_prefix);\n            } else {\n                f(new_prefix, l.slice(i));\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    var current = [];\n    function recurse(start, depth){\n        if(depth == 0){\n            result.push(current.slice());\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            current.push(l[i]);\n            recurse(i, depth - 1);\n            current.pop();\n        }\n    }\n    recurse(0, n);\n    return result;\n}\n",
    "    var combinations = [];\n    for(var i = 0; i < l.length; i++){\n        var current_color = l[i];\n        for(var j = 0; j < n; j++){\n            combinations.push(current_color);\n        }\n    }\n    return combinations;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        if(prefix.length == n){\n            result.push(prefix);\n            return;\n        }\n        for(var i = 0; i < l.length; i++){\n            var new_prefix = prefix.slice();\n            new_prefix.push(l[i]);\n            f(new_prefix, l);\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            var newPrefix = prefix.concat(l[i]);\n            if(newPrefix.length == n){\n                result.push(newPrefix);\n            }else{\n                f(newPrefix, l.slice(i));\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    for (var i = 0; i < l.length; i++) {\n        for (var j = 0; j < l.length; j++) {\n            for (var k = 0; k < l.length; k++) {\n                result.push([l[i], l[j], l[k]]);\n            }\n        }\n    }\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            result.push(prefix.concat(l[i]));\n            f(prefix.concat(l[i]), l.slice(i));\n        }\n    }\n    f([], l);\n    return result.filter(function(e){\n        return e.length == n;\n    });\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            var new_prefix = prefix.slice(0);\n            new_prefix.push(l[i]);\n            if(new_prefix.length == n){\n                result.push(new_prefix);\n            }\n            else{\n                f(new_prefix, l.slice(i));\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "\tvar result = [];\n\tvar f = function(prefix, l){\n\t\tif(prefix.length == n){\n\t\t\tresult.push(prefix);\n\t\t\treturn;\n\t\t}\n\t\tfor(var i = 0; i < l.length; i++){\n\t\t\tf(prefix.concat(l[i]), l);\n\t\t}\n\t}\n\tf([], l);\n\treturn result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        if(prefix.length == n){\n            result.push(prefix);\n        }\n        else{\n            for(var i = 0; i < l.length; i++){\n                f(prefix.concat(l[i]), l);\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            var new_prefix = prefix.concat(l[i]);\n            if(new_prefix.length == n){\n                result.push(new_prefix);\n            }\n            else{\n                f(new_prefix, l.slice(i));\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    for(var i = 0; i < l.length; i++){\n        for(var j = 0; j < l.length; j++){\n            for(var k = 0; k < l.length; k++){\n                result.push([l[i], l[j], l[k]]);\n            }\n        }\n    }\n    return result;\n}\n",
    "    var result = [];\n    function recurse(l, n, arr){\n        if(n === 0){\n            result.push(arr);\n            return;\n        }\n        for(var i = 0; i < l.length; i++){\n            recurse(l, n - 1, arr.concat(l[i]));\n        }\n    }\n    recurse(l, n, []);\n    return result;\n}\n",
    "    if (n == 0){\n        return [[]];\n    }\n    if (l.length == 0){\n        return [];\n    }\n    var x = l[0];\n    var xs = l.slice(1, l.length);\n    var combs = combinations_colors(xs, n - 1);\n    var new_combs = combs.map(function(c){return [x].concat(c);});\n    return combs.concat(new_combs).concat(combinations_colors(xs, n));\n}\n",
    "    var result = [];\n    for(var i = 0; i < l.length; i++){\n        for(var j = 0; j < l.length; j++){\n            for(var k = 0; k < l.length; k++){\n                result.push([l[i], l[j], l[k]]);\n            }\n        }\n    }\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i=0; i<l.length; i++){\n            var newPrefix = prefix.concat(l[i]);\n            if(newPrefix.length == n){\n                result.push(newPrefix);\n            } else {\n                f(newPrefix, l.slice(i));\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    for(var i = 0; i < l.length; i++){\n        for(var j = 0; j < l.length; j++){\n            for(var k = 0; k < l.length; k++){\n                result.push([l[i], l[j], l[k]]);\n            }\n        }\n    }\n    return result;\n}\n",
    "    if(n == 0){\n        return [[]];\n    }\n    var result = [];\n    for(var i = 0; i < l.length; i++){\n        var sub_result = combinations_colors(l, n - 1);\n        for(var j = 0; j < sub_result.length; j++){\n            sub_result[j].unshift(l[i]);\n            result.push(sub_result[j]);\n        }\n    }\n    return result;\n}\n",
    "    var result = [];\n    for(var i = 0; i < l.length; i++){\n        for(var j = 0; j < l.length; j++){\n            for(var k = 0; k < l.length; k++){\n                result.push([l[i],l[j],l[k]]);\n            }\n        }\n    }\n    return result;\n}\n",
    "    var result = [];\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var len = l.length;\n    var len_n = Math.pow(len, n);\n    for(i = 0; i < len_n; i++){\n        var temp = [];\n        for(j = 0; j < n; j++){\n            temp.push(l[Math.floor(i/Math.pow(len, j))%len]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        if (prefix.length == n){\n            result.push(prefix);\n        }\n        else{\n            for (var i = 0; i < l.length; i++){\n                f(prefix.concat(l[i]), l);\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        if(prefix.length == n){\n            result.push(prefix);\n            return;\n        }\n        for(var i = 0; i < l.length; i++){\n            f(prefix.concat(l[i]), l);\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "\tvar result = [];\n\tvar f = function(prefix, l){\n\t\tif(prefix.length == n){\n\t\t\tresult.push(prefix);\n\t\t}else{\n\t\t\tfor(var i = 0; i < l.length; i++){\n\t\t\t\tf(prefix.concat(l[i]), l);\n\t\t\t}\n\t\t}\n\t}\n\tf([], l);\n\treturn result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        if(prefix.length == n){\n            result.push(prefix);\n        }\n        else{\n            for(var i = 0; i < l.length; i++){\n                f(prefix.concat(l[i]), l);\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "\tvar result = [];\n\tvar f = function(prefix, l){\n\t\tif(prefix.length == n){\n\t\t\tresult.push(prefix);\n\t\t\treturn;\n\t\t}\n\t\tfor(var i = 0; i < l.length; i++){\n\t\t\tf(prefix.concat(l[i]), l);\n\t\t}\n\t}\n\tf([], l);\n\treturn result;\n}\n",
    "  var combinations = [];\n  for(var i = 0; i < l.length; i++){\n    for(var j = 0; j < l.length; j++){\n      for(var k = 0; k < l.length; k++){\n        combinations.push([l[i], l[j], l[k]]);\n      }\n    }\n  }\n  return combinations;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        if(prefix.length == n){\n            result.push(prefix);\n            return;\n        }\n        for(var i = 0; i < l.length; i++){\n            f(prefix.concat([l[i]]), l);\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        if(prefix.length == n){\n            result.push(prefix);\n            return;\n        }\n        for(var i = 0; i < l.length; i++){\n            f(prefix.concat(l[i]), l);\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var m = 0;\n    var temp = [];\n    var temp2 = [];\n    for(i = 0; i < l.length; i++){\n        temp.push(l[i]);\n        for(j = 0; j < l.length; j++){\n            temp.push(l[j]);\n            for(k = 0; k < l.length; k++){\n                temp.push(l[k]);\n                for(m = 0; m < l.length; m++){\n                    temp.push(l[m]);\n                    temp2.push(temp);\n                    temp = [];\n                    temp.push(l[i]);\n                    temp.push(l[j]);\n                    temp.push(l[k]);\n                }\n                temp = [];\n                temp.push(l[i]);\n                temp.push(l[j]);\n            }\n            temp = [];\n            temp.push(l[i]);\n        }\n        temp = [];\n    }\n    return temp2;\n}\n",
    "\tvar result = [];\n\tvar combinations = [];\n\tvar helper = function(start, depth){\n\t\tif(depth == 0){\n\t\t\tresult.push(combinations.slice());\n\t\t\treturn;\n\t\t}\n\t\tfor(var i = start; i < l.length; i++){\n\t\t\tcombinations[combinations.length - depth] = l[i];\n\t\t\thelper(i, depth - 1);\n\t\t}\n\t}\n\thelper(0, n);\n\treturn result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            var new_prefix = prefix.slice(0);\n            new_prefix.push(l[i]);\n            if(new_prefix.length == n){\n                result.push(new_prefix);\n            }else{\n                f(new_prefix, l.slice(i));\n            }\n        }\n    };\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            result.push(prefix.concat(l[i]));\n            f(prefix.concat(l[i]), l.slice(i));\n        }\n    }\n    f([], l);\n    return result.filter(function(a){\n        return a.length == n;\n    });\n}\n",
    "    var result = [];\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var temp = [];\n    for (i = 0; i < l.length; i++){\n        for (j = 0; j < l.length; j++){\n            for (k = 0; k < l.length; k++){\n                temp = [l[i], l[j], l[k]];\n                result.push(temp);\n            }\n        }\n    }\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            var new_prefix = prefix.concat(l[i]);\n            if(new_prefix.length == n){\n                result.push(new_prefix);\n            }else{\n                f(new_prefix, l.slice(i));\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            var new_prefix = prefix.concat(l[i]);\n            if(new_prefix.length === n){\n                result.push(new_prefix);\n            }else{\n                f(new_prefix, l.slice(i));\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "\tvar result = [];\n\tvar i = 0;\n\tvar j = 0;\n\tvar k = 0;\n\tvar temp = [];\n\tfor(i = 0; i < l.length; i++){\n\t\tfor(j = 0; j < l.length; j++){\n\t\t\tfor(k = 0; k < l.length; k++){\n\t\t\t\ttemp = [l[i], l[j], l[k]];\n\t\t\t\tresult.push(temp);\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n",
    "  var result = [];\n  var i = 0;\n  var j = 0;\n  for(i=0; i<l.length; i++){\n    for(j=0; j<n; j++){\n      result.push(l[i]);\n    }\n  }\n  return result;\n}\n",
    "\tvar result = [];\n\tvar f = function(prefix, l){\n\t\tif(prefix.length == n){\n\t\t\tresult.push(prefix);\n\t\t}else{\n\t\t\tfor(var i = 0; i < l.length; i++){\n\t\t\t\tf(prefix.concat(l[i]), l);\n\t\t\t}\n\t\t}\n\t}\n\tf([], l);\n\treturn result;\n}\n",
    "\tvar result = [];\n\tvar helper = function(l, n, i, curr){\n\t\tif(curr.length == n){\n\t\t\tresult.push(curr);\n\t\t\treturn;\n\t\t}\n\t\tfor(var j = i; j < l.length; j++){\n\t\t\thelper(l, n, j, curr.concat(l[j]));\n\t\t}\n\t};\n\thelper(l, n, 0, []);\n\treturn result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            var new_prefix = prefix.concat(l[i]);\n            if(new_prefix.length == n){\n                result.push(new_prefix);\n            }else{\n                f(new_prefix, l.slice(i));\n            }\n        }\n    };\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        if(prefix.length == n){\n            result.push(prefix);\n            return;\n        }\n        for(var i = 0; i < l.length; i++){\n            f(prefix.concat(l[i]), l);\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    function recurse(l, n, start, current){\n        if(n == 0){\n            result.push(current);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            recurse(l, n-1, i, current.concat(l[i]));\n        }\n    }\n    recurse(l, n, 0, []);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            var new_prefix = prefix.slice(0);\n            new_prefix.push(l[i]);\n            if(new_prefix.length == n){\n                result.push(new_prefix);\n            }else{\n                f(new_prefix, l.slice(i));\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        if(prefix.length == n){\n            result.push(prefix);\n        }\n        else{\n            for(var i = 0; i < l.length; i++){\n                f(prefix.concat(l[i]), l);\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "\tvar result = [];\n\tvar temp = [];\n\tvar len = l.length;\n\tfunction recurse(start, curr){\n\t\tif(curr.length == n){\n\t\t\tresult.push(curr);\n\t\t\treturn;\n\t\t}\n\t\tif(start == len){\n\t\t\treturn;\n\t\t}\n\t\ttemp = curr.slice(0);\n\t\ttemp.push(l[start]);\n\t\trecurse(start, temp);\n\t\trecurse(start+1, curr);\n\t}\n\trecurse(0, []);\n\treturn result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            var new_prefix = prefix.concat(l[i]);\n            if(new_prefix.length == n){\n                result.push(new_prefix);\n            } else {\n                f(new_prefix, l.slice(i));\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    let result = [];\n    function helper(l, n, i, arr){\n        if(n === 0){\n            result.push(arr);\n        }\n        else{\n            for(let j = i; j < l.length; j++){\n                helper(l, n-1, j, arr.concat(l[j]));\n            }\n        }\n    }\n    helper(l, n, 0, []);\n    return result;\n}\n",
    "    var result = [];\n    for(var i = 0; i < l.length; i++){\n        for(var j = 0; j < l.length; j++){\n            for(var k = 0; k < l.length; k++){\n                result.push([l[i], l[j], l[k]]);\n            }\n        }\n    }\n    return result;\n}\n",
    "    var result = [];\n    function recurse(start, curr){\n        if (curr.length === n){\n            result.push(curr.slice());\n            return;\n        }\n        for (var i = start; i < l.length; i++){\n            curr.push(l[i]);\n            recurse(i, curr);\n            curr.pop();\n        }\n    }\n    recurse(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function helper(l, n, arr){\n        if(n == 0){\n            result.push(arr);\n            return;\n        }\n        for(var i = 0; i < l.length; i++){\n            helper(l, n-1, arr.concat(l[i]));\n        }\n    }\n    helper(l, n, []);\n    return result;\n}\n",
    "    var combinations = [];\n    for(var i = 0; i < l.length; i++){\n        var current = l[i];\n        if(n == 1){\n            combinations.push(current);\n        }\n        else{\n            var sub_combinations = combinations_colors(l, n-1);\n            for(var j = 0; j < sub_combinations.length; j++){\n                combinations.push(current + sub_combinations[j]);\n            }\n        }\n    }\n    return combinations;\n}\n",
    "    var combinations = [];\n    function helper(l, n, i, c){\n        if(n === 0){\n            combinations.push(c);\n            return;\n        }\n        if(i === l.length){\n            return;\n        }\n        helper(l, n-1, i, c.concat(l[i]));\n        helper(l, n, i+1, c);\n    }\n    helper(l, n, 0, []);\n    return combinations;\n}",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            result.push(prefix.concat(l[i]));\n            f(prefix.concat(l[i]), l.slice(i+1));\n        }\n    }\n    f([], l);\n    return result.filter(function(x){\n        return x.length == n;\n    });\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        if(prefix.length == n){\n            result.push(prefix);\n        }else{\n            for(var i = 0; i < l.length; i++){\n                f(prefix.concat(l[i]), l);\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            var new_prefix = prefix.concat(l[i]);\n            if(new_prefix.length == n){\n                result.push(new_prefix);\n            }\n            else{\n                f(new_prefix, l.slice(i));\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            var new_prefix = prefix.concat(l[i]);\n            if(new_prefix.length == n){\n                result.push(new_prefix);\n            }\n            else{\n                f(new_prefix, l.slice(i));\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "\tvar result = [];\n\tvar f = function(prefix, l){\n\t\tif(prefix.length == n){\n\t\t\tresult.push(prefix);\n\t\t}else{\n\t\t\tfor(var i = 0; i < l.length; i++){\n\t\t\t\tf(prefix.concat(l[i]), l);\n\t\t\t}\n\t\t}\n\t}\n\tf([], l);\n\treturn result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            result.push(prefix.concat(l[i]));\n            f(prefix.concat(l[i]), l.slice(i));\n        }\n    }\n    f([], l);\n    return result.filter(function(e){\n        return e.length == n;\n    });\n}\n",
    "    var result = [];\n    function recurse(l, n, start, curr){\n        if(curr.length == n){\n            result.push(curr);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            recurse(l, n, i, curr.concat(l[i]));\n        }\n    }\n    recurse(l, n, 0, []);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            var new_prefix = prefix.concat(l[i]);\n            if(new_prefix.length == n){\n                result.push(new_prefix);\n            }\n            else{\n                f(new_prefix, l.slice(i));\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        if(prefix.length == n){\n            result.push(prefix);\n        }\n        else{\n            for(var i = 0; i < l.length; i++){\n                f(prefix.concat(l[i]), l);\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    if(n == 1){\n        return l.map(function(e){\n            return [e];\n        });\n    }\n    var result = [];\n    for(var i = 0; i < l.length; i++){\n        var sub_result = combinations_colors(l.slice(i), n-1);\n        for(var j = 0; j < sub_result.length; j++){\n            result.push([l[i]].concat(sub_result[j]));\n        }\n    }\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            var new_prefix = prefix.concat(l[i]);\n            if(new_prefix.length == n){\n                result.push(new_prefix);\n            }else{\n                f(new_prefix, l.slice(i));\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        if (prefix.length === n){\n            result.push(prefix);\n            return;\n        }\n        for (var i = 0; i < l.length; i++){\n            f(prefix.concat(l[i]), l);\n        }\n    };\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        if (prefix.length == n){\n            result.push(prefix);\n        }\n        else{\n            for (var i = 0; i < l.length; i++){\n                f(prefix.concat(l[i]), l);\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "\tvar result = [];\n\tvar helper = function(l, n, start, curr){\n\t\tif(curr.length == n){\n\t\t\tresult.push(curr);\n\t\t\treturn;\n\t\t}\n\t\tfor(var i = start; i < l.length; i++){\n\t\t\thelper(l, n, i, curr.concat(l[i]));\n\t\t}\n\t}\n\thelper(l, n, 0, []);\n\treturn result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        if(prefix.length == n){\n            result.push(prefix);\n            return;\n        }\n        for(var i = 0; i < l.length; i++){\n            f(prefix.concat(l[i]), l);\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            var new_prefix = prefix.slice(0);\n            new_prefix.push(l[i]);\n            if(new_prefix.length == n){\n                result.push(new_prefix);\n            }\n            else{\n                f(new_prefix, l.slice(i));\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            result.push(prefix.concat(l[i]));\n            f(prefix.concat(l[i]), l.slice(i));\n        }\n    }\n    f([], l);\n    return result.filter(function(x){\n        return x.length == n;\n    });\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        if (prefix.length == n){\n            result.push(prefix);\n        } else {\n            for (var i = 0; i < l.length; i++){\n                f(prefix.concat(l[i]), l);\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            result.push(prefix.concat(l[i]));\n            f(prefix.concat(l[i]), l.slice(i));\n        }\n    }\n    f([], l);\n    return result.filter(function(a){\n        return a.length == n;\n    });\n}\n",
    "    var comb = [];\n    var f = function(prefix, l){\n        if(prefix.length == n){\n            comb.push(prefix);\n            return;\n        }\n        for(var i = 0; i < l.length; i++){\n            f(prefix.concat(l[i]), l);\n        }\n    }\n    f([], l);\n    return comb;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        if(prefix.length == n){\n            result.push(prefix);\n        }\n        else{\n            for(var i = 0; i < l.length; i++){\n                f(prefix.concat(l[i]), l);\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            var new_prefix = prefix.concat(l[i]);\n            if(new_prefix.length == n){\n                result.push(new_prefix);\n            }\n            else{\n                f(new_prefix, l.slice(i));\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        if(prefix.length == n){\n            result.push(prefix);\n            return;\n        }\n        for(var i = 0; i < l.length; i++){\n            f(prefix.concat(l[i]), l);\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    var combinations = function(start, prefix){\n        for(var i = start; i < l.length; i++){\n            var new_prefix = prefix.concat(l[i]);\n            if(new_prefix.length == n){\n                result.push(new_prefix);\n            } else {\n                combinations(i, new_prefix);\n            }\n        }\n    }\n    combinations(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function helper(l, n, arr){\n        if(n == 0){\n            result.push(arr);\n            return;\n        }\n        for(var i = 0; i < l.length; i++){\n            helper(l, n-1, arr.concat(l[i]));\n        }\n    }\n    helper(l, n, []);\n    return result;\n}",
    "    var result = [];\n    for(var i = 0; i < l.length; i++){\n        for(var j = 0; j < l.length; j++){\n            for(var k = 0; k < l.length; k++){\n                result.push([l[i], l[j], l[k]]);\n            }\n        }\n    }\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            var new_prefix = prefix.slice(0);\n            new_prefix.push(l[i]);\n            if(new_prefix.length == n){\n                result.push(new_prefix);\n            }\n            else{\n                f(new_prefix, l.slice(i));\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "\tvar result = [];\n\tvar combinations = function(l, n, start, current){\n\t\tif(current.length == n){\n\t\t\tresult.push(current);\n\t\t\treturn;\n\t\t}\n\t\tfor(var i = start; i < l.length; i++){\n\t\t\tcurrent.push(l[i]);\n\t\t\tcombinations(l, n, i, current);\n\t\t\tcurrent.pop();\n\t\t}\n\t}\n\tcombinations(l, n, 0, []);\n\treturn result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        if(prefix.length == n){\n            result.push(prefix);\n        }else{\n            for(var i = 0; i < l.length; i++){\n                f(prefix.concat(l[i]), l);\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            var new_prefix = prefix.concat(l[i]);\n            if(new_prefix.length == n){\n                result.push(new_prefix);\n            } else {\n                f(new_prefix, l.slice(i));\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    function helper(l, n, curr){\n        if (n === 0){\n            result.push(curr);\n            return;\n        }\n        for (var i = 0; i < l.length; i++){\n            helper(l, n-1, curr.concat(l[i]));\n        }\n    }\n    helper(l, n, []);\n    return result;\n}\n",
    "    var result = [];\n    function helper(l, n, i, arr){\n        if(n == 0){\n            result.push(arr);\n            return;\n        }\n        if(i == l.length){\n            return;\n        }\n        helper(l, n-1, i, arr.concat(l[i]));\n        helper(l, n, i+1, arr);\n    }\n    helper(l, n, 0, []);\n    return result;\n}\n",
    "    var result = [];\n    if(n == 1){\n        for(var i = 0; i < l.length; i++){\n            result.push([l[i]]);\n        }\n        return result;\n    }\n    else{\n        var temp = combinations_colors(l, n-1);\n        for(var i = 0; i < temp.length; i++){\n            for(var j = 0; j < l.length; j++){\n                var temp2 = temp[i].slice();\n                temp2.push(l[j]);\n                result.push(temp2);\n            }\n        }\n        return result;\n    }\n}\n",
    "    var result = [];\n    for(var i = 0; i < l.length; i++){\n        for(var j = 0; j < l.length; j++){\n            for(var k = 0; k < l.length; k++){\n                result.push([l[i], l[j], l[k]]);\n            }\n        }\n    }\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        if(prefix.length == n){\n            result.push(prefix);\n            return;\n        }\n        for(var i = 0; i < l.length; i++){\n            f(prefix.concat(l[i]), l);\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    if(n == 0){\n        return [[]];\n    }\n    for(var i = 0; i < l.length; i++){\n        var sub_combos = combinations_colors(l.slice(i), n-1);\n        for(var j = 0; j < sub_combos.length; j++){\n            result.push([l[i]].concat(sub_combos[j]));\n        }\n    }\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        if(prefix.length == n){\n            result.push(prefix);\n        }\n        else{\n            for(var i = 0; i < l.length; i++){\n                f(prefix.concat(l[i]), l);\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    for(var i = 0; i < l.length; i++){\n        for(var j = 0; j < l.length; j++){\n            for(var k = 0; k < l.length; k++){\n                result.push(l[i] + l[j] + l[k]);\n            }\n        }\n    }\n    return result;\n}\n",
    "    var result = [];\n    for(var i = 0; i < l.length; i++){\n        for(var j = 0; j < l.length; j++){\n            for(var k = 0; k < l.length; k++){\n                result.push([l[i],l[j],l[k]]);\n            }\n        }\n    }\n    return result;\n}\n",
    "\tvar result = [];\n\tvar f = function(prefix, l){\n\t\tif(prefix.length == n){\n\t\t\tresult.push(prefix);\n\t\t}\n\t\telse{\n\t\t\tfor(var i = 0; i < l.length; i++){\n\t\t\t\tf(prefix.concat(l[i]), l);\n\t\t\t}\n\t\t}\n\t}\n\tf([], l);\n\treturn result;\n}\n",
    "\tvar result = [];\n\tvar f = function(prefix, l){\n\t\tif(prefix.length == n){\n\t\t\tresult.push(prefix);\n\t\t\treturn;\n\t\t}\n\t\tfor(var i = 0; i < l.length; i++){\n\t\t\tf(prefix.concat(l[i]), l);\n\t\t}\n\t}\n\tf([], l);\n\treturn result;\n}\n",
    "\tvar result = [];\n\tfunction combinations(l, n, i, current){\n\t\tif(n == 0){\n\t\t\tresult.push(current);\n\t\t\treturn;\n\t\t}\n\t\tfor(var j = i; j < l.length; j++){\n\t\t\tcombinations(l, n-1, j, current.concat(l[j]));\n\t\t}\n\t}\n\tcombinations(l, n, 0, []);\n\treturn result;\n}\n",
    "\tvar result = [];\n\tvar f = function(prefix, l){\n\t\tfor(var i = 0; i < l.length; i++){\n\t\t\tvar newPrefix = prefix.slice(0);\n\t\t\tnewPrefix.push(l[i]);\n\t\t\tif(newPrefix.length == n){\n\t\t\t\tresult.push(newPrefix);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tf(newPrefix, l);\n\t\t\t}\n\t\t}\n\t}\n\tf([], l);\n\treturn result;\n}\n",
    "    if (n == 0){\n        return [[]];\n    }\n    if (l.length == 0){\n        return [];\n    }\n    var first = l[0];\n    var rest = l.slice(1);\n    var with_first = combinations_colors(rest, n - 1).map(function(x){\n        return [first].concat(x);\n    });\n    var without_first = combinations_colors(rest, n);\n    return with_first.concat(without_first);\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        if(prefix.length == n){\n            result.push(prefix);\n        }\n        else{\n            for(var i = 0; i < l.length; i++){\n                f(prefix.concat(l[i]), l);\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    function combinations(l, n, start, current){\n        if (current.length == n){\n            result.push(current);\n            return;\n        }\n        for (var i = start; i < l.length; i++){\n            current.push(l[i]);\n            combinations(l, n, i, current);\n            current.pop();\n        }\n    }\n    combinations(l, n, 0, []);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            var new_prefix = prefix.concat(l[i]);\n            if(new_prefix.length == n){\n                result.push(new_prefix);\n            }\n            else{\n                f(new_prefix, l.slice(i));\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            var new_prefix = prefix.concat(l[i]);\n            if(new_prefix.length == n){\n                result.push(new_prefix);\n            }\n            else{\n                f(new_prefix, l.slice(i));\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "\tvar result = [];\n\tvar f = function(prefix, l){\n\t\tif(prefix.length == n){\n\t\t\tresult.push(prefix);\n\t\t}else{\n\t\t\tfor(var i = 0; i < l.length; i++){\n\t\t\t\tf(prefix.concat([l[i]]), l);\n\t\t\t}\n\t\t}\n\t}\n\tf([], l);\n\treturn result;\n}\n",
    "    var result = [];\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    for(i=0; i<l.length; i++){\n        for(j=0; j<l.length; j++){\n            for(k=0; k<l.length; k++){\n                result.push([l[i], l[j], l[k]]);\n            }\n        }\n    }\n    return result;\n}\n",
    "    var combinations = [];\n    var combination = [];\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var m = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var aa = 0;\n    var bb = 0;\n    var cc = 0;\n    var dd = 0;\n    var ee = 0;\n    var ff = 0;\n    var gg = 0;\n    var hh = 0;\n    var ii = 0;\n    var jj = 0;\n    var kk = 0;\n    var ll = 0;\n    var mm = 0;\n    var nn = 0;\n    var oo = 0;\n    var pp = 0;\n    var qq = 0;\n    var rr = 0;\n    var ss = 0;\n    var tt = 0;\n    var uu = 0;\n    var vv = 0;\n    var ww = 0;\n    var xx = 0;\n    var yy = 0;\n    var zz = 0;\n    var aaa = 0;\n    var bbb = 0;\n    var ccc = 0;\n    var ddd = 0;\n    var eee = 0;\n    var fff = 0;\n    var ggg = 0;\n    var hhh = 0;\n    var iii = 0;\n    var jjj = 0;\n    var kkk = 0;\n    var lll = 0;\n    var mmm = 0;\n    var nnn = 0;\n    var ooo = 0;\n    var ppp = 0;\n    var qqq = 0;\n    var rrr = 0;\n    var sss = 0;\n    var ttt = 0;\n    var uuu = 0;\n    var vvv = 0;\n    var www = 0;\n    var xxx = 0;\n    var yyy =",
    "  var result = [];\n  var temp = [];\n  var len = l.length;\n  var i, j;\n  for(i = 0; i < len; i++){\n    for(j = 0; j < n; j++){\n      temp.push(l[i]);\n    }\n    result.push(temp);\n    temp = [];\n  }\n  return result;\n}\n",
    "    var result = [];\n    for (var i = 0; i < l.length; i++){\n        for (var j = 0; j < l.length; j++){\n            for (var k = 0; k < l.length; k++){\n                result.push([l[i], l[j], l[k]]);\n            }\n        }\n    }\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            var new_prefix = prefix.concat(l[i]);\n            if(new_prefix.length == n){\n                result.push(new_prefix);\n            }\n            else{\n                f(new_prefix, l.slice(i));\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var combinations = [];\n    var combinations_helper = function(l, n, i, current_combination){\n        if(current_combination.length == n){\n            combinations.push(current_combination);\n            return;\n        }\n        if(i == l.length){\n            return;\n        }\n        combinations_helper(l, n, i+1, current_combination);\n        combinations_helper(l, n, i+1, current_combination.concat(l[i]));\n    }\n    combinations_helper(l, n, 0, []);\n    return combinations;\n}\n",
    "  var result = [];\n  var f = function(prefix, l){\n    if(prefix.length == n){\n      result.push(prefix);\n    } else {\n      for(var i = 0; i < l.length; i++){\n        f(prefix.concat(l[i]), l);\n      }\n    }\n  }\n  f([], l);\n  return result;\n}\n",
    "    var result = [];\n    for(var i = 0; i < l.length; i++){\n        for(var j = 0; j < l.length; j++){\n            for(var k = 0; k < l.length; k++){\n                result.push([l[i], l[j], l[k]]);\n            }\n        }\n    }\n    return result;\n}\n",
    "  var result = [];\n  var f = function(prefix, l){\n    for(var i = 0; i < l.length; i++){\n      var new_prefix = prefix.concat([l[i]]);\n      if(new_prefix.length === n){\n        result.push(new_prefix);\n      } else {\n        f(new_prefix, l);\n      }\n    }\n  }\n  f([], l);\n  return result;\n}\n",
    "\tvar result = [];\n\tvar recurse = function(l, n, i, arr){\n\t\tif(n === 0){\n\t\t\tresult.push(arr);\n\t\t\treturn;\n\t\t}\n\t\tfor(var j = i; j < l.length; j++){\n\t\t\trecurse(l, n-1, j, arr.concat(l[j]));\n\t\t}\n\t}\n\trecurse(l, n, 0, []);\n\treturn result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        if(prefix.length == n){\n            result.push(prefix);\n            return;\n        }\n        for(var i = 0; i < l.length; i++){\n            f(prefix.concat(l[i]), l);\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    for(var i = 0; i < l.length; i++){\n        for(var j = 0; j < l.length; j++){\n            for(var k = 0; k < l.length; k++){\n                result.push([l[i], l[j], l[k]]);\n            }\n        }\n    }\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            result.push(prefix.concat(l[i]));\n            f(prefix.concat(l[i]), l.slice(i));\n        }\n    }\n    f([], l);\n    return result.filter(function(a){\n        return a.length == n;\n    });\n}\n",
    "    var result = [];\n    function helper(l, n, arr){\n        if(n == 0){\n            result.push(arr);\n            return;\n        }\n        for(var i = 0; i < l.length; i++){\n            helper(l, n-1, arr.concat(l[i]));\n        }\n    }\n    helper(l, n, []);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            var new_prefix = prefix.concat(l[i]);\n            if(new_prefix.length == n){\n                result.push(new_prefix);\n            }else{\n                f(new_prefix, l.slice(i));\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        if(prefix.length == n){\n            result.push(prefix);\n            return;\n        }\n        for(var i = 0; i < l.length; i++){\n            f(prefix.concat(l[i]), l);\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        if(prefix.length == n){\n            result.push(prefix);\n        }\n        else{\n            for(var i = 0; i < l.length; i++){\n                f(prefix.concat(l[i]), l);\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l, n){\n        if(n == 0){\n            result.push(prefix);\n            return;\n        }\n        for(var i = 0; i < l.length; i++){\n            f(prefix.concat([l[i]]), l, n-1);\n        }\n    }\n    f([], l, n);\n    return result;\n}\n",
    "    var result = [];\n    var recurse = function(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            recurse(i, combo.concat(l[i]));\n        }\n    }\n    recurse(0, []);\n    return result;\n}\n",
    "    var result = [];\n    for (var i = 0; i < l.length; i++){\n        for (var j = 0; j < l.length; j++){\n            for (var k = 0; k < l.length; k++){\n                result.push([l[i], l[j], l[k]]);\n            }\n        }\n    }\n    return result;\n}\n",
    "    var result = [];\n    for (var i = 0; i < l.length; i++){\n        for (var j = 0; j < l.length; j++){\n            for (var k = 0; k < l.length; k++){\n                result.push([l[i], l[j], l[k]]);\n            }\n        }\n    }\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l, n){\n        if (n == 0){\n            result.push(prefix);\n            return;\n        }\n        for (var i = 0; i < l.length; i++){\n            f(prefix.concat(l[i]), l, n-1);\n        }\n    }\n    f([], l, n);\n    return result;\n}\n",
    "    var combinations = [];\n    var combination = [];\n    function generate(i, n){\n        if(n == 0){\n            combinations.push(combination.slice());\n            return;\n        }\n        for(var j = i; j < l.length; j++){\n            combination.push(l[j]);\n            generate(j, n-1);\n            combination.pop();\n        }\n    }\n    generate(0, n);\n    return combinations;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        if(prefix.length == n){\n            result.push(prefix);\n            return;\n        }\n        for(var i = 0; i < l.length; i++){\n            f(prefix.concat(l[i]), l);\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        if(prefix.length == n){\n            result.push(prefix);\n            return;\n        }\n        for(var i = 0; i < l.length; i++){\n            f(prefix.concat(l[i]), l);\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        if(prefix.length == n){\n            result.push(prefix);\n            return;\n        }\n        for(var i = 0; i < l.length; i++){\n            f(prefix.concat(l[i]), l);\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    function recurse(l, n, arr){\n        if(n == 0){\n            result.push(arr);\n            return;\n        }\n        for(var i = 0; i < l.length; i++){\n            recurse(l, n - 1, arr.concat(l[i]));\n        }\n    }\n    recurse(l, n, []);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            var new_prefix = prefix.concat(l[i]);\n            if(new_prefix.length == n){\n                result.push(new_prefix);\n            } else {\n                f(new_prefix, l.slice(i));\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "  var combinations = [];\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var aa = 0;\n  var ab = 0;\n  var ac = 0;\n  var ad = 0;\n  var ae = 0;\n  var af = 0;\n  var ag = 0;\n  var ah = 0;\n  var ai = 0;\n  var aj = 0;\n  var ak = 0;\n  var al = 0;\n  var am = 0;\n  var an = 0;\n  var ao = 0;\n  var ap = 0;\n  var aq = 0;\n  var ar = 0;\n  var as = 0;\n  var at = 0;\n  var au = 0;\n  var av = 0;\n  var aw = 0;\n  var ax = 0;\n  var ay = 0;\n  var az = 0;\n  var ba = 0;\n  var bb = 0;\n  var bc = 0;\n  var bd = 0;\n  var be = 0;\n  var bf = 0;\n  var bg = 0;\n  var bh = 0;\n  var bi = 0;\n  var bj = 0;\n  var bk = 0;\n  var bl = 0;\n  var bm = 0;\n  var bn = 0;\n  var bo = 0;\n  var bp = 0;\n  var bq = 0;\n  var br = 0;\n  var bs = 0;\n  var bt = 0;\n  var bu = 0;\n  var bv = 0;\n  var bw = 0;\n  var bx = 0;\n  var by = 0;\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            var new_prefix = prefix.concat(l[i]);\n            if(new_prefix.length == n){\n                result.push(new_prefix);\n            }else{\n                f(new_prefix, l.slice(i));\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "\tvar result = [];\n\tvar i = 0;\n\tvar j = 0;\n\tvar k = 0;\n\tvar l = 0;\n\tvar m = 0;\n\tvar n = 0;\n\tfor(i=0; i<l.length; i++){\n\t\tfor(j=0; j<l.length; j++){\n\t\t\tfor(k=0; k<l.length; k++){\n\t\t\t\tfor(l=0; l<l.length; l++){\n\t\t\t\t\tfor(m=0; m<l.length; m++){\n\t\t\t\t\t\tfor(n=0; n<l.length; n++){\n\t\t\t\t\t\t\tresult.push([l[i], l[j], l[k], l[l], l[m], l[n]]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n",
    "    var result = [];\n    for(var i = 0; i < l.length; i++){\n        for(var j = 0; j < l.length; j++){\n            for(var k = 0; k < l.length; k++){\n                result.push([l[i], l[j], l[k]]);\n            }\n        }\n    }\n    return result;\n}\n",
    "    var result = [];\n    function recurse(l, n, current){\n        if(n == 0){\n            result.push(current);\n            return;\n        }\n        for(var i = 0; i < l.length; i++){\n            recurse(l, n - 1, current.concat(l[i]));\n        }\n    }\n    recurse(l, n, []);\n    return result;\n}\n",
    "    var combinations = [];\n    for(var i = 0; i < l.length; i++){\n        for(var j = 0; j < l.length; j++){\n            for(var k = 0; k < l.length; k++){\n                combinations.push([l[i], l[j], l[k]]);\n            }\n        }\n    }\n    return combinations;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        if (prefix.length == n) {\n            result.push(prefix);\n        } else {\n            for (var i = 0; i < l.length; i++){\n                f(prefix.concat(l[i]), l);\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            var new_prefix = prefix.concat(l[i]);\n            if(new_prefix.length == n){\n                result.push(new_prefix);\n            }else{\n                f(new_prefix, l.slice(i));\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            var new_prefix = prefix.concat(l[i]);\n            if(new_prefix.length === n){\n                result.push(new_prefix);\n            }else{\n                f(new_prefix, l.slice(i));\n            }\n        }\n    };\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        if(prefix.length == n){\n            result.push(prefix);\n            return;\n        }\n        for(var i = 0; i < l.length; i++){\n            f(prefix.concat(l[i]), l);\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    function recurse(start, curr){\n        if(curr.length == n){\n            result.push(curr);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            recurse(i, curr.concat(l[i]));\n        }\n    }\n    recurse(0, []);\n    return result;\n}\n",
    "\tvar result = [];\n\tvar recurse = function(l, n, i, arr){\n\t\tif(n === 0){\n\t\t\tresult.push(arr);\n\t\t\treturn;\n\t\t}\n\t\tfor(var j = i; j < l.length; j++){\n\t\t\trecurse(l, n-1, j, arr.concat(l[j]));\n\t\t}\n\t}\n\trecurse(l, n, 0, []);\n\treturn result;\n}\n",
    "    var result = [];\n    for(var i = 0; i < l.length; i++){\n        for(var j = 0; j < l.length; j++){\n            for(var k = 0; k < l.length; k++){\n                result.push([l[i], l[j], l[k]]);\n            }\n        }\n    }\n    return result;\n}\n",
    "  var result = [];\n  var f = function(prefix, l){\n    if(prefix.length == n){\n      result.push(prefix);\n    }\n    else{\n      for(var i = 0; i < l.length; i++){\n        f(prefix.concat(l[i]), l);\n      }\n    }\n  }\n  f([], l);\n  return result;\n}\n",
    "\tvar result = [];\n\tvar f = function(prefix, l){\n\t\tif(prefix.length == n){\n\t\t\tresult.push(prefix);\n\t\t\treturn;\n\t\t}\n\t\tfor(var i = 0; i < l.length; i++){\n\t\t\tf(prefix.concat(l[i]), l);\n\t\t}\n\t}\n\tf([], l);\n\treturn result;\n}\n",
    "    var result = [];\n    for(var i = 0; i < l.length; i++){\n        for(var j = 0; j < l.length; j++){\n            for(var k = 0; k < l.length; k++){\n                result.push([l[i], l[j], l[k]]);\n            }\n        }\n    }\n    return result;\n}\n",
    "  var result = [];\n  for(var i = 0; i < l.length; i++){\n    for(var j = 0; j < l.length; j++){\n      for(var k = 0; k < l.length; k++){\n        result.push([l[i], l[j], l[k]]);\n      }\n    }\n  }\n  return result;\n}\n",
    "\tvar result = [];\n\tvar f = function(prefix, l){\n\t\tif(prefix.length == n){\n\t\t\tresult.push(prefix);\n\t\t\treturn;\n\t\t}\n\t\tfor(var i = 0; i < l.length; i++){\n\t\t\tf(prefix.concat(l[i]), l);\n\t\t}\n\t}\n\tf([], l);\n\treturn result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            var new_prefix = prefix.concat(l[i]);\n            if(new_prefix.length == n){\n                result.push(new_prefix);\n            } else {\n                f(new_prefix, l.slice(i));\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var combinations = [];\n    function combinations_helper(l, n, i, combination){\n        if(n == 0){\n            combinations.push(combination);\n            return;\n        }\n        if(i == l.length){\n            return;\n        }\n        combinations_helper(l, n, i+1, combination);\n        combinations_helper(l, n-1, i, combination.concat(l[i]));\n    }\n    combinations_helper(l, n, 0, []);\n    return combinations;\n}\n",
    "    var result = [];\n    for(var i = 0; i < l.length; i++){\n        for(var j = 0; j < l.length; j++){\n            for(var k = 0; k < l.length; k++){\n                result.push([l[i], l[j], l[k]]);\n            }\n        }\n    }\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            result.push(prefix.concat(l[i]));\n            f(prefix.concat(l[i]), l.slice(i));\n        }\n    }\n    f([], l);\n    return result.filter(function(e){\n        return e.length == n;\n    });\n}\n",
    "    var result = [];\n    function helper(l, n, arr){\n        if(n == 0){\n            result.push(arr);\n            return;\n        }\n        for(var i = 0; i < l.length; i++){\n            helper(l, n - 1, arr.concat(l[i]));\n        }\n    }\n    helper(l, n, []);\n    return result;\n}\n",
    "\tvar result = [];\n\tvar f = function(prefix, l){\n\t\tfor (var i = 0; i < l.length; i++){\n\t\t\tvar new_prefix = prefix.concat(l[i]);\n\t\t\tif (new_prefix.length == n){\n\t\t\t\tresult.push(new_prefix);\n\t\t\t} else {\n\t\t\t\tf(new_prefix, l.slice(i));\n\t\t\t}\n\t\t}\n\t}\n\tf([], l);\n\treturn result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            var new_prefix = prefix.concat([l[i]]);\n            if(new_prefix.length == n){\n                result.push(new_prefix);\n            } else {\n                f(new_prefix, l);\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        if(prefix.length == n){\n            result.push(prefix);\n        }\n        else{\n            for(var i = 0; i < l.length; i++){\n                f(prefix.concat(l[i]), l);\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    for(var i = 0; i < l.length; i++){\n        for(var j = 0; j < l.length; j++){\n            for(var k = 0; k < l.length; k++){\n                result.push([l[i], l[j], l[k]]);\n            }\n        }\n    }\n    return result;\n}\n",
    "  var result = [];\n  var recurse = function(l, n, start, current){\n    if(n == 0){\n      result.push(current);\n      return;\n    }\n    for(var i = start; i < l.length; i++){\n      recurse(l, n-1, i, current.concat(l[i]));\n    }\n  }\n  recurse(l, n, 0, []);\n  return result;\n}\n",
    "    var result = [];\n    function recurse(l, n, start, curr){\n        if(curr.length === n){\n            result.push(curr);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            recurse(l, n, i, curr.concat(l[i]));\n        }\n    }\n    recurse(l, n, 0, []);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            var new_prefix = prefix.concat(l[i]);\n            if(new_prefix.length == n){\n                result.push(new_prefix);\n            } else {\n                f(new_prefix, l.slice(i));\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            result.push(prefix.concat(l[i]));\n            f(prefix.concat(l[i]), l.slice(i+1));\n        }\n    }\n    f([], l);\n    return result.filter(function(e){return e.length == n;});\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            var new_prefix = prefix.concat(l[i]);\n            if(new_prefix.length === n){\n                result.push(new_prefix);\n            }else{\n                f(new_prefix, l.slice(i));\n            }\n        }\n    };\n    f([], l);\n    return result;\n}",
    "  var result = [];\n  var f = function(prefix, l){\n    for(var i = 0; i < l.length; i++){\n      result.push(prefix.concat(l[i]));\n      f(prefix.concat(l[i]), l.slice(i));\n    }\n  }\n  f([], l);\n  return result.filter(function(e){return e.length == n;});\n}\n",
    "    var result = [];\n    for(var i = 0; i < l.length; i++){\n        for(var j = 0; j < l.length; j++){\n            for(var k = 0; k < l.length; k++){\n                result.push([l[i], l[j], l[k]]);\n            }\n        }\n    }\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        if(prefix.length == n){\n            result.push(prefix);\n            return;\n        }\n        for(var i = 0; i < l.length; i++){\n            f(prefix.concat(l[i]), l);\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            result.push(prefix.concat(l[i]));\n            f(prefix.concat(l[i]), l.slice(i));\n        }\n    }\n    f([], l);\n    return result.filter(function(x){return x.length == n});\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for (var i = 0; i < l.length; i++){\n            var new_prefix = prefix.concat(l[i]);\n            if (new_prefix.length == n){\n                result.push(new_prefix);\n            } else {\n                f(new_prefix, l.slice(i));\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    function helper(l, n, current){\n        if(n == 0){\n            result.push(current);\n            return;\n        }\n        for(var i = 0; i < l.length; i++){\n            helper(l, n-1, current.concat(l[i]));\n        }\n    }\n    helper(l, n, []);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        if(prefix.length == n){\n            result.push(prefix);\n        }\n        else{\n            for(var i = 0; i < l.length; i++){\n                f(prefix.concat(l[i]), l);\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            var new_prefix = prefix.concat(l[i]);\n            if(new_prefix.length == n){\n                result.push(new_prefix);\n            }else{\n                f(new_prefix, l.slice(i));\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        if(prefix.length == n){\n            result.push(prefix);\n            return;\n        }\n        for(var i = 0; i < l.length; i++){\n            f(prefix.concat(l[i]), l);\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            result.push(prefix.concat(l[i]));\n            f(prefix.concat(l[i]), l.slice(i + 1));\n        }\n    }\n    f([], l);\n    return result.filter(function(x){\n        return x.length == n;\n    });\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            var new_prefix = prefix.concat(l[i]);\n            if(new_prefix.length == n){\n                result.push(new_prefix);\n            } else {\n                f(new_prefix, l.slice(i));\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            var new_prefix = prefix.concat(l[i]);\n            if(new_prefix.length == n){\n                result.push(new_prefix);\n            }else{\n                f(new_prefix, l.slice(i));\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        if(prefix.length == n){\n            result.push(prefix);\n            return;\n        }\n        for(var i = 0; i < l.length; i++){\n            f(prefix.concat(l[i]), l);\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "\tvar result = [];\n\tvar f = function(prefix, l){\n\t\tif(prefix.length == n){\n\t\t\tresult.push(prefix);\n\t\t}\n\t\telse{\n\t\t\tfor(var i = 0; i < l.length; i++){\n\t\t\t\tf(prefix.concat(l[i]), l);\n\t\t\t}\n\t\t}\n\t}\n\tf([], l);\n\treturn result;\n}\n",
    "  var result = [];\n  var f = function(prefix, l){\n    for(var i = 0; i < l.length; i++){\n      var new_prefix = prefix.concat(l[i]);\n      if(new_prefix.length == n){\n        result.push(new_prefix);\n      }\n      else{\n        f(new_prefix, l.slice(i));\n      }\n    }\n  }\n  f([], l);\n  return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        if (prefix.length == n){\n            result.push(prefix);\n        } else {\n            for (var i = 0; i < l.length; i++){\n                f(prefix.concat(l[i]), l);\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            result.push(prefix.concat(l[i]));\n            f(prefix.concat(l[i]), l.slice(i));\n        }\n    }\n    f([], l);\n    return result.filter(function(e){\n        return e.length == n;\n    });\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        if (prefix.length == n){\n            result.push(prefix);\n        } else {\n            for (var i = 0; i < l.length; i++){\n                f(prefix.concat(l[i]), l);\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "\tvar result = [];\n\tvar f = function(prefix, l){\n\t\tif (prefix.length == n){\n\t\t\tresult.push(prefix);\n\t\t} else {\n\t\t\tfor (var i = 0; i < l.length; i++){\n\t\t\t\tf(prefix.concat(l[i]), l);\n\t\t\t}\n\t\t}\n\t};\n\tf([], l);\n\treturn result;\n}\n",
    "    var result = [];\n    for(var i = 0; i < l.length; i++){\n        for(var j = 0; j < l.length; j++){\n            for(var k = 0; k < l.length; k++){\n                result.push([l[i], l[j], l[k]]);\n            }\n        }\n    }\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            var new_prefix = prefix.concat(l[i]);\n            if(new_prefix.length == n){\n                result.push(new_prefix);\n            }else{\n                f(new_prefix, l.slice(i));\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "\tvar result = [];\n\tvar recurse = function(l, n, current){\n\t\tif(n === 0){\n\t\t\tresult.push(current);\n\t\t\treturn;\n\t\t}\n\t\tfor(var i = 0; i < l.length; i++){\n\t\t\trecurse(l, n-1, current.concat(l[i]));\n\t\t}\n\t}\n\trecurse(l, n, []);\n\treturn result;\n}\n",
    "    var result = [];\n    for(var i = 0; i < l.length; i++){\n        for(var j = 0; j < l.length; j++){\n            for(var k = 0; k < l.length; k++){\n                result.push([l[i], l[j], l[k]]);\n            }\n        }\n    }\n    return result;\n}\n",
    "    var result = [];\n    function recurse(start, curr){\n        if(curr.length === n){\n            result.push(curr);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            recurse(i, curr.concat(l[i]));\n        }\n    }\n    recurse(0, []);\n    return result;\n}\n",
    "    if (n == 0){\n        return [[]];\n    }\n    var result = [];\n    for (var i = 0; i < l.length; i++){\n        var sub_combinations = combinations_colors(l, n - 1);\n        for (var j = 0; j < sub_combinations.length; j++){\n            result.push([l[i]].concat(sub_combinations[j]));\n        }\n    }\n    return result;\n}\n",
    "    var result = [];\n    for(var i = 0; i < l.length; i++){\n        for(var j = 0; j < l.length; j++){\n            for(var k = 0; k < l.length; k++){\n                result.push([l[i], l[j], l[k]]);\n            }\n        }\n    }\n    return result;\n}\n",
    "\tvar result = [];\n\tvar f = function(prefix, l){\n\t\tif (prefix.length == n){\n\t\t\tresult.push(prefix);\n\t\t}\n\t\telse{\n\t\t\tfor (var i = 0; i < l.length; i++){\n\t\t\t\tf(prefix.concat(l[i]), l);\n\t\t\t}\n\t\t}\n\t}\n\tf([], l);\n\treturn result;\n}\n",
    "\tvar result = [];\n\tvar temp = [];\n\tfunction combinations(l, n, i){\n\t\tif(n == 0){\n\t\t\tresult.push(temp.slice());\n\t\t\treturn;\n\t\t}\n\t\tfor(var j = i; j < l.length; j++){\n\t\t\ttemp.push(l[j]);\n\t\t\tcombinations(l, n - 1, j);\n\t\t\ttemp.pop();\n\t\t}\n\t}\n\tcombinations(l, n, 0);\n\treturn result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        if(prefix.length == n){\n            result.push(prefix);\n        }\n        else{\n            for(var i = 0; i < l.length; i++){\n                f(prefix.concat(l[i]), l);\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    for(var i = 0; i < l.length; i++){\n        for(var j = 0; j < l.length; j++){\n            for(var k = 0; k < l.length; k++){\n                result.push([l[i], l[j], l[k]]);\n            }\n        }\n    }\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        for(var i = 0; i < l.length; i++){\n            var new_prefix = prefix.concat(l[i]);\n            if(new_prefix.length == n){\n                result.push(new_prefix);\n            } else {\n                f(new_prefix, l.slice(i));\n            }\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        if(prefix.length === n){\n            result.push(prefix);\n            return;\n        }\n        for(var i = 0; i < l.length; i++){\n            f(prefix.concat(l[i]), l);\n        }\n    }\n    f([], l);\n    return result;\n}\n"
  ]
}