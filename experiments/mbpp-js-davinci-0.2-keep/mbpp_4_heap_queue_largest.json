{
  "name": "mbpp_4_heap_queue_largest",
  "language": "js",
  "prompt": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums, n){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_4_heap_queue_largest.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var heap = new Heap(function(a,b){return a-b});\n    for(var i = 0; i < nums.length; i++){\n        heap.push(nums[i]);\n    }\n    var result = [];\n    for(var i = 0; i < n; i++){\n        result.push(heap.pop());\n    }\n    return result;\n}\n",
    "    var heap = new BinaryHeap(function(x){return x;});\n    for(var i=0; i<nums.length; i++){heap.push(nums[i]);}\n    var ret = new Array(n);\n    for(var j=0; j<n; j++){ret[j] = heap.pop();}\n    return ret;\n}\n",
    "    var heap = new Heap(function(a,b){return a-b});\n    for(var i = 0; i < nums.length; i++){\n        heap.push(nums[i]);\n    }\n    var result = [];\n    for(var i = 0; i < n; i++){\n        result.push(heap.pop());\n    }\n    return result;\n}\n",
    "    var heap = new Heap(function(a,b){return a-b});\n    for(var i=0; i<nums.length; i++){\n        heap.push(nums[i]);\n    }\n    var result = [];\n    for(var i=0; i<n; i++){\n        result.push(heap.pop());\n    }\n    return result;\n}\n",
    "    let heap = new Heap(function(a, b){\n        return a - b;\n    });\n    for(let i = 0; i < nums.length; i++){\n        heap.push(nums[i]);\n    }\n    let result = [];\n    for(let i = 0; i < n; i++){\n        result.push(heap.pop());\n    }\n    return result;\n}\n",
    "  var heap = new Heap(function(a,b){return a-b});\n  for(var i=0; i<nums.length; i++){\n    heap.push(nums[i]);\n  }\n  var result = [];\n  for(var i=0; i<n; i++){\n    result.push(heap.pop());\n  }\n  return result;\n}\n",
    "    var heap = new Heap(function(a, b){\n        return a - b;\n    });\n    for(var i = 0; i < nums.length; i++){\n        heap.push(nums[i]);\n    }\n    var result = [];\n    for(var i = 0; i < n; i++){\n        result.push(heap.pop());\n    }\n    return result;\n}\n",
    "    var heap = new Heap(function(a, b){\n        return a - b;\n    });\n\n    for(var i = 0; i < nums.length; i++){\n        heap.push(nums[i]);\n    }\n\n    var result = [];\n    for(var i = 0; i < n; i++){\n        result.push(heap.pop());\n    }\n\n    return result;\n}\n",
    "    var heap = new Heap(function(a, b){\n        return a - b;\n    });\n    for(var i = 0; i < nums.length; i++){\n        heap.push(nums[i]);\n    }\n    var result = [];\n    for(var i = 0; i < n; i++){\n        result.push(heap.pop());\n    }\n    return result;\n}\n",
    "    var heap = new Heap(function(a, b){\n        return a - b;\n    });\n\n    for(var i = 0; i < nums.length; i++){\n        heap.push(nums[i]);\n    }\n\n    var result = [];\n    for(var i = 0; i < n; i++){\n        result.push(heap.pop());\n    }\n\n    return result;\n}\n",
    "    var heap = new Heap(function(a,b){return a-b});\n    for(var i = 0; i < nums.length; i++){\n        heap.push(nums[i]);\n    }\n    var result = [];\n    for(var i = 0; i < n; i++){\n        result.push(heap.pop());\n    }\n    return result;\n}\n",
    "    var heap = new Heap(function(a, b){\n        return a - b;\n    });\n    for(var i = 0; i < nums.length; i++){\n        heap.push(nums[i]);\n    }\n    var result = [];\n    for(var i = 0; i < n; i++){\n        result.push(heap.pop());\n    }\n    return result;\n}\n",
    "    var heap = new Heap(function(a,b){return a-b});\n    for(var i=0; i<nums.length; i++){\n        heap.push(nums[i]);\n    }\n    var result = [];\n    for(var i=0; i<n; i++){\n        result.push(heap.pop());\n    }\n    return result;\n}\n",
    "    var heap = new Heap(function(a, b){\n        return a - b;\n    });\n    var largest = [];\n    for(var i = 0; i < nums.length; i++){\n        heap.push(nums[i]);\n        if(heap.size() > n){\n            heap.pop();\n        }\n    }\n    while(heap.size() > 0){\n        largest.push(heap.pop());\n    }\n    return largest;\n}\n",
    "  var heap = new Heap(function(a,b){return a-b;});\n  for(var i = 0; i < nums.length; i++){\n    heap.push(nums[i]);\n  }\n  var result = [];\n  for(var i = 0; i < n; i++){\n    result.push(heap.pop());\n  }\n  return result;\n}\n",
    "  var heap = new BinaryHeap(function(x){return x;});\n  for(var i=0; i<nums.length; i++){heap.push(nums[i]);}\n  var ret = new Array(n);\n  for(var j=0; j<n; j++){ret[j] = heap.pop();}\n  return ret;\n}\n",
    "    var heap = new Heap(function(a, b){\n        return a - b;\n    });\n    for(var i = 0; i < nums.length; i++){\n        heap.push(nums[i]);\n    }\n    var result = [];\n    for(var i = 0; i < n; i++){\n        result.push(heap.pop());\n    }\n    return result;\n}\n",
    "    var heap = new BinaryHeap(function(x){return x;});\n    for(var i=0; i<nums.length; i++){heap.push(nums[i]);}\n    var ret = new Array(n);\n    for(var j=0; j<n; j++){ret[j] = heap.pop();}\n    return ret;\n}\n",
    "    var heap = new Heap(function(a, b){\n        return a - b;\n    });\n    for(var i = 0; i < nums.length; i++){\n        heap.push(nums[i]);\n    }\n    var result = [];\n    for(var i = 0; i < n; i++){\n        result.push(heap.pop());\n    }\n    return result;\n}\n",
    "    var heap = new Heap(function(a, b){\n        return a - b;\n    });\n\n    for(var i = 0; i < nums.length; i++){\n        heap.push(nums[i]);\n    }\n\n    var result = [];\n    for(var i = 0; i < n; i++){\n        result.push(heap.pop());\n    }\n\n    return result;\n}\n"
  ]
}