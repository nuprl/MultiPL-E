name: HumanEval_43_pairs_sum_to_zero
language: go_test.go
prompt: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns True\
  \ if there are two distinct elements in the list that\n// sum to zero, and False\
  \ otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
  \ 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1, 2, 3, 7})\n// false\n\
  // >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n// true\n// >>> pairs_sum_to_zero([]int{1})\n\
  // false\nfunc pairs_sum_to_zero(l []int) bool {\n"
tests: "func TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
  \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual:\
  \ candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
  \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
  \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
  \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
  \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n    \
  \ { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
  for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    // TODO: implement this function\n    return false\n}\n", "   \
    \ // TODO: implement this function\n    return false\n}\n", "    for i, v := range\
    \ l {\n        for j, w := range l {\n            if i != j && v + w == 0 {\n\
    \                return true\n            }\n        }\n    }\n    return false\n\
    }\n", "    // your code here\n    return false\n}\n", "    // TODO: implement\
    \ me!\n    return false\n}\n", "    m := make(map[int]bool)\n    for _, v := range\
    \ l {\n        if m[-v] {\n            return true\n        }\n        m[v] =\
    \ true\n    }\n    return false\n}\n", "    // create a map of the list\n    m\
    \ := make(map[int]int)\n    for _, v := range l {\n        m[v]++\n    }\n   \
    \ // check if there are two distinct elements that sum to zero\n    for _, v :=\
    \ range l {\n        if v == 0 {\n            if m[v] > 1 {\n                return\
    \ true\n            }\n        } else {\n            if m[-v] > 0 {\n        \
    \        return true\n            }\n        }\n    }\n    return false\n}\n",
  "    // TODO: implement this function\n    return false\n}\n", "    // TODO: implement\
    \ this function\n    return false\n}\n", "    // TODO: implement this function\n\
    \    return false\n}\n", "    m := make(map[int]bool)\n    for _, v := range l\
    \ {\n        if _, ok := m[-v]; ok {\n            return true\n        }\n   \
    \     m[v] = true\n    }\n    return false\n}\n", "    // TODO: implement this\
    \ function\n    return false\n}\n", "    // TODO: implement this function\n  \
    \  return false\n}\n", "    // TODO: implement this function\n    return false\n\
    }\n", "    // TODO: implement this function\n    return false\n}\n", "    // TODO:\
    \ implement this function\n    return false\n}\n", "    // TODO: implement this\
    \ function\n    return false\n}\n", "    for i, v := range l {\n        for j,\
    \ w := range l {\n            if i != j && v + w == 0 {\n                return\
    \ true\n            }\n        }\n    }\n    return false\n}\n", "    // TODO:\
    \ implement this function\n    return false\n}\n", "    // TODO: implement this\
    \ function\n    return false\n}\n", "    // TODO: implement this function\n  \
    \  return false\n}\n", "    // TODO: implement this function\n    return false\n\
    }\n", "    // TODO: implement me\n    return false\n}\n", "    // TODO: implement\
    \ this function\n    return false\n}\n", "    // TODO: implement this function\n\
    \    return false\n}\n", "    // TODO: implement this function\n    return false\n\
    }\n", "    // TODO: implement this function\n    return false\n}\n", "    // TODO:\
    \ implement this function\n    return false\n}\n", "    // TODO: implement this\
    \ function\n    return false\n}\n", "    // TODO: implement this function\n  \
    \  return false\n}\n", "    // TODO: implement this function\n    return false\n\
    }\n", "    // TODO: implement this function\n    return false\n}\n", "    // TODO:\
    \ implement me\n    return false\n}\n", "    // TODO: implement this function\n\
    \    return false\n}\n", "    // TODO: implement this function\n    return false\n\
    }\n", "    // TODO: implement this function\n    return false\n}\n", "    // TODO:\
    \ implement\n    return false\n}\n", "    // TODO: implement this function\n \
    \   return false\n}\n", "    if len(l) < 2 {\n        return false\n    }\n  \
    \  for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n\
    \            if l[i] + l[j] == 0 {\n                return true\n            }\n\
    \        }\n    }\n    return false\n}\n", "    // TODO: implement me\n    return\
    \ false\n}\n", "    // TODO: implement me\n    return false\n}\n", "    // TODO\n\
    \    return false\n}\n", "    // TODO: implement this function\n    return false\n\
    }\n", "    // TODO: implement this function\n    return false\n}\n", "    // TODO:\
    \ implement this function\n    return false\n}\n", "    // TODO: implement this\
    \ function\n    return false\n}\n", "    // TODO: implement this function\n  \
    \  return false\n}\n", "    // TODO: implement this function\n    return false\n\
    }\n", "    // TODO: implement me\n    return false\n}\n", "    // TODO: implement\
    \ this function\n    return false\n}\n", "    // TODO: implement this function\n\
    \    return false\n}\n", "    // TODO: implement\n    return false\n}\n", "  \
    \  // TODO: implement me\n    return false\n}\n", "    // TODO: implement this\
    \ function\n    return false\n}\n", "    // Your code here\n    return false\n\
    }\n", "    // TODO: implement this function\n    return false\n}\n", "    // your\
    \ code here\n    return false\n}\n", "    // TODO: implement this function\n \
    \   return false\n}\n", "    for i := 0; i < len(l); i++ {\n        for j := i\
    \ + 1; j < len(l); j++ {\n            if l[i] + l[j] == 0 {\n                return\
    \ true\n            }\n        }\n    }\n    return false\n}\n", "    return false\n\
    }\n", "    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l);\
    \ j++ {\n            if l[i] + l[j] == 0 {\n                return true\n    \
    \        }\n        }\n    }\n    return false\n}\n", "    // TODO: implement\
    \ this function\n    return false\n}\n", "    // your code here\n    return false\n\
    }\n", "    // TODO: implement this function\n    return false\n}\n", "    // TODO:\
    \ implement this function\n    return false\n}\n", "    // TODO: implement this\
    \ function\n    return false\n}\n", "    m := make(map[int]bool)\n    for _, v\
    \ := range l {\n        if m[-v] {\n            return true\n        }\n     \
    \   m[v] = true\n    }\n    return false\n}\n", "    // TODO: implement this function\n\
    \    return false\n}\n", "    // TODO: implement this function\n    return false\n\
    }\n", "    // TODO: implement this function\n    return false\n}\n", "    // TODO:\
    \ implement\n    return false\n}\n", "    m := make(map[int]bool)\n    for _,\
    \ v := range l {\n        if m[-v] {\n            return true\n        }\n   \
    \     m[v] = true\n    }\n    return false\n}\n", "    // TODO: implement me\n\
    \    return false\n}\n", "    if len(l) < 2 {\n        return false\n    }\n \
    \   for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n\
    \            if l[i] + l[j] == 0 {\n                return true\n            }\n\
    \        }\n    }\n    return false\n}\n", "    // TODO: implement this function\n\
    \    return false\n}\n", "    for i, v := range l {\n        for j, w := range\
    \ l {\n            if i != j && v + w == 0 {\n                return true\n  \
    \          }\n        }\n    }\n    return false\n}\n", "    // TODO: implement\
    \ this function\n    return false\n}\n", "    // TODO: implement this function\n\
    \    return false\n}\n", "    // TODO: implement me\n    return false\n}\n", " \
    \   // TODO: implement this function\n    return false\n}\n", "    // TODO: implement\
    \ this function\n    return false\n}\n", "    // TODO: implement this function\n\
    \    return false\n}\n", "    // TODO: implement this function\n    return false\n\
    }\n", "    // TODO: implement me\n    return false\n}\n", "    // TODO: implement\
    \ this function\n    return false\n}\n", "    m := make(map[int]bool)\n    for\
    \ _, v := range l {\n        if m[-v] {\n            return true\n        }\n\
    \        m[v] = true\n    }\n    return false\n}\n", "    return false\n}\n",
  "    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n\
    \            if l[i] + l[j] == 0 {\n                return true\n            }\n\
    \        }\n    }\n    return false\n}\n", "    // TODO: implement this function\n\
    \    return false\n}\n", "    // TODO: implement this function\n    return false\n\
    }\n", "    var m = make(map[int]bool)\n    for _, v := range l {\n        m[v]\
    \ = true\n    }\n    for _, v := range l {\n        if _, ok := m[-v]; ok {\n\
    \            return true\n        }\n    }\n    return false\n}\n", "    // TODO:\
    \ implement this function\n    return false\n}\n", "    // TODO: implement this\
    \ function\n    return false\n}\n", "    // TODO: implement this function\n  \
    \  return false\n}\n", "    // TODO: implement this function\n    return false\n\
    }\n", "    // your code here\n    return false\n}\n", "    // TODO: implement\
    \ this function\n    return false\n}\n", "    return false\n}\n", "    // TODO:\
    \ implement me\n    return false\n}\n", "    for i := 0; i < len(l); i++ {\n \
    \       for j := i + 1; j < len(l); j++ {\n            if l[i] + l[j] == 0 {\n\
    \                return true\n            }\n        }\n    }\n    return false\n\
    }\n", "    // TODO: implement this function\n    return false\n}\n", "    // TODO:\
    \ implement this function\n    return false\n}\n", "    if len(l) < 2 {\n    \
    \    return false\n    }\n    for i := 0; i < len(l); i++ {\n        for j :=\
    \ i + 1; j < len(l); j++ {\n            if l[i] + l[j] == 0 {\n              \
    \  return true\n            }\n        }\n    }\n    return false\n}\n", "   \
    \ // TODO: implement this function\n    return false\n}\n", "    // TODO: implement\
    \ me\n    return false\n}\n", "    m := make(map[int]bool)\n    for _, v := range\
    \ l {\n        if m[-v] {\n            return true\n        }\n        m[v] =\
    \ true\n    }\n    return false\n}\n", "    m := make(map[int]bool)\n    for _,\
    \ v := range l {\n        if m[-v] {\n            return true\n        }\n   \
    \     m[v] = true\n    }\n    return false\n}\n", "    for i, v := range l {\n\
    \        for j, w := range l {\n            if i != j && v + w == 0 {\n      \
    \          return true\n            }\n        }\n    }\n    return false\n}\n",
  "    // TODO: implement this function\n    return false\n}\n", "    // TODO: implement\
    \ this function\n    return false\n}\n", "    for i := 0; i < len(l); i++ {\n\
    \        for j := i + 1; j < len(l); j++ {\n            if l[i] + l[j] == 0 {\n\
    \                return true\n            }\n        }\n    }\n    return false\n\
    }\n", "    if len(l) < 2 {\n        return false\n    }\n    for i := 0; i < len(l);\
    \ i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] + l[j]\
    \ == 0 {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n", "    // your code here\n    return false\n}\n", "    // TODO: implement\
    \ me!\n    return false\n}\n", "    return false\n}\n", "    // TODO: implement\
    \ this function\n    return false\n}\n", "    // TODO: implement this function\n\
    \    return false\n}\n", "    // TODO: implement this function\n    return false\n\
    }\n", "    return false\n}\n", "    for i := 0; i < len(l); i++ {\n        for\
    \ j := i + 1; j < len(l); j++ {\n            if l[i] + l[j] == 0 {\n         \
    \       return true\n            }\n        }\n    }\n    return false\n}\n",
  "    // TODO: implement this function\n    return false\n}\n", "    // TODO: implement\
    \ this function\n    return false\n}\n", "    // TODO: implement this function\n\
    \    return false\n}\n", "    // TODO: implement this function\n    return false\n\
    }\n", "    if len(l) < 2 {\n        return false\n    }\n    for i := 0; i < len(l);\
    \ i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] + l[j]\
    \ == 0 {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n", "    // TODO: implement this function\n    return false\n}\n",
  "    // TODO: implement this function\n    return false\n}\n", "    // TODO: implement\
    \ this function\n    return false\n}\n", "    // TODO: implement this function\n\
    \    return false\n}\n", "    // TODO: implement this function\n    return false\n\
    }\n", "    for i, v := range l {\n        for j, w := range l {\n            if\
    \ i != j && v + w == 0 {\n                return true\n            }\n       \
    \ }\n    }\n    return false\n}\n", "    // TODO: implement this function\n  \
    \  return false\n}\n", "    // TODO: implement this function\n    return false\n\
    }\n", "    // TODO: implement this function\n    return false\n}\n", "    // TODO:\
    \ implement me\n    return false\n}\n", "    // TODO: implement this function\n\
    \    return false\n}\n", "    // TODO: implement this function\n    return false\n\
    }\n", "    // TODO: implement me\n    return false\n}\n", "    // TODO: implement\
    \ this function\n    return false\n}\n", "    // TODO: implement me\n    return\
    \ false\n}\n", "    // TODO: implement this function\n    return false\n}\n",
  "    // TODO: implement this function\n    return false\n}\n", "    // TODO: implement\
    \ this function\n    return false\n}\n", "    // your code here\n    return false\n\
    }\n", "    // TODO: implement this function\n    return false\n}\n", "    // create\
    \ a map to store the number of times each element appears in the list\n    m :=\
    \ make(map[int]int)\n    for _, v := range l {\n        m[v]++\n    }\n    //\
    \ iterate through the map\n    for k, v := range m {\n        // if the element\
    \ is 0 and it appears more than once, return true\n        if k == 0 && v > 1\
    \ {\n            return true\n        }\n        // if the element is not 0 and\
    \ its negative appears in the map, return true\n        if k != 0 && m[-k] > 0\
    \ {\n            return true\n        }\n    }\n    // if we get here, there are\
    \ no pairs that sum to zero\n    return false\n}\n", "    // TODO: implement this\
    \ function\n    return false\n}\n", "    // TODO: write your code here\n    return\
    \ false\n}\n", "    for i := 0; i < len(l); i++ {\n        for j := i + 1; j <\
    \ len(l); j++ {\n            if l[i] + l[j] == 0 {\n                return true\n\
    \            }\n        }\n    }\n    return false\n}\n", "    // TODO: implement\
    \ this function\n    return false\n}\n", "    // TODO: implement this function\n\
    \    return false\n}\n", "    // TODO: implement this function\n    return false\n\
    }\n", "    // TODO: implement me\n    return false\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        if m[-v] {\n            return true\n    \
    \    }\n        m[v] = true\n    }\n    return false\n}\n", "    // TODO: implement\
    \ this function\n    return false\n}\n", "    // TODO: implement this function\n\
    \    return false\n}\n", "    // TODO: implement this function\n    return false\n\
    }\n", "    // TODO: implement this function\n    return false\n}\n", "    // TODO:\
    \ implement this function\n    return false\n}\n", "    // TODO: implement this\
    \ function\n    return false\n}\n", "    return false\n}\n", "    // TODO: implement\
    \ this function\n    return false\n}\n", "    for i := 0; i < len(l); i++ {\n\
    \        for j := i + 1; j < len(l); j++ {\n            if l[i] + l[j] == 0 {\n\
    \                return true\n            }\n        }\n    }\n    return false\n\
    }\n", "    // TODO: Implement me!\n    return false\n}\n", "    // TODO: implement\
    \ this function\n    return false\n}\n", "    // TODO: implement this function\n\
    \    return false\n}\n", "    // TODO: implement this function\n    return false\n\
    }\n", "    return false\n}\n", "    // TODO: implement\n    return false\n}\n",
  "    // TODO: implement this function\n    return false\n}\n", "    // TODO: implement\
    \ this function\n    return false\n}\n", "    // TODO: implement this function\n\
    \    return false\n}\n", "    // TODO: implement this function\n    return false\n\
    }\n", "    // TODO: implement this function\n    return false\n}\n", "    // TODO:\
    \ implement this function\n    return false\n}\n", "    // TODO: implement this\
    \ function\n    return false\n}\n", "    // TODO: implement this function\n  \
    \  return false\n}\n", "    // TODO: implement this function\n    return false\n\
    }\n", "    // TODO: implement me!\n    return false\n}\n", "    return false\n\
    }\n", "    // create a map of integers to integers\n    m := make(map[int]int)\n\
    \    // loop through the list\n    for _, v := range l {\n        // if the value\
    \ is in the map\n        if _, ok := m[v]; ok {\n            // return true\n\
    \            return true\n        }\n        // if the negative value is in the\
    \ map\n        if _, ok := m[-v]; ok {\n            // return true\n         \
    \   return true\n        }\n        // add the value to the map\n        m[v]\
    \ = v\n    }\n    // return false\n    return false\n}\n", "    // TODO: Implement\
    \ this function\n    return false\n}\n", "    // TODO: implement this function\n\
    \    return false\n}\n", "    // TODO: implement me\n    return false\n}\n", " \
    \   // TODO: implement this function\n    return false\n}\n", "    return true\n\
    }\n", "    // TODO: implement this function\n    return false\n}\n", "    // your\
    \ code here\n    return false\n}\n", "    // TODO: implement this function\n \
    \   return false\n}\n", "    // TODO: implement this function\n    return false\n\
    }\n", "    if len(l) < 2 {\n        return false\n    }\n    for i := 0; i < len(l);\
    \ i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] + l[j]\
    \ == 0 {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n", "    // TODO: implement this function\n    return false\n}\n",
  "    // TODO: implement this function\n    return false\n}\n", "    // TODO: implement\
    \ this function\n    return false\n}\n", "    // TODO: implement this function\n\
    \    return false\n}\n", "    return false\n}\n", "    // TODO: implement this\
    \ function\n    return false\n}\n", "    // TODO: implement this function\n  \
    \  return false\n}\n", "    // TODO: implement this function\n    return false\n\
    }\n", "    // TODO: implement this function\n    return false\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
