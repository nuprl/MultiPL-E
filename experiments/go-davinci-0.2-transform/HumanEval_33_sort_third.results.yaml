language: go_test.go
name: HumanEval_33_sort_third
results:
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    // TODO: implement this function\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    // find the index of the first element that is divisible by 3\n  \
    \  i := 0\n    for i < len(l) && l[i] % 3 != 0 {\n        i++\n    }\n    // if\
    \ no such element exists, return the list\n    if i == len(l) {\n        return\
    \ l\n    }\n    // find the index of the last element that is divisible by 3\n\
    \    j := len(l) - 1\n    for j >= 0 && l[j] % 3 != 0 {\n        j--\n    }\n\
    \    // sort the elements that are divisible by 3\n    for i < j {\n        if\
    \ l[i] > l[j] {\n            l[i], l[j] = l[j], l[i]\n        }\n        i++\n\
    \        j--\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n\
    \  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp99nk8414_test.go:60: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp99nk8414_test.go:60: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp99nk8414_test.go:60: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3) %!s(int=8)\
    \ %!s(int=4) %!s(int=9) %!s(int=6) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp99nk8414_test.go:60: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073559
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    var l_third\
    \ []int\n    for i, v := range l {\n        if i % 3 == 0 {\n            l_third\
    \ = append(l_third, v)\n        } else {\n            l_prime = append(l_prime,\
    \ v)\n        }\n    }\n    sort(l_third)\n    for i, v := range l_third {\n \
    \       l_prime = append(l_prime, i * 3, v)\n    }\n    return l_prime\n}\n\n\
    func TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3,\
    \ 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected:\
    \ []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8,\
    \ 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnns6c6y4_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073476
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    for i, v :=\
    \ range l {\n        if i % 3 == 0 {\n            l_prime = append(l_prime, v)\n\
    \        } else {\n            l_prime = append(l_prime, v)\n        }\n    }\n\
    \    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmplonzeh71_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmplonzeh71_test.go:43: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmplonzeh71_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmplonzeh71_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 2; i < len(l); i += 3 {\n        for j := i; j > 0; j -=\
    \ 3 {\n            if l[j] < l[j-3] {\n                l[j], l[j-3] = l[j-3],\
    \ l[j]\n            } else {\n                break\n            }\n        }\n\
    \    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 34 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpgu9hihs__test.go:21\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpgu9hihs__test.go:38\
    \ +0x6a5\ntesting.tRunner(0xc000199040, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073475
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    l_new := make([]int, len(l))\n    copy(l_new, l)\n    for i := 2;\
    \ i < len(l); i += 3 {\n        for j := i; j > i - 3; j-- {\n            if l_new[j]\
    \ < l_new[j - 1] {\n                l_new[j], l_new[j - 1] = l_new[j - 1], l_new[j]\n\
    \            }\n        }\n    }\n    return l_new\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmp5xheg56b_test.go:23\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmp5xheg56b_test.go:38\
    \ +0x75f\ntesting.tRunner(0xc0001a0340, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073559
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    // TODO: implement this function\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    for i, v :=\
    \ range l {\n        if i % 3 == 0 {\n            l_prime = append(l_prime, v)\n\
    \        } else {\n            l_prime = append(l_prime, v)\n        }\n    }\n\
    \    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmplonzeh71_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmplonzeh71_test.go:43: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmplonzeh71_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmplonzeh71_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 2; i < len(l); i += 3 {\n        for j := i; j > i - 3; j--\
    \ {\n            if l[j] < l[j - 1] {\n                l[j], l[j - 1] = l[j -\
    \ 1], l[j]\n            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpg3ld432w_test.go:21\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpg3ld432w_test.go:36\
    \ +0x6ab\ntesting.tRunner(0xc0001031e0, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    // TODO: implement this function\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    // TODO: implement this function\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l1 []int\n    var l2 []int\n \
    \   var l3 []int\n    for i, v := range l {\n        if i % 3 == 0 {\n       \
    \     l1 = append(l1, v)\n        } else if i % 3 == 1 {\n            l2 = append(l2,\
    \ v)\n        } else {\n            l3 = append(l3, v)\n        }\n    }\n   \
    \ l1 = merge_sort(l1)\n    l2 = merge_sort(l2)\n    l3 = merge_sort(l3)\n    var\
    \ l4 []int\n    for i, v := range l {\n        if i % 3 == 0 {\n            l4\
    \ = append(l4, l1[0])\n            l1 = l1[1:]\n        } else if i % 3 == 1 {\n\
    \            l4 = append(l4, l2[0])\n            l2 = l2[1:]\n        } else {\n\
    \            l4 = append(l4, l3[0])\n            l3 = l3[1:]\n        }\n    }\n\
    \    return l4\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdejd4ggp_test.go:28:10: undefined: merge_sort

    /tmp/tmpdejd4ggp_test.go:29:10: undefined: merge_sort

    /tmp/tmpdejd4ggp_test.go:30:10: undefined: merge_sort

    /tmp/tmpdejd4ggp_test.go:32:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) == 0 {\n        return l\n\
    \    }\n    if len(l) == 1 {\n        return l\n    }\n    if len(l) == 2 {\n\
    \        if l[0] > l[1] {\n            l[0], l[1] = l[1], l[0]\n        }\n  \
    \      return l\n    }\n    for i := 0; i < len(l); i++ {\n        for j := i\
    \ + 1; j < len(l); j++ {\n            if l[i] > l[j] {\n                l[i],\
    \ l[j] = l[j], l[i]\n            }\n        }\n    }\n    return l\n}\n\nfunc\
    \ TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3,\
    \ 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected:\
    \ []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8,\
    \ 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpoj01tfcv_test.go:54: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=2) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpoj01tfcv_test.go:54: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=2) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpoj01tfcv_test.go:54: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=2) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpoj01tfcv_test.go:54: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073559
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    var l_sorted []int\n    var l_unsorted []int\n    for i, v := range\
    \ l {\n        if i % 3 == 0 {\n            l_sorted = append(l_sorted, v)\n \
    \       } else {\n            l_unsorted = append(l_unsorted, v)\n        }\n\
    \    }\n    l_sorted = merge_sort(l_sorted)\n    for i, v := range l_sorted {\n\
    \        l_unsorted = append(l_unsorted[:i*3], append([]int{v}, l_unsorted[i*3:]...)...)\n\
    \    }\n    return l_unsorted\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyfmscgg0_test.go:28:16: undefined: merge_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    // TODO: implement this function\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 2; i < len(l); i += 3 {\n        for j := i; j > 0; j -=\
    \ 3 {\n            if l[j] < l[j-3] {\n                l[j], l[j-3] = l[j-3],\
    \ l[j]\n            } else {\n                break\n            }\n        }\n\
    \    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 34 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpgu9hihs__test.go:21\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpgu9hihs__test.go:38\
    \ +0x6a5\ntesting.tRunner(0xc000199040, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073475
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 2; i < len(l); i += 3 {\n        for j := i; j > i - 3; j--\
    \ {\n            if l[j] < l[j - 1] {\n                l[j], l[j - 1] = l[j -\
    \ 1], l[j]\n            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpg3ld432w_test.go:21\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpg3ld432w_test.go:36\
    \ +0x6ab\ntesting.tRunner(0xc0001031e0, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    for i := 0;\
    \ i < len(l); i++ {\n        if i % 3 == 0 {\n            var temp []int\n   \
    \         for j := i; j < i + 3; j++ {\n                temp = append(temp, l[j])\n\
    \            }\n            temp = sort(temp)\n            for j := 0; j < 3;\
    \ j++ {\n                l_prime = append(l_prime, temp[j])\n            }\n \
    \       } else {\n            l_prime = append(l_prime, l[i])\n        }\n   \
    \ }\n    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppaof3naq_test.go:23:20: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073558
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    var l1 []int\n    var l2 []int\n    var l3 []int\n    for i := 0;\
    \ i < len(l); i++ {\n        if i % 3 == 0 {\n            l1 = append(l1, l[i])\n\
    \        } else if i % 3 == 1 {\n            l2 = append(l2, l[i])\n        }\
    \ else {\n            l3 = append(l3, l[i])\n        }\n    }\n    l1 = sort(l1)\n\
    \    l2 = sort(l2)\n    l3 = sort(l3)\n    var l_new []int\n    for i := 0; i\
    \ < len(l); i++ {\n        if i % 3 == 0 {\n            l_new = append(l_new,\
    \ l1[i/3])\n        } else if i % 3 == 1 {\n            l_new = append(l_new,\
    \ l2[i/3])\n        } else {\n            l_new = append(l_new, l3[i/3])\n   \
    \     }\n    }\n    return l_new\n}\n\nfunc TestSort_Third(t *testing.T) {\n \
    \ candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprveqrfuj_test.go:31:10: undefined: sort

    /tmp/tmprveqrfuj_test.go:32:10: undefined: sort

    /tmp/tmprveqrfuj_test.go:33:10: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073558
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    var l_prime_sorted\
    \ []int\n    for i, v := range l {\n        if i % 3 == 0 {\n            l_prime_sorted\
    \ = append(l_prime_sorted, v)\n        } else {\n            l_prime = append(l_prime,\
    \ v)\n        }\n    }\n    sort(l_prime_sorted)\n    for i, v := range l_prime_sorted\
    \ {\n        l_prime = append(l_prime, v)\n        i += 3\n    }\n    return l_prime\n\
    }\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd7e9_8wh_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    for i, v :=\
    \ range l {\n        if i % 3 == 0 {\n            l_prime = append(l_prime, v)\n\
    \        } else {\n            l_prime = append(l_prime, l[i])\n        }\n  \
    \  }\n    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l_prime := make([]int, len(l))\n \
    \   copy(l_prime, l)\n    for i := 2; i < len(l); i += 3 {\n        for j := i;\
    \ j > 0; j -= 3 {\n            if l_prime[j] < l_prime[j-3] {\n              \
    \  l_prime[j], l_prime[j-3] = l_prime[j-3], l_prime[j]\n            }\n      \
    \  }\n    }\n    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpbyvma61l_test.go:20\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpbyvma61l_test.go:35\
    \ +0x80b\ntesting.tRunner(0xc0001924e0, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073476
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    l1 := l[:len(l)/3]\n    l2 := l[len(l)/3:2*len(l)/3]\n    l3 := l[2*len(l)/3:]\n\
    \    l1 = sort_third(l1)\n    l2 = sort_third(l2)\n    l3 = sort_third(l3)\n \
    \   return merge(l1, l2, l3)\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4i3mzmx__test.go:25:12: undefined: merge

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073558
- exit_code: 0
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    var l_third []int\n    for i := 0; i < len(l); i++ {\n        if i\
    \ % 3 == 0 {\n            l_third = append(l_third, l[i])\n        }\n    }\n\
    \    for i := 0; i < len(l_third); i++ {\n        for j := i + 1; j < len(l_third);\
    \ j++ {\n            if l_third[i] > l_third[j] {\n                l_third[i],\
    \ l_third[j] = l_third[j], l_third[i]\n            }\n        }\n    }\n    for\
    \ i := 0; i < len(l); i++ {\n        if i % 3 == 0 {\n            l[i] = l_third[i\
    \ / 3]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073478
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    var l_third\
    \ []int\n    for i, v := range l {\n        if i % 3 == 0 {\n            l_third\
    \ = append(l_third, v)\n        } else {\n            l_prime = append(l_prime,\
    \ v)\n        }\n    }\n    l_third = merge_sort(l_third)\n    for i, v := range\
    \ l_third {\n        l_prime = append(l_prime[:i*3], append([]int{v}, l_prime[i*3:]...)...)\n\
    \    }\n    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk0pz4vni_test.go:25:15: undefined: merge_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 2; i < len(l); i += 3 {\n        for j := i; j > i - 3; j--\
    \ {\n            if l[j] < l[j - 1] {\n                l[j], l[j - 1] = l[j -\
    \ 1], l[j]\n            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpg3ld432w_test.go:21\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpg3ld432w_test.go:36\
    \ +0x6ab\ntesting.tRunner(0xc0001031e0, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    // TODO: implement this function\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    for i, v :=\
    \ range l {\n        if i % 3 == 0 {\n            l_prime = append(l_prime, v)\n\
    \        } else {\n            l_prime = append(l_prime, l[i])\n        }\n  \
    \  }\n    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l_prime := make([]int, len(l))\n \
    \   copy(l_prime, l)\n    for i := 2; i < len(l); i += 3 {\n        for j := i;\
    \ j > i - 3; j-- {\n            if l_prime[j] < l_prime[j - 1] {\n           \
    \     l_prime[j], l_prime[j - 1] = l_prime[j - 1], l_prime[j]\n            }\n\
    \        }\n    }\n    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 20 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpcztxuxrq_test.go:20\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpcztxuxrq_test.go:35\
    \ +0x81f\ntesting.tRunner(0xc0001036c0, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var sorted_list []int\n    for i,\
    \ v := range l {\n        if i % 3 == 0 {\n            sorted_list = append(sorted_list,\
    \ v)\n        }\n    }\n    sort(sorted_list)\n    for i, v := range l {\n   \
    \     if i % 3 == 0 {\n            l[i] = sorted_list[i / 3]\n        }\n    }\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr2591r_f_test.go:22:5: undefined: sort

    /tmp/tmpr2591r_f_test.go:23:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 0; i < len(l); i += 3 {\n        if i + 2 >= len(l) {\n \
    \           break\n        }\n        if l[i] > l[i + 1] {\n            l[i],\
    \ l[i + 1] = l[i + 1], l[i]\n        }\n        if l[i + 1] > l[i + 2] {\n   \
    \         l[i + 1], l[i + 2] = l[i + 2], l[i + 1]\n        }\n        if l[i]\
    \ > l[i + 1] {\n            l[i], l[i + 1] = l[i + 1], l[i]\n        }\n    }\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpsiz_x5ot_test.go:52: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpsiz_x5ot_test.go:52: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=3) %!s(int=5) %!s(int=8)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpsiz_x5ot_test.go:52: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpsiz_x5ot_test.go:52: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=3) %!s(int=5)\
    \ %!s(int=6) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073476
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 2; i < len(l); i += 3 {\n        for j := i; j > i - 3; j--\
    \ {\n            if l[j] < l[j - 1] {\n                l[j], l[j - 1] = l[j -\
    \ 1], l[j]\n            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpg3ld432w_test.go:21\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpg3ld432w_test.go:36\
    \ +0x6ab\ntesting.tRunner(0xc0001031e0, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    for i, v :=\
    \ range l {\n        if i % 3 == 0 {\n            l_prime = append(l_prime, v)\n\
    \        } else {\n            l_prime = append(l_prime, l[i])\n        }\n  \
    \  }\n    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    var l_prime_sorted\
    \ []int\n    for i, v := range l {\n        if i % 3 == 0 {\n            l_prime_sorted\
    \ = append(l_prime_sorted, v)\n        } else {\n            l_prime = append(l_prime,\
    \ v)\n        }\n    }\n    sort(l_prime_sorted)\n    for i, v := range l_prime_sorted\
    \ {\n        l_prime = append(l_prime, v)\n        if i == 2 {\n            break\n\
    \        }\n    }\n    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqfpy8z9d_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    // TODO: implement this function\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    // TODO: implement this function\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 2; i < len(l); i += 3 {\n        for j := i; j > i - 3; j--\
    \ {\n            if l[j] < l[j - 1] {\n                l[j], l[j - 1] = l[j -\
    \ 1], l[j]\n            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpg3ld432w_test.go:21\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpg3ld432w_test.go:36\
    \ +0x6ab\ntesting.tRunner(0xc0001031e0, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 2; i < len(l); i += 3 {\n        for j := i; j > i - 3; j--\
    \ {\n            if l[j] < l[j - 1] {\n                l[j], l[j - 1] = l[j -\
    \ 1], l[j]\n            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpg3ld432w_test.go:21\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpg3ld432w_test.go:36\
    \ +0x6ab\ntesting.tRunner(0xc0001031e0, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    for i, v :=\
    \ range l {\n        if i % 3 == 0 {\n            var l_third []int\n        \
    \    l_third = append(l_third, l[i:i+3]...)\n            l_third = sort_list(l_third)\n\
    \            l_prime = append(l_prime, l_third...)\n        } else {\n       \
    \     l_prime = append(l_prime, v)\n        }\n    }\n    return l_prime\n}\n\n\
    func TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3,\
    \ 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected:\
    \ []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8,\
    \ 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm0ovodh2_test.go:21:23: undefined: sort_list

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    // TODO: implement this function\n\
    \    return []int{}\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpwbynlfto_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpwbynlfto_test.go:36: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpwbynlfto_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpwbynlfto_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 2; i < len(l); i += 3 {\n        for j := i; j > i - 3; j--\
    \ {\n            if l[j] < l[j - 1] {\n                l[j], l[j - 1] = l[j -\
    \ 1], l[j]\n            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpg3ld432w_test.go:21\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpg3ld432w_test.go:36\
    \ +0x6ab\ntesting.tRunner(0xc0001031e0, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var result []int\n    var third []int\n\
    \    for i, v := range l {\n        if i % 3 == 0 {\n            third = append(third,\
    \ v)\n        } else {\n            result = append(result, v)\n        }\n  \
    \  }\n    for i, v := range third {\n        result = append(result, v)\n    }\n\
    \    return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpir1eelsr_test.go:25:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073480
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    var l_new []int\n    for i := 0; i < len(l); i++ {\n        if i %\
    \ 3 == 0 {\n            l_new = append(l_new, sort_third_helper(l[i:i+3])...)\n\
    \        } else {\n            l_new = append(l_new, l[i])\n        }\n    }\n\
    \    return l_new\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4v279pjc_test.go:22:35: undefined: sort_third_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073473
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l_prime := make([]int, len(l))\n \
    \   copy(l_prime, l)\n    for i := 2; i < len(l); i += 3 {\n        l_prime[i]\
    \ = sort_third_helper(l[i])\n    }\n    return l_prime\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpim_w1ikg_test.go:19:22: undefined: sort_third_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    // TODO: implement this function\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_new []int\n    for i, v := range\
    \ l {\n        if i % 3 == 0 {\n            l_new = append(l_new, v)\n       \
    \ } else {\n            l_new = append(l_new, v)\n        }\n    }\n    return\
    \ l_new\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpz4xx1083_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpz4xx1083_test.go:43: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpz4xx1083_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpz4xx1083_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073559
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 2; i < len(l); i += 3 {\n        for j := i; j > 0; j -=\
    \ 3 {\n            if l[j] < l[j-3] {\n                l[j], l[j-3] = l[j-3],\
    \ l[j]\n            } else {\n                break\n            }\n        }\n\
    \    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 34 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpgu9hihs__test.go:21\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpgu9hihs__test.go:38\
    \ +0x6a5\ntesting.tRunner(0xc000199040, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073475
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    // Your code here\n    return l\n\
    }\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp2a2s510b_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp2a2s510b_test.go:36: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp2a2s510b_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp2a2s510b_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073479
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    // TODO: implement this function\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    // TODO: implement this function\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    // TODO: implement this function\n\
    \    return []int{}\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpwbynlfto_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpwbynlfto_test.go:36: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpwbynlfto_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpwbynlfto_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    // TODO: implement this function\n\
    \    return []int{}\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpwbynlfto_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpwbynlfto_test.go:36: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpwbynlfto_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpwbynlfto_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    var l_third\
    \ []int\n    for i, v := range l {\n        if i % 3 == 0 {\n            l_third\
    \ = append(l_third, v)\n        } else {\n            l_prime = append(l_prime,\
    \ v)\n        }\n    }\n    sort(l_third)\n    for i, v := range l_third {\n \
    \       l_prime = append(l_prime, v)\n    }\n    return l_prime\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi2cb9qfh_test.go:25:5: undefined: sort

    /tmp/tmpi2cb9qfh_test.go:26:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073473
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l_prime := make([]int, len(l))\n \
    \   copy(l_prime, l)\n    for i := 2; i < len(l); i += 3 {\n        for j := i;\
    \ j > i - 3; j-- {\n            if l_prime[j] < l_prime[j - 1] {\n           \
    \     l_prime[j], l_prime[j - 1] = l_prime[j - 1], l_prime[j]\n            }\n\
    \        }\n    }\n    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 20 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpcztxuxrq_test.go:20\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpcztxuxrq_test.go:35\
    \ +0x81f\ntesting.tRunner(0xc0001036c0, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 0
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    for i := 0; i < len(l); i += 3 {\n\
    \        for j := i + 3; j < len(l); j += 3 {\n            if l[i] > l[j] {\n\
    \                l[i], l[j] = l[j], l[i]\n            }\n        }\n    }\n  \
    \  return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073559
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 2; i < len(l); i += 3 {\n        for j := i; j > i - 3; j--\
    \ {\n            if l[j] < l[j - 1] {\n                l[j], l[j - 1] = l[j -\
    \ 1], l[j]\n            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpg3ld432w_test.go:21\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpg3ld432w_test.go:36\
    \ +0x6ab\ntesting.tRunner(0xc0001031e0, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    var l_third\
    \ []int\n    for i, v := range l {\n        if i % 3 == 0 {\n            l_third\
    \ = append(l_third, v)\n        } else {\n            l_prime = append(l_prime,\
    \ v)\n        }\n    }\n    l_third = sort(l_third)\n    for i, v := range l_third\
    \ {\n        l_prime = append(l_prime[:i*3], append([]int{v}, l_prime[i*3:]...)...)\n\
    \    }\n    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpigrownxd_test.go:25:15: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073473
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var result []int\n    var temp []int\n\
    \    for i, v := range l {\n        if i % 3 == 0 {\n            temp = append(temp,\
    \ v)\n        } else {\n            result = append(result, v)\n        }\n  \
    \  }\n    for _, v := range temp {\n        result = append(result, v)\n    }\n\
    \    return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp4e8uxtub_test.go:47: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=6) %!s(int=3) %!s(int=8)\
    \ %!s(int=9) %!s(int=5) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp4e8uxtub_test.go:47: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=8) %!s(int=3) %!s(int=6)\
    \ %!s(int=9) %!s(int=5) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp4e8uxtub_test.go:47: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=6) %!s(int=9) %!s(int=8)\
    \ %!s(int=3) %!s(int=5) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp4e8uxtub_test.go:47: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=6) %!s(int=3)\
    \ %!s(int=8) %!s(int=9) %!s(int=1) %!s(int=5) %!s(int=4) %!s(int=2)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073559
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 0; i < len(l); i += 3 {\n        if i + 2 < len(l) {\n  \
    \          if l[i] > l[i + 1] {\n                l[i], l[i + 1] = l[i + 1], l[i]\n\
    \            }\n            if l[i + 1] > l[i + 2] {\n                l[i + 1],\
    \ l[i + 2] = l[i + 2], l[i + 1]\n            }\n            if l[i] > l[i + 1]\
    \ {\n                l[i], l[i + 1] = l[i + 1], l[i]\n            }\n        }\n\
    \    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmph1rh2oat_test.go:51: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmph1rh2oat_test.go:51: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=3) %!s(int=5) %!s(int=8)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmph1rh2oat_test.go:51: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmph1rh2oat_test.go:51: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=3) %!s(int=5)\
    \ %!s(int=6) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073559
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    for i := 0;\
    \ i < len(l); i++ {\n        if i % 3 == 0 {\n            l_prime = append(l_prime,\
    \ l[i])\n        } else {\n            l_prime = append(l_prime, l[i])\n     \
    \   }\n    }\n    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T) {\n \
    \ candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp7dx90948_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp7dx90948_test.go:43: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp7dx90948_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp7dx90948_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073559
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    for i, v :=\
    \ range l {\n        if i % 3 == 0 {\n            l_prime = append(l_prime, v)\n\
    \        } else {\n            l_prime = append(l_prime, v)\n        }\n    }\n\
    \    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmplonzeh71_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmplonzeh71_test.go:43: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmplonzeh71_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmplonzeh71_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    l1 := make([]int, len(l))\n    copy(l1, l)\n    for i := 2; i < len(l1);\
    \ i += 3 {\n        for j := i; j > 0; j -= 3 {\n            if l1[j] < l1[j-3]\
    \ {\n                l1[j], l1[j-3] = l1[j-3], l1[j]\n            } else {\n \
    \               break\n            }\n        }\n    }\n    return l1\n}\n\nfunc\
    \ TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3,\
    \ 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected:\
    \ []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8,\
    \ 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmp881j_thw_test.go:23\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmp881j_thw_test.go:40\
    \ +0x765\ntesting.tRunner(0xc0001a01a0, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073559
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    for i := 0; i < len(l); i += 3 {\n\
    \        for j := i + 1; j < len(l); j += 3 {\n            if l[i] > l[j] {\n\
    \                l[i], l[j] = l[j], l[i]\n            }\n        }\n    }\n  \
    \  return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpsxeslo_c_test.go:42: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpsxeslo_c_test.go:42: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpsxeslo_c_test.go:42: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpsxeslo_c_test.go:42: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073559
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    for i, v :=\
    \ range l {\n        if i % 3 == 0 {\n            l_prime = append(l_prime, v)\n\
    \        } else {\n            l_prime = append(l_prime, l[i])\n        }\n  \
    \  }\n    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    // TODO: implement this function\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    // find the index of the first element divisible by 3\n    var i int\n\
    \    for i = 0; i < len(l); i++ {\n        if i % 3 == 0 {\n            break\n\
    \        }\n    }\n    // sort the elements from i to i+3\n    for j := i; j <\
    \ i+3; j++ {\n        for k := j + 1; k < i+3; k++ {\n            if l[j] > l[k]\
    \ {\n                l[j], l[k] = l[k], l[j]\n            }\n        }\n    }\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpqxq7z9ly_test.go:53: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpqxq7z9ly_test.go:53: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=3) %!s(int=5) %!s(int=8)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpqxq7z9ly_test.go:53: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpqxq7z9ly_test.go:53: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=3) %!s(int=5)\
    \ %!s(int=6) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073559
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    // TODO: Implement me!\n    return\
    \ []int{}\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpf7rdw35g_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpf7rdw35g_test.go:36: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpf7rdw35g_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpf7rdw35g_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073478
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    // TODO: Implement me!\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpg0ca_vh7_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpg0ca_vh7_test.go:36: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpg0ca_vh7_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpg0ca_vh7_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073559
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    for i := 2; i < len(l); i += 3 {\n\
    \        for j := i; j > i - 3; j-- {\n            if l[j] < l[j - 1] {\n    \
    \            l[j], l[j - 1] = l[j - 1], l[j]\n            }\n        }\n    }\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmp5foc5cu__test.go:18\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmp5foc5cu__test.go:33\
    \ +0x6ab\ntesting.tRunner(0xc0001a0340, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073479
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    var l_prime_sorted\
    \ []int\n    for i, v := range l {\n        if i % 3 == 0 {\n            l_prime_sorted\
    \ = append(l_prime_sorted, v)\n        } else {\n            l_prime = append(l_prime,\
    \ v)\n        }\n    }\n    for i, v := range l_prime_sorted {\n        l_prime\
    \ = append(l_prime, v)\n        if i == len(l_prime_sorted) - 1 {\n          \
    \  break\n        }\n    }\n    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp50axqv6p_test.go:50: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=6) %!s(int=3) %!s(int=8)\
    \ %!s(int=9) %!s(int=5) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp50axqv6p_test.go:50: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=8) %!s(int=3) %!s(int=6)\
    \ %!s(int=9) %!s(int=5) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp50axqv6p_test.go:50: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=6) %!s(int=9) %!s(int=8)\
    \ %!s(int=3) %!s(int=5) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp50axqv6p_test.go:50: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=6) %!s(int=3)\
    \ %!s(int=8) %!s(int=9) %!s(int=1) %!s(int=5) %!s(int=4) %!s(int=2)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073561
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 2; i < len(l); i += 3 {\n        for j := i; j > 0; j -=\
    \ 3 {\n            if l[j] < l[j-3] {\n                l[j], l[j-3] = l[j-3],\
    \ l[j]\n            } else {\n                break\n            }\n        }\n\
    \    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 34 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpgu9hihs__test.go:21\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpgu9hihs__test.go:38\
    \ +0x6a5\ntesting.tRunner(0xc000199040, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073475
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    for i := 0;\
    \ i < len(l); i++ {\n        if i % 3 == 0 {\n            l_prime = append(l_prime,\
    \ sort_third_helper(l[i:i+3])...)\n        } else {\n            l_prime = append(l_prime,\
    \ l[i])\n        }\n    }\n    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj2izz8x9_test.go:19:39: undefined: sort_third_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073479
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    var l_third\
    \ []int\n    for i, v := range l {\n        if i % 3 == 0 {\n            l_third\
    \ = append(l_third, v)\n        } else {\n            l_prime = append(l_prime,\
    \ v)\n        }\n    }\n    l_third = sort(l_third)\n    for i, v := range l_third\
    \ {\n        l_prime = append(l_prime[:i*3], append([]int{v}, l_prime[i*3:]...)...)\n\
    \    }\n    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpigrownxd_test.go:25:15: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073473
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    for i, v :=\
    \ range l {\n        if i % 3 == 0 {\n            l_prime = append(l_prime, sort_third_helper(l[i:i+3]))\n\
    \        } else {\n            l_prime = append(l_prime, v)\n        }\n    }\n\
    \    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpodqt5ro4_test.go:19:39: undefined: sort_third_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073473
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    var l_third\
    \ []int\n    for i, v := range l {\n        if i % 3 == 0 {\n            l_third\
    \ = append(l_third, v)\n        } else {\n            l_prime = append(l_prime,\
    \ v)\n        }\n    }\n    sort(l_third)\n    for i, v := range l_third {\n \
    \       l_prime = append(l_prime, i * 3, v)\n    }\n    return l_prime\n}\n\n\
    func TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3,\
    \ 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected:\
    \ []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8,\
    \ 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnns6c6y4_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073476
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    l1 := make([]int, len(l))\n    copy(l1, l)\n    for i := 2; i < len(l1);\
    \ i += 3 {\n        for j := i; j > i-3; j-- {\n            if l1[j] < l1[j-1]\
    \ {\n                l1[j], l1[j-1] = l1[j-1], l1[j]\n            }\n        }\n\
    \    }\n    return l1\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpgw5wb811_test.go:23\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpgw5wb811_test.go:38\
    \ +0x75f\ntesting.tRunner(0xc000103380, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073561
- exit_code: 0
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    var l_new []int\n    for i := 0; i < len(l); i++ {\n        if i %\
    \ 3 == 0 {\n            l_new = append(l_new, l[i])\n        }\n    }\n    for\
    \ i := 0; i < len(l_new); i++ {\n        for j := i + 1; j < len(l_new); j++ {\n\
    \            if l_new[i] > l_new[j] {\n                l_new[i], l_new[j] = l_new[j],\
    \ l_new[i]\n            }\n        }\n    }\n    for i := 0; i < len(l); i++ {\n\
    \        if i % 3 == 0 {\n            l[i] = l_new[i / 3]\n        }\n    }\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073561
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    // TODO: implement this function\n\
    \    return []int{}\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpwbynlfto_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpwbynlfto_test.go:36: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpwbynlfto_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpwbynlfto_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 2; i < len(l); i += 3 {\n        for j := i; j > i - 3; j--\
    \ {\n            if l[j] < l[j - 1] {\n                l[j], l[j - 1] = l[j -\
    \ 1], l[j]\n            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpg3ld432w_test.go:21\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpg3ld432w_test.go:36\
    \ +0x6ab\ntesting.tRunner(0xc0001031e0, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 2; i < len(l); i += 3 {\n        for j := i; j > i - 3; j--\
    \ {\n            if l[j] < l[j - 1] {\n                l[j], l[j - 1] = l[j -\
    \ 1], l[j]\n            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpg3ld432w_test.go:21\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpg3ld432w_test.go:36\
    \ +0x6ab\ntesting.tRunner(0xc0001031e0, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 2; i < len(l); i += 3 {\n        for j := i; j > 0; j -=\
    \ 3 {\n            if l[j] < l[j-3] {\n                l[j], l[j-3] = l[j-3],\
    \ l[j]\n            } else {\n                break\n            }\n        }\n\
    \    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 34 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpgu9hihs__test.go:21\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpgu9hihs__test.go:38\
    \ +0x6a5\ntesting.tRunner(0xc000199040, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073475
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 2; i < len(l); i += 3 {\n        for j := i; j > 0; j -=\
    \ 3 {\n            if l[j] < l[j-3] {\n                l[j], l[j-3] = l[j-3],\
    \ l[j]\n            } else {\n                break\n            }\n        }\n\
    \    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 34 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpgu9hihs__test.go:21\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpgu9hihs__test.go:38\
    \ +0x6a5\ntesting.tRunner(0xc000199040, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073475
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var result []int\n    var sorted_third\
    \ []int\n    for i, v := range l {\n        if i % 3 == 0 {\n            sorted_third\
    \ = append(sorted_third, v)\n        }\n    }\n    for i, v := range l {\n   \
    \     if i % 3 == 0 {\n            result = append(result, sorted_third[0])\n\
    \            sorted_third = sorted_third[1:]\n        } else {\n            result\
    \ = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpnrs7k56h_test.go:50: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpnrs7k56h_test.go:50: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpnrs7k56h_test.go:50: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpnrs7k56h_test.go:50: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073476
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    // Your code here\n    return l\n\
    }\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp2a2s510b_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp2a2s510b_test.go:36: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp2a2s510b_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp2a2s510b_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073479
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) <= 3 {\n        return l\n\
    \    }\n    l_copy := make([]int, len(l))\n    copy(l_copy, l)\n    for i := 0;\
    \ i < len(l_copy); i += 3 {\n        l_copy[i] = l[i]\n        l_copy[i+1] = l[i+1]\n\
    \        l_copy[i+2] = l[i+2]\n        for j := i + 2; j > i; j-- {\n        \
    \    if l_copy[j] < l_copy[j-1] {\n                l_copy[j], l_copy[j-1] = l_copy[j-1],\
    \ l_copy[j]\n            }\n        }\n    }\n    return l_copy\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [7] with length 7 [recovered]\n\tpanic: runtime error: index out of range [7]\
    \ with length 7\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5136e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third({0xc0000202c0?, 0x7, 0x55bec1?})\n\
    \t/tmp/tmpupu736uq_test.go:23 +0x128\ncommand-line-arguments_test.TestSort_Third(0x0?)\n\
    \t/tmp/tmpupu736uq_test.go:41 +0x8f\ntesting.tRunner(0xc0001a01a0, 0x529000)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073561
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l_len := len(l)\n    if l_len < 3\
    \ {\n        return l\n    }\n    for i := 2; i < l_len; i += 3 {\n        for\
    \ j := i; j > i - 3; j-- {\n            if l[j] < l[j - 1] {\n               \
    \ l[j], l[j - 1] = l[j - 1], l[j]\n            }\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpjinpkgl0_test.go:22\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpjinpkgl0_test.go:37\
    \ +0x6ab\ntesting.tRunner(0xc000120340, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073480
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 2; i < len(l); i += 3 {\n        for j := i; j > i - 3; j--\
    \ {\n            if l[j] < l[j - 1] {\n                l[j], l[j - 1] = l[j -\
    \ 1], l[j]\n            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpg3ld432w_test.go:21\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpg3ld432w_test.go:36\
    \ +0x6ab\ntesting.tRunner(0xc0001031e0, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    for i, v :=\
    \ range l {\n        if i % 3 == 0 {\n            l_prime = append(l_prime, v)\n\
    \        } else {\n            l_prime = append(l_prime, l[i])\n        }\n  \
    \  }\n    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    for i, v :=\
    \ range l {\n        if i % 3 == 0 {\n            l_prime = append(l_prime, v)\n\
    \        } else {\n            l_prime = append(l_prime, l[i])\n        }\n  \
    \  }\n    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    l_prime := make([]int, len(l))\n    copy(l_prime, l)\n    for i :=\
    \ 2; i < len(l); i += 3 {\n        l_prime[i] = sort_third_helper(l[i-2:i+1])[1]\n\
    \    }\n    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprnl5poc5_test.go:22:22: undefined: sort_third_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073480
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l_len := len(l)\n    if l_len < 3\
    \ {\n        return l\n    }\n    sorted_l := make([]int, l_len)\n    for i :=\
    \ 0; i < l_len; i++ {\n        if i % 3 == 0 {\n            sorted_l[i] = l[i]\n\
    \        } else {\n            sorted_l[i] = l[i - i % 3]\n        }\n    }\n\
    \    for i := 0; i < l_len; i += 3 {\n        for j := i + 1; j < i + 3; j++ {\n\
    \            for k := j + 1; k < i + 3; k++ {\n                if sorted_l[j]\
    \ > sorted_l[k] {\n                    sorted_l[j], sorted_l[k] = sorted_l[k],\
    \ sorted_l[j]\n                }\n            }\n        }\n    }\n    return\
    \ sorted_l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [7] with length 7 [recovered]\n\tpanic: runtime error: index out of range [7]\
    \ with length 7\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5136e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third({0xc0000202c0?, 0x7, 0x55bec1?})\n\
    \t/tmp/tmp2yqppc7g_test.go:31 +0x11f\ncommand-line-arguments_test.TestSort_Third(0x0?)\n\
    \t/tmp/tmp2yqppc7g_test.go:47 +0x8f\ntesting.tRunner(0xc0001a0340, 0x529000)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073561
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    for i := 0;\
    \ i < len(l); i++ {\n        if i % 3 == 0 {\n            l_prime = append(l_prime,\
    \ sort_third_helper(l[i:i+3])...)\n        } else {\n            l_prime = append(l_prime,\
    \ l[i])\n        }\n    }\n    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj2izz8x9_test.go:19:39: undefined: sort_third_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073479
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_new []int\n    for i, v := range\
    \ l {\n        if i % 3 == 0 {\n            l_new = append(l_new, v)\n       \
    \ } else {\n            l_new = append(l_new, v)\n        }\n    }\n    return\
    \ l_new\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpz4xx1083_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpz4xx1083_test.go:43: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpz4xx1083_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpz4xx1083_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073559
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 2; i < len(l); i += 3 {\n        for j := i; j > 0; j -=\
    \ 3 {\n            if l[j] < l[j-3] {\n                l[j], l[j-3] = l[j-3],\
    \ l[j]\n            } else {\n                break\n            }\n        }\n\
    \    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 34 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpgu9hihs__test.go:21\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpgu9hihs__test.go:38\
    \ +0x6a5\ntesting.tRunner(0xc000199040, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073475
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    var l_third\
    \ []int\n    for i, v := range l {\n        if i % 3 == 0 {\n            l_third\
    \ = append(l_third, v)\n        } else {\n            l_prime = append(l_prime,\
    \ v)\n        }\n    }\n    l_third = sort(l_third)\n    for i, v := range l_third\
    \ {\n        l_prime = append(l_prime[:i*3], append([]int{v}, l_prime[i*3:]...)...)\n\
    \    }\n    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpigrownxd_test.go:25:15: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073473
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 2; i < len(l); i += 3 {\n        for j := i; j > 0; j -=\
    \ 3 {\n            if l[j] < l[j-3] {\n                l[j], l[j-3] = l[j-3],\
    \ l[j]\n            } else {\n                break\n            }\n        }\n\
    \    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 34 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpgu9hihs__test.go:21\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpgu9hihs__test.go:38\
    \ +0x6a5\ntesting.tRunner(0xc000199040, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073475
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    for i, v :=\
    \ range l {\n        if i % 3 == 0 {\n            l_prime = append(l_prime, v)\n\
    \        } else {\n            l_prime = append(l_prime, l[i])\n        }\n  \
    \  }\n    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    var l_prime []int\n    var l_third []int\n    for i, v := range l\
    \ {\n        if i % 3 == 0 {\n            l_third = append(l_third, v)\n     \
    \   } else {\n            l_prime = append(l_prime, v)\n        }\n    }\n   \
    \ l_third = sort(l_third)\n    for i, v := range l_third {\n        l_prime =\
    \ append(l_prime[:i], append([]int{v}, l_prime[i:]...)...)\n    }\n    return\
    \ l_prime\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy81zes0w_test.go:28:15: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073560
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l_len := len(l)\n    if l_len < 3\
    \ {\n        return l\n    }\n    for i := 2; i < l_len; i += 3 {\n        for\
    \ j := i; j > i - 3; j-- {\n            if l[j] < l[j - 1] {\n               \
    \ l[j], l[j - 1] = l[j - 1], l[j]\n            }\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpjinpkgl0_test.go:22\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpjinpkgl0_test.go:37\
    \ +0x6ab\ntesting.tRunner(0xc000120340, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073480
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    var l1 []int\n    var l2 []int\n    var l3 []int\n    for i, v :=\
    \ range l {\n        if i % 3 == 0 {\n            l1 = append(l1, v)\n       \
    \ } else if i % 3 == 1 {\n            l2 = append(l2, v)\n        } else {\n \
    \           l3 = append(l3, v)\n        }\n    }\n    l1 = sort_third(l1)\n  \
    \  l2 = sort_third(l2)\n    l3 = sort_third(l3)\n    var l_sorted []int\n    for\
    \ i := 0; i < len(l1); i++ {\n        l_sorted = append(l_sorted, l1[i])\n   \
    \     l_sorted = append(l_sorted, l2[i])\n        l_sorted = append(l_sorted,\
    \ l3[i])\n    }\n    return l_sorted\n}\n\nfunc TestSort_Third(t *testing.T) {\n\
    \  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5136e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third({0xc0000202c0?, 0x7, 0x55bee1?})\n\
    \t/tmp/tmpigvt2vsz_test.go:37 +0x4d0\ncommand-line-arguments_test.TestSort_Third(0x0?)\n\
    \t/tmp/tmpigvt2vsz_test.go:50 +0x8f\ntesting.tRunner(0xc0001a01a0, 0x529000)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073561
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var result []int\n    var third []int\n\
    \    for i, v := range l {\n        if i % 3 == 0 {\n            third = append(third,\
    \ v)\n        } else {\n            result = append(result, v)\n        }\n  \
    \  }\n    for i, v := range third {\n        result = append(result, v)\n    }\n\
    \    return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpir1eelsr_test.go:25:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073480
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var result []int\n    for i := 0;\
    \ i < len(l); i++ {\n        if i % 3 == 0 {\n            result = append(result,\
    \ sort_third_helper(l[i:i+3]))\n        } else {\n            result = append(result,\
    \ l[i])\n        }\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptey8w5m3_test.go:19:37: undefined: sort_third_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073560
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    // TODO: implement this function\n\
    \    return []int{}\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpwbynlfto_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpwbynlfto_test.go:36: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpwbynlfto_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpwbynlfto_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    // TODO: implement this function\n\
    \    return []int{}\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpwbynlfto_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpwbynlfto_test.go:36: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpwbynlfto_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpwbynlfto_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 2; i < len(l); i += 3 {\n        for j := i; j > 0; j -=\
    \ 3 {\n            if l[j] < l[j-3] {\n                l[j], l[j-3] = l[j-3],\
    \ l[j]\n            } else {\n                break\n            }\n        }\n\
    \    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 34 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpgu9hihs__test.go:21\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpgu9hihs__test.go:38\
    \ +0x6a5\ntesting.tRunner(0xc000199040, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073475
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 2; i < len(l); i += 3 {\n        for j := i; j > 0; j -=\
    \ 3 {\n            if l[j] < l[j-3] {\n                l[j], l[j-3] = l[j-3],\
    \ l[j]\n            } else {\n                break\n            }\n        }\n\
    \    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 34 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpgu9hihs__test.go:21\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpgu9hihs__test.go:38\
    \ +0x6a5\ntesting.tRunner(0xc000199040, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073475
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 2; i < len(l); i += 3 {\n        for j := i; j > 0; j -=\
    \ 3 {\n            if l[j] < l[j-3] {\n                l[j], l[j-3] = l[j-3],\
    \ l[j]\n            } else {\n                break\n            }\n        }\n\
    \    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 34 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpgu9hihs__test.go:21\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpgu9hihs__test.go:38\
    \ +0x6a5\ntesting.tRunner(0xc000199040, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073475
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    for i := 0;\
    \ i < len(l); i++ {\n        if i % 3 == 0 {\n            l_prime = append(l_prime,\
    \ sort_third_helper(l[i:i+3])...)\n        } else {\n            l_prime = append(l_prime,\
    \ l[i])\n        }\n    }\n    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj2izz8x9_test.go:19:39: undefined: sort_third_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073479
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 2; i < len(l); i += 3 {\n        for j := i; j > i - 3; j--\
    \ {\n            if l[j] < l[j - 1] {\n                l[j], l[j - 1] = l[j -\
    \ 1], l[j]\n            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpg3ld432w_test.go:21\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpg3ld432w_test.go:36\
    \ +0x6ab\ntesting.tRunner(0xc0001031e0, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    // TODO: implement this function\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    var l_third\
    \ []int\n    for i, v := range l {\n        if i % 3 == 0 {\n            l_third\
    \ = append(l_third, v)\n        } else {\n            l_prime = append(l_prime,\
    \ v)\n        }\n    }\n    sort(l_third)\n    for i, v := range l_third {\n \
    \       l_prime = append(l_prime, v)\n    }\n    return l_prime\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi2cb9qfh_test.go:25:5: undefined: sort

    /tmp/tmpi2cb9qfh_test.go:26:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073473
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    for i, v :=\
    \ range l {\n        if i % 3 == 0 {\n            l_prime = append(l_prime, v)\n\
    \        } else {\n            l_prime = append(l_prime, l[i])\n        }\n  \
    \  }\n    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    var l3 []int\n    for i, v := range l {\n        if i % 3 == 0 {\n\
    \            l3 = append(l3, v)\n        }\n    }\n    l3 = sort(l3)\n    for\
    \ i, v := range l3 {\n        l[i * 3] = v\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpat1ct_2q_test.go:25:10: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073560
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 0; i < len(l); i += 3 {\n        if i + 2 < len(l) {\n  \
    \          if l[i] > l[i + 1] {\n                l[i], l[i + 1] = l[i + 1], l[i]\n\
    \            }\n            if l[i + 1] > l[i + 2] {\n                l[i + 1],\
    \ l[i + 2] = l[i + 2], l[i + 1]\n            }\n            if l[i] > l[i + 1]\
    \ {\n                l[i], l[i + 1] = l[i + 1], l[i]\n            }\n        }\n\
    \    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmph1rh2oat_test.go:51: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmph1rh2oat_test.go:51: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=3) %!s(int=5) %!s(int=8)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmph1rh2oat_test.go:51: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmph1rh2oat_test.go:51: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=3) %!s(int=5)\
    \ %!s(int=6) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073559
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    var l_third\
    \ []int\n    for i, v := range l {\n        if i % 3 == 0 {\n            l_third\
    \ = append(l_third, v)\n        } else {\n            l_prime = append(l_prime,\
    \ v)\n        }\n    }\n    l_third = sort(l_third)\n    for i, v := range l_third\
    \ {\n        l_prime = append(l_prime[:i*3], append([]int{v}, l_prime[i*3:]...)...)\n\
    \    }\n    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpigrownxd_test.go:25:15: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073473
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l_len := len(l)\n    if l_len < 3\
    \ {\n        return l\n    }\n    for i := 0; i < l_len; i += 3 {\n        if\
    \ i + 2 < l_len {\n            if l[i] > l[i + 1] {\n                l[i], l[i\
    \ + 1] = l[i + 1], l[i]\n            }\n            if l[i + 1] > l[i + 2] {\n\
    \                l[i + 1], l[i + 2] = l[i + 2], l[i + 1]\n            }\n    \
    \        if l[i] > l[i + 1] {\n                l[i], l[i + 1] = l[i + 1], l[i]\n\
    \            }\n        } else if i + 1 < l_len {\n            if l[i] > l[i +\
    \ 1] {\n                l[i], l[i + 1] = l[i + 1], l[i]\n            }\n     \
    \   }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpxl6fa4jv_test.go:56: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpxl6fa4jv_test.go:56: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=3) %!s(int=5) %!s(int=8)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpxl6fa4jv_test.go:56: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpxl6fa4jv_test.go:56: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=3) %!s(int=5)\
    \ %!s(int=6) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=1) %!s(int=2)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073478
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    var l_third\
    \ []int\n    for i, v := range l {\n        if i % 3 == 0 {\n            l_third\
    \ = append(l_third, v)\n        } else {\n            l_prime = append(l_prime,\
    \ v)\n        }\n    }\n    l_third = bubble_sort(l_third)\n    for i, v := range\
    \ l_third {\n        l_prime = append(l_prime[:i], append([]int{v}, l_prime[i:]...)...)\n\
    \    }\n    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpadp9n2jf_test.go:25:15: undefined: bubble_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073560
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var result []int\n    for i, v :=\
    \ range l {\n        if i % 3 == 0 {\n            result = append(result, v)\n\
    \        } else {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp8qjwobe5_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp8qjwobe5_test.go:43: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp8qjwobe5_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp8qjwobe5_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073478
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 2; i < len(l); i += 3 {\n        for j := i; j > i - 3; j--\
    \ {\n            if l[j] < l[j - 1] {\n                l[j], l[j - 1] = l[j -\
    \ 1], l[j]\n            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpg3ld432w_test.go:21\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpg3ld432w_test.go:36\
    \ +0x6ab\ntesting.tRunner(0xc0001031e0, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    // TODO: implement this function\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    // TODO: implement this function\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    for i := 0; i < len(l); i += 3 {\n\
    \        for j := i + 1; j < len(l); j += 3 {\n            if l[i] > l[j] {\n\
    \                l[i], l[j] = l[j], l[i]\n            }\n        }\n    }\n  \
    \  return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpsxeslo_c_test.go:42: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpsxeslo_c_test.go:42: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpsxeslo_c_test.go:42: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpsxeslo_c_test.go:42: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073559
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    // TODO: implement this function\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 0
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l_len := len(l)\n    if l_len < 3\
    \ {\n        return l\n    }\n    for i := 0; i < l_len; i += 3 {\n        for\
    \ j := i + 3; j < l_len; j += 3 {\n            if l[i] > l[j] {\n            \
    \    l[i], l[j] = l[j], l[i]\n            }\n        }\n    }\n    return l\n\
    }\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073480
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    for i := 2; i < len(l); i += 3 {\n\
    \        for j := i; j > i - 3; j-- {\n            if l[j] < l[j - 1] {\n    \
    \            l[j], l[j - 1] = l[j - 1], l[j]\n            }\n        }\n    }\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmp5foc5cu__test.go:18\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmp5foc5cu__test.go:33\
    \ +0x6ab\ntesting.tRunner(0xc0001a0340, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073479
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l_len := len(l)\n    if l_len < 3\
    \ {\n        return l\n    }\n    for i := 2; i < l_len; i += 3 {\n        for\
    \ j := i; j > 0; j -= 3 {\n            if l[j] < l[j-3] {\n                l[j],\
    \ l[j-3] = l[j-3], l[j]\n            } else {\n                break\n       \
    \     }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmp8nrim4rr_test.go:22\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmp8nrim4rr_test.go:39\
    \ +0x6a5\ntesting.tRunner(0xc0001964e0, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073561
- exit_code: 0
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l_prime := make([]int, len(l))\n \
    \   for i, v := range l {\n        if i % 3 == 0 {\n            l_prime[i] = v\n\
    \        } else {\n            l_prime[i] = l[i]\n        }\n    }\n    for i\
    \ := 0; i < len(l_prime); i += 3 {\n        for j := i + 3; j < len(l_prime);\
    \ j += 3 {\n            if l_prime[i] > l_prime[j] {\n                l_prime[i],\
    \ l_prime[j] = l_prime[j], l_prime[i]\n            }\n        }\n    }\n    return\
    \ l_prime\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073561
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    var l_prime_sorted\
    \ []int\n    var l_prime_unsorted []int\n    var l_prime_sorted_index int = 0\n\
    \    var l_prime_unsorted_index int = 0\n    for i := 0; i < len(l); i++ {\n \
    \       if i % 3 == 0 {\n            l_prime_sorted = append(l_prime_sorted, l[i])\n\
    \        } else {\n            l_prime_unsorted = append(l_prime_unsorted, l[i])\n\
    \        }\n    }\n    sort(l_prime_sorted)\n    for i := 0; i < len(l); i++ {\n\
    \        if i % 3 == 0 {\n            l_prime = append(l_prime, l_prime_sorted[l_prime_sorted_index])\n\
    \            l_prime_sorted_index++\n        } else {\n            l_prime = append(l_prime,\
    \ l_prime_unsorted[l_prime_unsorted_index])\n            l_prime_unsorted_index++\n\
    \        }\n    }\n    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnw3znjl3_test.go:28:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073561
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    // find the index of the first element divisible by 3\n    i := 0\n\
    \    for i < len(l) && l[i] % 3 != 0 {\n        i++\n    }\n    // if there is\
    \ no such element, return the list\n    if i == len(l) {\n        return l\n \
    \   }\n    // find the index of the last element divisible by 3\n    j := len(l)\
    \ - 1\n    for j >= 0 && l[j] % 3 != 0 {\n        j--\n    }\n    // sort the\
    \ elements between i and j\n    for k := i; k < j; k++ {\n        for m := k +\
    \ 1; m <= j; m++ {\n            if l[k] > l[m] {\n                l[k], l[m] =\
    \ l[m], l[k]\n            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp_ibz2m5p_test.go:60: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=3) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp_ibz2m5p_test.go:60: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp_ibz2m5p_test.go:60: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp_ibz2m5p_test.go:60: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073561
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    // TODO: implement this function\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 2; i < len(l); i += 3 {\n        for j := i; j > i - 3; j--\
    \ {\n            if l[j] < l[j - 1] {\n                l[j], l[j - 1] = l[j -\
    \ 1], l[j]\n            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpg3ld432w_test.go:21\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpg3ld432w_test.go:36\
    \ +0x6ab\ntesting.tRunner(0xc0001031e0, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var result []int\n    for i := 0;\
    \ i < len(l); i++ {\n        if i % 3 == 0 {\n            result = append(result,\
    \ sort_third_helper(l[i:i+3]))\n        } else {\n            result = append(result,\
    \ l[i])\n        }\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptey8w5m3_test.go:19:37: undefined: sort_third_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073560
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 2; i < len(l); i += 3 {\n        for j := i; j > i - 3; j--\
    \ {\n            if l[j] < l[j - 1] {\n                l[j], l[j - 1] = l[j -\
    \ 1], l[j]\n            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpg3ld432w_test.go:21\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpg3ld432w_test.go:36\
    \ +0x6ab\ntesting.tRunner(0xc0001031e0, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    for i, v :=\
    \ range l {\n        if i % 3 == 0 {\n            l_prime = append(l_prime, v)\n\
    \        } else {\n            l_prime = append(l_prime, v)\n        }\n    }\n\
    \    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmplonzeh71_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmplonzeh71_test.go:43: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmplonzeh71_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmplonzeh71_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    for i, v :=\
    \ range l {\n        if i % 3 == 0 {\n            l_prime = append(l_prime, sort_third_helper(l[i:i+3]))\n\
    \        } else {\n            l_prime = append(l_prime, v)\n        }\n    }\n\
    \    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpodqt5ro4_test.go:19:39: undefined: sort_third_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073473
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 2; i < len(l); i += 3 {\n        for j := i; j > i - 3; j--\
    \ {\n            if l[j] < l[j - 1] {\n                l[j], l[j - 1] = l[j -\
    \ 1], l[j]\n            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpg3ld432w_test.go:21\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpg3ld432w_test.go:36\
    \ +0x6ab\ntesting.tRunner(0xc0001031e0, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 2; i < len(l); i += 3 {\n        for j := i; j > i - 3; j--\
    \ {\n            if l[j] < l[j - 1] {\n                l[j], l[j - 1] = l[j -\
    \ 1], l[j]\n            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpg3ld432w_test.go:21\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpg3ld432w_test.go:36\
    \ +0x6ab\ntesting.tRunner(0xc0001031e0, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    for i, v :=\
    \ range l {\n        if i % 3 == 0 {\n            l_prime = append(l_prime, v)\n\
    \        } else {\n            l_prime = append(l_prime, l[i])\n        }\n  \
    \  }\n    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    for i, v :=\
    \ range l {\n        if i % 3 == 0 {\n            l_prime = append(l_prime, v)\n\
    \        } else {\n            l_prime = append(l_prime, l[i])\n        }\n  \
    \  }\n    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    for i, v :=\
    \ range l {\n        if i % 3 == 0 {\n            l_prime = append(l_prime, v)\n\
    \        } else {\n            l_prime = append(l_prime, l[i])\n        }\n  \
    \  }\n    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    // TODO: implement this function\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 2; i < len(l); i += 3 {\n        for j := i; j > i - 3; j--\
    \ {\n            if l[j] < l[j - 1] {\n                l[j], l[j - 1] = l[j -\
    \ 1], l[j]\n            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpg3ld432w_test.go:21\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpg3ld432w_test.go:36\
    \ +0x6ab\ntesting.tRunner(0xc0001031e0, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    for i := 0;\
    \ i < len(l); i++ {\n        if i % 3 == 0 {\n            l_prime = append(l_prime,\
    \ sort_third_helper(l[i:i+3])...)\n        } else {\n            l_prime = append(l_prime,\
    \ l[i])\n        }\n    }\n    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj2izz8x9_test.go:19:39: undefined: sort_third_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073479
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    var l_prime []int\n    for i := 0; i < len(l); i++ {\n        if i\
    \ % 3 == 0 {\n            l_prime = append(l_prime, l[i])\n        } else {\n\
    \            l_prime = append(l_prime, l[i])\n        }\n    }\n    return l_prime\n\
    }\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpktan821q_test.go:46: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpktan821q_test.go:46: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpktan821q_test.go:46: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpktan821q_test.go:46: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073476
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    // YOUR CODE HERE\n    return l\n\
    }\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpr4skiy1x_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpr4skiy1x_test.go:36: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpr4skiy1x_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpr4skiy1x_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073561
- exit_code: 0
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    var l_new []int\n    for i := 0; i < len(l); i++ {\n        if i %\
    \ 3 == 0 {\n            l_new = append(l_new, l[i])\n        }\n    }\n    for\
    \ i := 0; i < len(l_new); i++ {\n        for j := i + 1; j < len(l_new); j++ {\n\
    \            if l_new[i] > l_new[j] {\n                l_new[i], l_new[j] = l_new[j],\
    \ l_new[i]\n            }\n        }\n    }\n    for i := 0; i < len(l); i++ {\n\
    \        if i % 3 == 0 {\n            l[i] = l_new[i / 3]\n        }\n    }\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073561
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 2; i < len(l); i += 3 {\n        for j := i; j > i - 3; j--\
    \ {\n            if l[j] < l[j - 1] {\n                l[j], l[j - 1] = l[j -\
    \ 1], l[j]\n            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpg3ld432w_test.go:21\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpg3ld432w_test.go:36\
    \ +0x6ab\ntesting.tRunner(0xc0001031e0, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var result []int\n    var third []int\n\
    \    for i, v := range l {\n        if i % 3 == 0 {\n            third = append(third,\
    \ v)\n        } else {\n            result = append(result, v)\n        }\n  \
    \  }\n    for i, v := range third {\n        result = append(result, v)\n    }\n\
    \    return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpir1eelsr_test.go:25:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073480
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var result []int\n    for i, v :=\
    \ range l {\n        if i % 3 == 0 {\n            var temp []int\n           \
    \ temp = append(temp, l[i:i+3]...)\n            temp = sort_slice(temp)\n    \
    \        result = append(result, temp...)\n        } else {\n            result\
    \ = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6helzo4s_test.go:21:20: undefined: sort_slice

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073480
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 2; i < len(l); i += 3 {\n        for j := i; j > 0; j -=\
    \ 3 {\n            if l[j] < l[j-3] {\n                l[j], l[j-3] = l[j-3],\
    \ l[j]\n            } else {\n                break\n            }\n        }\n\
    \    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 34 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpgu9hihs__test.go:21\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpgu9hihs__test.go:38\
    \ +0x6a5\ntesting.tRunner(0xc000199040, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073475
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 2; i < len(l); i += 3 {\n        for j := i; j > 0; j -=\
    \ 3 {\n            if l[j] < l[j-3] {\n                l[j], l[j-3] = l[j-3],\
    \ l[j]\n            } else {\n                break\n            }\n        }\n\
    \    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 34 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpgu9hihs__test.go:21\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpgu9hihs__test.go:38\
    \ +0x6a5\ntesting.tRunner(0xc000199040, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073475
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l_len := len(l)\n    if l_len < 3\
    \ {\n        return l\n    }\n    for i := 2; i < l_len; i += 3 {\n        for\
    \ j := i; j > i - 3; j-- {\n            if l[j] < l[j - 1] {\n               \
    \ l[j], l[j - 1] = l[j - 1], l[j]\n            }\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpjinpkgl0_test.go:22\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpjinpkgl0_test.go:37\
    \ +0x6ab\ntesting.tRunner(0xc000120340, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073480
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    // TODO: implement this function\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    // TODO: implement this function\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l_len := len(l)\n    if l_len < 3\
    \ {\n        return l\n    }\n    for i := 0; i < l_len; i += 3 {\n        if\
    \ i + 2 >= l_len {\n            break\n        }\n        if l[i] > l[i + 1] {\n\
    \            l[i], l[i + 1] = l[i + 1], l[i]\n        }\n        if l[i + 1] >\
    \ l[i + 2] {\n            l[i + 1], l[i + 2] = l[i + 2], l[i + 1]\n        }\n\
    \        if l[i] > l[i + 1] {\n            l[i], l[i + 1] = l[i + 1], l[i]\n \
    \       }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpqsgq7ouc_test.go:53: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpqsgq7ouc_test.go:53: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=3) %!s(int=5) %!s(int=8)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpqsgq7ouc_test.go:53: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpqsgq7ouc_test.go:53: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=3) %!s(int=5)\
    \ %!s(int=6) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073561
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    var l_third\
    \ []int\n    for i, v := range l {\n        if i % 3 == 0 {\n            l_third\
    \ = append(l_third, v)\n        } else {\n            l_prime = append(l_prime,\
    \ v)\n        }\n    }\n    sort(l_third)\n    for i, v := range l_third {\n \
    \       l_prime = append(l_prime, v)\n    }\n    return l_prime\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi2cb9qfh_test.go:25:5: undefined: sort

    /tmp/tmpi2cb9qfh_test.go:26:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073473
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    l_copy := make([]int, len(l))\n    copy(l_copy, l)\n    for i := 2;\
    \ i < len(l); i += 3 {\n        for j := i; j > 0; j -= 3 {\n            if l_copy[j]\
    \ < l_copy[j-3] {\n                l_copy[j], l_copy[j-3] = l_copy[j-3], l_copy[j]\n\
    \            } else {\n                break\n            }\n        }\n    }\n\
    \    return l_copy\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmp6lqbkpfs_test.go:23\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmp6lqbkpfs_test.go:40\
    \ +0x765\ntesting.tRunner(0xc0001a0340, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073479
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    var l_third\
    \ []int\n    for i, v := range l {\n        if i % 3 == 0 {\n            l_third\
    \ = append(l_third, v)\n        } else {\n            l_prime = append(l_prime,\
    \ v)\n        }\n    }\n    sort(l_third)\n    for i, v := range l_third {\n \
    \       l_prime = append(l_prime, v)\n    }\n    return l_prime\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi2cb9qfh_test.go:25:5: undefined: sort

    /tmp/tmpi2cb9qfh_test.go:26:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073473
- exit_code: 0
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 3; i < len(l); i += 3 {\n        for j := i; j > 2; j -=\
    \ 3 {\n            if l[j] < l[j-3] {\n                l[j], l[j-3] = l[j-3],\
    \ l[j]\n            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073561
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    for i := 0;\
    \ i < len(l); i++ {\n        if i % 3 == 0 {\n            var l_prime_sub []int\n\
    \            l_prime_sub = append(l_prime_sub, l[i])\n            if i + 1 < len(l)\
    \ {\n                l_prime_sub = append(l_prime_sub, l[i + 1])\n           \
    \ }\n            if i + 2 < len(l) {\n                l_prime_sub = append(l_prime_sub,\
    \ l[i + 2])\n            }\n            l_prime_sub = sort(l_prime_sub)\n    \
    \        l_prime = append(l_prime, l_prime_sub...)\n            i += 2\n     \
    \   } else {\n            l_prime = append(l_prime, l[i])\n        }\n    }\n\
    \    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpenvsxyjd_test.go:27:27: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073561
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l_new := make([]int, len(l))\n   \
    \ copy(l_new, l)\n    for i := 2; i < len(l); i += 3 {\n        for j := i; j\
    \ > 0; j -= 3 {\n            if l_new[j] < l_new[j-3] {\n                l_new[j],\
    \ l_new[j-3] = l_new[j-3], l_new[j]\n            }\n        }\n    }\n    return\
    \ l_new\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpbir5ca5w_test.go:20\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpbir5ca5w_test.go:35\
    \ +0x80b\ntesting.tRunner(0xc0001924e0, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073476
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l_prime := make([]int, len(l))\n \
    \   copy(l_prime, l)\n    for i := 2; i < len(l); i += 3 {\n        for j := i;\
    \ j > i - 3; j-- {\n            if l_prime[j] < l_prime[j - 1] {\n           \
    \     l_prime[j], l_prime[j - 1] = l_prime[j - 1], l_prime[j]\n            }\n\
    \        }\n    }\n    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 20 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpcztxuxrq_test.go:20\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpcztxuxrq_test.go:35\
    \ +0x81f\ntesting.tRunner(0xc0001036c0, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var res []int\n    for i, v := range\
    \ l {\n        if i % 3 == 0 {\n            res = append(res, v)\n        }\n\
    \    }\n    for i, v := range l {\n        if i % 3 != 0 {\n            res =\
    \ append(res, v)\n        }\n    }\n    return res\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp5ucf47qp_test.go:46: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=4) %!s(int=2)\
    \ %!s(int=6) %!s(int=3) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp5ucf47qp_test.go:46: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=4) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=6) %!s(int=9)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp5ucf47qp_test.go:46: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=4) %!s(int=2)\
    \ %!s(int=6) %!s(int=9) %!s(int=8) %!s(int=3)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp5ucf47qp_test.go:46: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=4)\
    \ %!s(int=2) %!s(int=6) %!s(int=3) %!s(int=8) %!s(int=9) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073561
- exit_code: 0
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    var res []int\n    for i := 0; i < len(l); i++ {\n        if i % 3\
    \ == 0 {\n            res = append(res, l[i])\n        } else {\n            res\
    \ = append(res, l[i])\n        }\n    }\n    for i := 0; i < len(res); i++ {\n\
    \        if i % 3 == 0 {\n            for j := i + 1; j < len(res); j++ {\n  \
    \              if j % 3 == 0 {\n                    if res[i] > res[j] {\n   \
    \                     res[i], res[j] = res[j], res[i]\n                    }\n\
    \                }\n            }\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3,\
    \ 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected:\
    \ []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8,\
    \ 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073561
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    // TODO: implement this function\n\
    \    return []int{}\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpwbynlfto_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpwbynlfto_test.go:36: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpwbynlfto_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpwbynlfto_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 2; i < len(l); i += 3 {\n        for j := i; j > 0; j -=\
    \ 3 {\n            if l[j] < l[j-3] {\n                l[j], l[j-3] = l[j-3],\
    \ l[j]\n            } else {\n                break\n            }\n        }\n\
    \    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 34 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpgu9hihs__test.go:21\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpgu9hihs__test.go:38\
    \ +0x6a5\ntesting.tRunner(0xc000199040, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073475
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 0; i < len(l); i += 3 {\n        if i + 2 < len(l) {\n  \
    \          if l[i] > l[i + 1] {\n                l[i], l[i + 1] = l[i + 1], l[i]\n\
    \            }\n            if l[i + 1] > l[i + 2] {\n                l[i + 1],\
    \ l[i + 2] = l[i + 2], l[i + 1]\n            }\n            if l[i] > l[i + 1]\
    \ {\n                l[i], l[i + 1] = l[i + 1], l[i]\n            }\n        }\n\
    \    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmph1rh2oat_test.go:51: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmph1rh2oat_test.go:51: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=3) %!s(int=5) %!s(int=8)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmph1rh2oat_test.go:51: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmph1rh2oat_test.go:51: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=3) %!s(int=5)\
    \ %!s(int=6) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073559
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l_len := len(l)\n    if l_len < 3\
    \ {\n        return l\n    }\n\n    for i := 2; i < l_len; i += 3 {\n        for\
    \ j := i; j > 0; j -= 3 {\n            if l[j] < l[j-3] {\n                l[j],\
    \ l[j-3] = l[j-3], l[j]\n            } else {\n                break\n       \
    \     }\n        }\n    }\n\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmptzc5lehn_test.go:23\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmptzc5lehn_test.go:41\
    \ +0x6a5\ntesting.tRunner(0xc0001924e0, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073561
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    for i, v :=\
    \ range l {\n        if i % 3 == 0 {\n            l_prime = append(l_prime, v)\n\
    \        } else {\n            l_prime = append(l_prime, v)\n        }\n    }\n\
    \    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmplonzeh71_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmplonzeh71_test.go:43: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmplonzeh71_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmplonzeh71_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var res []int\n    for i, v := range\
    \ l {\n        if i % 3 == 0 {\n            tmp := l[i:i+3]\n            for j\
    \ := 0; j < len(tmp); j++ {\n                for k := j + 1; k < len(tmp); k++\
    \ {\n                    if tmp[j] > tmp[k] {\n                        tmp[j],\
    \ tmp[k] = tmp[k], tmp[j]\n                    }\n                }\n        \
    \    }\n            res = append(res, tmp...)\n        } else {\n            res\
    \ = append(res, v)\n        }\n    }\n    return res\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: slice bounds out\
    \ of range [:9] with capacity 7 [recovered]\n\tpanic: runtime error: slice bounds\
    \ out of range [:9] with capacity 7\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5136e0,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third({0xc0000c4620, 0x7, 0x7})\n\t\
    /tmp/tmpk6bz96kx_test.go:19 +0x1f8\ncommand-line-arguments_test.TestSort_Third(0x0?)\n\
    \t/tmp/tmpk6bz96kx_test.go:42 +0xc9\ntesting.tRunner(0xc0001a0340, 0x529000)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073561
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    // TODO: implement this function\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    for i, v :=\
    \ range l {\n        if i % 3 == 0 {\n            l_prime = append(l_prime, v)\n\
    \        } else {\n            l_prime = append(l_prime, l[i])\n        }\n  \
    \  }\n    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    // TODO: implement this function\n\
    \    return []int{}\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpwbynlfto_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpwbynlfto_test.go:36: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpwbynlfto_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpwbynlfto_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    var l_prime []int\n    for i := 0; i < len(l); i++ {\n        if i\
    \ % 3 == 0 {\n            l_prime = append(l_prime, sort_third_helper(l[i:i+3])...)\n\
    \        } else {\n            l_prime = append(l_prime, l[i])\n        }\n  \
    \  }\n    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4m_iiyi__test.go:22:39: undefined: sort_third_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073478
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    // TODO: implement this function\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    for i, v :=\
    \ range l {\n        if i % 3 == 0 {\n            l_prime = append(l_prime, v)\n\
    \        } else {\n            l_prime = append(l_prime, l[i])\n        }\n  \
    \  }\n    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    for i := 0; i < len(l); i += 3 {\n\
    \        for j := i + 1; j < len(l); j += 3 {\n            if l[i] > l[j] {\n\
    \                l[i], l[j] = l[j], l[i]\n            }\n        }\n    }\n  \
    \  return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpsxeslo_c_test.go:42: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpsxeslo_c_test.go:42: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpsxeslo_c_test.go:42: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpsxeslo_c_test.go:42: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073559
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    for i, v :=\
    \ range l {\n        if i % 3 == 0 {\n            l_prime = append(l_prime, sort_third_helper(l[i:i+3]))\n\
    \        } else {\n            l_prime = append(l_prime, v)\n        }\n    }\n\
    \    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpodqt5ro4_test.go:19:39: undefined: sort_third_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073473
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    // TODO: implement this function\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp_7sglys5_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 2; i < len(l); i += 3 {\n        for j := i; j > 0; j -=\
    \ 3 {\n            if l[j] < l[j-3] {\n                l[j], l[j-3] = l[j-3],\
    \ l[j]\n            } else {\n                break\n            }\n        }\n\
    \    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 34 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpgu9hihs__test.go:21\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpgu9hihs__test.go:38\
    \ +0x6a5\ntesting.tRunner(0xc000199040, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073475
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    l_new := make([]int, len(l))\n    for i := 0; i < len(l); i++ {\n\
    \        l_new[i] = l[i]\n    }\n    for i := 0; i < len(l); i += 3 {\n      \
    \  if i + 2 < len(l) {\n            if l[i] > l[i + 1] {\n                l_new[i],\
    \ l_new[i + 1] = l[i + 1], l[i]\n            }\n            if l[i + 1] > l[i\
    \ + 2] {\n                l_new[i + 1], l_new[i + 2] = l[i + 2], l[i + 1]\n  \
    \          }\n            if l[i] > l[i + 1] {\n                l_new[i], l_new[i\
    \ + 1] = l[i + 1], l[i]\n            }\n        } else if i + 1 < len(l) {\n \
    \           if l[i] > l[i + 1] {\n                l_new[i], l_new[i + 1] = l[i\
    \ + 1], l[i]\n            }\n        }\n    }\n    return l_new\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp7fohe6ty_test.go:59: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp7fohe6ty_test.go:59: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=3) %!s(int=8)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp7fohe6ty_test.go:59: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=3) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp7fohe6ty_test.go:59: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=3)\
    \ %!s(int=6) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=1) %!s(int=2)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073561
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    // TODO: implement this function\n\
    \    return []int{}\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpwbynlfto_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpwbynlfto_test.go:36: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpwbynlfto_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpwbynlfto_test.go:36: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l_copy := make([]int, len(l))\n  \
    \  copy(l_copy, l)\n    for i := 2; i < len(l_copy); i += 3 {\n        for j :=\
    \ i; j > i - 3; j-- {\n            if l_copy[j] < l_copy[j - 1] {\n          \
    \      l_copy[j], l_copy[j - 1] = l_copy[j - 1], l_copy[j]\n            }\n  \
    \      }\n    }\n    return l_copy\n}\n\nfunc TestSort_Third(t *testing.T) {\n\
    \  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmp7_vz6kt7_test.go:20\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmp7_vz6kt7_test.go:35\
    \ +0x81f\ntesting.tRunner(0xc00011b040, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073561
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    var l_prime []int\n    var l_third []int\n    for i, v := range l\
    \ {\n        if i % 3 == 0 {\n            l_third = append(l_third, v)\n     \
    \   } else {\n            l_prime = append(l_prime, v)\n        }\n    }\n   \
    \ for i, v := range l_third {\n        l_prime = append(l_prime, v)\n        if\
    \ i == len(l_third) - 1 {\n            break\n        }\n        l_prime = append(l_prime,\
    \ l[i * 3 + 1])\n        l_prime = append(l_prime, l[i * 3 + 2])\n    }\n    return\
    \ l_prime\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpm5det8tx_test.go:55: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=6) %!s(int=3) %!s(int=8)\
    \ %!s(int=9) %!s(int=5) %!s(int=6) %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9)\
    \ %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1 (0.00s)\n        tmpm5det8tx_test.go:55:\
    \ expected '[%!s(int=2) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9)\
    \ %!s(int=5)]', got '[%!s(int=8) %!s(int=3) %!s(int=6) %!s(int=9) %!s(int=5) %!s(int=8)\
    \ %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpm5det8tx_test.go:55: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=6) %!s(int=9) %!s(int=8)\
    \ %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=9) %!s(int=4) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3 (0.00s)\n        tmpm5det8tx_test.go:55:\
    \ expected '[%!s(int=2) %!s(int=6) %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9)\
    \ %!s(int=5) %!s(int=1)]', got '[%!s(int=6) %!s(int=3) %!s(int=8) %!s(int=9) %!s(int=1)\
    \ %!s(int=5) %!s(int=6) %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073561
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l_prime := make([]int, len(l))\n \
    \   for i, v := range l {\n        if i % 3 == 0 {\n            l_prime[i] = v\n\
    \        } else {\n            l_prime[i] = l[i]\n        }\n    }\n    return\
    \ l_prime\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpb1jrm9ei_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpb1jrm9ei_test.go:43: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpb1jrm9ei_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpb1jrm9ei_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    l_copy := make([]int, len(l))\n    copy(l_copy, l)\n    for i := 2;\
    \ i < len(l); i += 3 {\n        for j := i; j > 0; j -= 3 {\n            if l_copy[j]\
    \ < l_copy[j-3] {\n                l_copy[j], l_copy[j-3] = l_copy[j-3], l_copy[j]\n\
    \            } else {\n                break\n            }\n        }\n    }\n\
    \    return l_copy\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmp6lqbkpfs_test.go:23\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmp6lqbkpfs_test.go:40\
    \ +0x765\ntesting.tRunner(0xc0001a0340, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073479
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 2; i < len(l); i += 3 {\n        for j := i; j > i - 3; j--\
    \ {\n            if l[j] < l[j - 1] {\n                l[j], l[j - 1] = l[j -\
    \ 1], l[j]\n            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpg3ld432w_test.go:21\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpg3ld432w_test.go:36\
    \ +0x6ab\ntesting.tRunner(0xc0001031e0, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l_len := len(l)\n    if l_len < 3\
    \ {\n        return l\n    }\n    for i := 0; i < l_len; i += 3 {\n        if\
    \ i + 2 < l_len {\n            if l[i] > l[i + 1] {\n                l[i], l[i\
    \ + 1] = l[i + 1], l[i]\n            }\n            if l[i + 1] > l[i + 2] {\n\
    \                l[i + 1], l[i + 2] = l[i + 2], l[i + 1]\n            }\n    \
    \        if l[i] > l[i + 1] {\n                l[i], l[i + 1] = l[i + 1], l[i]\n\
    \            }\n        } else if i + 1 < l_len {\n            if l[i] > l[i +\
    \ 1] {\n                l[i], l[i + 1] = l[i + 1], l[i]\n            }\n     \
    \   }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpxl6fa4jv_test.go:56: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpxl6fa4jv_test.go:56: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=3) %!s(int=5) %!s(int=8)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpxl6fa4jv_test.go:56: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpxl6fa4jv_test.go:56: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=3) %!s(int=5)\
    \ %!s(int=6) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=1) %!s(int=2)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073478
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 2; i < len(l); i += 3 {\n        for j := i; j > i - 3; j--\
    \ {\n            if l[j] < l[j - 1] {\n                l[j], l[j - 1] = l[j -\
    \ 1], l[j]\n            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpg3ld432w_test.go:21\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpg3ld432w_test.go:36\
    \ +0x6ab\ntesting.tRunner(0xc0001031e0, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    var l_third\
    \ []int\n    for i, v := range l {\n        if i % 3 == 0 {\n            l_third\
    \ = append(l_third, v)\n        } else {\n            l_prime = append(l_prime,\
    \ v)\n        }\n    }\n    l_third = sort(l_third)\n    for i, v := range l_third\
    \ {\n        l_prime = append(l_prime[:i], append([]int{v}, l_prime[i:]...)...)\n\
    \    }\n    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp414stf3_test.go:25:15: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073473
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 2; i < len(l); i += 3 {\n        for j := i; j > i - 3; j--\
    \ {\n            if l[j] < l[j - 1] {\n                l[j], l[j - 1] = l[j -\
    \ 1], l[j]\n            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpg3ld432w_test.go:21\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpg3ld432w_test.go:36\
    \ +0x6ab\ntesting.tRunner(0xc0001031e0, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    var l_third\
    \ []int\n    for i, v := range l {\n        if i % 3 == 0 {\n            l_third\
    \ = append(l_third, v)\n        } else {\n            l_prime = append(l_prime,\
    \ v)\n        }\n    }\n    l_third = sort(l_third)\n    for i, v := range l_third\
    \ {\n        l_prime = append(l_prime[:i], append([]int{v}, l_prime[i:]...)...)\n\
    \    }\n    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp414stf3_test.go:25:15: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073473
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 2; i < len(l); i += 3 {\n        for j := i; j > 0; j -=\
    \ 3 {\n            if l[j] < l[j-3] {\n                l[j], l[j-3] = l[j-3],\
    \ l[j]\n            } else {\n                break\n            }\n        }\n\
    \    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 34 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpgu9hihs__test.go:21\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpgu9hihs__test.go:38\
    \ +0x6a5\ntesting.tRunner(0xc000199040, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073475
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    var l_sorted []int\n    var l_unsorted []int\n    for i, v := range\
    \ l {\n        if i % 3 == 0 {\n            l_sorted = append(l_sorted, v)\n \
    \       } else {\n            l_unsorted = append(l_unsorted, v)\n        }\n\
    \    }\n    for i := 0; i < len(l_sorted); i++ {\n        for j := i + 1; j <\
    \ len(l_sorted); j++ {\n            if l_sorted[i] > l_sorted[j] {\n         \
    \       l_sorted[i], l_sorted[j] = l_sorted[j], l_sorted[i]\n            }\n \
    \       }\n    }\n    var l_result []int\n    for i, v := range l_unsorted {\n\
    \        l_result = append(l_result, v)\n        if i % 2 == 0 {\n           \
    \ l_result = append(l_result, l_sorted[i / 2])\n        }\n    }\n    return l_result\n\
    }\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpkgbk0b8j_test.go:61: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=6) %!s(int=2) %!s(int=3)\
    \ %!s(int=8) %!s(int=4) %!s(int=9)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpkgbk0b8j_test.go:61: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=4) %!s(int=9)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpkgbk0b8j_test.go:61: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=6) %!s(int=2) %!s(int=9)\
    \ %!s(int=8) %!s(int=4) %!s(int=3)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpkgbk0b8j_test.go:61: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=6) %!s(int=2)\
    \ %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=9) %!s(int=1) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073476
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    for i, v :=\
    \ range l {\n        if i % 3 == 0 {\n            l_prime = append(l_prime, v)\n\
    \        } else {\n            l_prime = append(l_prime, v)\n        }\n    }\n\
    \    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmplonzeh71_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmplonzeh71_test.go:43: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmplonzeh71_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmplonzeh71_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    for i, v :=\
    \ range l {\n        if i % 3 == 0 {\n            l_prime = append(l_prime, sort_third_helper(l[i:i+3]))\n\
    \        } else {\n            l_prime = append(l_prime, v)\n        }\n    }\n\
    \    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpodqt5ro4_test.go:19:39: undefined: sort_third_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073473
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 2; i < len(l); i += 3 {\n        for j := i; j > i - 3; j--\
    \ {\n            if l[j] < l[j - 1] {\n                l[j], l[j - 1] = l[j -\
    \ 1], l[j]\n            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpg3ld432w_test.go:21\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpg3ld432w_test.go:36\
    \ +0x6ab\ntesting.tRunner(0xc0001031e0, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    for i := 2; i < len(l); i += 3 {\n        for j := i; j > i - 3; j--\
    \ {\n            if l[j] < l[j - 1] {\n                l[j], l[j - 1] = l[j -\
    \ 1], l[j]\n            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpg3ld432w_test.go:21\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpg3ld432w_test.go:36\
    \ +0x6ab\ntesting.tRunner(0xc0001031e0, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    if len(l) < 3 {\n        return l\n\
    \    }\n    var l_prime []int\n    for i := 0; i < len(l); i++ {\n        if i\
    \ % 3 == 0 {\n            l_prime = append(l_prime, sort_third_helper(l[i:i+3])...)\n\
    \        } else {\n            l_prime = append(l_prime, l[i])\n        }\n  \
    \  }\n    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4m_iiyi__test.go:22:39: undefined: sort_third_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073478
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    var l_prime []int\n    for i, v :=\
    \ range l {\n        if i % 3 == 0 {\n            l_prime = append(l_prime, v)\n\
    \        } else {\n            l_prime = append(l_prime, l[i])\n        }\n  \
    \  }\n    return l_prime\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpa0cegoym_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073474
