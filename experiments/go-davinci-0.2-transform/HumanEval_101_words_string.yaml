name: HumanEval_101_words_string
language: go_test.go
prompt: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // You will be given a string of words separated by commas or spaces. Your task\
  \ is\n// to split the string into words and return an array of the words.\n// For\
  \ example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"Hi\", \"\
  my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three, four,\
  \ five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"\
  six\"}\nfunc words_string(s string) []string {\n"
tests: "func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
  Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
  \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
  four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
  \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three,\
  \ four, five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\"\
  , \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
  \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\",\
  \ \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    return nil\n}\n", "    return nil\n}\n", "    return nil\n}\n",
  "    return nil\n}\n", "    return nil\n}\n", "    return nil\n}\n", "    return\
    \ nil\n}\n", "    return nil\n}\n", "    return nil\n}\n", "    return nil\n}\n",
  "    return nil\n}\n", "    return nil\n}\n", "    return nil\n}\n", "    return\
    \ nil\n}\n", "    return nil\n}\n", "    return nil\n}\n", "    return nil\n}\n",
  "    return nil\n}\n", "    return nil\n}\n", "    return nil\n}\n", "    return\
    \ nil\n}\n", "    return nil\n}\n", "    return nil\n}\n", "    return nil\n}\n",
  "    return nil\n}\n", "    return nil\n}\n", "    return nil\n}\n", "    return\
    \ nil\n}\n", "    return nil\n}\n", "    return nil\n}\n", "    return nil\n}\n",
  "    // your code here\n    return nil\n}\n", "    return nil\n}\n", "    var words\
    \ []string\n    for _, word := range s {\n        if word == ' ' || word == ','\
    \ {\n            continue\n        }\n        words = append(words, string(word))\n\
    \    }\n    return words\n}\n", "    var words []string\n    var word string\n\
    \    for _, r := range s {\n        if r == ' ' || r == ',' {\n            if\
    \ len(word) > 0 {\n                words = append(words, word)\n             \
    \   word = \"\"\n            }\n        } else {\n            word += string(r)\n\
    \        }\n    }\n    if len(word) > 0 {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n", "    return nil\n}\n", "    var words []string\n\
    \    var word string\n    for _, c := range s {\n        if c == ' ' || c == ','\
    \ {\n            if len(word) > 0 {\n                words = append(words, word)\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    return nil\n}\n", "    return nil\n\
    }\n", "    return nil\n}\n", "    return nil\n}\n", "    return nil\n}\n", " \
    \   var words []string\n    var word string\n    for _, c := range s {\n     \
    \   if c == ' ' || c == ',' {\n            if len(word) > 0 {\n              \
    \  words = append(words, word)\n                word = \"\"\n            }\n \
    \       } else {\n            word += string(c)\n        }\n    }\n    if len(word)\
    \ > 0 {\n        words = append(words, word)\n    }\n    return words\n}\n", " \
    \   return nil\n}\n", "    return nil\n}\n", "    return nil\n}\n", "    return\
    \ nil\n}\n", "    return nil\n}\n", "    return nil\n}\n", "    return nil\n}\n",
  "    return nil\n}\n", "    return nil\n}\n", "    var words []string\n    var word\
    \ string\n    for _, char := range s {\n        if char == ' ' || char == ','\
    \ {\n            words = append(words, word)\n            word = \"\"\n      \
    \  } else {\n            word += string(char)\n        }\n    }\n    words = append(words,\
    \ word)\n    return words\n}\n", "    return nil\n}\n", "    return nil\n}\n",
  "    return nil\n}\n", "    return nil\n}\n", "    var words []string\n    var word\
    \ string\n    for _, c := range s {\n        if c == ' ' || c == ',' {\n     \
    \       if len(word) > 0 {\n                words = append(words, word)\n    \
    \            word = \"\"\n            }\n        } else {\n            word +=\
    \ string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    return nil\n}\n", "    return nil\n\
    }\n", "    return nil\n}\n", "    return nil\n}\n", "    var words []string\n\
    \    for _, word := range s {\n        if word == ' ' || word == ',' {\n     \
    \       continue\n        }\n        words = append(words, string(word))\n   \
    \ }\n    return words\n}\n", "    return nil\n}\n", "    return nil\n}\n", " \
    \   return nil\n}\n", "    return nil\n}\n", "    return nil\n}\n", "    return\
    \ nil\n}\n", "    return nil\n}\n", "    return nil\n}\n", "    return nil\n}\n",
  "    return nil\n}\n", "    return nil\n}\n", "    return nil\n}\n", "    return\
    \ nil\n}\n", "    var words []string\n    var word string\n    for _, char :=\
    \ range s {\n        if char == ' ' || char == ',' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(char)\n\
    \        }\n    }\n    words = append(words, word)\n    return words\n}\n", " \
    \   return nil\n}\n", "    return nil\n}\n", "    return nil\n}\n", "    return\
    \ nil\n}\n", "    return nil\n}\n", "    return nil\n}\n", "    return nil\n}\n",
  "    return nil\n}\n", "    return nil\n}\n", "    return nil\n}\n", "    return\
    \ nil\n}\n", "    return nil\n}\n", "    return nil\n}\n", "    return nil\n}\n",
  "    return nil\n}\n", "    return nil\n}\n", "    return nil\n}\n", "    return\
    \ nil\n}\n", "    return nil\n}\n", "    return nil\n}\n", "    return nil\n}\n",
  "    return nil\n}\n", "    return nil\n}\n", "    var words []string\n    var word\
    \ string\n    for _, c := range s {\n        if c == ' ' || c == ',' {\n     \
    \       if len(word) > 0 {\n                words = append(words, word)\n    \
    \            word = \"\"\n            }\n        } else {\n            word +=\
    \ string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    return nil\n}\n", "    return nil\n\
    }\n", "    return nil\n}\n", "    return nil\n}\n", "    return nil\n}\n", " \
    \   return nil\n}\n", "    return nil\n}\n", "    return nil\n}\n", "    return\
    \ nil\n}\n", "    var words []string\n    var word string\n    for _, c := range\
    \ s {\n        if c == ' ' || c == ',' {\n            if len(word) > 0 {\n   \
    \             words = append(words, word)\n                word = \"\"\n     \
    \       }\n        } else {\n            word += string(c)\n        }\n    }\n\
    \    if len(word) > 0 {\n        words = append(words, word)\n    }\n    return\
    \ words\n}\n", "    return nil\n}\n", "    return nil\n}\n", "    return nil\n\
    }\n", "    var words []string\n    for _, word := range s {\n        if word ==\
    \ ' ' || word == ',' {\n            continue\n        }\n        words = append(words,\
    \ string(word))\n    }\n    return words\n}\n", "    return nil\n}\n", "    var\
    \ words []string\n    for _, word := range s {\n        if word == ' ' || word\
    \ == ',' {\n            continue\n        }\n        words = append(words, string(word))\n\
    \    }\n    return words\n}\n", "    return nil\n}\n", "    return nil\n}\n",
  "    return nil\n}\n", "    return nil\n}\n", "    return nil\n}\n", "    var words\
    \ []string\n    var word string\n    for _, c := range s {\n        if c == '\
    \ ' || c == ',' {\n            if len(word) > 0 {\n                words = append(words,\
    \ word)\n                word = \"\"\n            }\n        } else {\n      \
    \      word += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words\
    \ = append(words, word)\n    }\n    return words\n}\n", "    return nil\n}\n",
  "    return nil\n}\n", "    return nil\n}\n", "    return nil\n}\n", "    return\
    \ nil\n}\n", "    var words []string\n    var word string\n    for _, c := range\
    \ s {\n        if c == ' ' || c == ',' {\n            if len(word) > 0 {\n   \
    \             words = append(words, word)\n                word = \"\"\n     \
    \       }\n        } else {\n            word += string(c)\n        }\n    }\n\
    \    if len(word) > 0 {\n        words = append(words, word)\n    }\n    return\
    \ words\n}\n", "    return nil\n}\n", "    return nil\n}\n", "    return nil\n\
    }\n", "    return nil\n}\n", "    return nil\n}\n", "    return nil\n}\n", " \
    \   return nil\n}\n", "    return nil\n}\n", "    return nil\n}\n", "    return\
    \ nil\n}\n", "    return nil\n}\n", "    return nil\n}\n", "    return nil\n}\n",
  "    return nil\n}\n", "    return nil\n}\n", "    return nil\n}\n", "    return\
    \ nil\n}\n", "    return nil\n}\n", "    return nil\n}\n", "    return nil\n}\n",
  "    return nil\n}\n", "    return nil\n}\n", "    return nil\n}\n", "    return\
    \ nil\n}\n", "    return nil\n}\n", "    return nil\n}\n", "    return nil\n}\n",
  "    return nil\n}\n", "    return nil\n}\n", "    return nil\n}\n", "    return\
    \ nil\n}\n", "    return nil\n}\n", "    return nil\n}\n", "    return nil\n}\n",
  "    return nil\n}\n", "    return nil\n}\n", "    var words []string\n    for _,\
    \ word := range s {\n        if word == ' ' || word == ',' {\n            words\
    \ = append(words, \"\")\n        } else {\n            words[len(words)-1] +=\
    \ string(word)\n        }\n    }\n    return words\n}\n", "    return nil\n}\n",
  "    return nil\n}\n", "    return nil\n}\n", "    return nil\n}\n", "    return\
    \ nil\n}\n", "    return nil\n}\n", "    words := make([]string, 0)\n    word\
    \ := \"\"\n    for _, c := range s {\n        if c == ' ' || c == ',' {\n    \
    \        if word != \"\" {\n                words = append(words, word)\n    \
    \            word = \"\"\n            }\n        } else {\n            word +=\
    \ string(c)\n        }\n    }\n    if word != \"\" {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    return nil\n}\n", "    // TODO: implement\n\
    \    return []string{}\n}\n", "    return nil\n}\n", "    return nil\n}\n", " \
    \   return nil\n}\n", "    return nil\n}\n", "    return nil\n}\n", "    return\
    \ nil\n}\n", "    return nil\n}\n", "    return nil\n}\n", "    return nil\n}\n",
  "    return nil\n}\n", "    return nil\n}\n", "    // TODO: implement me\n    return\
    \ []string{}\n}\n", "    return nil\n}\n", "    return nil\n}\n", "    return\
    \ nil\n}\n", "    var words []string\n    var word string\n    for _, c := range\
    \ s {\n        if c == ' ' || c == ',' {\n            if len(word) > 0 {\n   \
    \             words = append(words, word)\n                word = \"\"\n     \
    \       }\n        } else {\n            word += string(c)\n        }\n    }\n\
    \    if len(word) > 0 {\n        words = append(words, word)\n    }\n    return\
    \ words\n}\n", "    return nil\n}\n", "    return nil\n}\n", "    return nil\n\
    }\n", "    return nil\n}\n", "    return nil\n}\n", "    return nil\n}\n", " \
    \   return nil\n}\n", "    return nil\n}\n", "    var words []string\n    for\
    \ _, word := range s {\n        if word == ' ' || word == ',' {\n            continue\n\
    \        }\n        words = append(words, string(word))\n    }\n    return words\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
