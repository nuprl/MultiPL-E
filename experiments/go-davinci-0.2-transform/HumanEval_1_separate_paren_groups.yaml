name: HumanEval_1_separate_paren_groups
language: go_test.go
prompt: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// Input to this function is a string containing multiple groups of nested\
  \ parentheses. Your goal is to\n// separate those group into separate strings and\
  \ return the list of those.\n// Separate groups are balanced (each open brace is\
  \ properly closed) and not nested within each other\n// Ignore any spaces in the\
  \ input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// []string{\"\
  ()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string string) []string\
  \ {\n"
tests: "func TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"),\
  \ expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n     {\
  \ actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\", \"\
  (())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
  ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
  \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\t\
  for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    return nil\n}\n", "    var result []string\n    var current_group\
    \ string\n    var open_paren_count int\n    for _, c := range paren_string {\n\
    \        if c == '(' {\n            open_paren_count++\n            current_group\
    \ += string(c)\n        } else if c == ')' {\n            open_paren_count--\n\
    \            current_group += string(c)\n        }\n        if open_paren_count\
    \ == 0 {\n            result = append(result, current_group)\n            current_group\
    \ = \"\"\n        }\n    }\n    return result\n}\n", "    var groups []string\n\
    \    var group string\n    var open_parens int\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            open_parens++\n        } else if char\
    \ == ')' {\n            open_parens--\n        }\n        if open_parens == 0\
    \ {\n            groups = append(groups, group)\n            group = \"\"\n  \
    \      } else {\n            group += string(char)\n        }\n    }\n    return\
    \ groups\n}\n", "    return nil\n}\n", "    var result []string\n    var current\
    \ string\n    var open_parens int\n    for _, c := range paren_string {\n    \
    \    if c == '(' {\n            open_parens++\n            current += string(c)\n\
    \        } else if c == ')' {\n            open_parens--\n            current\
    \ += string(c)\n        }\n        if open_parens == 0 {\n            result =\
    \ append(result, current)\n            current = \"\"\n        }\n    }\n    return\
    \ result\n}\n", "    return []string{}\n}\n", "    return []string{}\n}\n", " \
    \   return nil\n}\n", "    // TODO: Implement this function\n    return nil\n\
    }\n", "    return []string{}\n}\n", "    return nil\n}\n", "    return nil\n}\n",
  "    return []string{}\n}\n", "    return nil\n}\n", "    var result []string\n\
    \    var current string\n    var open int\n    var close int\n    for _, c :=\
    \ range paren_string {\n        if c == '(' {\n            open++\n        } else\
    \ if c == ')' {\n            close++\n        }\n        if open == close {\n\
    \            result = append(result, current)\n            current = \"\"\n  \
    \          open = 0\n            close = 0\n        } else {\n            current\
    \ += string(c)\n        }\n    }\n    return result\n}\n", "    return nil\n}\n",
  "    return nil\n}\n", "    return []string{}\n}\n", "    return []string{}\n}\n",
  "    return []string{}\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
