name: HumanEval_154_cycpattern_check
language: go_test.go
prompt: "package cycpattern_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// You are given 2 words. You need to return True if the second word or any\
  \ of its rotations is a substring in the first word\n// >>> cycpattern_check(\"\
  abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n\
  // >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"\
  abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n\
  // >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunc cycpattern_check(a\
  \ string, b string) bool {\n"
tests: "func TestCycpattern_Check(t *testing.T) {\n  candidate := cycpattern_check\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(\"xyzw\", \"xyw\"), expected: false\
  \ },\n     { actual: candidate(\"yello\", \"ell\"), expected: true },\n     { actual:\
  \ candidate(\"whattup\", \"ptut\"), expected: false },\n     { actual: candidate(\"\
  efef\", \"fee\"), expected: true },\n     { actual: candidate(\"abab\", \"aabb\"\
  ), expected: false },\n     { actual: candidate(\"winemtt\", \"tinem\"), expected:\
  \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
  \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    // your code here\n    return false\n}\n", "    if len(a) < len(b)\
    \ {\n        return false\n    }\n    for i := 0; i < len(a); i++ {\n        if\
    \ a[i] == b[0] {\n            if a[i:] + a[:i] == b {\n                return\
    \ true\n            }\n        }\n    }\n    return false\n}\n", "    if len(a)\
    \ < len(b) {\n        return false\n    }\n    for i := 0; i < len(b); i++ {\n\
    \        if a[i] != b[0] {\n            continue\n        }\n        if a[i:i+len(b)]\
    \ == b {\n            return true\n        }\n        if a[i:] + a[:i] == b {\n\
    \            return true\n        }\n    }\n    return false\n}\n", "    if len(a)\
    \ < len(b) {\n        return false\n    }\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[0] {\n            j := 0\n            for ; j < len(b);\
    \ j++ {\n                if a[(i+j)%len(a)] != b[j] {\n                    break\n\
    \                }\n            }\n            if j == len(b) {\n            \
    \    return true\n            }\n        }\n    }\n    return false\n}\n", " \
    \   if len(a) < len(b) {\n        return false\n    }\n    for i := 0; i < len(a);\
    \ i++ {\n        if a[i] == b[0] {\n            if a[i:i+len(b)] == b {\n    \
    \            return true\n            }\n        }\n    }\n    return false\n\
    }\n", "    if len(a) < len(b) {\n        return false\n    }\n    for i := 0;\
    \ i < len(b); i++ {\n        if a[i] != b[0] {\n            continue\n       \
    \ }\n        if a[i:i+len(b)] == b {\n            return true\n        }\n   \
    \     if a[i:] + a[:i] == b {\n            return true\n        }\n    }\n   \
    \ return false\n}\n", "    for i := 0; i < len(b); i++ {\n        b = b[1:] +\
    \ b[:1]\n        if b == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n", "    if len(a) != len(b) {\n        return false\n    }\n    for\
    \ i := 0; i < len(a); i++ {\n        if a[i] == b[0] {\n            if a[i:] +\
    \ a[:i] == b {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n", "    if len(a) != len(b) {\n        return false\n  \
    \  }\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[0] {\n         \
    \   if a[i:] + a[:i] == b {\n                return true\n            }\n    \
    \    }\n    }\n    return false\n}\n", "    if len(a) != len(b) {\n        return\
    \ false\n    }\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[0] {\n\
    \            if a[i:] + a[:i] == b {\n                return true\n          \
    \  }\n        }\n    }\n    return false\n}\n", "    if len(a) < len(b) {\n  \
    \      return false\n    }\n    for i := 0; i < len(b); i++ {\n        if a[i]\
    \ != b[0] {\n            continue\n        }\n        if a[i:i+len(b)] == b {\n\
    \            return true\n        }\n        if a[i:] + a[:i] == b {\n       \
    \     return true\n        }\n    }\n    return false\n}\n", "    if len(a) <\
    \ len(b) {\n        return false\n    }\n    for i := 0; i < len(a); i++ {\n \
    \       if a[i] == b[0] {\n            if a[i:len(b)] == b {\n               \
    \ return true\n            }\n            if a[0:len(b)-i] == b[i:len(b)] {\n\
    \                return true\n            }\n        }\n    }\n    return false\n\
    }\n", "    // your code here\n    return false\n}\n", "    // your code here\n\
    \    return false\n}\n", "    if len(a) < len(b) {\n        return false\n   \
    \ }\n    for i := 0; i < len(b); i++ {\n        if a[i] != b[0] {\n          \
    \  continue\n        }\n        if a[i:] + a[:i] == b {\n            return true\n\
    \        }\n    }\n    return false\n}\n", "    if len(a) < len(b) {\n       \
    \ return false\n    }\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[0]\
    \ {\n            if a[i:i+len(b)] == b {\n                return true\n      \
    \      }\n        }\n    }\n    return false\n}\n", "    if len(a) < len(b) {\n\
    \        return false\n    }\n    for i := 0; i < len(a); i++ {\n        if a[i]\
    \ == b[0] {\n            if a[i:len(b)+i] == b {\n                return true\n\
    \            }\n        }\n    }\n    return false\n}\n", "    if len(a) != len(b)\
    \ {\n        return false\n    }\n    if a == b {\n        return true\n    }\n\
    \    for i := 0; i < len(a); i++ {\n        if a[i] == b[0] {\n            if\
    \ a[i:] + a[:i] == b {\n                return true\n            }\n        }\n\
    \    }\n    return false\n}\n", "    // your code here\n    return false\n}\n",
  "    if len(a) < len(b) {\n        return false\n    }\n    for i := 0; i < len(a);\
    \ i++ {\n        if a[i] == b[0] {\n            if a[i:len(b)] == b {\n      \
    \          return true\n            }\n            if a[0:len(b)-i] == b[i:len(b)]\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
