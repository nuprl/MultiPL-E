name: HumanEval_21_rescale_to_unit
language: go_test.go
prompt: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Given list of numbers (of at least two elements), apply a linear transform\
  \ to that list,\n// such that the smallest number will become 0 and the largest\
  \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n//\
  \ []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
  \ []float64 {\n"
tests: "func TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
  \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
  \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
  \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
  \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n    \
  \ { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
  \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var min, max float64\n    for _, number := range numbers {\n  \
    \      if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min float64\
    \ = numbers[0]\n    var max float64 = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min, max float64\n\
    \    min = numbers[0]\n    max = numbers[0]\n    for _, n := range numbers {\n\
    \        if n < min {\n            min = n\n        }\n        if n > max {\n\
    \            max = n\n        }\n    }\n    var result []float64\n    for _, n\
    \ := range numbers {\n        result = append(result, (n - min) / (max - min))\n\
    \    }\n    return result\n}\n", "    var min float64 = numbers[0]\n    var max\
    \ float64 = numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < min {\n            min = number\n        }\n        if number > max {\n  \
    \          max = number\n        }\n    }\n    var result []float64\n    for _,\
    \ number := range numbers {\n        result = append(result, (number - min) /\
    \ (max - min))\n    }\n    return result\n}\n", "    var max, min float64\n  \
    \  for _, n := range numbers {\n        if n > max {\n            max = n\n  \
    \      }\n        if n < min {\n            min = n\n        }\n    }\n    var\
    \ result []float64\n    for _, n := range numbers {\n        result = append(result,\
    \ (n - min) / (max - min))\n    }\n    return result\n}\n", "    min := numbers[0]\n\
    \    max := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < min {\n            min = number\n        }\n        if number > max {\n  \
    \          max = number\n        }\n    }\n    result := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        result[i] = (number - min) / (max\
    \ - min)\n    }\n    return result\n}\n", "    var min float64 = numbers[0]\n\
    \    var max float64 = numbers[0]\n    for _, number := range numbers {\n    \
    \    if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min, max float64\n\
    \    min = numbers[0]\n    max = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    min := numbers[0]\n\
    \    max := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < min {\n            min = number\n        }\n        if number > max {\n  \
    \          max = number\n        }\n    }\n    result := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        result[i] = (number - min) / (max\
    \ - min)\n    }\n    return result\n}\n", "    var min, max float64\n    min =\
    \ numbers[0]\n    max = numbers[0]\n    for _, number := range numbers {\n   \
    \     if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min float64\
    \ = numbers[0]\n    var max float64 = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    min := numbers[0]\n\
    \    max := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < min {\n            min = number\n        }\n        if number > max {\n  \
    \          max = number\n        }\n    }\n    var result []float64\n    for _,\
    \ number := range numbers {\n        result = append(result, (number - min) /\
    \ (max - min))\n    }\n    return result\n}\n", "    var min, max float64\n  \
    \  min = numbers[0]\n    max = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    min := numbers[0]\n\
    \    max := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < min {\n            min = number\n        }\n        if number > max {\n  \
    \          max = number\n        }\n    }\n    range_ := max - min\n    result\
    \ := make([]float64, len(numbers))\n    for i, number := range numbers {\n   \
    \     result[i] = (number - min) / range_\n    }\n    return result\n}\n", " \
    \   min, max := numbers[0], numbers[0]\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    if min == max {\n \
    \       return numbers\n    }\n    result := make([]float64, len(numbers))\n \
    \   for i, number := range numbers {\n        result[i] = (number - min) / (max\
    \ - min)\n    }\n    return result\n}\n", "    var min float64 = numbers[0]\n\
    \    var max float64 = numbers[0]\n    for _, number := range numbers {\n    \
    \    if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min float64\
    \ = numbers[0]\n    var max float64 = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min, max float64\n\
    \    for i, n := range numbers {\n        if i == 0 {\n            min = n\n \
    \           max = n\n        } else {\n            if n < min {\n            \
    \    min = n\n            }\n            if n > max {\n                max = n\n\
    \            }\n        }\n    }\n    var result []float64\n    for _, n := range\
    \ numbers {\n        result = append(result, (n - min) / (max - min))\n    }\n\
    \    return result\n}\n", "    var min, max float64\n    min = numbers[0]\n  \
    \  max = numbers[0]\n    for _, number := range numbers {\n        if number <\
    \ min {\n            min = number\n        }\n        if number > max {\n    \
    \        max = number\n        }\n    }\n    var result []float64\n    for _,\
    \ number := range numbers {\n        result = append(result, (number - min) /\
    \ (max - min))\n    }\n    return result\n}\n", "    var min float64 = numbers[0]\n\
    \    var max float64 = numbers[0]\n    for _, number := range numbers {\n    \
    \    if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
