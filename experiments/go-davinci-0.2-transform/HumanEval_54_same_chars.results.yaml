language: go_test.go
name: HumanEval_54_same_chars
results:
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c]++\n    }\n    for _, c := range s1\
    \ {\n        m1[c]++\n    }\n    for k, v := range m0 {\n        if v != m1[k]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp2lrs_jhz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp2lrs_jhz_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp2lrs_jhz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, r := range s0 {\n        m0[r] += 1\n    }\n    for _, r := range\
    \ s1 {\n        m1[r] += 1\n    }\n    for k, v := range m0 {\n        if m1[k]\
    \ != v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpyjz2_dp0_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpyjz2_dp0_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpyjz2_dp0_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, r := range s0 {\n        m0[r] += 1\n    }\n    for _, r := range\
    \ s1 {\n        m1[r] += 1\n    }\n    for k, v := range m0 {\n        if m1[k]\
    \ != v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpyjz2_dp0_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpyjz2_dp0_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpyjz2_dp0_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    var m0, m1 map[rune]int\n    m0 = make(map[rune]int)\n\
    \    m1 = make(map[rune]int)\n    for _, c := range s0 {\n        m0[c]++\n  \
    \  }\n    for _, c := range s1 {\n        m1[c]++\n    }\n    for k, v := range\
    \ m0 {\n        if m1[k] != v {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ), expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpq895h9ww_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpq895h9ww_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpq895h9ww_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, r := range s0 {\n        m0[r] += 1\n    }\n    for _, r := range\
    \ s1 {\n        m1[r] += 1\n    }\n    if len(m0) != len(m1) {\n        return\
    \ false\n    }\n    for k, v := range m0 {\n        if m1[k] != v {\n        \
    \    return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwmd9_b5j_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwmd9_b5j_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwmd9_b5j_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c]++\n    }\n    for _, c := range s1\
    \ {\n        m1[c]++\n    }\n    for k, v := range m0 {\n        if v != m1[k]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp2lrs_jhz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp2lrs_jhz_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp2lrs_jhz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, r := range s0 {\n        m0[r] += 1\n    }\n    for _, r := range\
    \ s1 {\n        m1[r] += 1\n    }\n    for k, v := range m0 {\n        if m1[k]\
    \ != v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpyjz2_dp0_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpyjz2_dp0_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpyjz2_dp0_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, r := range s0 {\n        m0[r]++\n    }\n    for _, r := range s1\
    \ {\n        m1[r]++\n    }\n    for k, v := range m0 {\n        if v != m1[k]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpfkbyvrjh_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpfkbyvrjh_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpfkbyvrjh_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 2
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if !strings.Contains(s1,\
    \ string(s0[i])) {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj1_ymhbv_test.go:26:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    var m0, m1 map[rune]int\n  \
    \  m0 = make(map[rune]int)\n    m1 = make(map[rune]int)\n    for _, c := range\
    \ s0 {\n        m0[c]++\n    }\n    for _, c := range s1 {\n        m1[c]++\n\
    \    }\n    for k, v := range m0 {\n        if m1[k] != v {\n            return\
    \ false\n        }\n    }\n    for k, v := range m1 {\n        if m0[k] != v {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpt0xhh12m_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpt0xhh12m_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpt0xhh12m_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, r := range s0 {\n        m0[r]++\n    }\n    for _, r := range s1\
    \ {\n        m1[r]++\n    }\n    for k, v := range m0 {\n        if m1[k] != v\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp7cpcranw_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp7cpcranw_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp7cpcranw_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, r := range s0 {\n        m0[r]++\n    }\n    for _, r := range s1\
    \ {\n        m1[r]++\n    }\n    for k, v := range m0 {\n        if v != m1[k]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpfkbyvrjh_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpfkbyvrjh_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpfkbyvrjh_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c] += 1\n    }\n    for _, c := range\
    \ s1 {\n        m1[c] += 1\n    }\n    for k, v := range m0 {\n        if m1[k]\
    \ != v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpv3xcxjkx_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    var m0 = make(map[rune]int)\n    var m1 = make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c]++\n    }\n    for _, c := range s1\
    \ {\n        m1[c]++\n    }\n    for k, v := range m0 {\n        if v != m1[k]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp5x_07e6__test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp5x_07e6__test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp5x_07e6__test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c] += 1\n    }\n    for _, c := range\
    \ s1 {\n        m1[c] += 1\n    }\n    for k, v := range m0 {\n        if m1[k]\
    \ != v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpv3xcxjkx_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c] += 1\n    }\n    for _, c := range\
    \ s1 {\n        m1[c] += 1\n    }\n    for k, v := range m0 {\n        if m1[k]\
    \ != v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpv3xcxjkx_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c] += 1\n    }\n    for _, c := range\
    \ s1 {\n        m1[c] += 1\n    }\n    for k, v := range m0 {\n        if m1[k]\
    \ != v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpv3xcxjkx_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, r := range s0 {\n        m0[r] += 1\n    }\n    for _, r := range\
    \ s1 {\n        m1[r] += 1\n    }\n    for k, v := range m0 {\n        if m1[k]\
    \ != v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpyjz2_dp0_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpyjz2_dp0_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpyjz2_dp0_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c] += 1\n    }\n    for _, c := range\
    \ s1 {\n        m1[c] += 1\n    }\n    for k, v := range m0 {\n        if m1[k]\
    \ != v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpv3xcxjkx_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c]++\n    }\n    for _, c := range s1\
    \ {\n        m1[c]++\n    }\n    for k, v := range m0 {\n        if m1[k] != v\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp1a2m5dkz_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    var m0 = make(map[rune]int)\n    var m1 = make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c]++\n    }\n    for _, c := range s1\
    \ {\n        m1[c]++\n    }\n    for k, v := range m0 {\n        if m1[k] != v\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpz6d8hz47_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpz6d8hz47_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpz6d8hz47_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c] += 1\n    }\n    for _, c := range\
    \ s1 {\n        m1[c] += 1\n    }\n    for k, v := range m0 {\n        if v !=\
    \ m1[k] {\n            return false\n        }\n    }\n    return true\n}\n\n\
    func TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpt8s460h9_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpt8s460h9_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpt8s460h9_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, r := range s0 {\n        m0[r] += 1\n    }\n    for _, r := range\
    \ s1 {\n        m1[r] += 1\n    }\n    for k, v := range m0 {\n        if m1[k]\
    \ != v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpyjz2_dp0_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpyjz2_dp0_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpyjz2_dp0_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    return false\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpolatqm9b_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpolatqm9b_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpolatqm9b_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    return false\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpolatqm9b_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpolatqm9b_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpolatqm9b_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    var m0 = make(map[rune]int)\n    var m1 = make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c]++\n    }\n    for _, c := range s1\
    \ {\n        m1[c]++\n    }\n    for k, v := range m0 {\n        if v != m1[k]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp5x_07e6__test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp5x_07e6__test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp5x_07e6__test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c] += 1\n    }\n    for _, c := range\
    \ s1 {\n        m1[c] += 1\n    }\n    for k, v := range m0 {\n        if v !=\
    \ m1[k] {\n            return false\n        }\n    }\n    return true\n}\n\n\
    func TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpt8s460h9_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpt8s460h9_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpt8s460h9_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 2
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for _, c := range s0 {\n        if strings.Count(s0,\
    \ string(c)) != strings.Count(s1, string(c)) {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate\
    \ := same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\"), expected: true },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabc\"), expected: true },\n     { actual: candidate(\"dddddddabc\"\
    , \"abcd\"), expected: true },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"\
    ), expected: false },\n     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected:\
    \ false },\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected:\
    \ false },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv45n7ke0_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, r := range s0 {\n        m0[r] += 1\n    }\n    for _, r := range\
    \ s1 {\n        m1[r] += 1\n    }\n    for k, v := range m0 {\n        if v !=\
    \ m1[k] {\n            return false\n        }\n    }\n    return true\n}\n\n\
    func TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpfk87tykg_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpfk87tykg_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpfk87tykg_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c]++\n    }\n    for _, c := range s1\
    \ {\n        m1[c]++\n    }\n    for k, v := range m0 {\n        if v != m1[k]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp2lrs_jhz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp2lrs_jhz_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp2lrs_jhz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c] += 1\n    }\n    for _, c := range\
    \ s1 {\n        m1[c] += 1\n    }\n    for k, v := range m0 {\n        if m1[k]\
    \ != v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpv3xcxjkx_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 2
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for _, c := range s0 {\n        if strings.Count(s0,\
    \ string(c)) != strings.Count(s1, string(c)) {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate\
    \ := same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\"), expected: true },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabc\"), expected: true },\n     { actual: candidate(\"dddddddabc\"\
    , \"abcd\"), expected: true },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"\
    ), expected: false },\n     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected:\
    \ false },\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected:\
    \ false },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv45n7ke0_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c]++\n    }\n    for _, c := range s1\
    \ {\n        m1[c]++\n    }\n    for k, v := range m0 {\n        if m1[k] != v\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp1a2m5dkz_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, r := range s0 {\n        m0[r]++\n    }\n    for _, r := range s1\
    \ {\n        m1[r]++\n    }\n    for k, v := range m0 {\n        if m1[k] != v\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp7cpcranw_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp7cpcranw_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp7cpcranw_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c] += 1\n    }\n    for _, c := range\
    \ s1 {\n        m1[c] += 1\n    }\n    for k, v := range m0 {\n        if m1[k]\
    \ != v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpv3xcxjkx_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 2
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for _, c := range s0 {\n        if strings.Count(s0,\
    \ string(c)) != strings.Count(s1, string(c)) {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate\
    \ := same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\"), expected: true },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabc\"), expected: true },\n     { actual: candidate(\"dddddddabc\"\
    , \"abcd\"), expected: true },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"\
    ), expected: false },\n     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected:\
    \ false },\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected:\
    \ false },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv45n7ke0_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, r := range s0 {\n        m0[r] += 1\n    }\n    for _, r := range\
    \ s1 {\n        m1[r] += 1\n    }\n    for k, v := range m0 {\n        if v !=\
    \ m1[k] {\n            return false\n        }\n    }\n    return true\n}\n\n\
    func TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpfk87tykg_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpfk87tykg_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpfk87tykg_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c]++\n    }\n    for _, c := range s1\
    \ {\n        m1[c]++\n    }\n    for k, v := range m0 {\n        if v != m1[k]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp2lrs_jhz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp2lrs_jhz_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp2lrs_jhz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c]++\n    }\n    for _, c := range s1\
    \ {\n        m1[c]++\n    }\n    for k, v := range m0 {\n        if m1[k] != v\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp1a2m5dkz_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c]++\n    }\n    for _, c := range s1\
    \ {\n        m1[c]++\n    }\n    for k, v := range m0 {\n        if v != m1[k]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp2lrs_jhz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp2lrs_jhz_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp2lrs_jhz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 2
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for _, c := range s0 {\n        if !strings.Contains(s1,\
    \ string(c)) {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv2guky_v_test.go:26:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, r := range s0 {\n        m0[r]++\n    }\n    for _, r := range s1\
    \ {\n        m1[r]++\n    }\n    for k, v := range m0 {\n        if m1[k] != v\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp7cpcranw_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp7cpcranw_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp7cpcranw_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c]++\n    }\n    for _, c := range s1\
    \ {\n        m1[c]++\n    }\n    for k, v := range m0 {\n        if m1[k] != v\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp1a2m5dkz_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, r := range s0 {\n        m0[r]++\n    }\n    for _, r := range s1\
    \ {\n        m1[r]++\n    }\n    for k, v := range m0 {\n        if m1[k] != v\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp7cpcranw_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp7cpcranw_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp7cpcranw_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    var m0 = make(map[rune]int)\n    var m1 = make(map[rune]int)\n\
    \    for _, r := range s0 {\n        m0[r] += 1\n    }\n    for _, r := range\
    \ s1 {\n        m1[r] += 1\n    }\n    for k, v := range m0 {\n        if v !=\
    \ m1[k] {\n            return false\n        }\n    }\n    return true\n}\n\n\
    func TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp6iksfu42_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp6iksfu42_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp6iksfu42_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c]++\n    }\n    for _, c := range s1\
    \ {\n        m1[c]++\n    }\n    for k, v := range m0 {\n        if v != m1[k]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp2lrs_jhz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp2lrs_jhz_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp2lrs_jhz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, r := range s0 {\n        m0[r]++\n    }\n    for _, r := range s1\
    \ {\n        m1[r]++\n    }\n    for k, v := range m0 {\n        if m1[k] != v\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp7cpcranw_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp7cpcranw_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp7cpcranw_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, r := range s0 {\n        m0[r] += 1\n    }\n    for _, r := range\
    \ s1 {\n        m1[r] += 1\n    }\n    for k, v := range m0 {\n        if m1[k]\
    \ != v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpyjz2_dp0_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpyjz2_dp0_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpyjz2_dp0_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, r := range s0 {\n        m0[r] += 1\n    }\n    for _, r := range\
    \ s1 {\n        m1[r] += 1\n    }\n    for k, v := range m0 {\n        if m1[k]\
    \ != v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpyjz2_dp0_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpyjz2_dp0_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpyjz2_dp0_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c] += 1\n    }\n    for _, c := range\
    \ s1 {\n        m1[c] += 1\n    }\n    for k, v := range m0 {\n        if v !=\
    \ m1[k] {\n            return false\n        }\n    }\n    return true\n}\n\n\
    func TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpt8s460h9_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpt8s460h9_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpt8s460h9_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c] += 1\n    }\n    for _, c := range\
    \ s1 {\n        m1[c] += 1\n    }\n    for k, v := range m0 {\n        if m1[k]\
    \ != v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpv3xcxjkx_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__3\
    \ (0.00s)\n        tmpqsjtk7no_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestSame_Chars/test_num__4 (0.00s)\n        tmpqsjtk7no_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestSame_Chars/test_num__5\
    \ (0.00s)\n        tmpqsjtk7no_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestSame_Chars/test_num__6 (0.00s)\n        tmpqsjtk7no_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c]++\n    }\n    for _, c := range s1\
    \ {\n        m1[c]++\n    }\n    for k, v := range m0 {\n        if m1[k] != v\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp1a2m5dkz_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 2
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if !strings.Contains(s1,\
    \ string(s0[i])) {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj1_ymhbv_test.go:26:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, r := range s0 {\n        m0[r] += 1\n    }\n    for _, r := range\
    \ s1 {\n        m1[r] += 1\n    }\n    for k, v := range m0 {\n        if v !=\
    \ m1[k] {\n            return false\n        }\n    }\n    return true\n}\n\n\
    func TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpfk87tykg_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpfk87tykg_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpfk87tykg_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c] += 1\n    }\n    for _, c := range\
    \ s1 {\n        m1[c] += 1\n    }\n    for k, v := range m0 {\n        if m1[k]\
    \ != v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpv3xcxjkx_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c] += 1\n    }\n    for _, c := range\
    \ s1 {\n        m1[c] += 1\n    }\n    for k, v := range m0 {\n        if v !=\
    \ m1[k] {\n            return false\n        }\n    }\n    return true\n}\n\n\
    func TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpt8s460h9_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpt8s460h9_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpt8s460h9_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c]++\n    }\n    for _, c := range s1\
    \ {\n        m1[c]++\n    }\n    for k, v := range m0 {\n        if m1[k] != v\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp1a2m5dkz_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c] += 1\n    }\n    for _, c := range\
    \ s1 {\n        m1[c] += 1\n    }\n    for k, v := range m0 {\n        if v !=\
    \ m1[k] {\n            return false\n        }\n    }\n    return true\n}\n\n\
    func TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpt8s460h9_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpt8s460h9_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpt8s460h9_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    var m0 = make(map[rune]int)\n    var m1 = make(map[rune]int)\n\
    \    for _, r := range s0 {\n        m0[r] += 1\n    }\n    for _, r := range\
    \ s1 {\n        m1[r] += 1\n    }\n    for k, v := range m0 {\n        if m1[k]\
    \ != v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp6h447aqv_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp6h447aqv_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp6h447aqv_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c] += 1\n    }\n    for _, c := range\
    \ s1 {\n        m1[c] += 1\n    }\n    for k, v := range m0 {\n        if v !=\
    \ m1[k] {\n            return false\n        }\n    }\n    return true\n}\n\n\
    func TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpt8s460h9_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpt8s460h9_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpt8s460h9_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, r := range s0 {\n        m0[r] += 1\n    }\n    for _, r := range\
    \ s1 {\n        m1[r] += 1\n    }\n    for k, v := range m0 {\n        if m1[k]\
    \ != v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpyjz2_dp0_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpyjz2_dp0_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpyjz2_dp0_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c] += 1\n    }\n    for _, c := range\
    \ s1 {\n        m1[c] += 1\n    }\n    for k, v := range m0 {\n        if v !=\
    \ m1[k] {\n            return false\n        }\n    }\n    return true\n}\n\n\
    func TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpt8s460h9_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpt8s460h9_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpt8s460h9_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c]++\n    }\n    for _, c := range s1\
    \ {\n        m1[c]++\n    }\n    for k, v := range m0 {\n        if m1[k] != v\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp1a2m5dkz_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c] += 1\n    }\n    for _, c := range\
    \ s1 {\n        m1[c] += 1\n    }\n    for k, v := range m0 {\n        if m1[k]\
    \ != v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpv3xcxjkx_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c]++\n    }\n    for _, c := range s1\
    \ {\n        m1[c]++\n    }\n    for k, v := range m0 {\n        if v != m1[k]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp2lrs_jhz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp2lrs_jhz_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp2lrs_jhz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c] += 1\n    }\n    for _, c := range\
    \ s1 {\n        m1[c] += 1\n    }\n    for k, v := range m0 {\n        if m1[k]\
    \ != v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpv3xcxjkx_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c]++\n    }\n    for _, c := range s1\
    \ {\n        m1[c]++\n    }\n    for k, v := range m0 {\n        if v != m1[k]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp2lrs_jhz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp2lrs_jhz_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp2lrs_jhz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c] += 1\n    }\n    for _, c := range\
    \ s1 {\n        m1[c] += 1\n    }\n    for k, v := range m0 {\n        if m1[k]\
    \ != v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpv3xcxjkx_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c] += 1\n    }\n    for _, c := range\
    \ s1 {\n        m1[c] += 1\n    }\n    for k, v := range m0 {\n        if v !=\
    \ m1[k] {\n            return false\n        }\n    }\n    return true\n}\n\n\
    func TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpt8s460h9_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpt8s460h9_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpt8s460h9_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c] += 1\n    }\n    for _, c := range\
    \ s1 {\n        m1[c] += 1\n    }\n    for k, v := range m0 {\n        if v !=\
    \ m1[k] {\n            return false\n        }\n    }\n    return true\n}\n\n\
    func TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpt8s460h9_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpt8s460h9_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpt8s460h9_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    // Write your code here.\n \
    \   return false\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ), expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp6y73ncsa_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp6y73ncsa_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp6y73ncsa_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c]++\n    }\n    for _, c := range s1\
    \ {\n        m1[c]++\n    }\n    for k, v := range m0 {\n        if m1[k] != v\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp1a2m5dkz_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c]++\n    }\n    for _, c := range s1\
    \ {\n        m1[c]++\n    }\n    for k, v := range m0 {\n        if m1[k] != v\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp1a2m5dkz_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    var m0 = make(map[rune]int)\n    var m1 = make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c]++\n    }\n    for _, c := range s1\
    \ {\n        m1[c]++\n    }\n    for k, v := range m0 {\n        if v != m1[k]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp5x_07e6__test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp5x_07e6__test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp5x_07e6__test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, r := range s0 {\n        m0[r]++\n    }\n    for _, r := range s1\
    \ {\n        m1[r]++\n    }\n    for k, v := range m0 {\n        if m1[k] != v\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp7cpcranw_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp7cpcranw_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp7cpcranw_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 2
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for _, c := range s0 {\n        if strings.Count(s0,\
    \ string(c)) != strings.Count(s1, string(c)) {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate\
    \ := same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\"), expected: true },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabc\"), expected: true },\n     { actual: candidate(\"dddddddabc\"\
    , \"abcd\"), expected: true },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"\
    ), expected: false },\n     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected:\
    \ false },\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected:\
    \ false },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv45n7ke0_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 2
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for _, c := range s0 {\n        if strings.Count(s0,\
    \ string(c)) != strings.Count(s1, string(c)) {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate\
    \ := same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\"), expected: true },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabc\"), expected: true },\n     { actual: candidate(\"dddddddabc\"\
    , \"abcd\"), expected: true },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"\
    ), expected: false },\n     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected:\
    \ false },\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected:\
    \ false },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv45n7ke0_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, r := range s0 {\n        m0[r]++\n    }\n    for _, r := range s1\
    \ {\n        m1[r]++\n    }\n    for k, v := range m0 {\n        if v != m1[k]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpfkbyvrjh_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpfkbyvrjh_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpfkbyvrjh_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, r := range s0 {\n        m0[r] += 1\n    }\n    for _, r := range\
    \ s1 {\n        m1[r] += 1\n    }\n    for k, v := range m0 {\n        if m1[k]\
    \ != v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpyjz2_dp0_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpyjz2_dp0_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpyjz2_dp0_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c]++\n    }\n    for _, c := range s1\
    \ {\n        m1[c]++\n    }\n    for k, v := range m0 {\n        if v != m1[k]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp2lrs_jhz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp2lrs_jhz_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp2lrs_jhz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 2
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for _, c := range s0 {\n        if strings.Count(s0,\
    \ string(c)) != strings.Count(s1, string(c)) {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate\
    \ := same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\"), expected: true },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabc\"), expected: true },\n     { actual: candidate(\"dddddddabc\"\
    , \"abcd\"), expected: true },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"\
    ), expected: false },\n     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected:\
    \ false },\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected:\
    \ false },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv45n7ke0_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c]++\n    }\n    for _, c := range s1\
    \ {\n        m1[c]++\n    }\n    for k, v := range m0 {\n        if m1[k] != v\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp1a2m5dkz_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c]++\n    }\n    for _, c := range s1\
    \ {\n        m1[c]++\n    }\n    for k, v := range m0 {\n        if m1[k] != v\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp1a2m5dkz_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, r := range s0 {\n        m0[r]++\n    }\n    for _, r := range s1\
    \ {\n        m1[r]++\n    }\n    for k, v := range m0 {\n        if v != m1[k]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpfkbyvrjh_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpfkbyvrjh_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpfkbyvrjh_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    m0 := make(map[rune]int)\n \
    \   m1 := make(map[rune]int)\n    for _, c := range s0 {\n        m0[c] += 1\n\
    \    }\n    for _, c := range s1 {\n        m1[c] += 1\n    }\n    for k, v :=\
    \ range m0 {\n        if m1[k] != v {\n            return false\n        }\n \
    \   }\n    for k, v := range m1 {\n        if m0[k] != v {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t *testing.T)\
    \ {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     { actual: candidate(\"\
    abcd\", \"dddddddabc\"), expected: true },\n     { actual: candidate(\"dddddddabc\"\
    , \"abcd\"), expected: true },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"\
    ), expected: false },\n     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected:\
    \ false },\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected:\
    \ false },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpyd0m46gy_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpyd0m46gy_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpyd0m46gy_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c]++\n    }\n    for _, c := range s1\
    \ {\n        m1[c]++\n    }\n    for k, v := range m0 {\n        if v != m1[k]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp2lrs_jhz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp2lrs_jhz_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp2lrs_jhz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c]++\n    }\n    for _, c := range s1\
    \ {\n        m1[c]++\n    }\n    for k, v := range m0 {\n        if v != m1[k]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp2lrs_jhz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp2lrs_jhz_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp2lrs_jhz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c] += 1\n    }\n    for _, c := range\
    \ s1 {\n        m1[c] += 1\n    }\n    for k, v := range m0 {\n        if m1[k]\
    \ != v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpv3xcxjkx_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c] += 1\n    }\n    for _, c := range\
    \ s1 {\n        m1[c] += 1\n    }\n    for k, v := range m0 {\n        if v !=\
    \ m1[k] {\n            return false\n        }\n    }\n    return true\n}\n\n\
    func TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpt8s460h9_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpt8s460h9_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpt8s460h9_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, r := range s0 {\n        m0[r]++\n    }\n    for _, r := range s1\
    \ {\n        m1[r]++\n    }\n    for k, v := range m0 {\n        if m1[k] != v\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp7cpcranw_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp7cpcranw_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp7cpcranw_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c]++\n    }\n    for _, c := range s1\
    \ {\n        m1[c]++\n    }\n    for k, v := range m0 {\n        if m1[k] != v\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp1a2m5dkz_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    var m0 = make(map[rune]int)\n    var m1 = make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c]++\n    }\n    for _, c := range s1\
    \ {\n        m1[c]++\n    }\n    for k, v := range m0 {\n        if m1[k] != v\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpz6d8hz47_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpz6d8hz47_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpz6d8hz47_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c] += 1\n    }\n    for _, c := range\
    \ s1 {\n        m1[c] += 1\n    }\n    for k, v := range m0 {\n        if m1[k]\
    \ != v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpv3xcxjkx_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c] += 1\n    }\n    for _, c := range\
    \ s1 {\n        m1[c] += 1\n    }\n    for k, v := range m0 {\n        if m1[k]\
    \ != v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpv3xcxjkx_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, r := range s0 {\n        m0[r]++\n    }\n    for _, r := range s1\
    \ {\n        m1[r]++\n    }\n    for k, v := range m0 {\n        if m1[k] != v\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp7cpcranw_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp7cpcranw_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp7cpcranw_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c]++\n    }\n    for _, c := range s1\
    \ {\n        m1[c]++\n    }\n    for k, v := range m0 {\n        if m1[k] != v\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp1a2m5dkz_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c] += 1\n    }\n    for _, c := range\
    \ s1 {\n        m1[c] += 1\n    }\n    for k, v := range m0 {\n        if v !=\
    \ m1[k] {\n            return false\n        }\n    }\n    return true\n}\n\n\
    func TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpt8s460h9_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpt8s460h9_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpt8s460h9_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c]++\n    }\n    for _, c := range s1\
    \ {\n        m1[c]++\n    }\n    for k, v := range m0 {\n        if m1[k] != v\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp1a2m5dkz_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c]++\n    }\n    for _, c := range s1\
    \ {\n        m1[c]++\n    }\n    for k, v := range m0 {\n        if m1[k] != v\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp1a2m5dkz_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, r := range s0 {\n        m0[r]++\n    }\n    for _, r := range s1\
    \ {\n        m1[r]++\n    }\n    for k, v := range m0 {\n        if m1[k] != v\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp7cpcranw_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp7cpcranw_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp7cpcranw_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c] += 1\n    }\n    for _, c := range\
    \ s1 {\n        m1[c] += 1\n    }\n    for k, v := range m0 {\n        if m1[k]\
    \ != v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpv3xcxjkx_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, r := range s0 {\n        m0[r] += 1\n    }\n    for _, r := range\
    \ s1 {\n        m1[r] += 1\n    }\n    for k, v := range m0 {\n        if m1[k]\
    \ != v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpyjz2_dp0_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpyjz2_dp0_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpyjz2_dp0_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, r := range s0 {\n        m0[r]++\n    }\n    for _, r := range s1\
    \ {\n        m1[r]++\n    }\n    for k, v := range m0 {\n        if m1[k] != v\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp7cpcranw_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp7cpcranw_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp7cpcranw_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, r := range s0 {\n        m0[r] += 1\n    }\n    for _, r := range\
    \ s1 {\n        m1[r] += 1\n    }\n    for k, v := range m0 {\n        if m1[k]\
    \ != v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpyjz2_dp0_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpyjz2_dp0_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpyjz2_dp0_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c] += 1\n    }\n    for _, c := range\
    \ s1 {\n        m1[c] += 1\n    }\n    for k, v := range m0 {\n        if m1[k]\
    \ != v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpv3xcxjkx_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, r := range s0 {\n        m0[r] += 1\n    }\n    for _, r := range\
    \ s1 {\n        m1[r] += 1\n    }\n    for k, v := range m0 {\n        if m1[k]\
    \ != v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpyjz2_dp0_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpyjz2_dp0_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpyjz2_dp0_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c]++\n    }\n    for _, c := range s1\
    \ {\n        m1[c]++\n    }\n    for k, v := range m0 {\n        if m1[k] != v\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp1a2m5dkz_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    m0 := make(map[rune]int)\n \
    \   m1 := make(map[rune]int)\n    for _, c := range s0 {\n        m0[c]++\n  \
    \  }\n    for _, c := range s1 {\n        m1[c]++\n    }\n    for k, v := range\
    \ m0 {\n        if m1[k] != v {\n            return false\n        }\n    }\n\
    \    for k, v := range m1 {\n        if m0[k] != v {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n\
    \  candidate := same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     { actual: candidate(\"\
    abcd\", \"dddddddabc\"), expected: true },\n     { actual: candidate(\"dddddddabc\"\
    , \"abcd\"), expected: true },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"\
    ), expected: false },\n     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected:\
    \ false },\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected:\
    \ false },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmphmgq1lqr_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmphmgq1lqr_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmphmgq1lqr_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c] += 1\n    }\n    for _, c := range\
    \ s1 {\n        m1[c] += 1\n    }\n    for k, v := range m0 {\n        if m1[k]\
    \ != v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpv3xcxjkx_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c]++\n    }\n    for _, c := range s1\
    \ {\n        m1[c]++\n    }\n    for k, v := range m0 {\n        if m1[k] != v\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp1a2m5dkz_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, r := range s0 {\n        m0[r] += 1\n    }\n    for _, r := range\
    \ s1 {\n        m1[r] += 1\n    }\n    for k, v := range m0 {\n        if m1[k]\
    \ != v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpyjz2_dp0_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpyjz2_dp0_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpyjz2_dp0_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c]++\n    }\n    for _, c := range s1\
    \ {\n        m1[c]++\n    }\n    for k, v := range m0 {\n        if v != m1[k]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp2lrs_jhz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp2lrs_jhz_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp2lrs_jhz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, r := range s0 {\n        m0[r]++\n    }\n    for _, r := range s1\
    \ {\n        m1[r]++\n    }\n    for k, v := range m0 {\n        if v != m1[k]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpfkbyvrjh_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpfkbyvrjh_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpfkbyvrjh_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, r := range s0 {\n        m0[r] += 1\n    }\n    for _, r := range\
    \ s1 {\n        m1[r] += 1\n    }\n    for k, v := range m0 {\n        if m1[k]\
    \ != v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpyjz2_dp0_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpyjz2_dp0_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpyjz2_dp0_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 2
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if strings.Count(s0,\
    \ string(s0[i])) != strings.Count(s1, string(s0[i])) {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n\
    \  candidate := same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     { actual: candidate(\"\
    abcd\", \"dddddddabc\"), expected: true },\n     { actual: candidate(\"dddddddabc\"\
    , \"abcd\"), expected: true },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"\
    ), expected: false },\n     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected:\
    \ false },\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected:\
    \ false },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2795zap1_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c] += 1\n    }\n    for _, c := range\
    \ s1 {\n        m1[c] += 1\n    }\n    for k, v := range m0 {\n        if m1[k]\
    \ != v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpv3xcxjkx_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c] += 1\n    }\n    for _, c := range\
    \ s1 {\n        m1[c] += 1\n    }\n    for k, v := range m0 {\n        if v !=\
    \ m1[k] {\n            return false\n        }\n    }\n    return true\n}\n\n\
    func TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpt8s460h9_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpt8s460h9_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpt8s460h9_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c]++\n    }\n    for _, c := range s1\
    \ {\n        m1[c]++\n    }\n    for k, v := range m0 {\n        if m1[k] != v\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp1a2m5dkz_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c] += 1\n    }\n    for _, c := range\
    \ s1 {\n        m1[c] += 1\n    }\n    for k, v := range m0 {\n        if m1[k]\
    \ != v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpv3xcxjkx_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 2
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for _, c := range s0 {\n        if strings.Count(s0,\
    \ string(c)) != strings.Count(s1, string(c)) {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate\
    \ := same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\"), expected: true },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabc\"), expected: true },\n     { actual: candidate(\"dddddddabc\"\
    , \"abcd\"), expected: true },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"\
    ), expected: false },\n     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected:\
    \ false },\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected:\
    \ false },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv45n7ke0_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075048
- exit_code: 2
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for _, c := range s0 {\n        if strings.Count(s0,\
    \ string(c)) != strings.Count(s1, string(c)) {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate\
    \ := same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\"), expected: true },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabc\"), expected: true },\n     { actual: candidate(\"dddddddabc\"\
    , \"abcd\"), expected: true },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"\
    ), expected: false },\n     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected:\
    \ false },\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected:\
    \ false },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv45n7ke0_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, r := range s0 {\n        m0[r] += 1\n    }\n    for _, r := range\
    \ s1 {\n        m1[r] += 1\n    }\n    for k, v := range m0 {\n        if m1[k]\
    \ != v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpyjz2_dp0_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpyjz2_dp0_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpyjz2_dp0_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, r := range s0 {\n        m0[r]++\n    }\n    for _, r := range s1\
    \ {\n        m1[r]++\n    }\n    for k, v := range m0 {\n        if m1[k] != v\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp7cpcranw_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp7cpcranw_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp7cpcranw_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 2
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for _, c := range s0 {\n        if strings.Count(s0,\
    \ string(c)) != strings.Count(s1, string(c)) {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate\
    \ := same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\"), expected: true },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabc\"), expected: true },\n     { actual: candidate(\"dddddddabc\"\
    , \"abcd\"), expected: true },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"\
    ), expected: false },\n     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected:\
    \ false },\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected:\
    \ false },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv45n7ke0_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    // TODO: implement me\n    return\
    \ false\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ), expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmps6_dr84x_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmps6_dr84x_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmps6_dr84x_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c]++\n    }\n    for _, c := range s1\
    \ {\n        m1[c]++\n    }\n    for k, v := range m0 {\n        if m1[k] != v\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp1a2m5dkz_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c] += 1\n    }\n    for _, c := range\
    \ s1 {\n        m1[c] += 1\n    }\n    for k, v := range m0 {\n        if v !=\
    \ m1[k] {\n            return false\n        }\n    }\n    return true\n}\n\n\
    func TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpt8s460h9_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpt8s460h9_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpt8s460h9_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 2
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    if s0 == s1 {\n        return true\n    }\n  \
    \  for _, c := range s0 {\n        if !strings.ContainsRune(s1, c) {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_8kklkf_test.go:29:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c]++\n    }\n    for _, c := range s1\
    \ {\n        m1[c]++\n    }\n    for k, v := range m0 {\n        if m1[k] != v\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp1a2m5dkz_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c]++\n    }\n    for _, c := range s1\
    \ {\n        m1[c]++\n    }\n    for k, v := range m0 {\n        if m1[k] != v\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp1a2m5dkz_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c] += 1\n    }\n    for _, c := range\
    \ s1 {\n        m1[c] += 1\n    }\n    for k, v := range m0 {\n        if m1[k]\
    \ != v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpv3xcxjkx_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c] += 1\n    }\n    for _, c := range\
    \ s1 {\n        m1[c] += 1\n    }\n    for k, v := range m0 {\n        if m1[k]\
    \ != v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpv3xcxjkx_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c] += 1\n    }\n    for _, c := range\
    \ s1 {\n        m1[c] += 1\n    }\n    for k, v := range m0 {\n        if m1[k]\
    \ != v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpv3xcxjkx_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c]++\n    }\n    for _, c := range s1\
    \ {\n        m1[c]++\n    }\n    for k, v := range m0 {\n        if m1[k] != v\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp1a2m5dkz_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c]++\n    }\n    for _, c := range s1\
    \ {\n        m1[c]++\n    }\n    for k, v := range m0 {\n        if m1[k] != v\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp1a2m5dkz_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, r := range s0 {\n        m0[r] += 1\n    }\n    for _, r := range\
    \ s1 {\n        m1[r] += 1\n    }\n    for k, v := range m0 {\n        if m1[k]\
    \ != v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpyjz2_dp0_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpyjz2_dp0_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpyjz2_dp0_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c] += 1\n    }\n    for _, c := range\
    \ s1 {\n        m1[c] += 1\n    }\n    for k, v := range m0 {\n        if m1[k]\
    \ != v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpv3xcxjkx_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c] += 1\n    }\n    for _, c := range\
    \ s1 {\n        m1[c] += 1\n    }\n    for k, v := range m0 {\n        if m1[k]\
    \ != v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpv3xcxjkx_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpv3xcxjkx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c]++\n    }\n    for _, c := range s1\
    \ {\n        m1[c]++\n    }\n    for k, v := range m0 {\n        if m1[k] != v\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp1a2m5dkz_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, r := range s0 {\n        m0[r] += 1\n    }\n    for _, r := range\
    \ s1 {\n        m1[r] += 1\n    }\n    for k, v := range m0 {\n        if v !=\
    \ m1[k] {\n            return false\n        }\n    }\n    return true\n}\n\n\
    func TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpfk87tykg_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpfk87tykg_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpfk87tykg_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, c := range s0 {\n        m0[c]++\n    }\n    for _, c := range s1\
    \ {\n        m1[c]++\n    }\n    for k, v := range m0 {\n        if m1[k] != v\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp1a2m5dkz_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp1a2m5dkz_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\
    \    for _, r := range s0 {\n        m0[r] += 1\n    }\n    for _, r := range\
    \ s1 {\n        m1[r] += 1\n    }\n    for k, v := range m0 {\n        if v !=\
    \ m1[k] {\n            return false\n        }\n    }\n    return true\n}\n\n\
    func TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpfk87tykg_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpfk87tykg_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpfk87tykg_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
