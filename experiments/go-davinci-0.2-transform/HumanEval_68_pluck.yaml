name: HumanEval_68_pluck
language: go_test.go
prompt: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\
  Given an array representing a branch of a tree that has non-negative integer nodes\n\
  // your task is to pluck one of the nodes and return it.\n// The plucked node should\
  \ be the node with the smallest even value.\n// If multiple nodes with the same\
  \ smallest even value are found return the node that has smallest index.\n// The\
  \ plucked node should be returned in a list, [ smalest_value, its index ],\n// If\
  \ there are no even values or the given array is empty, return [].\n// Example 1:\n\
  // >>> pluck([]int{4, 2, 3})\n// []int{2, 1}\n// Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([]int{1,\
  \ 2, 3})\n// []int{2, 1}\n// Explanation: 2 has the smallest even value, and 2 has\
  \ the smallest index.\n// Example 3:\n// >>> pluck([]int{})\n// []int{}\n// Example\
  \ 4:\n// >>> pluck([]int{5, 0, 3, 0, 4, 2})\n// []int{0, 1}\n// Explanation: 0 is\
  \ the smallest value, but  there are two zeros,\n// so we will choose the first\
  \ zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <=\
  \ 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n"
tests: "func TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\
  \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
  \    { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
  \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
  \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
  \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0,\
  \ 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
  \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     { actual:\
  \ candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    var res []int\n    if len(arr) == 0 {\n        return res\n   \
    \ }\n    var min int\n    var index int\n    for i, v := range arr {\n       \
    \ if v % 2 == 0 {\n            if min == 0 {\n                min = v\n      \
    \          index = i\n            } else if v < min {\n                min = v\n\
    \                index = i\n            }\n        }\n    }\n    if min == 0 {\n\
    \        return res\n    }\n    res = append(res, min, index)\n    return res\n\
    }\n", "    var result []int\n    if len(arr) == 0 {\n        return result\n \
    \   }\n    var min int\n    var minIndex int\n    for i, v := range arr {\n  \
    \      if v % 2 == 0 {\n            if min == 0 {\n                min = v\n \
    \               minIndex = i\n            } else if v < min {\n              \
    \  min = v\n                minIndex = i\n            }\n        }\n    }\n  \
    \  if min == 0 {\n        return result\n    }\n    result = append(result, min)\n\
    \    result = append(result, minIndex)\n    return result\n}\n", "    var result\
    \ []int\n    var min int\n    var minIndex int\n    var found bool\n    for i,\
    \ v := range arr {\n        if v % 2 == 0 {\n            if !found {\n       \
    \         min = v\n                minIndex = i\n                found = true\n\
    \            } else {\n                if v < min {\n                    min =\
    \ v\n                    minIndex = i\n                }\n            }\n    \
    \    }\n    }\n    if found {\n        result = append(result, min)\n        result\
    \ = append(result, minIndex)\n    }\n    return result\n}\n", "    var minEven,\
    \ minEvenIndex int\n    minEven = -1\n    minEvenIndex = -1\n    for i, v := range\
    \ arr {\n        if v % 2 == 0 {\n            if minEven == -1 {\n           \
    \     minEven = v\n                minEvenIndex = i\n            } else if v <\
    \ minEven {\n                minEven = v\n                minEvenIndex = i\n \
    \           }\n        }\n    }\n    if minEven == -1 {\n        return []int{}\n\
    \    }\n    return []int{minEven, minEvenIndex}\n}\n", "    var smallestEven,\
    \ smallestEvenIndex int\n    var smallestEvenFound bool\n    for i, v := range\
    \ arr {\n        if v % 2 == 0 {\n            if !smallestEvenFound {\n      \
    \          smallestEven = v\n                smallestEvenIndex = i\n         \
    \       smallestEvenFound = true\n            } else if v < smallestEven {\n \
    \               smallestEven = v\n                smallestEvenIndex = i\n    \
    \        }\n        }\n    }\n    if smallestEvenFound {\n        return []int{smallestEven,\
    \ smallestEvenIndex}\n    }\n    return []int{}\n}\n", "    // your code here\n\
    \    return []int{}\n}\n", "    if len(arr) == 0 {\n        return []int{}\n \
    \   }\n    var minEven int\n    var minEvenIndex int\n    for i, v := range arr\
    \ {\n        if v % 2 == 0 {\n            if minEven == 0 {\n                minEven\
    \ = v\n                minEvenIndex = i\n            } else if v < minEven {\n\
    \                minEven = v\n                minEvenIndex = i\n            }\n\
    \        }\n    }\n    if minEven == 0 {\n        return []int{}\n    }\n    return\
    \ []int{minEven, minEvenIndex}\n}\n", "    var result []int\n    if len(arr) ==\
    \ 0 {\n        return result\n    }\n    var min int\n    var minIndex int\n \
    \   for i, v := range arr {\n        if v % 2 == 0 {\n            if min == 0\
    \ {\n                min = v\n                minIndex = i\n            } else\
    \ if v < min {\n                min = v\n                minIndex = i\n      \
    \      }\n        }\n    }\n    if min == 0 {\n        return result\n    }\n\
    \    result = append(result, min)\n    result = append(result, minIndex)\n   \
    \ return result\n}\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n\
    \    var smallestEven int\n    var smallestEvenIndex int\n    for i, v := range\
    \ arr {\n        if v % 2 == 0 {\n            if smallestEven == 0 {\n       \
    \         smallestEven = v\n                smallestEvenIndex = i\n          \
    \  } else if v < smallestEven {\n                smallestEven = v\n          \
    \      smallestEvenIndex = i\n            }\n        }\n    }\n    if smallestEven\
    \ == 0 {\n        return []int{}\n    }\n    return []int{smallestEven, smallestEvenIndex}\n\
    }\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n    var min int\n\
    \    var minIndex int\n    for i, v := range arr {\n        if v % 2 == 0 {\n\
    \            if min == 0 {\n                min = v\n                minIndex\
    \ = i\n            } else if v < min {\n                min = v\n            \
    \    minIndex = i\n            }\n        }\n    }\n    if min == 0 {\n      \
    \  return []int{}\n    }\n    return []int{min, minIndex}\n}\n", "    if len(arr)\
    \ == 0 {\n        return []int{}\n    }\n    var min int\n    var minIndex int\n\
    \    for i, v := range arr {\n        if v % 2 == 0 {\n            if min == 0\
    \ {\n                min = v\n                minIndex = i\n            } else\
    \ if v < min {\n                min = v\n                minIndex = i\n      \
    \      }\n        }\n    }\n    if min == 0 {\n        return []int{}\n    }\n\
    \    return []int{min, minIndex}\n}\n", "    var result []int\n    var min int\n\
    \    var minIndex int\n    var hasEven bool\n    for i, v := range arr {\n   \
    \     if v % 2 == 0 {\n            if !hasEven {\n                min = v\n  \
    \              minIndex = i\n                hasEven = true\n            } else\
    \ {\n                if v < min {\n                    min = v\n             \
    \       minIndex = i\n                }\n            }\n        }\n    }\n   \
    \ if hasEven {\n        result = append(result, min)\n        result = append(result,\
    \ minIndex)\n    }\n    return result\n}\n", "    if len(arr) == 0 {\n       \
    \ return []int{}\n    }\n    minEven := -1\n    minEvenIndex := -1\n    for i,\
    \ v := range arr {\n        if v % 2 == 0 {\n            if minEven == -1 || v\
    \ < minEven {\n                minEven = v\n                minEvenIndex = i\n\
    \            }\n        }\n    }\n    if minEven == -1 {\n        return []int{}\n\
    \    }\n    return []int{minEven, minEvenIndex}\n}\n", "    var result []int\n\
    \    var minEven int\n    var minEvenIndex int\n    var hasEven bool\n    for\
    \ i, v := range arr {\n        if v % 2 == 0 {\n            if !hasEven {\n  \
    \              minEven = v\n                minEvenIndex = i\n               \
    \ hasEven = true\n            } else if v < minEven {\n                minEven\
    \ = v\n                minEvenIndex = i\n            }\n        }\n    }\n   \
    \ if hasEven {\n        result = append(result, minEven)\n        result = append(result,\
    \ minEvenIndex)\n    }\n    return result\n}\n", "    if len(arr) == 0 {\n   \
    \     return []int{}\n    }\n    min := arr[0]\n    minIndex := 0\n    for i,\
    \ v := range arr {\n        if v % 2 == 0 && v < min {\n            min = v\n\
    \            minIndex = i\n        }\n    }\n    if min % 2 == 0 {\n        return\
    \ []int{min, minIndex}\n    }\n    return []int{}\n}\n", "    if len(arr) == 0\
    \ {\n        return []int{}\n    }\n    var minEven int\n    var minEvenIndex\
    \ int\n    for i, v := range arr {\n        if v % 2 == 0 {\n            if minEven\
    \ == 0 {\n                minEven = v\n                minEvenIndex = i\n    \
    \        } else if v < minEven {\n                minEven = v\n              \
    \  minEvenIndex = i\n            }\n        }\n    }\n    if minEven == 0 {\n\
    \        return []int{}\n    }\n    return []int{minEven, minEvenIndex}\n}\n",
  "    if len(arr) == 0 {\n        return []int{}\n    }\n    var minEven, minEvenIndex\
    \ int\n    for i, v := range arr {\n        if v % 2 == 0 {\n            if minEven\
    \ == 0 {\n                minEven = v\n                minEvenIndex = i\n    \
    \        } else if v < minEven {\n                minEven = v\n              \
    \  minEvenIndex = i\n            }\n        }\n    }\n    if minEven == 0 {\n\
    \        return []int{}\n    }\n    return []int{minEven, minEvenIndex}\n}\n",
  "    if len(arr) == 0 {\n        return []int{}\n    }\n    min := arr[0]\n    minIndex\
    \ := 0\n    for i, v := range arr {\n        if v % 2 == 0 && v < min {\n    \
    \        min = v\n            minIndex = i\n        }\n    }\n    if min % 2 ==\
    \ 0 {\n        return []int{min, minIndex}\n    }\n    return []int{}\n}\n", " \
    \   var minEven int\n    var minEvenIndex int\n    var minEvenFound bool\n   \
    \ for i, v := range arr {\n        if v % 2 == 0 {\n            if !minEvenFound\
    \ {\n                minEven = v\n                minEvenIndex = i\n         \
    \       minEvenFound = true\n            } else if v < minEven {\n           \
    \     minEven = v\n                minEvenIndex = i\n            }\n        }\n\
    \    }\n    if minEvenFound {\n        return []int{minEven, minEvenIndex}\n \
    \   }\n    return []int{}\n}\n", "    var result []int\n    if len(arr) == 0 {\n\
    \        return result\n    }\n    var min int\n    for _, v := range arr {\n\
    \        if v % 2 == 0 {\n            min = v\n            break\n        }\n\
    \    }\n    if min == 0 {\n        return result\n    }\n    for i, v := range\
    \ arr {\n        if v % 2 == 0 && v < min {\n            min = v\n           \
    \ result = []int{min, i}\n        }\n    }\n    return result\n}\n", "    var\
    \ result []int\n    if len(arr) == 0 {\n        return result\n    }\n    min\
    \ := arr[0]\n    minIndex := 0\n    for i, v := range arr {\n        if v % 2\
    \ == 0 && v < min {\n            min = v\n            minIndex = i\n        }\n\
    \    }\n    if min % 2 == 0 {\n        result = append(result, min)\n        result\
    \ = append(result, minIndex)\n    }\n    return result\n}\n", "    if len(arr)\
    \ == 0 {\n        return []int{}\n    }\n    minEven := -1\n    minEvenIndex :=\
    \ -1\n    for i, v := range arr {\n        if v % 2 == 0 {\n            if minEven\
    \ == -1 || v < minEven {\n                minEven = v\n                minEvenIndex\
    \ = i\n            }\n        }\n    }\n    if minEven == -1 {\n        return\
    \ []int{}\n    }\n    return []int{minEven, minEvenIndex}\n}\n", "    var result\
    \ []int\n    var min int\n    var minIndex int\n    var found bool\n    for i,\
    \ v := range arr {\n        if v % 2 == 0 {\n            if !found {\n       \
    \         min = v\n                minIndex = i\n                found = true\n\
    \            } else {\n                if v < min {\n                    min =\
    \ v\n                    minIndex = i\n                }\n            }\n    \
    \    }\n    }\n    if found {\n        result = append(result, min)\n        result\
    \ = append(result, minIndex)\n    }\n    return result\n}\n", "    if len(arr)\
    \ == 0 {\n        return []int{}\n    }\n    var min int\n    var minIndex int\n\
    \    for i, v := range arr {\n        if v % 2 == 0 {\n            if min == 0\
    \ {\n                min = v\n                minIndex = i\n            } else\
    \ if v < min {\n                min = v\n                minIndex = i\n      \
    \      }\n        }\n    }\n    if min == 0 {\n        return []int{}\n    }\n\
    \    return []int{min, minIndex}\n}\n", "    var result []int\n    var smallestEvenValue\
    \ int\n    var smallestEvenValueIndex int\n    for i, v := range arr {\n     \
    \   if v % 2 == 0 {\n            if smallestEvenValue == 0 {\n               \
    \ smallestEvenValue = v\n                smallestEvenValueIndex = i\n        \
    \    } else if v < smallestEvenValue {\n                smallestEvenValue = v\n\
    \                smallestEvenValueIndex = i\n            }\n        }\n    }\n\
    \    if smallestEvenValue != 0 {\n        result = append(result, smallestEvenValue)\n\
    \        result = append(result, smallestEvenValueIndex)\n    }\n    return result\n\
    }\n", "    var res []int\n    if len(arr) == 0 {\n        return res\n    }\n\
    \    var min int\n    var index int\n    for i, v := range arr {\n        if v\
    \ % 2 == 0 {\n            if min == 0 {\n                min = v\n           \
    \     index = i\n            } else if v < min {\n                min = v\n  \
    \              index = i\n            }\n        }\n    }\n    if min == 0 {\n\
    \        return res\n    }\n    res = append(res, min, index)\n    return res\n\
    }\n", "    var evens []int\n    var evensIndex []int\n    for i, v := range arr\
    \ {\n        if v % 2 == 0 {\n            evens = append(evens, v)\n         \
    \   evensIndex = append(evensIndex, i)\n        }\n    }\n    if len(evens) ==\
    \ 0 {\n        return []int{}\n    }\n    min := evens[0]\n    minIndex := evensIndex[0]\n\
    \    for i, v := range evens {\n        if v < min {\n            min = v\n  \
    \          minIndex = evensIndex[i]\n        }\n    }\n    return []int{min, minIndex}\n\
    }\n", "    // your code here\n    return []int{}\n}\n", "    if len(arr) == 0\
    \ {\n        return []int{}\n    }\n    min := arr[0]\n    minIndex := 0\n   \
    \ for i, v := range arr {\n        if v % 2 == 0 && v < min {\n            min\
    \ = v\n            minIndex = i\n        }\n    }\n    if min % 2 == 0 {\n   \
    \     return []int{min, minIndex}\n    }\n    return []int{}\n}\n", "    var evens\
    \ []int\n    for _, v := range arr {\n        if v % 2 == 0 {\n            evens\
    \ = append(evens, v)\n        }\n    }\n    if len(evens) == 0 {\n        return\
    \ []int{}\n    }\n    min := evens[0]\n    for _, v := range evens {\n       \
    \ if v < min {\n            min = v\n        }\n    }\n    for i, v := range arr\
    \ {\n        if v == min {\n            return []int{min, i}\n        }\n    }\n\
    \    return []int{}\n}\n", "    var minEven int\n    var minEvenIndex int\n  \
    \  var minEvenFound bool\n    for i, v := range arr {\n        if v % 2 == 0 {\n\
    \            if !minEvenFound {\n                minEven = v\n               \
    \ minEvenIndex = i\n                minEvenFound = true\n            } else if\
    \ v < minEven {\n                minEven = v\n                minEvenIndex = i\n\
    \            }\n        }\n    }\n    if minEvenFound {\n        return []int{minEven,\
    \ minEvenIndex}\n    }\n    return []int{}\n}\n", "    if len(arr) == 0 {\n  \
    \      return []int{}\n    }\n    var smallest int\n    var index int\n    for\
    \ i, v := range arr {\n        if v % 2 == 0 {\n            if smallest == 0 {\n\
    \                smallest = v\n                index = i\n            } else if\
    \ v < smallest {\n                smallest = v\n                index = i\n  \
    \          }\n        }\n    }\n    if smallest == 0 {\n        return []int{}\n\
    \    }\n    return []int{smallest, index}\n}\n", "    var min int\n    var minIndex\
    \ int\n    var minFound bool\n    for i, v := range arr {\n        if v % 2 ==\
    \ 0 {\n            if !minFound {\n                min = v\n                minIndex\
    \ = i\n                minFound = true\n            } else if v < min {\n    \
    \            min = v\n                minIndex = i\n            }\n        }\n\
    \    }\n    if minFound {\n        return []int{min, minIndex}\n    }\n    return\
    \ []int{}\n}\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n    var\
    \ smallestEven int\n    var smallestEvenIndex int\n    for i, v := range arr {\n\
    \        if v % 2 == 0 {\n            if smallestEven == 0 {\n               \
    \ smallestEven = v\n                smallestEvenIndex = i\n            } else\
    \ if v < smallestEven {\n                smallestEven = v\n                smallestEvenIndex\
    \ = i\n            }\n        }\n    }\n    if smallestEven == 0 {\n        return\
    \ []int{}\n    }\n    return []int{smallestEven, smallestEvenIndex}\n}\n", " \
    \   if len(arr) == 0 {\n        return []int{}\n    }\n    min := arr[0]\n   \
    \ minIndex := 0\n    for i, v := range arr {\n        if v % 2 == 0 && v < min\
    \ {\n            min = v\n            minIndex = i\n        }\n    }\n    if min\
    \ % 2 == 0 {\n        return []int{min, minIndex}\n    }\n    return []int{}\n\
    }\n", "    var minEven int\n    var minEvenIndex int\n    var minEvenFound bool\n\
    \    for i, v := range arr {\n        if v % 2 == 0 {\n            if !minEvenFound\
    \ {\n                minEven = v\n                minEvenIndex = i\n         \
    \       minEvenFound = true\n            } else if v < minEven {\n           \
    \     minEven = v\n                minEvenIndex = i\n            }\n        }\n\
    \    }\n    if minEvenFound {\n        return []int{minEven, minEvenIndex}\n \
    \   }\n    return []int{}\n}\n", "    var result []int\n    if len(arr) == 0 {\n\
    \        return result\n    }\n    min := -1\n    minIndex := -1\n    for i, v\
    \ := range arr {\n        if v % 2 == 0 {\n            if min == -1 {\n      \
    \          min = v\n                minIndex = i\n            } else if v < min\
    \ {\n                min = v\n                minIndex = i\n            }\n  \
    \      }\n    }\n    if min == -1 {\n        return result\n    }\n    result\
    \ = append(result, min)\n    result = append(result, minIndex)\n    return result\n\
    }\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n    var minEven,\
    \ minEvenIndex int\n    minEven = -1\n    minEvenIndex = -1\n    for i, v := range\
    \ arr {\n        if v % 2 == 0 {\n            if minEven == -1 {\n           \
    \     minEven = v\n                minEvenIndex = i\n            } else if v <\
    \ minEven {\n                minEven = v\n                minEvenIndex = i\n \
    \           }\n        }\n    }\n    if minEven == -1 {\n        return []int{}\n\
    \    }\n    return []int{minEven, minEvenIndex}\n}\n", "    var result []int\n\
    \    var min int\n    var minIndex int\n    for i, v := range arr {\n        if\
    \ v % 2 == 0 {\n            if len(result) == 0 {\n                min = v\n \
    \               minIndex = i\n            } else if v < min {\n              \
    \  min = v\n                minIndex = i\n            }\n        }\n    }\n  \
    \  if len(result) > 0 {\n        result = append(result, min)\n        result\
    \ = append(result, minIndex)\n    }\n    return result\n}\n", "    if len(arr)\
    \ == 0 {\n        return []int{}\n    }\n    var minEven int\n    var minEvenIndex\
    \ int\n    for i, v := range arr {\n        if v % 2 == 0 {\n            if minEven\
    \ == 0 {\n                minEven = v\n                minEvenIndex = i\n    \
    \        } else if v < minEven {\n                minEven = v\n              \
    \  minEvenIndex = i\n            }\n        }\n    }\n    if minEven == 0 {\n\
    \        return []int{}\n    }\n    return []int{minEven, minEvenIndex}\n}\n",
  "    var smallestEven int\n    var smallestEvenIndex int\n    var smallestEvenFound\
    \ bool\n\n    for i, v := range arr {\n        if v % 2 == 0 {\n            if\
    \ !smallestEvenFound {\n                smallestEven = v\n                smallestEvenIndex\
    \ = i\n                smallestEvenFound = true\n            } else if v < smallestEven\
    \ {\n                smallestEven = v\n                smallestEvenIndex = i\n\
    \            }\n        }\n    }\n\n    if smallestEvenFound {\n        return\
    \ []int{smallestEven, smallestEvenIndex}\n    } else {\n        return []int{}\n\
    \    }\n}\n", "    var evens []int\n    var evens_index []int\n    for i, v :=\
    \ range arr {\n        if v % 2 == 0 {\n            evens = append(evens, v)\n\
    \            evens_index = append(evens_index, i)\n        }\n    }\n    if len(evens)\
    \ == 0 {\n        return []int{}\n    }\n    min := evens[0]\n    min_index :=\
    \ evens_index[0]\n    for i, v := range evens {\n        if v < min {\n      \
    \      min = v\n            min_index = evens_index[i]\n        }\n    }\n   \
    \ return []int{min, min_index}\n}\n", "    var min int\n    var index int\n  \
    \  var found bool\n    for i, v := range arr {\n        if v % 2 == 0 {\n    \
    \        if !found {\n                min = v\n                index = i\n   \
    \             found = true\n            } else if v < min {\n                min\
    \ = v\n                index = i\n            }\n        }\n    }\n    if found\
    \ {\n        return []int{min, index}\n    }\n    return []int{}\n}\n", "    if\
    \ len(arr) == 0 {\n        return []int{}\n    }\n    var minEven int\n    var\
    \ minEvenIndex int\n    for i, v := range arr {\n        if v % 2 == 0 {\n   \
    \         if minEven == 0 {\n                minEven = v\n                minEvenIndex\
    \ = i\n            } else if v < minEven {\n                minEven = v\n    \
    \            minEvenIndex = i\n            }\n        }\n    }\n    if minEven\
    \ == 0 {\n        return []int{}\n    }\n    return []int{minEven, minEvenIndex}\n\
    }\n", "    var min int\n    var minIndex int\n    var minFound bool\n    for i,\
    \ v := range arr {\n        if v % 2 == 0 {\n            if !minFound {\n    \
    \            min = v\n                minIndex = i\n                minFound =\
    \ true\n            } else if v < min {\n                min = v\n           \
    \     minIndex = i\n            }\n        }\n    }\n    if minFound {\n     \
    \   return []int{min, minIndex}\n    }\n    return []int{}\n}\n", "    if len(arr)\
    \ == 0 {\n        return []int{}\n    }\n    var min = arr[0]\n    var minIndex\
    \ = 0\n    for i, v := range arr {\n        if v % 2 == 0 && v < min {\n     \
    \       min = v\n            minIndex = i\n        }\n    }\n    if min % 2 ==\
    \ 0 {\n        return []int{min, minIndex}\n    }\n    return []int{}\n}\n", " \
    \   var result []int\n    var min int\n    var index int\n    var found bool\n\
    \    for i, v := range arr {\n        if v % 2 == 0 {\n            if !found {\n\
    \                min = v\n                index = i\n                found = true\n\
    \            } else if v < min {\n                min = v\n                index\
    \ = i\n            }\n        }\n    }\n    if found {\n        result = append(result,\
    \ min, index)\n    }\n    return result\n}\n", "    var minEven, minEvenIndex\
    \ int\n    var minEvenFound bool\n    for i, v := range arr {\n        if v %\
    \ 2 == 0 {\n            if !minEvenFound {\n                minEven = v\n    \
    \            minEvenIndex = i\n                minEvenFound = true\n         \
    \   } else if v < minEven {\n                minEven = v\n                minEvenIndex\
    \ = i\n            }\n        }\n    }\n    if minEvenFound {\n        return\
    \ []int{minEven, minEvenIndex}\n    }\n    return []int{}\n}\n", "    if len(arr)\
    \ == 0 {\n        return []int{}\n    }\n    var min int\n    var minIndex int\n\
    \    for i, v := range arr {\n        if v % 2 == 0 {\n            if min == 0\
    \ {\n                min = v\n                minIndex = i\n            } else\
    \ if v < min {\n                min = v\n                minIndex = i\n      \
    \      }\n        }\n    }\n    if min == 0 {\n        return []int{}\n    }\n\
    \    return []int{min, minIndex}\n}\n", "    if len(arr) == 0 {\n        return\
    \ []int{}\n    }\n    min := arr[0]\n    index := 0\n    for i, v := range arr\
    \ {\n        if v % 2 == 0 && v < min {\n            min = v\n            index\
    \ = i\n        }\n    }\n    if min % 2 == 0 {\n        return []int{min, index}\n\
    \    }\n    return []int{}\n}\n", "    if len(arr) == 0 {\n        return []int{}\n\
    \    }\n    var smallestEven int\n    var smallestEvenIndex int\n    for i, v\
    \ := range arr {\n        if v % 2 == 0 {\n            if smallestEven == 0 {\n\
    \                smallestEven = v\n                smallestEvenIndex = i\n   \
    \         } else if v < smallestEven {\n                smallestEven = v\n   \
    \             smallestEvenIndex = i\n            }\n        }\n    }\n    if smallestEven\
    \ == 0 {\n        return []int{}\n    }\n    return []int{smallestEven, smallestEvenIndex}\n\
    }\n", "    var result []int\n    var minEven int\n    var minEvenIndex int\n \
    \   var found bool\n    for i, v := range arr {\n        if v % 2 == 0 {\n   \
    \         if !found {\n                minEven = v\n                minEvenIndex\
    \ = i\n                found = true\n            } else {\n                if\
    \ v < minEven {\n                    minEven = v\n                    minEvenIndex\
    \ = i\n                }\n            }\n        }\n    }\n    if found {\n  \
    \      result = append(result, minEven)\n        result = append(result, minEvenIndex)\n\
    \    }\n    return result\n}\n", "    var result []int\n    var minEven int\n\
    \    var minEvenIndex int\n    var found bool\n    for i, v := range arr {\n \
    \       if v % 2 == 0 {\n            if !found {\n                minEven = v\n\
    \                minEvenIndex = i\n                found = true\n            }\
    \ else {\n                if v < minEven {\n                    minEven = v\n\
    \                    minEvenIndex = i\n                }\n            }\n    \
    \    }\n    }\n    if found {\n        result = append(result, minEven)\n    \
    \    result = append(result, minEvenIndex)\n    }\n    return result\n}\n", " \
    \   if len(arr) == 0 {\n        return []int{}\n    }\n    var min int\n    var\
    \ minIndex int\n    for i, v := range arr {\n        if v % 2 == 0 {\n       \
    \     if min == 0 {\n                min = v\n                minIndex = i\n \
    \           } else if v < min {\n                min = v\n                minIndex\
    \ = i\n            }\n        }\n    }\n    if min == 0 {\n        return []int{}\n\
    \    }\n    return []int{min, minIndex}\n}\n", "    if len(arr) == 0 {\n     \
    \   return []int{}\n    }\n    min := arr[0]\n    minIndex := 0\n    for i, v\
    \ := range arr {\n        if v % 2 == 0 && v < min {\n            min = v\n  \
    \          minIndex = i\n        }\n    }\n    if min % 2 == 0 {\n        return\
    \ []int{min, minIndex}\n    }\n    return []int{}\n}\n", "    if len(arr) == 0\
    \ {\n        return []int{}\n    }\n    min := arr[0]\n    minIndex := 0\n   \
    \ for i, v := range arr {\n        if v % 2 == 0 && v < min {\n            min\
    \ = v\n            minIndex = i\n        }\n    }\n    if min % 2 == 0 {\n   \
    \     return []int{min, minIndex}\n    }\n    return []int{}\n}\n", "    if len(arr)\
    \ == 0 {\n        return []int{}\n    }\n    min := arr[0]\n    minIndex := 0\n\
    \    for i, v := range arr {\n        if v % 2 == 0 && v < min {\n           \
    \ min = v\n            minIndex = i\n        }\n    }\n    if min % 2 == 0 {\n\
    \        return []int{min, minIndex}\n    }\n    return []int{}\n}\n", "    var\
    \ result []int\n    if len(arr) == 0 {\n        return result\n    }\n    var\
    \ min int\n    var minIndex int\n    for i, v := range arr {\n        if v % 2\
    \ == 0 {\n            if min == 0 {\n                min = v\n               \
    \ minIndex = i\n            } else if v < min {\n                min = v\n   \
    \             minIndex = i\n            }\n        }\n    }\n    if min == 0 {\n\
    \        return result\n    }\n    result = append(result, min)\n    result =\
    \ append(result, minIndex)\n    return result\n}\n", "    if len(arr) == 0 {\n\
    \        return []int{}\n    }\n    var min int\n    var minIndex int\n    for\
    \ i, v := range arr {\n        if v % 2 == 0 {\n            if min == 0 {\n  \
    \              min = v\n                minIndex = i\n            } else if v\
    \ < min {\n                min = v\n                minIndex = i\n           \
    \ }\n        }\n    }\n    if min == 0 {\n        return []int{}\n    }\n    return\
    \ []int{min, minIndex}\n}\n", "    var smallestEven int\n    var smallestEvenIndex\
    \ int\n    var smallestEvenFound bool\n    for i, v := range arr {\n        if\
    \ v % 2 == 0 {\n            if !smallestEvenFound {\n                smallestEven\
    \ = v\n                smallestEvenIndex = i\n                smallestEvenFound\
    \ = true\n            } else if v < smallestEven {\n                smallestEven\
    \ = v\n                smallestEvenIndex = i\n            }\n        }\n    }\n\
    \    if smallestEvenFound {\n        return []int{smallestEven, smallestEvenIndex}\n\
    \    }\n    return []int{}\n}\n", "    var res []int\n    if len(arr) == 0 {\n\
    \        return res\n    }\n    min := arr[0]\n    minIndex := 0\n    for i, v\
    \ := range arr {\n        if v % 2 == 0 && v < min {\n            min = v\n  \
    \          minIndex = i\n        }\n    }\n    if min % 2 == 0 {\n        res\
    \ = append(res, min)\n        res = append(res, minIndex)\n    }\n    return res\n\
    }\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n    minEven := -1\n\
    \    minEvenIndex := -1\n    for i, v := range arr {\n        if v % 2 == 0 {\n\
    \            if minEven == -1 || v < minEven {\n                minEven = v\n\
    \                minEvenIndex = i\n            }\n        }\n    }\n    if minEven\
    \ == -1 {\n        return []int{}\n    }\n    return []int{minEven, minEvenIndex}\n\
    }\n", "    var evens []int\n    var evenIndexes []int\n    for i, v := range arr\
    \ {\n        if v % 2 == 0 {\n            evens = append(evens, v)\n         \
    \   evenIndexes = append(evenIndexes, i)\n        }\n    }\n    if len(evens)\
    \ == 0 {\n        return []int{}\n    }\n    min := evens[0]\n    minIndex :=\
    \ evenIndexes[0]\n    for i, v := range evens {\n        if v < min {\n      \
    \      min = v\n            minIndex = evenIndexes[i]\n        }\n    }\n    return\
    \ []int{min, minIndex}\n}\n", "    if len(arr) == 0 {\n        return []int{}\n\
    \    }\n    min := arr[0]\n    minIndex := 0\n    for i, v := range arr {\n  \
    \      if v % 2 == 0 && v < min {\n            min = v\n            minIndex =\
    \ i\n        }\n    }\n    if min % 2 == 0 {\n        return []int{min, minIndex}\n\
    \    }\n    return []int{}\n}\n", "    if len(arr) == 0 {\n        return []int{}\n\
    \    }\n    min := arr[0]\n    minIndex := 0\n    for i, v := range arr {\n  \
    \      if v % 2 == 0 && v < min {\n            min = v\n            minIndex =\
    \ i\n        }\n    }\n    if min % 2 == 0 {\n        return []int{min, minIndex}\n\
    \    }\n    return []int{}\n}\n", "    var result []int\n    var min int\n   \
    \ var minIndex int\n    var first bool\n    for i, v := range arr {\n        if\
    \ v % 2 == 0 {\n            if first {\n                if v < min {\n       \
    \             min = v\n                    minIndex = i\n                }\n \
    \           } else {\n                min = v\n                minIndex = i\n\
    \                first = true\n            }\n        }\n    }\n    if first {\n\
    \        result = append(result, min)\n        result = append(result, minIndex)\n\
    \    }\n    return result\n}\n", "    var result []int\n    if len(arr) == 0 {\n\
    \        return result\n    }\n    min := arr[0]\n    minIndex := 0\n    for i,\
    \ v := range arr {\n        if v % 2 == 0 && v < min {\n            min = v\n\
    \            minIndex = i\n        }\n    }\n    if min % 2 == 0 {\n        result\
    \ = append(result, min)\n        result = append(result, minIndex)\n    }\n  \
    \  return result\n}\n", "    // your code here\n    return []int{}\n}\n", "  \
    \  if len(arr) == 0 {\n        return []int{}\n    }\n    var min int\n    var\
    \ minIndex int\n    for i, v := range arr {\n        if v % 2 == 0 {\n       \
    \     if min == 0 {\n                min = v\n                minIndex = i\n \
    \           } else if v < min {\n                min = v\n                minIndex\
    \ = i\n            }\n        }\n    }\n    if min == 0 {\n        return []int{}\n\
    \    }\n    return []int{min, minIndex}\n}\n", "    if len(arr) == 0 {\n     \
    \   return []int{}\n    }\n    min := -1\n    index := -1\n    for i, v := range\
    \ arr {\n        if v % 2 == 0 {\n            if min == -1 || v < min {\n    \
    \            min = v\n                index = i\n            }\n        }\n  \
    \  }\n    if min == -1 {\n        return []int{}\n    }\n    return []int{min,\
    \ index}\n}\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n    min\
    \ := arr[0]\n    minIndex := 0\n    for i, v := range arr {\n        if v % 2\
    \ == 0 && v < min {\n            min = v\n            minIndex = i\n        }\n\
    \    }\n    if min % 2 == 0 {\n        return []int{min, minIndex}\n    }\n  \
    \  return []int{}\n}\n", "    if len(arr) == 0 {\n        return []int{}\n   \
    \ }\n    min := -1\n    minIndex := -1\n    for i, v := range arr {\n        if\
    \ v % 2 == 0 {\n            if min == -1 || v < min {\n                min = v\n\
    \                minIndex = i\n            }\n        }\n    }\n    if min ==\
    \ -1 {\n        return []int{}\n    }\n    return []int{min, minIndex}\n}\n",
  "    var result []int\n    var min int\n    var minIndex int\n    for i, v := range\
    \ arr {\n        if v % 2 == 0 {\n            if len(result) == 0 {\n        \
    \        min = v\n                minIndex = i\n            } else if v < min\
    \ {\n                min = v\n                minIndex = i\n            }\n  \
    \      }\n    }\n    if len(result) > 0 {\n        result = append(result, min)\n\
    \        result = append(result, minIndex)\n    }\n    return result\n}\n", " \
    \   if len(arr) == 0 {\n        return []int{}\n    }\n    minEven := -1\n   \
    \ minEvenIndex := -1\n    for i, v := range arr {\n        if v % 2 == 0 {\n \
    \           if minEven == -1 || v < minEven {\n                minEven = v\n \
    \               minEvenIndex = i\n            }\n        }\n    }\n    if minEven\
    \ == -1 {\n        return []int{}\n    }\n    return []int{minEven, minEvenIndex}\n\
    }\n", "    // your code here\n    return []int{}\n}\n", "    if len(arr) == 0\
    \ {\n        return []int{}\n    }\n    var min int\n    var minIndex int\n  \
    \  var minFound bool\n    for i, v := range arr {\n        if v % 2 == 0 {\n \
    \           if !minFound {\n                min = v\n                minIndex\
    \ = i\n                minFound = true\n            } else if v < min {\n    \
    \            min = v\n                minIndex = i\n            }\n        }\n\
    \    }\n    if minFound {\n        return []int{min, minIndex}\n    }\n    return\
    \ []int{}\n}\n", "    var result []int\n    if len(arr) == 0 {\n        return\
    \ result\n    }\n    min := arr[0]\n    minIndex := 0\n    for i, v := range arr\
    \ {\n        if v % 2 == 0 && v < min {\n            min = v\n            minIndex\
    \ = i\n        }\n    }\n    if min % 2 == 0 {\n        result = append(result,\
    \ min)\n        result = append(result, minIndex)\n    }\n    return result\n\
    }\n", "    // your code here\n    return []int{}\n}\n", "    var result []int\n\
    \    var min int\n    var minIndex int\n    var found bool\n    for i, v := range\
    \ arr {\n        if v % 2 == 0 {\n            if !found {\n                min\
    \ = v\n                minIndex = i\n                found = true\n          \
    \  } else {\n                if v < min {\n                    min = v\n     \
    \               minIndex = i\n                }\n            }\n        }\n  \
    \  }\n    if found {\n        result = append(result, min)\n        result = append(result,\
    \ minIndex)\n    }\n    return result\n}\n", "    if len(arr) == 0 {\n       \
    \ return []int{}\n    }\n    minEven := -1\n    minEvenIndex := -1\n    for i,\
    \ v := range arr {\n        if v % 2 == 0 {\n            if minEven == -1 || v\
    \ < minEven {\n                minEven = v\n                minEvenIndex = i\n\
    \            }\n        }\n    }\n    if minEven == -1 {\n        return []int{}\n\
    \    }\n    return []int{minEven, minEvenIndex}\n}\n", "    if len(arr) == 0 {\n\
    \        return []int{}\n    }\n    var minEven int\n    var minEvenIndex int\n\
    \    for i, v := range arr {\n        if v % 2 == 0 {\n            if minEven\
    \ == 0 {\n                minEven = v\n                minEvenIndex = i\n    \
    \        } else if v < minEven {\n                minEven = v\n              \
    \  minEvenIndex = i\n            }\n        }\n    }\n    if minEven == 0 {\n\
    \        return []int{}\n    }\n    return []int{minEven, minEvenIndex}\n}\n",
  "    var smallestEven int\n    var smallestEvenIndex int\n    var smallestEvenFound\
    \ bool\n    for i, v := range arr {\n        if v % 2 == 0 {\n            if !smallestEvenFound\
    \ {\n                smallestEven = v\n                smallestEvenIndex = i\n\
    \                smallestEvenFound = true\n            } else if v < smallestEven\
    \ {\n                smallestEven = v\n                smallestEvenIndex = i\n\
    \            }\n        }\n    }\n    if smallestEvenFound {\n        return []int{smallestEven,\
    \ smallestEvenIndex}\n    }\n    return []int{}\n}\n", "    if len(arr) == 0 {\n\
    \        return []int{}\n    }\n    var minEven int\n    var minEvenIndex int\n\
    \    for i, v := range arr {\n        if v % 2 == 0 {\n            if minEven\
    \ == 0 {\n                minEven = v\n                minEvenIndex = i\n    \
    \        } else if v < minEven {\n                minEven = v\n              \
    \  minEvenIndex = i\n            }\n        }\n    }\n    if minEven == 0 {\n\
    \        return []int{}\n    }\n    return []int{minEven, minEvenIndex}\n}\n",
  "    if len(arr) == 0 {\n        return []int{}\n    }\n    min := -1\n    minIndex\
    \ := -1\n    for i, v := range arr {\n        if v % 2 == 0 {\n            if\
    \ min == -1 || v < min {\n                min = v\n                minIndex =\
    \ i\n            }\n        }\n    }\n    if min == -1 {\n        return []int{}\n\
    \    }\n    return []int{min, minIndex}\n}\n", "    if len(arr) == 0 {\n     \
    \   return []int{}\n    }\n    min := arr[0]\n    min_index := 0\n    for i, v\
    \ := range arr {\n        if v % 2 == 0 && v < min {\n            min = v\n  \
    \          min_index = i\n        }\n    }\n    if min % 2 == 0 {\n        return\
    \ []int{min, min_index}\n    }\n    return []int{}\n}\n", "    var result []int\n\
    \    var min int\n    var minIndex int\n    for i, v := range arr {\n        if\
    \ v % 2 == 0 {\n            if min == 0 {\n                min = v\n         \
    \       minIndex = i\n            } else if v < min {\n                min = v\n\
    \                minIndex = i\n            }\n        }\n    }\n    if min !=\
    \ 0 {\n        result = append(result, min)\n        result = append(result, minIndex)\n\
    \    }\n    return result\n}\n", "    if len(arr) == 0 {\n        return []int{}\n\
    \    }\n    smallestEven := -1\n    smallestEvenIndex := -1\n    for i, v := range\
    \ arr {\n        if v % 2 == 0 {\n            if smallestEven == -1 {\n      \
    \          smallestEven = v\n                smallestEvenIndex = i\n         \
    \   } else if v < smallestEven {\n                smallestEven = v\n         \
    \       smallestEvenIndex = i\n            }\n        }\n    }\n    if smallestEven\
    \ == -1 {\n        return []int{}\n    }\n    return []int{smallestEven, smallestEvenIndex}\n\
    }\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n    var min int\n\
    \    var index int\n    for i, v := range arr {\n        if v % 2 == 0 {\n   \
    \         if min == 0 {\n                min = v\n                index = i\n\
    \            } else if v < min {\n                min = v\n                index\
    \ = i\n            }\n        }\n    }\n    if min == 0 {\n        return []int{}\n\
    \    }\n    return []int{min, index}\n}\n", "    var res []int\n    if len(arr)\
    \ == 0 {\n        return res\n    }\n    min := arr[0]\n    minIndex := 0\n  \
    \  for i, v := range arr {\n        if v % 2 == 0 && v < min {\n            min\
    \ = v\n            minIndex = i\n        }\n    }\n    if min % 2 == 0 {\n   \
    \     res = append(res, min)\n        res = append(res, minIndex)\n    }\n   \
    \ return res\n}\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n \
    \   var smallestEven int\n    var smallestEvenIndex int\n    for i, v := range\
    \ arr {\n        if v % 2 == 0 {\n            if smallestEven == 0 {\n       \
    \         smallestEven = v\n                smallestEvenIndex = i\n          \
    \  } else if v < smallestEven {\n                smallestEven = v\n          \
    \      smallestEvenIndex = i\n            }\n        }\n    }\n    if smallestEven\
    \ == 0 {\n        return []int{}\n    }\n    return []int{smallestEven, smallestEvenIndex}\n\
    }\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n    var min int\n\
    \    var minIndex int\n    for i, v := range arr {\n        if v % 2 == 0 {\n\
    \            if min == 0 {\n                min = v\n                minIndex\
    \ = i\n            } else if v < min {\n                min = v\n            \
    \    minIndex = i\n            }\n        }\n    }\n    if min == 0 {\n      \
    \  return []int{}\n    }\n    return []int{min, minIndex}\n}\n", "    var result\
    \ []int\n    if len(arr) == 0 {\n        return result\n    }\n    var smallestEven\
    \ int\n    var smallestEvenIndex int\n    var smallestEvenFound bool\n    for\
    \ i, v := range arr {\n        if v % 2 == 0 {\n            if !smallestEvenFound\
    \ {\n                smallestEven = v\n                smallestEvenIndex = i\n\
    \                smallestEvenFound = true\n            } else {\n            \
    \    if v < smallestEven {\n                    smallestEven = v\n           \
    \         smallestEvenIndex = i\n                }\n            }\n        }\n\
    \    }\n    if smallestEvenFound {\n        result = append(result, smallestEven)\n\
    \        result = append(result, smallestEvenIndex)\n    }\n    return result\n\
    }\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n    min := arr[0]\n\
    \    minIndex := 0\n    for i, v := range arr {\n        if v % 2 == 0 && v <\
    \ min {\n            min = v\n            minIndex = i\n        }\n    }\n   \
    \ if min % 2 == 0 {\n        return []int{min, minIndex}\n    }\n    return []int{}\n\
    }\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n    min := arr[0]\n\
    \    minIndex := 0\n    for i, v := range arr {\n        if v % 2 == 0 && v <\
    \ min {\n            min = v\n            minIndex = i\n        }\n    }\n   \
    \ if min % 2 == 0 {\n        return []int{min, minIndex}\n    }\n    return []int{}\n\
    }\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n    var minEven\
    \ int\n    var minEvenIndex int\n    for i, v := range arr {\n        if v % 2\
    \ == 0 {\n            if minEven == 0 {\n                minEven = v\n       \
    \         minEvenIndex = i\n            } else if v < minEven {\n            \
    \    minEven = v\n                minEvenIndex = i\n            }\n        }\n\
    \    }\n    if minEven == 0 {\n        return []int{}\n    }\n    return []int{minEven,\
    \ minEvenIndex}\n}\n", "    var result []int\n    var minEven int\n    var minEvenIndex\
    \ int\n    var found bool\n    for i, v := range arr {\n        if v % 2 == 0\
    \ {\n            if !found {\n                minEven = v\n                minEvenIndex\
    \ = i\n                found = true\n            } else {\n                if\
    \ v < minEven {\n                    minEven = v\n                    minEvenIndex\
    \ = i\n                }\n            }\n        }\n    }\n    if found {\n  \
    \      result = append(result, minEven)\n        result = append(result, minEvenIndex)\n\
    \    }\n    return result\n}\n", "    if len(arr) == 0 {\n        return []int{}\n\
    \    }\n    min := arr[0]\n    minIndex := 0\n    for i, v := range arr {\n  \
    \      if v % 2 == 0 && v < min {\n            min = v\n            minIndex =\
    \ i\n        }\n    }\n    if min % 2 == 0 {\n        return []int{min, minIndex}\n\
    \    }\n    return []int{}\n}\n", "    if len(arr) == 0 {\n        return []int{}\n\
    \    }\n    min := arr[0]\n    minIndex := 0\n    for i, v := range arr {\n  \
    \      if v % 2 == 0 && v < min {\n            min = v\n            minIndex =\
    \ i\n        }\n    }\n    if min % 2 == 0 {\n        return []int{min, minIndex}\n\
    \    }\n    return []int{}\n}\n", "    var result []int\n    var min int\n   \
    \ var index int\n    for i, v := range arr {\n        if v % 2 == 0 {\n      \
    \      if min == 0 {\n                min = v\n                index = i\n   \
    \         } else if v < min {\n                min = v\n                index\
    \ = i\n            }\n        }\n    }\n    if min != 0 {\n        result = append(result,\
    \ min)\n        result = append(result, index)\n    }\n    return result\n}\n",
  "    var result []int\n    if len(arr) == 0 {\n        return result\n    }\n  \
    \  var min int\n    var index int\n    for i, v := range arr {\n        if v %\
    \ 2 == 0 {\n            if len(result) == 0 {\n                min = v\n     \
    \           index = i\n            } else if v < min {\n                min =\
    \ v\n                index = i\n            }\n        }\n    }\n    if len(result)\
    \ == 0 {\n        return result\n    }\n    result = append(result, min)\n   \
    \ result = append(result, index)\n    return result\n}\n", "    if len(arr) ==\
    \ 0 {\n        return []int{}\n    }\n    min := arr[0]\n    minIndex := 0\n \
    \   for i, v := range arr {\n        if v % 2 == 0 && v < min {\n            min\
    \ = v\n            minIndex = i\n        }\n    }\n    if min % 2 == 0 {\n   \
    \     return []int{min, minIndex}\n    }\n    return []int{}\n}\n", "    if len(arr)\
    \ == 0 {\n        return []int{}\n    }\n    var minEven int\n    var minEvenIndex\
    \ int\n    var minEvenFound bool\n    for i, v := range arr {\n        if v %\
    \ 2 == 0 {\n            if !minEvenFound {\n                minEven = v\n    \
    \            minEvenIndex = i\n                minEvenFound = true\n         \
    \   } else {\n                if v < minEven {\n                    minEven =\
    \ v\n                    minEvenIndex = i\n                }\n            }\n\
    \        }\n    }\n    if minEvenFound {\n        return []int{minEven, minEvenIndex}\n\
    \    }\n    return []int{}\n}\n", "    var smallestEven int\n    var smallestEvenIndex\
    \ int\n    var smallestEvenFound bool\n    for i, v := range arr {\n        if\
    \ v % 2 == 0 {\n            if !smallestEvenFound {\n                smallestEven\
    \ = v\n                smallestEvenIndex = i\n                smallestEvenFound\
    \ = true\n            } else if v < smallestEven {\n                smallestEven\
    \ = v\n                smallestEvenIndex = i\n            }\n        }\n    }\n\
    \    if smallestEvenFound {\n        return []int{smallestEven, smallestEvenIndex}\n\
    \    }\n    return []int{}\n}\n", "    if len(arr) == 0 {\n        return []int{}\n\
    \    }\n    minEven := -1\n    minEvenIndex := -1\n    for i, v := range arr {\n\
    \        if v % 2 == 0 {\n            if minEven == -1 || v < minEven {\n    \
    \            minEven = v\n                minEvenIndex = i\n            }\n  \
    \      }\n    }\n    if minEven == -1 {\n        return []int{}\n    }\n    return\
    \ []int{minEven, minEvenIndex}\n}\n", "    var min int\n    var minIndex int\n\
    \    var minFound bool\n\n    for i, v := range arr {\n        if v % 2 == 0 {\n\
    \            if !minFound {\n                min = v\n                minIndex\
    \ = i\n                minFound = true\n            } else if v < min {\n    \
    \            min = v\n                minIndex = i\n            }\n        }\n\
    \    }\n\n    if minFound {\n        return []int{min, minIndex}\n    }\n\n  \
    \  return []int{}\n}\n", "    if len(arr) == 0 {\n        return []int{}\n   \
    \ }\n    min := arr[0]\n    minIndex := 0\n    for i, v := range arr {\n     \
    \   if v % 2 == 0 && v < min {\n            min = v\n            minIndex = i\n\
    \        }\n    }\n    if min % 2 == 0 {\n        return []int{min, minIndex}\n\
    \    }\n    return []int{}\n}\n", "    if len(arr) == 0 {\n        return []int{}\n\
    \    }\n    min := arr[0]\n    minIndex := 0\n    for i, v := range arr {\n  \
    \      if v % 2 == 0 && v < min {\n            min = v\n            minIndex =\
    \ i\n        }\n    }\n    if min % 2 == 0 {\n        return []int{min, minIndex}\n\
    \    }\n    return []int{}\n}\n", "    if len(arr) == 0 {\n        return []int{}\n\
    \    }\n    min := -1\n    index := -1\n    for i, v := range arr {\n        if\
    \ v % 2 == 0 {\n            if min == -1 || v < min {\n                min = v\n\
    \                index = i\n            }\n        }\n    }\n    if min == -1\
    \ {\n        return []int{}\n    }\n    return []int{min, index}\n}\n", "    var\
    \ result []int\n    var smallestEven int\n    var smallestEvenIndex int\n    var\
    \ smallestEvenFound bool\n    for i, v := range arr {\n        if v % 2 == 0 {\n\
    \            if !smallestEvenFound {\n                smallestEven = v\n     \
    \           smallestEvenIndex = i\n                smallestEvenFound = true\n\
    \            } else {\n                if v < smallestEven {\n               \
    \     smallestEven = v\n                    smallestEvenIndex = i\n          \
    \      }\n            }\n        }\n    }\n    if smallestEvenFound {\n      \
    \  result = append(result, smallestEven)\n        result = append(result, smallestEvenIndex)\n\
    \    }\n    return result\n}\n", "    var result []int\n    var min int\n    var\
    \ minIndex int\n    var minFound bool\n    for i, v := range arr {\n        if\
    \ v % 2 == 0 {\n            if !minFound {\n                min = v\n        \
    \        minIndex = i\n                minFound = true\n            } else if\
    \ v < min {\n                min = v\n                minIndex = i\n         \
    \   }\n        }\n    }\n    if minFound {\n        result = append(result, min)\n\
    \        result = append(result, minIndex)\n    }\n    return result\n}\n", " \
    \   if len(arr) == 0 {\n        return []int{}\n    }\n    min := arr[0]\n   \
    \ minIndex := 0\n    for i, v := range arr {\n        if v % 2 == 0 && v < min\
    \ {\n            min = v\n            minIndex = i\n        }\n    }\n    if min\
    \ % 2 == 0 {\n        return []int{min, minIndex}\n    }\n    return []int{}\n\
    }\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n    minEven := -1\n\
    \    minEvenIndex := -1\n    for i, v := range arr {\n        if v % 2 == 0 {\n\
    \            if minEven == -1 || v < minEven {\n                minEven = v\n\
    \                minEvenIndex = i\n            }\n        }\n    }\n    if minEven\
    \ == -1 {\n        return []int{}\n    }\n    return []int{minEven, minEvenIndex}\n\
    }\n", "    var result []int\n    if len(arr) == 0 {\n        return result\n \
    \   }\n    min := arr[0]\n    minIndex := 0\n    for i, v := range arr {\n   \
    \     if v % 2 == 0 && v < min {\n            min = v\n            minIndex =\
    \ i\n        }\n    }\n    if min % 2 == 0 {\n        result = append(result,\
    \ min)\n        result = append(result, minIndex)\n    }\n    return result\n\
    }\n", "    var result []int\n    var min int\n    var minIndex int\n    var found\
    \ bool\n\n    for i, v := range arr {\n        if v % 2 == 0 {\n            if\
    \ !found {\n                min = v\n                minIndex = i\n          \
    \      found = true\n            } else if v < min {\n                min = v\n\
    \                minIndex = i\n            }\n        }\n    }\n\n    if found\
    \ {\n        result = append(result, min)\n        result = append(result, minIndex)\n\
    \    }\n\n    return result\n}\n", "    var result []int\n    if len(arr) == 0\
    \ {\n        return result\n    }\n    var min int\n    var index int\n    for\
    \ i, v := range arr {\n        if v % 2 == 0 {\n            if min == 0 {\n  \
    \              min = v\n                index = i\n            } else if v < min\
    \ {\n                min = v\n                index = i\n            }\n     \
    \   }\n    }\n    if min != 0 {\n        result = append(result, min)\n      \
    \  result = append(result, index)\n    }\n    return result\n}\n", "    if len(arr)\
    \ == 0 {\n        return []int{}\n    }\n    min := arr[0]\n    minIndex := 0\n\
    \    for i, v := range arr {\n        if v % 2 == 0 && v < min {\n           \
    \ min = v\n            minIndex = i\n        }\n    }\n    if min % 2 == 0 {\n\
    \        return []int{min, minIndex}\n    }\n    return []int{}\n}\n", "    if\
    \ len(arr) == 0 {\n        return []int{}\n    }\n    min := arr[0]\n    minIndex\
    \ := 0\n    for i, v := range arr {\n        if v % 2 == 0 && v < min {\n    \
    \        min = v\n            minIndex = i\n        }\n    }\n    if min % 2 ==\
    \ 0 {\n        return []int{min, minIndex}\n    }\n    return []int{}\n}\n", " \
    \   if len(arr) == 0 {\n        return []int{}\n    }\n    min := arr[0]\n   \
    \ minIndex := 0\n    for i, v := range arr {\n        if v < min && v % 2 == 0\
    \ {\n            min = v\n            minIndex = i\n        }\n    }\n    if min\
    \ % 2 == 0 {\n        return []int{min, minIndex}\n    }\n    return []int{}\n\
    }\n", "    var smallestEven int\n    var smallestEvenIndex int\n    var smallestEvenFound\
    \ bool\n    for i, v := range arr {\n        if v % 2 == 0 {\n            if !smallestEvenFound\
    \ {\n                smallestEven = v\n                smallestEvenIndex = i\n\
    \                smallestEvenFound = true\n            } else if v < smallestEven\
    \ {\n                smallestEven = v\n                smallestEvenIndex = i\n\
    \            }\n        }\n    }\n    if smallestEvenFound {\n        return []int{smallestEven,\
    \ smallestEvenIndex}\n    }\n    return []int{}\n}\n", "    if len(arr) == 0 {\n\
    \        return []int{}\n    }\n    minEven := -1\n    minEvenIndex := -1\n  \
    \  for i, v := range arr {\n        if v % 2 == 0 {\n            if minEven ==\
    \ -1 || v < minEven {\n                minEven = v\n                minEvenIndex\
    \ = i\n            }\n        }\n    }\n    if minEven == -1 {\n        return\
    \ []int{}\n    }\n    return []int{minEven, minEvenIndex}\n}\n", "    if len(arr)\
    \ == 0 {\n        return []int{}\n    }\n    var smallestEven int\n    var smallestEvenIndex\
    \ int\n    for i, v := range arr {\n        if v % 2 == 0 {\n            if smallestEven\
    \ == 0 {\n                smallestEven = v\n                smallestEvenIndex\
    \ = i\n            } else if v < smallestEven {\n                smallestEven\
    \ = v\n                smallestEvenIndex = i\n            }\n        }\n    }\n\
    \    if smallestEven == 0 {\n        return []int{}\n    }\n    return []int{smallestEven,\
    \ smallestEvenIndex}\n}\n", "    var result []int\n    var smallest int\n    var\
    \ smallestIndex int\n    for i, v := range arr {\n        if v % 2 == 0 {\n  \
    \          if smallest == 0 {\n                smallest = v\n                smallestIndex\
    \ = i\n            } else if v < smallest {\n                smallest = v\n  \
    \              smallestIndex = i\n            }\n        }\n    }\n    if smallest\
    \ != 0 {\n        result = append(result, smallest)\n        result = append(result,\
    \ smallestIndex)\n    }\n    return result\n}\n", "    if len(arr) == 0 {\n  \
    \      return []int{}\n    }\n    min := arr[0]\n    minIndex := 0\n    for i,\
    \ v := range arr {\n        if v % 2 == 0 && v < min {\n            min = v\n\
    \            minIndex = i\n        }\n    }\n    if min % 2 == 0 {\n        return\
    \ []int{min, minIndex}\n    }\n    return []int{}\n}\n", "    var smallestEven\
    \ int\n    var smallestEvenIndex int\n    var smallestEvenFound bool\n    for\
    \ i, v := range arr {\n        if v % 2 == 0 {\n            if !smallestEvenFound\
    \ {\n                smallestEven = v\n                smallestEvenIndex = i\n\
    \                smallestEvenFound = true\n            } else if v < smallestEven\
    \ {\n                smallestEven = v\n                smallestEvenIndex = i\n\
    \            }\n        }\n    }\n    if smallestEvenFound {\n        return []int{smallestEven,\
    \ smallestEvenIndex}\n    }\n    return []int{}\n}\n", "    // your code here\n\
    \    return nil\n}\n", "    var smallestEvenValue int\n    var smallestEvenValueIndex\
    \ int\n    var smallestEvenValueFound bool\n    for i, v := range arr {\n    \
    \    if v % 2 == 0 {\n            if !smallestEvenValueFound {\n             \
    \   smallestEvenValue = v\n                smallestEvenValueIndex = i\n      \
    \          smallestEvenValueFound = true\n            } else {\n             \
    \   if v < smallestEvenValue {\n                    smallestEvenValue = v\n  \
    \                  smallestEvenValueIndex = i\n                }\n           \
    \ }\n        }\n    }\n    if smallestEvenValueFound {\n        return []int{smallestEvenValue,\
    \ smallestEvenValueIndex}\n    }\n    return []int{}\n}\n", "    if len(arr) ==\
    \ 0 {\n        return []int{}\n    }\n    min := arr[0]\n    minIndex := 0\n \
    \   for i, v := range arr {\n        if v % 2 == 0 && v < min {\n            min\
    \ = v\n            minIndex = i\n        }\n    }\n    if min % 2 == 0 {\n   \
    \     return []int{min, minIndex}\n    }\n    return []int{}\n}\n", "    var result\
    \ []int\n    if len(arr) == 0 {\n        return result\n    }\n    min := arr[0]\n\
    \    minIndex := 0\n    for i, v := range arr {\n        if v % 2 == 0 && v <\
    \ min {\n            min = v\n            minIndex = i\n        }\n    }\n   \
    \ if min % 2 == 0 {\n        result = append(result, min)\n        result = append(result,\
    \ minIndex)\n    }\n    return result\n}\n", "    var evens []int\n    var evensIndex\
    \ []int\n    for i, v := range arr {\n        if v % 2 == 0 {\n            evens\
    \ = append(evens, v)\n            evensIndex = append(evensIndex, i)\n       \
    \ }\n    }\n    if len(evens) == 0 {\n        return []int{}\n    }\n    min :=\
    \ evens[0]\n    minIndex := evensIndex[0]\n    for i, v := range evens {\n   \
    \     if v < min {\n            min = v\n            minIndex = evensIndex[i]\n\
    \        }\n    }\n    return []int{min, minIndex}\n}\n", "    var result []int\n\
    \    if len(arr) == 0 {\n        return result\n    }\n    min := arr[0]\n   \
    \ minIndex := 0\n    for i, v := range arr {\n        if v % 2 == 0 && v < min\
    \ {\n            min = v\n            minIndex = i\n        }\n    }\n    if min\
    \ % 2 == 0 {\n        result = append(result, min)\n        result = append(result,\
    \ minIndex)\n    }\n    return result\n}\n", "    if len(arr) == 0 {\n       \
    \ return []int{}\n    }\n    minEven := -1\n    minEvenIndex := -1\n    for i,\
    \ v := range arr {\n        if v % 2 == 0 {\n            if minEven == -1 || v\
    \ < minEven {\n                minEven = v\n                minEvenIndex = i\n\
    \            }\n        }\n    }\n    if minEven == -1 {\n        return []int{}\n\
    \    }\n    return []int{minEven, minEvenIndex}\n}\n", "    var result []int\n\
    \    var min int\n    var minIndex int\n    var isEven bool\n    for i, v := range\
    \ arr {\n        if v % 2 == 0 {\n            if !isEven {\n                min\
    \ = v\n                minIndex = i\n                isEven = true\n         \
    \   } else {\n                if v < min {\n                    min = v\n    \
    \                minIndex = i\n                }\n            }\n        }\n \
    \   }\n    if isEven {\n        result = append(result, min)\n        result =\
    \ append(result, minIndex)\n    }\n    return result\n}\n", "    // your code\
    \ here\n    return []int{}\n}\n", "    if len(arr) == 0 {\n        return []int{}\n\
    \    }\n    min := arr[0]\n    minIndex := 0\n    for i, v := range arr {\n  \
    \      if v % 2 == 0 && v < min {\n            min = v\n            minIndex =\
    \ i\n        }\n    }\n    if min % 2 == 0 {\n        return []int{min, minIndex}\n\
    \    }\n    return []int{}\n}\n", "    var res []int\n    var min int\n    var\
    \ minIndex int\n    for i, v := range arr {\n        if v % 2 == 0 {\n       \
    \     if len(res) == 0 {\n                min = v\n                minIndex =\
    \ i\n                res = append(res, min, minIndex)\n            } else {\n\
    \                if v < min {\n                    min = v\n                 \
    \   minIndex = i\n                    res = []int{min, minIndex}\n           \
    \     }\n            }\n        }\n    }\n    return res\n}\n", "    if len(arr)\
    \ == 0 {\n        return []int{}\n    }\n    minEven := -1\n    minEvenIndex :=\
    \ -1\n    for i, v := range arr {\n        if v % 2 == 0 {\n            if minEven\
    \ == -1 || v < minEven {\n                minEven = v\n                minEvenIndex\
    \ = i\n            }\n        }\n    }\n    if minEven == -1 {\n        return\
    \ []int{}\n    }\n    return []int{minEven, minEvenIndex}\n}\n", "    var min\
    \ int\n    var minIndex int\n    var minFound bool\n    for i, v := range arr\
    \ {\n        if v % 2 == 0 {\n            if !minFound {\n                min\
    \ = v\n                minIndex = i\n                minFound = true\n       \
    \     } else if v < min {\n                min = v\n                minIndex =\
    \ i\n            }\n        }\n    }\n    if minFound {\n        return []int{min,\
    \ minIndex}\n    }\n    return []int{}\n}\n", "    if len(arr) == 0 {\n      \
    \  return []int{}\n    }\n    smallest := arr[0]\n    smallestIndex := 0\n   \
    \ for i, v := range arr {\n        if v % 2 == 0 && v < smallest {\n         \
    \   smallest = v\n            smallestIndex = i\n        }\n    }\n    if smallest\
    \ % 2 == 0 {\n        return []int{smallest, smallestIndex}\n    }\n    return\
    \ []int{}\n}\n", "    var result []int\n    var minEven int\n    var minEvenIndex\
    \ int\n    var found bool\n    for i, v := range arr {\n        if v % 2 == 0\
    \ {\n            if !found {\n                minEven = v\n                minEvenIndex\
    \ = i\n                found = true\n            } else {\n                if\
    \ v < minEven {\n                    minEven = v\n                    minEvenIndex\
    \ = i\n                }\n            }\n        }\n    }\n    if found {\n  \
    \      result = append(result, minEven)\n        result = append(result, minEvenIndex)\n\
    \    }\n    return result\n}\n", "    if len(arr) == 0 {\n        return []int{}\n\
    \    }\n    minEven := -1\n    minEvenIndex := -1\n    for i, v := range arr {\n\
    \        if v % 2 == 0 {\n            if minEven == -1 || v < minEven {\n    \
    \            minEven = v\n                minEvenIndex = i\n            }\n  \
    \      }\n    }\n    if minEven == -1 {\n        return []int{}\n    }\n    return\
    \ []int{minEven, minEvenIndex}\n}\n", "    var result []int\n    var min int\n\
    \    var minIndex int\n    var found bool\n    for i, v := range arr {\n     \
    \   if v % 2 == 0 {\n            if !found {\n                min = v\n      \
    \          minIndex = i\n                found = true\n            } else {\n\
    \                if v < min {\n                    min = v\n                 \
    \   minIndex = i\n                }\n            }\n        }\n    }\n    if found\
    \ {\n        result = append(result, min)\n        result = append(result, minIndex)\n\
    \    }\n    return result\n}\n", "    if len(arr) == 0 {\n        return []int{}\n\
    \    }\n    minEven := -1\n    minEvenIndex := -1\n    for i, v := range arr {\n\
    \        if v % 2 == 0 {\n            if minEven == -1 || v < minEven {\n    \
    \            minEven = v\n                minEvenIndex = i\n            }\n  \
    \      }\n    }\n    if minEven == -1 {\n        return []int{}\n    }\n    return\
    \ []int{minEven, minEvenIndex}\n}\n", "    if len(arr) == 0 {\n        return\
    \ []int{}\n    }\n    var min int\n    var minIndex int\n    for i, v := range\
    \ arr {\n        if v % 2 == 0 {\n            if min == 0 {\n                min\
    \ = v\n                minIndex = i\n            } else if v < min {\n       \
    \         min = v\n                minIndex = i\n            }\n        }\n  \
    \  }\n    if min == 0 {\n        return []int{}\n    }\n    return []int{min,\
    \ minIndex}\n}\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n  \
    \  var min int\n    var minIndex int\n    for i, v := range arr {\n        if\
    \ v % 2 == 0 {\n            if min == 0 {\n                min = v\n         \
    \       minIndex = i\n            } else if v < min {\n                min = v\n\
    \                minIndex = i\n            }\n        }\n    }\n    if min ==\
    \ 0 {\n        return []int{}\n    }\n    return []int{min, minIndex}\n}\n", " \
    \   var smallestEven int\n    var smallestEvenIndex int\n    var smallestEvenFound\
    \ bool\n    for i, v := range arr {\n        if v % 2 == 0 {\n            if !smallestEvenFound\
    \ {\n                smallestEven = v\n                smallestEvenIndex = i\n\
    \                smallestEvenFound = true\n            } else if v < smallestEven\
    \ {\n                smallestEven = v\n                smallestEvenIndex = i\n\
    \            }\n        }\n    }\n    if smallestEvenFound {\n        return []int{smallestEven,\
    \ smallestEvenIndex}\n    }\n    return []int{}\n}\n", "    var result []int\n\
    \    var min int\n    var minIndex int\n    var first bool\n    for i, v := range\
    \ arr {\n        if v % 2 == 0 {\n            if first {\n                if v\
    \ < min {\n                    min = v\n                    minIndex = i\n   \
    \             }\n            } else {\n                min = v\n             \
    \   minIndex = i\n                first = true\n            }\n        }\n   \
    \ }\n    if first {\n        result = append(result, min)\n        result = append(result,\
    \ minIndex)\n    }\n    return result\n}\n", "    var result []int\n    if len(arr)\
    \ == 0 {\n        return result\n    }\n    var minEven int\n    var minEvenIndex\
    \ int\n    for i, v := range arr {\n        if v % 2 == 0 {\n            if minEven\
    \ == 0 {\n                minEven = v\n                minEvenIndex = i\n    \
    \        } else if v < minEven {\n                minEven = v\n              \
    \  minEvenIndex = i\n            }\n        }\n    }\n    if minEven != 0 {\n\
    \        result = append(result, minEven)\n        result = append(result, minEvenIndex)\n\
    \    }\n    return result\n}\n", "    var minEven, minEvenIndex int\n    var minEvenFound\
    \ bool\n    for i, v := range arr {\n        if v % 2 == 0 {\n            if !minEvenFound\
    \ {\n                minEven = v\n                minEvenIndex = i\n         \
    \       minEvenFound = true\n            } else if v < minEven {\n           \
    \     minEven = v\n                minEvenIndex = i\n            }\n        }\n\
    \    }\n    if minEvenFound {\n        return []int{minEven, minEvenIndex}\n \
    \   }\n    return []int{}\n}\n", "    if len(arr) == 0 {\n        return []int{}\n\
    \    }\n    var smallestEven int\n    var smallestEvenIndex int\n    for i, v\
    \ := range arr {\n        if v % 2 == 0 {\n            if smallestEven == 0 {\n\
    \                smallestEven = v\n                smallestEvenIndex = i\n   \
    \         } else if v < smallestEven {\n                smallestEven = v\n   \
    \             smallestEvenIndex = i\n            }\n        }\n    }\n    if smallestEven\
    \ == 0 {\n        return []int{}\n    }\n    return []int{smallestEven, smallestEvenIndex}\n\
    }\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n    var min int\n\
    \    var minIndex int\n    for i, v := range arr {\n        if v % 2 == 0 {\n\
    \            if min == 0 {\n                min = v\n                minIndex\
    \ = i\n            } else if v < min {\n                min = v\n            \
    \    minIndex = i\n            }\n        }\n    }\n    if min == 0 {\n      \
    \  return []int{}\n    }\n    return []int{min, minIndex}\n}\n", "    var result\
    \ []int\n    if len(arr) == 0 {\n        return result\n    }\n    var minEven\
    \ int\n    var minEvenIndex int\n    for i, v := range arr {\n        if v % 2\
    \ == 0 {\n            if minEven == 0 {\n                minEven = v\n       \
    \         minEvenIndex = i\n            } else if v < minEven {\n            \
    \    minEven = v\n                minEvenIndex = i\n            }\n        }\n\
    \    }\n    if minEven == 0 {\n        return result\n    }\n    result = append(result,\
    \ minEven)\n    result = append(result, minEvenIndex)\n    return result\n}\n",
  "    var result []int\n    var min int\n    var minIndex int\n    var found bool\n\
    \    for i, v := range arr {\n        if v % 2 == 0 {\n            if !found {\n\
    \                found = true\n                min = v\n                minIndex\
    \ = i\n            } else {\n                if v < min {\n                  \
    \  min = v\n                    minIndex = i\n                }\n            }\n\
    \        }\n    }\n    if found {\n        result = append(result, min)\n    \
    \    result = append(result, minIndex)\n    }\n    return result\n}\n", "    var\
    \ result []int\n    var min int\n    var index int\n    for i, v := range arr\
    \ {\n        if v % 2 == 0 {\n            if min == 0 {\n                min =\
    \ v\n                index = i\n            } else if v < min {\n            \
    \    min = v\n                index = i\n            }\n        }\n    }\n   \
    \ if min != 0 {\n        result = append(result, min)\n        result = append(result,\
    \ index)\n    }\n    return result\n}\n", "    var res []int\n    if len(arr)\
    \ == 0 {\n        return res\n    }\n    var min int\n    var min_index int\n\
    \    for i, v := range arr {\n        if v % 2 == 0 {\n            if min == 0\
    \ {\n                min = v\n                min_index = i\n            } else\
    \ if v < min {\n                min = v\n                min_index = i\n     \
    \       }\n        }\n    }\n    if min == 0 {\n        return res\n    }\n  \
    \  res = append(res, min)\n    res = append(res, min_index)\n    return res\n\
    }\n", "    var minEven int\n    var minEvenIndex int\n    var minEvenFound bool\n\
    \    for i, v := range arr {\n        if v % 2 == 0 {\n            if !minEvenFound\
    \ {\n                minEven = v\n                minEvenIndex = i\n         \
    \       minEvenFound = true\n            } else if v < minEven {\n           \
    \     minEven = v\n                minEvenIndex = i\n            }\n        }\n\
    \    }\n    if minEvenFound {\n        return []int{minEven, minEvenIndex}\n \
    \   }\n    return []int{}\n}\n", "    if len(arr) == 0 {\n        return []int{}\n\
    \    }\n    var minEven int\n    var minEvenIndex int\n    for i, v := range arr\
    \ {\n        if v % 2 == 0 {\n            if minEven == 0 {\n                minEven\
    \ = v\n                minEvenIndex = i\n            } else if v < minEven {\n\
    \                minEven = v\n                minEvenIndex = i\n            }\n\
    \        }\n    }\n    if minEven == 0 {\n        return []int{}\n    }\n    return\
    \ []int{minEven, minEvenIndex}\n}\n", "    if len(arr) == 0 {\n        return\
    \ []int{}\n    }\n    var minEven int\n    var minEvenIndex int\n    for i, v\
    \ := range arr {\n        if v % 2 == 0 {\n            if minEven == 0 {\n   \
    \             minEven = v\n                minEvenIndex = i\n            } else\
    \ if v < minEven {\n                minEven = v\n                minEvenIndex\
    \ = i\n            }\n        }\n    }\n    if minEven == 0 {\n        return\
    \ []int{}\n    }\n    return []int{minEven, minEvenIndex}\n}\n", "    if len(arr)\
    \ == 0 {\n        return []int{}\n    }\n    var smallestEvenValue int\n    var\
    \ smallestEvenValueIndex int\n    for i, v := range arr {\n        if v % 2 ==\
    \ 0 {\n            if smallestEvenValue == 0 {\n                smallestEvenValue\
    \ = v\n                smallestEvenValueIndex = i\n            } else if v < smallestEvenValue\
    \ {\n                smallestEvenValue = v\n                smallestEvenValueIndex\
    \ = i\n            }\n        }\n    }\n    if smallestEvenValue == 0 {\n    \
    \    return []int{}\n    }\n    return []int{smallestEvenValue, smallestEvenValueIndex}\n\
    }\n", "    var min int\n    var minIndex int\n    var minFound bool\n    for i,\
    \ v := range arr {\n        if v % 2 == 0 {\n            if !minFound {\n    \
    \            min = v\n                minIndex = i\n                minFound =\
    \ true\n            } else if v < min {\n                min = v\n           \
    \     minIndex = i\n            }\n        }\n    }\n    if minFound {\n     \
    \   return []int{min, minIndex}\n    }\n    return []int{}\n}\n", "    if len(arr)\
    \ == 0 {\n        return []int{}\n    }\n    minEven := -1\n    minEvenIndex :=\
    \ -1\n    for i, v := range arr {\n        if v % 2 == 0 {\n            if minEven\
    \ == -1 || v < minEven {\n                minEven = v\n                minEvenIndex\
    \ = i\n            }\n        }\n    }\n    if minEven == -1 {\n        return\
    \ []int{}\n    }\n    return []int{minEven, minEvenIndex}\n}\n", "    // Write\
    \ your code here\n    return []int{}\n}\n", "    var result []int\n    var minEven\
    \ int\n    var minEvenIdx int\n    var minEvenFound bool\n    for idx, val :=\
    \ range arr {\n        if val % 2 == 0 {\n            if !minEvenFound {\n   \
    \             minEven = val\n                minEvenIdx = idx\n              \
    \  minEvenFound = true\n            } else if val < minEven {\n              \
    \  minEven = val\n                minEvenIdx = idx\n            }\n        }\n\
    \    }\n    if minEvenFound {\n        result = append(result, minEven)\n    \
    \    result = append(result, minEvenIdx)\n    }\n    return result\n}\n", "  \
    \  var result []int\n    var min int\n    var index int\n    for i, v := range\
    \ arr {\n        if v % 2 == 0 {\n            if len(result) == 0 {\n        \
    \        min = v\n                index = i\n            } else if v < min {\n\
    \                min = v\n                index = i\n            }\n        }\n\
    \    }\n    if len(result) > 0 {\n        result = append(result, min)\n     \
    \   result = append(result, index)\n    }\n    return result\n}\n", "    if len(arr)\
    \ == 0 {\n        return []int{}\n    }\n    min := -1\n    index := -1\n    for\
    \ i, v := range arr {\n        if v % 2 == 0 {\n            if min == -1 || v\
    \ < min {\n                min = v\n                index = i\n            }\n\
    \        }\n    }\n    if min == -1 {\n        return []int{}\n    }\n    return\
    \ []int{min, index}\n}\n", "    var result []int\n    var min int\n    var minIndex\
    \ int\n    var found bool\n    for i, v := range arr {\n        if v % 2 == 0\
    \ {\n            if !found {\n                min = v\n                minIndex\
    \ = i\n                found = true\n            } else {\n                if\
    \ v < min {\n                    min = v\n                    minIndex = i\n \
    \               }\n            }\n        }\n    }\n    if found {\n        result\
    \ = append(result, min)\n        result = append(result, minIndex)\n    }\n  \
    \  return result\n}\n", "    var result []int\n    var minEven int\n    var minEvenIndex\
    \ int\n    var minEvenFound bool\n    for i, v := range arr {\n        if v %\
    \ 2 == 0 {\n            if !minEvenFound {\n                minEven = v\n    \
    \            minEvenIndex = i\n                minEvenFound = true\n         \
    \   } else if v < minEven {\n                minEven = v\n                minEvenIndex\
    \ = i\n            }\n        }\n    }\n    if minEvenFound {\n        result\
    \ = append(result, minEven)\n        result = append(result, minEvenIndex)\n \
    \   }\n    return result\n}\n", "    if len(arr) == 0 {\n        return []int{}\n\
    \    }\n    var min int\n    var index int\n    for i, v := range arr {\n    \
    \    if v % 2 == 0 {\n            if min == 0 {\n                min = v\n   \
    \             index = i\n            } else if v < min {\n                min\
    \ = v\n                index = i\n            }\n        }\n    }\n    if min\
    \ == 0 {\n        return []int{}\n    }\n    return []int{min, index}\n}\n", " \
    \   var result []int\n    var min int\n    var minIndex int\n    var minFound\
    \ bool\n    for i, v := range arr {\n        if v % 2 == 0 {\n            if !minFound\
    \ {\n                min = v\n                minIndex = i\n                minFound\
    \ = true\n            } else if v < min {\n                min = v\n         \
    \       minIndex = i\n            }\n        }\n    }\n    if minFound {\n   \
    \     result = append(result, min)\n        result = append(result, minIndex)\n\
    \    }\n    return result\n}\n", "    if len(arr) == 0 {\n        return []int{}\n\
    \    }\n    var min int\n    var minIndex int\n    for i, v := range arr {\n \
    \       if v % 2 == 0 {\n            if min == 0 {\n                min = v\n\
    \                minIndex = i\n            } else if v < min {\n             \
    \   min = v\n                minIndex = i\n            }\n        }\n    }\n \
    \   if min == 0 {\n        return []int{}\n    }\n    return []int{min, minIndex}\n\
    }\n", "    var result []int\n    var min int\n    var minIndex int\n    var found\
    \ bool\n\n    for i, v := range arr {\n        if v % 2 == 0 {\n            if\
    \ !found {\n                min = v\n                minIndex = i\n          \
    \      found = true\n            } else if v < min {\n                min = v\n\
    \                minIndex = i\n            }\n        }\n    }\n\n    if found\
    \ {\n        result = append(result, min)\n        result = append(result, minIndex)\n\
    \    }\n\n    return result\n}\n", "    if len(arr) == 0 {\n        return []int{}\n\
    \    }\n    min := arr[0]\n    minIndex := 0\n    for i, v := range arr {\n  \
    \      if v % 2 == 0 && v < min {\n            min = v\n            minIndex =\
    \ i\n        }\n    }\n    if min % 2 == 0 {\n        return []int{min, minIndex}\n\
    \    }\n    return []int{}\n}\n", "    if len(arr) == 0 {\n        return []int{}\n\
    \    }\n    min := arr[0]\n    minIndex := 0\n    for i, v := range arr {\n  \
    \      if v % 2 == 0 && v < min {\n            min = v\n            minIndex =\
    \ i\n        }\n    }\n    if min % 2 == 0 {\n        return []int{min, minIndex}\n\
    \    }\n    return []int{}\n}\n", "    var minEven int\n    var minEvenIndex int\n\
    \    var minEvenFound bool\n\n    for i, v := range arr {\n        if v % 2 ==\
    \ 0 {\n            if !minEvenFound {\n                minEven = v\n         \
    \       minEvenIndex = i\n                minEvenFound = true\n            } else\
    \ if v < minEven {\n                minEven = v\n                minEvenIndex\
    \ = i\n            }\n        }\n    }\n\n    if minEvenFound {\n        return\
    \ []int{minEven, minEvenIndex}\n    } else {\n        return []int{}\n    }\n\
    }\n", "    var minEven int\n    var minEvenIndex int\n    var minEvenFound bool\n\
    \    for i, v := range arr {\n        if v % 2 == 0 {\n            if !minEvenFound\
    \ {\n                minEven = v\n                minEvenIndex = i\n         \
    \       minEvenFound = true\n            } else if v < minEven {\n           \
    \     minEven = v\n                minEvenIndex = i\n            }\n        }\n\
    \    }\n    if minEvenFound {\n        return []int{minEven, minEvenIndex}\n \
    \   }\n    return []int{}\n}\n", "    if len(arr) == 0 {\n        return []int{}\n\
    \    }\n    min := arr[0]\n    minIndex := 0\n    for i, v := range arr {\n  \
    \      if v % 2 == 0 && v < min {\n            min = v\n            minIndex =\
    \ i\n        }\n    }\n    if min % 2 == 0 {\n        return []int{min, minIndex}\n\
    \    }\n    return []int{}\n}\n", "    if len(arr) == 0 {\n        return []int{}\n\
    \    }\n    var smallestEven = -1\n    var smallestEvenIndex = -1\n    for i,\
    \ v := range arr {\n        if v % 2 == 0 {\n            if smallestEven == -1\
    \ {\n                smallestEven = v\n                smallestEvenIndex = i\n\
    \            } else if v < smallestEven {\n                smallestEven = v\n\
    \                smallestEvenIndex = i\n            }\n        }\n    }\n    if\
    \ smallestEven == -1 {\n        return []int{}\n    }\n    return []int{smallestEven,\
    \ smallestEvenIndex}\n}\n", "    var min int\n    var minIndex int\n    var minFound\
    \ bool\n    for i, v := range arr {\n        if v % 2 == 0 {\n            if !minFound\
    \ {\n                min = v\n                minIndex = i\n                minFound\
    \ = true\n            } else if v < min {\n                min = v\n         \
    \       minIndex = i\n            }\n        }\n    }\n    if minFound {\n   \
    \     return []int{min, minIndex}\n    }\n    return []int{}\n}\n", "    var result\
    \ []int\n    var min int\n    var minIndex int\n    var hasEven bool\n    for\
    \ i, v := range arr {\n        if v % 2 == 0 {\n            if !hasEven {\n  \
    \              min = v\n                minIndex = i\n                hasEven\
    \ = true\n            } else {\n                if v < min {\n               \
    \     min = v\n                    minIndex = i\n                }\n         \
    \   }\n        }\n    }\n    if hasEven {\n        result = append(result, min)\n\
    \        result = append(result, minIndex)\n    }\n    return result\n}\n", " \
    \   if len(arr) == 0 {\n        return []int{}\n    }\n    minEven := -1\n   \
    \ minEvenIndex := -1\n    for i, v := range arr {\n        if v % 2 == 0 {\n \
    \           if minEven == -1 || v < minEven {\n                minEven = v\n \
    \               minEvenIndex = i\n            }\n        }\n    }\n    if minEven\
    \ == -1 {\n        return []int{}\n    }\n    return []int{minEven, minEvenIndex}\n\
    }\n", "    var result []int\n    if len(arr) == 0 {\n        return result\n \
    \   }\n    var minEven int\n    var minEvenIndex int\n    for i, v := range arr\
    \ {\n        if v % 2 == 0 {\n            if minEven == 0 {\n                minEven\
    \ = v\n                minEvenIndex = i\n            } else if v < minEven {\n\
    \                minEven = v\n                minEvenIndex = i\n            }\n\
    \        }\n    }\n    if minEven == 0 {\n        return result\n    }\n    result\
    \ = append(result, minEven)\n    result = append(result, minEvenIndex)\n    return\
    \ result\n}\n", "    var smallestEven int\n    var smallestEvenIndex int\n   \
    \ var smallestEvenFound bool\n    for i, v := range arr {\n        if v % 2 ==\
    \ 0 {\n            if !smallestEvenFound {\n                smallestEven = v\n\
    \                smallestEvenIndex = i\n                smallestEvenFound = true\n\
    \            } else if v < smallestEven {\n                smallestEven = v\n\
    \                smallestEvenIndex = i\n            }\n        }\n    }\n    if\
    \ smallestEvenFound {\n        return []int{smallestEven, smallestEvenIndex}\n\
    \    }\n    return []int{}\n}\n", "    var result []int\n    var min int\n   \
    \ var minIndex int\n    var found bool\n    for i, v := range arr {\n        if\
    \ v % 2 == 0 {\n            if !found {\n                min = v\n           \
    \     minIndex = i\n                found = true\n            } else {\n     \
    \           if v < min {\n                    min = v\n                    minIndex\
    \ = i\n                }\n            }\n        }\n    }\n    if found {\n  \
    \      result = append(result, min)\n        result = append(result, minIndex)\n\
    \    }\n    return result\n}\n", "    if len(arr) == 0 {\n        return []int{}\n\
    \    }\n    min := arr[0]\n    minIndex := 0\n    for i, v := range arr {\n  \
    \      if v % 2 == 0 && v < min {\n            min = v\n            minIndex =\
    \ i\n        }\n    }\n    if min % 2 == 0 {\n        return []int{min, minIndex}\n\
    \    }\n    return []int{}\n}\n", "    var smallestEven, smallestEvenIndex int\n\
    \    for i, v := range arr {\n        if v % 2 == 0 {\n            if smallestEven\
    \ == 0 {\n                smallestEven = v\n                smallestEvenIndex\
    \ = i\n            } else if v < smallestEven {\n                smallestEven\
    \ = v\n                smallestEvenIndex = i\n            }\n        }\n    }\n\
    \    if smallestEven == 0 {\n        return []int{}\n    }\n    return []int{smallestEven,\
    \ smallestEvenIndex}\n}\n", "    if len(arr) == 0 {\n        return []int{}\n\
    \    }\n    var min int\n    var minIndex int\n    for i, v := range arr {\n \
    \       if v % 2 == 0 {\n            if min == 0 {\n                min = v\n\
    \                minIndex = i\n            } else if v < min {\n             \
    \   min = v\n                minIndex = i\n            }\n        }\n    }\n \
    \   if min == 0 {\n        return []int{}\n    }\n    return []int{min, minIndex}\n\
    }\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n    min := arr[0]\n\
    \    minIndex := 0\n    for i, v := range arr {\n        if v % 2 == 0 && v <\
    \ min {\n            min = v\n            minIndex = i\n        }\n    }\n   \
    \ if min % 2 == 0 {\n        return []int{min, minIndex}\n    }\n    return []int{}\n\
    }\n", "    var result []int\n    if len(arr) == 0 {\n        return result\n \
    \   }\n    min := arr[0]\n    minIndex := 0\n    for i, v := range arr {\n   \
    \     if v % 2 == 0 && v < min {\n            min = v\n            minIndex =\
    \ i\n        }\n    }\n    if min % 2 == 0 {\n        result = append(result,\
    \ min)\n        result = append(result, minIndex)\n    }\n    return result\n\
    }\n", "    var result []int\n    var minEven int\n    var minEvenIndex int\n \
    \   var minOdd int\n    var minOddIndex int\n    var minEvenFound bool\n    var\
    \ minOddFound bool\n    for i, v := range arr {\n        if v % 2 == 0 {\n   \
    \         if !minEvenFound {\n                minEven = v\n                minEvenIndex\
    \ = i\n                minEvenFound = true\n            } else if v < minEven\
    \ {\n                minEven = v\n                minEvenIndex = i\n         \
    \   }\n        } else {\n            if !minOddFound {\n                minOdd\
    \ = v\n                minOddIndex = i\n                minOddFound = true\n \
    \           } else if v < minOdd {\n                minOdd = v\n             \
    \   minOddIndex = i\n            }\n        }\n    }\n    if minEvenFound {\n\
    \        result = []int{minEven, minEvenIndex}\n    } else if minOddFound {\n\
    \        result = []int{minOdd, minOddIndex}\n    }\n    return result\n}\n",
  "    if len(arr) == 0 {\n        return []int{}\n    }\n    var min int\n    var\
    \ index int\n    var found bool\n    for i, v := range arr {\n        if v % 2\
    \ == 0 {\n            if !found {\n                min = v\n                index\
    \ = i\n                found = true\n            } else {\n                if\
    \ v < min {\n                    min = v\n                    index = i\n    \
    \            }\n            }\n        }\n    }\n    if found {\n        return\
    \ []int{min, index}\n    }\n    return []int{}\n}\n", "    var result []int\n\
    \    var min int\n    var index int\n    for i, v := range arr {\n        if v\
    \ % 2 == 0 {\n            if len(result) == 0 {\n                min = v\n   \
    \             index = i\n            } else if v < min {\n                min\
    \ = v\n                index = i\n            }\n        }\n    }\n    if len(result)\
    \ == 0 {\n        return result\n    }\n    result = append(result, min)\n   \
    \ result = append(result, index)\n    return result\n}\n", "    var result []int\n\
    \    if len(arr) == 0 {\n        return result\n    }\n    var min int\n    var\
    \ minIndex int\n    for i, v := range arr {\n        if v % 2 == 0 {\n       \
    \     if min == 0 {\n                min = v\n                minIndex = i\n \
    \           } else if v < min {\n                min = v\n                minIndex\
    \ = i\n            }\n        }\n    }\n    if min != 0 {\n        result = append(result,\
    \ min)\n        result = append(result, minIndex)\n    }\n    return result\n\
    }\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n    minEven := -1\n\
    \    minEvenIndex := -1\n    for i, v := range arr {\n        if v % 2 == 0 {\n\
    \            if minEven == -1 || v < minEven {\n                minEven = v\n\
    \                minEvenIndex = i\n            }\n        }\n    }\n    if minEven\
    \ == -1 {\n        return []int{}\n    }\n    return []int{minEven, minEvenIndex}\n\
    }\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n    min := arr[0]\n\
    \    minIndex := 0\n    for i, v := range arr {\n        if v % 2 == 0 && v <\
    \ min {\n            min = v\n            minIndex = i\n        }\n    }\n   \
    \ if min % 2 == 0 {\n        return []int{min, minIndex}\n    }\n    return []int{}\n\
    }\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n    minEven := -1\n\
    \    minEvenIndex := -1\n    for i, v := range arr {\n        if v % 2 == 0 {\n\
    \            if minEven == -1 || v < minEven {\n                minEven = v\n\
    \                minEvenIndex = i\n            }\n        }\n    }\n    if minEven\
    \ == -1 {\n        return []int{}\n    }\n    return []int{minEven, minEvenIndex}\n\
    }\n", "    var result []int\n    var min int\n    var minIndex int\n    var first\
    \ bool = true\n    for i, v := range arr {\n        if v % 2 == 0 {\n        \
    \    if first {\n                min = v\n                minIndex = i\n     \
    \           first = false\n            } else {\n                if v < min {\n\
    \                    min = v\n                    minIndex = i\n             \
    \   }\n            }\n        }\n    }\n    if !first {\n        result = append(result,\
    \ min)\n        result = append(result, minIndex)\n    }\n    return result\n\
    }\n", "    var result []int\n    var min int\n    var minIndex int\n    for i,\
    \ v := range arr {\n        if v % 2 == 0 {\n            if min == 0 {\n     \
    \           min = v\n                minIndex = i\n            } else if v < min\
    \ {\n                min = v\n                minIndex = i\n            }\n  \
    \      }\n    }\n    if min != 0 {\n        result = append(result, min)\n   \
    \     result = append(result, minIndex)\n    }\n    return result\n}\n", "   \
    \ var minEven int\n    var minEvenIndex int\n    var minEvenFound bool\n    for\
    \ i, v := range arr {\n        if v % 2 == 0 {\n            if !minEvenFound {\n\
    \                minEven = v\n                minEvenIndex = i\n             \
    \   minEvenFound = true\n            } else if v < minEven {\n               \
    \ minEven = v\n                minEvenIndex = i\n            }\n        }\n  \
    \  }\n    if minEvenFound {\n        return []int{minEven, minEvenIndex}\n   \
    \ }\n    return []int{}\n}\n", "    if len(arr) == 0 {\n        return []int{}\n\
    \    }\n    var min int\n    var minIndex int\n    for i, v := range arr {\n \
    \       if v % 2 == 0 {\n            if min == 0 {\n                min = v\n\
    \                minIndex = i\n            } else if v < min {\n             \
    \   min = v\n                minIndex = i\n            }\n        }\n    }\n \
    \   if min == 0 {\n        return []int{}\n    }\n    return []int{min, minIndex}\n\
    }\n", "    // your code here\n    return []int{}\n}\n", "    if len(arr) == 0\
    \ {\n        return []int{}\n    }\n    min := -1\n    minIndex := -1\n    for\
    \ i, v := range arr {\n        if v % 2 == 0 {\n            if min == -1 || v\
    \ < min {\n                min = v\n                minIndex = i\n           \
    \ }\n        }\n    }\n    if min == -1 {\n        return []int{}\n    }\n   \
    \ return []int{min, minIndex}\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
