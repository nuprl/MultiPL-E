language: go_test.go
name: HumanEval_88_sort_array
results:
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if array[0] % 2 ==\
    \ 0 {\n        return array\n    }\n    for i := 0; i < len(array); i++ {\n  \
    \      for j := i + 1; j < len(array); j++ {\n            if array[i] > array[j]\
    \ {\n                array[i], array[j] = array[j], array[i]\n            }\n\
    \        }\n    }\n    if array[0] + array[len(array) - 1] % 2 == 0 {\n      \
    \  for i := 0; i < len(array) / 2; i++ {\n            array[i], array[len(array)\
    \ - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n    }\n    return\
    \ array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp4n1gs9qn_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp4n1gs9qn_test.go:63: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp4n1gs9qn_test.go:63: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__6 (0.00s)\n\
    \        tmp4n1gs9qn_test.go:63: expected '[%!s(int=23) %!s(int=21) %!s(int=14)\
    \ %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=21) %!s(int=23)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        return sort_array_desc(array)\n    } else {\n        return\
    \ sort_array_asc(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvkkrws7s_test.go:30:16: undefined: sort_array_desc

    /tmp/tmpvkkrws7s_test.go:32:16: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        return sort_array_desc(array)\n    }\n    return sort_array_asc(array)\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8babotst_test.go:30:16: undefined: sort_array_desc

    /tmp/tmp8babotst_test.go:32:12: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) < 2 {\n        return array\n    }\n    if (array[0] + array[len(array)\
    \ - 1]) % 2 == 0 {\n        return sort_descending(array)\n    }\n    return sort_ascending(array)\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw2nwcl97_test.go:27:16: undefined: sort_descending

    /tmp/tmpw2nwcl97_test.go:29:12: undefined: sort_ascending

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        return sort_desc(array)\n    } else {\n        return sort_asc(array)\n\
    \    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptw3u8nvy_test.go:30:16: undefined: sort_desc

    /tmp/tmptw3u8nvy_test.go:32:16: undefined: sort_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if len(array) == 2 {\n        if array[0]\
    \ > array[1] {\n            array[0], array[1] = array[1], array[0]\n        }\n\
    \        return array\n    }\n    if (array[0] + array[len(array) - 1]) % 2 ==\
    \ 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i], array[len(array)\
    \ - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n    }\n    for i\
    \ := 0; i < len(array) - 1; i++ {\n        for j := i + 1; j < len(array); j++\
    \ {\n            if array[i] > array[j] {\n                array[i], array[j]\
    \ = array[j], array[i]\n            }\n        }\n    }\n    return array\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__3\
    \ (0.00s)\n        tmp_3p0wj2f_test.go:69: expected '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_3p0wj2f_test.go:69: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=21) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        return sort_array_desc(array)\n    }\n    return sort_array_asc(array)\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8babotst_test.go:30:16: undefined: sort_array_desc

    /tmp/tmp8babotst_test.go:32:12: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) <= 1 {\n        return array\n    }\n    if (array[0] + array[len(array)\
    \ - 1]) % 2 == 0 {\n        return sort_array_desc(array)\n    }\n    return sort_array_asc(array)\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_ifl0e0h_test.go:27:16: undefined: sort_array_desc

    /tmp/tmp_ifl0e0h_test.go:29:12: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        return sort_array_desc(array)\n    } else {\n        return\
    \ sort_array_asc(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvkkrws7s_test.go:30:16: undefined: sort_array_desc

    /tmp/tmpvkkrws7s_test.go:32:16: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        return sort_array_desc(array)\n    }\n    return sort_array_asc(array)\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8babotst_test.go:30:16: undefined: sort_array_desc

    /tmp/tmp8babotst_test.go:32:12: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        // even\n        for i := 0; i < len(array) / 2; i++ {\n \
    \           array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    } else {\n        // odd\n        for i := 0; i < len(array) /\
    \ 2; i++ {\n            array[i], array[len(array) - 1 - i] = array[len(array)\
    \ - 1 - i], array[i]\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp2od4ab4u_test.go:62: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp2od4ab4u_test.go:62: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmp2od4ab4u_test.go:62: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp2od4ab4u_test.go:62: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        return sort_descending(array)\n    }\n    return sort_ascending(array)\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9jojslvk_test.go:30:16: undefined: sort_descending

    /tmp/tmp9jojslvk_test.go:32:12: undefined: sort_ascending

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        return sort_array_desc(array)\n    } else {\n        return\
    \ sort_array_asc(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvkkrws7s_test.go:30:16: undefined: sort_array_desc

    /tmp/tmpvkkrws7s_test.go:32:16: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        // even\n        for i := 0; i < len(array) / 2; i++ {\n \
    \           array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    } else {\n        // odd\n        for i := 0; i < len(array) /\
    \ 2; i++ {\n            array[i], array[len(array) - 1 - i] = array[len(array)\
    \ - 1 - i], array[i]\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp2od4ab4u_test.go:62: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp2od4ab4u_test.go:62: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmp2od4ab4u_test.go:62: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp2od4ab4u_test.go:62: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if len(array) == 2 {\n        if array[0]\
    \ > array[1] {\n            array[0], array[1] = array[1], array[0]\n        }\n\
    \        return array\n    }\n    if (array[0] + array[len(array) - 1]) % 2 ==\
    \ 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i], array[len(array)\
    \ - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n    }\n    for i\
    \ := 0; i < len(array) - 1; i++ {\n        for j := 0; j < len(array) - 1 - i;\
    \ j++ {\n            if array[j] > array[j + 1] {\n                array[j], array[j\
    \ + 1] = array[j + 1], array[j]\n            }\n        }\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__3\
    \ (0.00s)\n        tmpqehf9wai_test.go:69: expected '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpqehf9wai_test.go:69: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=21) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) <= 1 {\n        return array\n    }\n    if (array[0] + array[len(array)\
    \ - 1]) % 2 == 0 {\n        return sort_array_desc(array)\n    }\n    return sort_array_asc(array)\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_ifl0e0h_test.go:27:16: undefined: sort_array_desc

    /tmp/tmp_ifl0e0h_test.go:29:12: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        return sort_desc(array)\n    }\n    return sort_asc(array)\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvulrit1__test.go:30:16: undefined: sort_desc

    /tmp/tmpvulrit1__test.go:32:12: undefined: sort_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) <= 1 {\n        return array\n    }\n    if (array[0] + array[len(array)\
    \ - 1]) % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n          \
    \  array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpcmiw9bq9_test.go:53: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpcmiw9bq9_test.go:53: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpcmiw9bq9_test.go:53: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpcmiw9bq9_test.go:53: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpcmiw9bq9_test.go:53: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        return sort_array_descending(array)\n    } else {\n      \
    \  return sort_array_ascending(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaew3ey84_test.go:30:16: undefined: sort_array_descending

    /tmp/tmpaew3ey84_test.go:32:16: undefined: sort_array_ascending

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if len(array) == 2 {\n        if (array[0]\
    \ + array[1]) % 2 == 0 {\n            if array[0] < array[1] {\n             \
    \   array[0], array[1] = array[1], array[0]\n            }\n        } else {\n\
    \            if array[0] > array[1] {\n                array[0], array[1] = array[1],\
    \ array[0]\n            }\n        }\n        return array\n    }\n    if (array[0]\
    \ + array[len(array) - 1]) % 2 == 0 {\n        for i := 0; i < len(array) / 2;\
    \ i++ {\n            if array[i] < array[len(array) - 1 - i] {\n             \
    \   array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \            }\n        }\n    } else {\n        for i := 0; i < len(array) /\
    \ 2; i++ {\n            if array[i] > array[len(array) - 1 - i] {\n          \
    \      array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \            }\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmprhnmvaic_test.go:76: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmprhnmvaic_test.go:76: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmprhnmvaic_test.go:76: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmprhnmvaic_test.go:76: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=23) %!s(int=14) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) <= 1 {\n        return array\n    }\n    if (array[0] + array[len(array)\
    \ - 1]) % 2 == 0 {\n        return sort_array_desc(array)\n    }\n    return sort_array_asc(array)\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_ifl0e0h_test.go:27:16: undefined: sort_array_desc

    /tmp/tmp_ifl0e0h_test.go:29:12: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        return sort_array_desc(array)\n    } else {\n        return\
    \ sort_array_asc(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvkkrws7s_test.go:30:16: undefined: sort_array_desc

    /tmp/tmpvkkrws7s_test.go:32:16: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        return sort_array_desc(array)\n    }\n    return sort_array_asc(array)\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8babotst_test.go:30:16: undefined: sort_array_desc

    /tmp/tmp8babotst_test.go:32:12: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        // even\n        for i := 0; i < len(array) / 2; i++ {\n \
    \           array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    } else {\n        // odd\n        for i := 0; i < len(array) /\
    \ 2; i++ {\n            array[i], array[len(array) - 1 - i] = array[len(array)\
    \ - 1 - i], array[i]\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp2od4ab4u_test.go:62: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp2od4ab4u_test.go:62: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmp2od4ab4u_test.go:62: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp2od4ab4u_test.go:62: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) < 2 {\n        return array\n    }\n    if (array[0] + array[len(array)\
    \ - 1]) % 2 == 0 {\n        return sort_array_desc(array)\n    }\n    return sort_array_asc(array)\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdi7t5uex_test.go:27:16: undefined: sort_array_desc

    /tmp/tmpdi7t5uex_test.go:29:12: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) < 2 {\n        return array\n    }\n    if (array[0] + array[len(array)\
    \ - 1]) % 2 == 0 {\n        return sort_array_desc(array)\n    }\n    return sort_array_asc(array)\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdi7t5uex_test.go:27:16: undefined: sort_array_desc

    /tmp/tmpdi7t5uex_test.go:29:12: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        return sort_array_desc(array)\n    }\n    return sort_array_asc(array)\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8babotst_test.go:30:16: undefined: sort_array_desc

    /tmp/tmp8babotst_test.go:32:12: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        return sort_array_desc(array)\n    } else {\n        return\
    \ sort_array_asc(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvkkrws7s_test.go:30:16: undefined: sort_array_desc

    /tmp/tmpvkkrws7s_test.go:32:16: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        return sort_array_desc(array)\n    } else {\n        return\
    \ sort_array_asc(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvkkrws7s_test.go:30:16: undefined: sort_array_desc

    /tmp/tmpvkkrws7s_test.go:32:16: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        return sort_desc(array)\n    } else {\n        return sort_asc(array)\n\
    \    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptw3u8nvy_test.go:30:16: undefined: sort_desc

    /tmp/tmptw3u8nvy_test.go:32:16: undefined: sort_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        return sort_array_desc(array)\n    } else {\n        return\
    \ sort_array_asc(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvkkrws7s_test.go:30:16: undefined: sort_array_desc

    /tmp/tmpvkkrws7s_test.go:32:16: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        return sort_array_desc(array)\n    }\n    return sort_array_asc(array)\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8babotst_test.go:30:16: undefined: sort_array_desc

    /tmp/tmp8babotst_test.go:32:12: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n\n    if len(array) ==\
    \ 1 {\n        return array\n    }\n\n    if (array[0] + array[len(array) - 1])\
    \ % 2 == 0 {\n        // even\n        for i := 0; i < len(array) / 2; i++ {\n\
    \            array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i],\
    \ array[i]\n        }\n    } else {\n        // odd\n        for i := 0; i < len(array)\
    \ / 2; i++ {\n            if array[i] > array[len(array) - 1 - i] {\n        \
    \        array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \            }\n        }\n    }\n\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmples72qnz_test.go:67: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmples72qnz_test.go:67: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmples72qnz_test.go:67: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmples72qnz_test.go:67: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) <= 1 {\n        return array\n    }\n    if (array[0] + array[len(array)\
    \ - 1]) % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n          \
    \  array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpcmiw9bq9_test.go:53: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpcmiw9bq9_test.go:53: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpcmiw9bq9_test.go:53: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpcmiw9bq9_test.go:53: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpcmiw9bq9_test.go:53: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if len(array) == 2 {\n        if (array[0]\
    \ + array[1]) % 2 == 0 {\n            array[0], array[1] = array[1], array[0]\n\
    \        }\n        return array\n    }\n    if (array[0] + array[len(array) -\
    \ 1]) % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmppq2n_zfv_test.go:62: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmppq2n_zfv_test.go:62: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmppq2n_zfv_test.go:62: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmppq2n_zfv_test.go:62: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmppq2n_zfv_test.go:62: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        return sort_array_desc(array)\n    }\n    return sort_array_asc(array)\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8babotst_test.go:30:16: undefined: sort_array_desc

    /tmp/tmp8babotst_test.go:32:12: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        return sort_array_desc(array)\n    } else {\n        return\
    \ sort_array_asc(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvkkrws7s_test.go:30:16: undefined: sort_array_desc

    /tmp/tmpvkkrws7s_test.go:32:16: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        return sort_array_descending(array)\n    }\n    return sort_array_ascending(array)\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo0ut5iuq_test.go:30:16: undefined: sort_array_descending

    /tmp/tmpo0ut5iuq_test.go:32:12: undefined: sort_array_ascending

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        return sort_array_desc(array)\n    } else {\n        return\
    \ sort_array_asc(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvkkrws7s_test.go:30:16: undefined: sort_array_desc

    /tmp/tmpvkkrws7s_test.go:32:16: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        return sort_desc(array)\n    } else {\n        return sort_asc(array)\n\
    \    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptw3u8nvy_test.go:30:16: undefined: sort_desc

    /tmp/tmptw3u8nvy_test.go:32:16: undefined: sort_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if len(array) == 2 {\n        if array[0]\
    \ > array[1] {\n            array[0], array[1] = array[1], array[0]\n        }\n\
    \        return array\n    }\n    if (array[0] + array[len(array) - 1]) % 2 ==\
    \ 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i], array[len(array)\
    \ - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n    }\n    for i\
    \ := 0; i < len(array) - 1; i++ {\n        for j := i + 1; j < len(array); j++\
    \ {\n            if array[i] > array[j] {\n                array[i], array[j]\
    \ = array[j], array[i]\n            }\n        }\n    }\n    return array\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__3\
    \ (0.00s)\n        tmp_3p0wj2f_test.go:69: expected '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_3p0wj2f_test.go:69: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=21) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        return sort_array_desc(array)\n    }\n    return sort_array_asc(array)\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8babotst_test.go:30:16: undefined: sort_array_desc

    /tmp/tmp8babotst_test.go:32:12: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if len(array) == 2 {\n        if array[0]\
    \ > array[1] {\n            array[0], array[1] = array[1], array[0]\n        }\n\
    \        return array\n    }\n    if (array[0] + array[len(array) - 1]) % 2 ==\
    \ 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i], array[len(array)\
    \ - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n    }\n    for i\
    \ := 0; i < len(array) - 1; i++ {\n        for j := i + 1; j < len(array); j++\
    \ {\n            if array[i] > array[j] {\n                array[i], array[j]\
    \ = array[j], array[i]\n            }\n        }\n    }\n    return array\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__3\
    \ (0.00s)\n        tmp_3p0wj2f_test.go:69: expected '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_3p0wj2f_test.go:69: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=21) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n\n    if len(array) ==\
    \ 1 {\n        return array\n    }\n\n    if array[0] + array[len(array) - 1]\
    \ % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpvvqx6c4g_test.go:59: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpvvqx6c4g_test.go:59: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpvvqx6c4g_test.go:59: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpvvqx6c4g_test.go:59: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpvvqx6c4g_test.go:59: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) < 2 {\n        return array\n    }\n    if (array[0] + array[len(array)\
    \ - 1]) % 2 == 0 {\n        return sort_desc(array)\n    }\n    return sort_asc(array)\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9io7l74_test.go:27:16: undefined: sort_desc

    /tmp/tmpv9io7l74_test.go:29:12: undefined: sort_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) < 2 {\n        return array\n    }\n    if (array[0] + array[len(array)\
    \ - 1]) % 2 == 0 {\n        return sort_array_desc(array)\n    }\n    return sort_array_asc(array)\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdi7t5uex_test.go:27:16: undefined: sort_array_desc

    /tmp/tmpdi7t5uex_test.go:29:12: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) < 2 {\n        return array\n    }\n    if (array[0] + array[len(array)\
    \ - 1]) % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n          \
    \  array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpsoz3jzma_test.go:53: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpsoz3jzma_test.go:53: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpsoz3jzma_test.go:53: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpsoz3jzma_test.go:53: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpsoz3jzma_test.go:53: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        return sort_array_desc(array)\n    } else {\n        return\
    \ sort_array_asc(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvkkrws7s_test.go:30:16: undefined: sort_array_desc

    /tmp/tmpvkkrws7s_test.go:32:16: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        return sort_array_desc(array)\n    } else {\n        return\
    \ sort_array_asc(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvkkrws7s_test.go:30:16: undefined: sort_array_desc

    /tmp/tmpvkkrws7s_test.go:32:16: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if len(array) == 2 {\n        if array[0]\
    \ > array[1] {\n            array[0], array[1] = array[1], array[0]\n        }\n\
    \        return array\n    }\n    if (array[0] + array[len(array) - 1]) % 2 ==\
    \ 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i], array[len(array)\
    \ - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n    }\n    for i\
    \ := 0; i < len(array) - 1; i++ {\n        for j := i + 1; j < len(array); j++\
    \ {\n            if array[i] > array[j] {\n                array[i], array[j]\
    \ = array[j], array[i]\n            }\n        }\n    }\n    return array\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__3\
    \ (0.00s)\n        tmp_3p0wj2f_test.go:69: expected '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_3p0wj2f_test.go:69: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=21) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) <= 1 {\n        return array\n    }\n    if (array[0] + array[len(array)\
    \ - 1]) % 2 == 0 {\n        return sort_array_desc(array)\n    }\n    return sort_array_asc(array)\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_ifl0e0h_test.go:27:16: undefined: sort_array_desc

    /tmp/tmp_ifl0e0h_test.go:29:12: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        // even\n        for i := 0; i < len(array) / 2; i++ {\n \
    \           array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    } else {\n        // odd\n        for i := 0; i < len(array) /\
    \ 2; i++ {\n            array[i], array[len(array) - 1 - i] = array[len(array)\
    \ - 1 - i], array[i]\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp2od4ab4u_test.go:62: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp2od4ab4u_test.go:62: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmp2od4ab4u_test.go:62: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp2od4ab4u_test.go:62: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        // even\n        for i := 0; i < len(array) / 2; i++ {\n   \
    \         array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    } else {\n        // odd\n        for i := 0; i < len(array) /\
    \ 2; i++ {\n            array[i], array[len(array) - 1 - i] = array[len(array)\
    \ - 1 - i], array[i]\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp7wsozalw_test.go:62: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp7wsozalw_test.go:62: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmp7wsozalw_test.go:62: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp7wsozalw_test.go:62: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075016
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        return sort_array_desc(array)\n    } else {\n        return\
    \ sort_array_asc(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvkkrws7s_test.go:30:16: undefined: sort_array_desc

    /tmp/tmpvkkrws7s_test.go:32:16: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if len(array) == 2 {\n        if array[0]\
    \ > array[1] {\n            array[0], array[1] = array[1], array[0]\n        }\n\
    \        return array\n    }\n    if (array[0] + array[len(array) - 1]) % 2 ==\
    \ 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i], array[len(array)\
    \ - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n    }\n    return\
    \ array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpl5mbuq4w_test.go:62: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpl5mbuq4w_test.go:62: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpl5mbuq4w_test.go:62: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpl5mbuq4w_test.go:62: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075016
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        return sort_array_desc(array)\n    } else {\n        return\
    \ sort_array_asc(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvkkrws7s_test.go:30:16: undefined: sort_array_desc

    /tmp/tmpvkkrws7s_test.go:32:16: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) <= 1 {\n        return array\n    }\n    if (array[0] + array[len(array)\
    \ - 1]) % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n          \
    \  array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpcmiw9bq9_test.go:53: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpcmiw9bq9_test.go:53: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpcmiw9bq9_test.go:53: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpcmiw9bq9_test.go:53: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpcmiw9bq9_test.go:53: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        return sort_array_desc(array)\n    } else {\n        return\
    \ sort_array_asc(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvkkrws7s_test.go:30:16: undefined: sort_array_desc

    /tmp/tmpvkkrws7s_test.go:32:16: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if len(array) == 2 {\n        if array[0]\
    \ > array[1] {\n            array[0], array[1] = array[1], array[0]\n        }\n\
    \        return array\n    }\n    if (array[0] + array[len(array) - 1]) % 2 ==\
    \ 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i], array[len(array)\
    \ - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n    }\n    for i\
    \ := 0; i < len(array) - 1; i++ {\n        for j := 0; j < len(array) - 1 - i;\
    \ j++ {\n            if array[j] > array[j + 1] {\n                array[j], array[j\
    \ + 1] = array[j + 1], array[j]\n            }\n        }\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__3\
    \ (0.00s)\n        tmpqehf9wai_test.go:69: expected '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpqehf9wai_test.go:69: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=21) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        // even\n        for i := 0; i < len(array) / 2; i++ {\n \
    \           array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    } else {\n        // odd\n        for i := 0; i < len(array) /\
    \ 2; i++ {\n            array[i], array[len(array) - 1 - i] = array[len(array)\
    \ - 1 - i], array[i]\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp2od4ab4u_test.go:62: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp2od4ab4u_test.go:62: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmp2od4ab4u_test.go:62: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp2od4ab4u_test.go:62: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) <= 1 {\n        return array\n    }\n    if (array[0] + array[len(array)\
    \ - 1]) % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n          \
    \  array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpcmiw9bq9_test.go:53: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpcmiw9bq9_test.go:53: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpcmiw9bq9_test.go:53: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpcmiw9bq9_test.go:53: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpcmiw9bq9_test.go:53: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        return sort_array_desc(array)\n    } else {\n        return\
    \ sort_array_asc(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvkkrws7s_test.go:30:16: undefined: sort_array_desc

    /tmp/tmpvkkrws7s_test.go:32:16: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        // even\n        for i := 0; i < len(array) / 2; i++ {\n \
    \           array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    } else {\n        // odd\n        for i := 0; i < len(array) /\
    \ 2; i++ {\n            array[i], array[len(array) - 1 - i] = array[len(array)\
    \ - 1 - i], array[i]\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp2od4ab4u_test.go:62: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp2od4ab4u_test.go:62: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmp2od4ab4u_test.go:62: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp2od4ab4u_test.go:62: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        return sort_array_desc(array)\n    } else {\n        return\
    \ sort_array_asc(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvkkrws7s_test.go:30:16: undefined: sort_array_desc

    /tmp/tmpvkkrws7s_test.go:32:16: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        return sort_array_desc(array)\n    } else {\n        return\
    \ sort_array_asc(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvkkrws7s_test.go:30:16: undefined: sort_array_desc

    /tmp/tmpvkkrws7s_test.go:32:16: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if len(array) == 2 {\n        if (array[0]\
    \ + array[1]) % 2 == 0 {\n            return []int{array[1], array[0]}\n     \
    \   } else {\n            return array\n        }\n    }\n    if (array[0] + array[len(array)\
    \ - 1]) % 2 == 0 {\n        return append(sort_array(array[1:]), array[0])\n \
    \   } else {\n        return append(array[:1], sort_array(array[1:])...)\n   \
    \ }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp6wnt8x7l_test.go:62: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=0) %!s(int=5)\
    \ %!s(int=1) %!s(int=3)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp6wnt8x7l_test.go:62: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=3) %!s(int=1) %!s(int=5) %!s(int=6)\
    \ %!s(int=0) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6wnt8x7l_test.go:62: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp6wnt8x7l_test.go:62: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=87) %!s(int=11)\
    \ %!s(int=0) %!s(int=32) %!s(int=42)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp6wnt8x7l_test.go:62: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=14) %!s(int=11) %!s(int=23) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075016
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        return sort_array_desc(array)\n    } else {\n        return\
    \ sort_array_asc(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvkkrws7s_test.go:30:16: undefined: sort_array_desc

    /tmp/tmpvkkrws7s_test.go:32:16: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        // even\n        for i := 0; i < len(array) / 2; i++ {\n \
    \           array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    } else {\n        // odd\n        for i := 0; i < len(array) /\
    \ 2; i++ {\n            array[i], array[len(array) - 1 - i] = array[len(array)\
    \ - 1 - i], array[i]\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp2od4ab4u_test.go:62: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp2od4ab4u_test.go:62: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmp2od4ab4u_test.go:62: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp2od4ab4u_test.go:62: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        return sort_array_desc(array)\n    } else {\n        return\
    \ sort_array_asc(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvkkrws7s_test.go:30:16: undefined: sort_array_desc

    /tmp/tmpvkkrws7s_test.go:32:16: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        return sort_array_desc(array)\n    } else {\n        return\
    \ sort_array_asc(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvkkrws7s_test.go:30:16: undefined: sort_array_desc

    /tmp/tmpvkkrws7s_test.go:32:16: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        return sort_array_desc(array)\n    }\n    return sort_array_asc(array)\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8babotst_test.go:30:16: undefined: sort_array_desc

    /tmp/tmp8babotst_test.go:32:12: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) <= 1 {\n        return array\n    }\n    if (array[0] + array[len(array)\
    \ - 1]) % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n          \
    \  array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpcmiw9bq9_test.go:53: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpcmiw9bq9_test.go:53: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpcmiw9bq9_test.go:53: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpcmiw9bq9_test.go:53: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpcmiw9bq9_test.go:53: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) <= 1 {\n        return array\n    }\n    if (array[0] + array[len(array)\
    \ - 1]) % 2 == 0 {\n        return sort_array_desc(array)\n    }\n    return sort_array_asc(array)\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_ifl0e0h_test.go:27:16: undefined: sort_array_desc

    /tmp/tmp_ifl0e0h_test.go:29:12: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        return sort_array_desc(array)\n    } else {\n        return\
    \ sort_array_asc(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvkkrws7s_test.go:30:16: undefined: sort_array_desc

    /tmp/tmpvkkrws7s_test.go:32:16: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if len(array) == 2 {\n        if array[0]\
    \ > array[1] {\n            array[0], array[1] = array[1], array[0]\n        }\n\
    \        return array\n    }\n    if (array[0] + array[len(array) - 1]) % 2 ==\
    \ 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i], array[len(array)\
    \ - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n    }\n    return\
    \ array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpl5mbuq4w_test.go:62: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpl5mbuq4w_test.go:62: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpl5mbuq4w_test.go:62: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpl5mbuq4w_test.go:62: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075016
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        return sort_array_desc(array)\n    }\n    return sort_array_asc(array)\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8babotst_test.go:30:16: undefined: sort_array_desc

    /tmp/tmp8babotst_test.go:32:12: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        // even\n        for i := 0; i < len(array) / 2; i++ {\n \
    \           array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    } else {\n        // odd\n        for i := 0; i < len(array) /\
    \ 2; i++ {\n            array[i], array[len(array) - 1 - i] = array[len(array)\
    \ - 1 - i], array[i]\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp2od4ab4u_test.go:62: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp2od4ab4u_test.go:62: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmp2od4ab4u_test.go:62: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp2od4ab4u_test.go:62: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        return sort_array_desc(array)\n    } else {\n        return\
    \ sort_array_asc(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvkkrws7s_test.go:30:16: undefined: sort_array_desc

    /tmp/tmpvkkrws7s_test.go:32:16: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        return sort_array_desc(array)\n    } else {\n        return\
    \ sort_array_asc(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvkkrws7s_test.go:30:16: undefined: sort_array_desc

    /tmp/tmpvkkrws7s_test.go:32:16: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   // TODO: implement this function\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpvy1ws0gq_test.go:46: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpvy1ws0gq_test.go:46: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpvy1ws0gq_test.go:46: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpvy1ws0gq_test.go:46: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpvy1ws0gq_test.go:46: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075016
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) < 2 {\n        return array\n    }\n    if (array[0] + array[len(array)\
    \ - 1]) % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n          \
    \  array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpsoz3jzma_test.go:53: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpsoz3jzma_test.go:53: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpsoz3jzma_test.go:53: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpsoz3jzma_test.go:53: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpsoz3jzma_test.go:53: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        return sort_array_desc(array)\n    } else {\n        return\
    \ sort_array_asc(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvkkrws7s_test.go:30:16: undefined: sort_array_desc

    /tmp/tmpvkkrws7s_test.go:32:16: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        return sort_array_desc(array)\n    } else {\n        return\
    \ sort_array_asc(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvkkrws7s_test.go:30:16: undefined: sort_array_desc

    /tmp/tmpvkkrws7s_test.go:32:16: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if len(array) == 2 {\n        if array[0]\
    \ > array[1] {\n            array[0], array[1] = array[1], array[0]\n        }\n\
    \        return array\n    }\n    if (array[0] + array[len(array) - 1]) % 2 ==\
    \ 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i], array[len(array)\
    \ - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n    }\n    for i\
    \ := 0; i < len(array) - 1; i++ {\n        for j := i + 1; j < len(array); j++\
    \ {\n            if array[i] > array[j] {\n                array[i], array[j]\
    \ = array[j], array[i]\n            }\n        }\n    }\n    return array\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__3\
    \ (0.00s)\n        tmp_3p0wj2f_test.go:69: expected '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_3p0wj2f_test.go:69: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=21) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        // descending\n        for i := 0; i < len(array) - 1; i++ {\n\
    \            for j := i + 1; j < len(array); j++ {\n                if array[i]\
    \ < array[j] {\n                    array[i], array[j] = array[j], array[i]\n\
    \                }\n            }\n        }\n    } else {\n        // ascending\n\
    \        for i := 0; i < len(array) - 1; i++ {\n            for j := i + 1; j\
    \ < len(array); j++ {\n                if array[i] > array[j] {\n            \
    \        array[i], array[j] = array[j], array[i]\n                }\n        \
    \    }\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__3\
    \ (0.00s)\n        tmp41toevmd_test.go:70: expected '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp41toevmd_test.go:70: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=21) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075016
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if len(array) == 2 {\n        if array[0]\
    \ > array[1] {\n            array[0], array[1] = array[1], array[0]\n        }\n\
    \        return array\n    }\n    if (array[0] + array[len(array) - 1]) % 2 ==\
    \ 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i], array[len(array)\
    \ - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n    }\n    for i\
    \ := 0; i < len(array) - 1; i++ {\n        for j := i + 1; j < len(array); j++\
    \ {\n            if array[i] > array[j] {\n                array[i], array[j]\
    \ = array[j], array[i]\n            }\n        }\n    }\n    return array\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__3\
    \ (0.00s)\n        tmp_3p0wj2f_test.go:69: expected '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_3p0wj2f_test.go:69: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=21) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        return sort_array_desc(array)\n    } else {\n        return\
    \ sort_array_asc(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvkkrws7s_test.go:30:16: undefined: sort_array_desc

    /tmp/tmpvkkrws7s_test.go:32:16: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        return sort_array_desc(array)\n    } else {\n        return\
    \ sort_array_asc(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvkkrws7s_test.go:30:16: undefined: sort_array_desc

    /tmp/tmpvkkrws7s_test.go:32:16: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) <= 1 {\n        return array\n    }\n    if (array[0] + array[len(array)\
    \ - 1]) % 2 == 0 {\n        return sort_array_desc(array)\n    }\n    return sort_array_asc(array)\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_ifl0e0h_test.go:27:16: undefined: sort_array_desc

    /tmp/tmp_ifl0e0h_test.go:29:12: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        return sort_array_descending(array)\n    }\n    return sort_array_ascending(array)\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo0ut5iuq_test.go:30:16: undefined: sort_array_descending

    /tmp/tmpo0ut5iuq_test.go:32:12: undefined: sort_array_ascending

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if len(array) == 2 {\n        if (array[0]\
    \ + array[1]) % 2 == 0 {\n            if array[0] < array[1] {\n             \
    \   array[0], array[1] = array[1], array[0]\n            }\n        } else {\n\
    \            if array[0] > array[1] {\n                array[0], array[1] = array[1],\
    \ array[0]\n            }\n        }\n        return array\n    }\n    if (array[0]\
    \ + array[len(array) - 1]) % 2 == 0 {\n        for i := 0; i < len(array) / 2;\
    \ i++ {\n            array[i], array[len(array) - 1 - i] = array[len(array) -\
    \ 1 - i], array[i]\n        }\n    }\n    for i := 0; i < len(array) - 1; i++\
    \ {\n        for j := i + 1; j < len(array); j++ {\n            if array[i] >\
    \ array[j] {\n                array[i], array[j] = array[j], array[i]\n      \
    \      }\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__3\
    \ (0.00s)\n        tmpqf1we421_test.go:75: expected '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpqf1we421_test.go:75: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=21) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075016
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n\n    if len(array) ==\
    \ 1 {\n        return array\n    }\n\n    if array[0] + array[len(array) - 1]\
    \ % 2 == 0 {\n        // even\n        for i := 0; i < len(array) / 2; i++ {\n\
    \            array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i],\
    \ array[i]\n        }\n    } else {\n        // odd\n        for i := 0; i < len(array)\
    \ / 2; i++ {\n            array[i], array[len(array) - 1 - i] = array[len(array)\
    \ - 1 - i], array[i]\n        }\n    }\n\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpu0jm9j7x_test.go:65: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpu0jm9j7x_test.go:65: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpu0jm9j7x_test.go:65: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpu0jm9j7x_test.go:65: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075016
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        return sort_array_desc(array)\n    }\n    return sort_array_asc(array)\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8babotst_test.go:30:16: undefined: sort_array_desc

    /tmp/tmp8babotst_test.go:32:12: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if len(array) == 2 {\n        if (array[0]\
    \ + array[1]) % 2 == 0 {\n            return []int{array[1], array[0]}\n     \
    \   } else {\n            return array\n        }\n    }\n    if (array[0] + array[len(array)\
    \ - 1]) % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n          \
    \  array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp106eeepu_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp106eeepu_test.go:63: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp106eeepu_test.go:63: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp106eeepu_test.go:63: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp106eeepu_test.go:63: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075016
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if len(array) == 2 {\n        if array[0]\
    \ > array[1] {\n            array[0], array[1] = array[1], array[0]\n        }\n\
    \        return array\n    }\n    if (array[0] + array[len(array) - 1]) % 2 ==\
    \ 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i], array[len(array)\
    \ - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n    }\n    for i\
    \ := 0; i < len(array) - 1; i++ {\n        for j := i + 1; j < len(array); j++\
    \ {\n            if array[i] > array[j] {\n                array[i], array[j]\
    \ = array[j], array[i]\n            }\n        }\n    }\n    return array\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__3\
    \ (0.00s)\n        tmp_3p0wj2f_test.go:69: expected '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_3p0wj2f_test.go:69: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=21) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        return sort_array_desc(array)\n    } else {\n        return\
    \ sort_array_asc(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvkkrws7s_test.go:30:16: undefined: sort_array_desc

    /tmp/tmpvkkrws7s_test.go:32:16: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        return sort_array_desc(array)\n    } else {\n        return\
    \ sort_array_asc(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvkkrws7s_test.go:30:16: undefined: sort_array_desc

    /tmp/tmpvkkrws7s_test.go:32:16: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        return sort_array_desc(array)\n    } else {\n        return\
    \ sort_array_asc(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvkkrws7s_test.go:30:16: undefined: sort_array_desc

    /tmp/tmpvkkrws7s_test.go:32:16: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if len(array) == 2 {\n        if array[0]\
    \ > array[1] {\n            array[0], array[1] = array[1], array[0]\n        }\n\
    \        return array\n    }\n    if (array[0] + array[len(array) - 1]) % 2 ==\
    \ 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i], array[len(array)\
    \ - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n    }\n    return\
    \ array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpl5mbuq4w_test.go:62: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpl5mbuq4w_test.go:62: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpl5mbuq4w_test.go:62: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpl5mbuq4w_test.go:62: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075016
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp_0y986qm_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_0y986qm_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        return sort_array_desc(array)\n    }\n    return sort_array_asc(array)\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8babotst_test.go:30:16: undefined: sort_array_desc

    /tmp/tmp8babotst_test.go:32:12: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        return sort_array_desc(array)\n    } else {\n        return\
    \ sort_array_asc(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvkkrws7s_test.go:30:16: undefined: sort_array_desc

    /tmp/tmpvkkrws7s_test.go:32:16: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        return sort_array_desc(array)\n    } else {\n        return\
    \ sort_array_asc(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvkkrws7s_test.go:30:16: undefined: sort_array_desc

    /tmp/tmpvkkrws7s_test.go:32:16: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        return sort_array_desc(array)\n    }\n    return sort_array_asc(array)\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8babotst_test.go:30:16: undefined: sort_array_desc

    /tmp/tmp8babotst_test.go:32:12: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        return sort_array_desc(array)\n    } else {\n        return\
    \ sort_array_asc(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvkkrws7s_test.go:30:16: undefined: sort_array_desc

    /tmp/tmpvkkrws7s_test.go:32:16: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n\
    // >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5,\
    \ 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n \
    \   if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpegb9bu99_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpegb9bu99_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
