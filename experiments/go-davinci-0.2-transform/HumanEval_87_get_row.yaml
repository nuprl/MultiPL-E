name: HumanEval_87_get_row
language: go_test.go
prompt: "package get_row_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You\
  \ are given a 2 dimensional data, as a nested lists,\n// which is similar to matrix,\
  \ however, unlike matrices,\n// each row may contain a different number of columns.\n\
  // Given lst, and integer x, find integers x in the list,\n// and return list of\
  \ tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple is a coordinate - (row,\
  \ columns), starting with 0.\n// Sort coordinates initially by rows in ascending\
  \ order.\n// Also, sort coordinates of the row by columns in descending order.\n\
  // Examples:\n// >>> get_row([][]int{[]int{1, 2, 3, 4, 5, 6}, []int{1, 2, 3, 4,\
  \ 1, 6}, []int{1, 2, 3, 4, 5, 1}}, 1)\n// [][]int{[]interface{}{0, 0}, []interface{}{1,\
  \ 4}, []interface{}{1, 0}, []interface{}{2, 5}, []interface{}{2, 0}}\n// >>> get_row([][]int{},\
  \ 1)\n// [][]interface{}{}\n// >>> get_row([]interface{}{[]interface{}{}, []int{1},\
  \ []int{1, 2, 3}}, 3)\n// [][]int{[]interface{}{2, 2}}\nfunc get_row(lst [][]int,\
  \ x int) [][]interface{} {\n"
tests: "func TestGet_Row(t *testing.T) {\n  candidate := get_row\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5, 6}, []int{1, 2, 3, 4, 1,\
  \ 6}, []int{1, 2, 3, 4, 5, 1}}, 1), expected: [][]int{[]interface{}{0, 0}, []interface{}{1,\
  \ 4}, []interface{}{1, 0}, []interface{}{2, 5}, []interface{}{2, 0}} },\n     {\
  \ actual: candidate([][]int{[]int{1, 2, 3, 4, 5, 6}, []int{1, 2, 3, 4, 5, 6}, []int{1,\
  \ 2, 3, 4, 5, 6}, []int{1, 2, 3, 4, 5, 6}, []int{1, 2, 3, 4, 5, 6}, []int{1, 2,\
  \ 3, 4, 5, 6}}, 2), expected: [][]int{[]interface{}{0, 1}, []interface{}{1, 1},\
  \ []interface{}{2, 1}, []interface{}{3, 1}, []interface{}{4, 1}, []interface{}{5,\
  \ 1}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5, 6}, []int{1, 2,\
  \ 3, 4, 5, 6}, []int{1, 1, 3, 4, 5, 6}, []int{1, 2, 1, 4, 5, 6}, []int{1, 2, 3,\
  \ 1, 5, 6}, []int{1, 2, 3, 4, 1, 6}, []int{1, 2, 3, 4, 5, 1}}, 1), expected: [][]int{[]interface{}{0,\
  \ 0}, []interface{}{1, 0}, []interface{}{2, 1}, []interface{}{2, 0}, []interface{}{3,\
  \ 2}, []interface{}{3, 0}, []interface{}{4, 3}, []interface{}{4, 0}, []interface{}{5,\
  \ 4}, []interface{}{5, 0}, []interface{}{6, 5}, []interface{}{6, 0}} },\n     {\
  \ actual: candidate([][]int{}, 1), expected: [][]interface{}{} },\n     { actual:\
  \ candidate([][]int{[]int{1}}, 2), expected: [][]interface{}{} },\n     { actual:\
  \ candidate([]interface{}{[]interface{}{}, []int{1}, []int{1, 2, 3}}, 3), expected:\
  \ [][]int{[]interface{}{2, 2}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var res [][]interface{}\n    for i, row := range lst {\n      \
    \  for j, item := range row {\n            if item == x {\n                res\
    \ = append(res, []interface{}{i, j})\n            }\n        }\n    }\n    return\
    \ res\n}\n", "    var res [][]interface{}\n    for i, row := range lst {\n   \
    \     for j, val := range row {\n            if val == x {\n                res\
    \ = append(res, []interface{}{i, j})\n            }\n        }\n    }\n    return\
    \ res\n}\n", "    var result [][]interface{}\n    for i, row := range lst {\n\
    \        for j, item := range row {\n            if item == x {\n            \
    \    result = append(result, []interface{}{i, j})\n            }\n        }\n\
    \    }\n    return result\n}\n", "    var result [][]interface{}\n    for i, row\
    \ := range lst {\n        for j, val := range row {\n            if val == x {\n\
    \                result = append(result, []interface{}{i, j})\n            }\n\
    \        }\n    }\n    return result\n}\n", "    var res [][]interface{}\n   \
    \ for i, row := range lst {\n        for j, col := range row {\n            if\
    \ col == x {\n                res = append(res, []interface{}{i, j})\n       \
    \     }\n        }\n    }\n    return res\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, val := range row {\n          \
    \  if val == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, col := range row {\n          \
    \  if col == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, item := range row {\n         \
    \   if item == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, item := range row {\n         \
    \   if item == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, elem := range row {\n         \
    \   if elem == x {\n                res = append(res, []interface{}{i, j})\n \
    \           }\n        }\n    }\n    return res\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, val := range row {\n          \
    \  if val == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, val := range row {\n          \
    \  if val == x {\n                res = append(res, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return res\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, item := range row {\n         \
    \   if item == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, col := range row {\n          \
    \  if col == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, v := range row {\n            if\
    \ v == x {\n                result = append(result, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return result\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, item := range row {\n         \
    \   if item == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, col := range row {\n          \
    \  if col == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, val := range row {\n          \
    \  if val == x {\n                res = append(res, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return res\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, val := range row {\n          \
    \  if val == x {\n                res = append(res, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return res\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, item := range row {\n         \
    \   if item == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, item := range row {\n         \
    \   if item == x {\n                res = append(res, []interface{}{i, j})\n \
    \           }\n        }\n    }\n    return res\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, cell := range row {\n         \
    \   if cell == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, val := range row {\n          \
    \  if val == x {\n                res = append(res, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return res\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, v := range row {\n            if\
    \ v == x {\n                result = append(result, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return result\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, val := range row {\n          \
    \  if val == x {\n                res = append(res, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return res\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, elem := range row {\n         \
    \   if elem == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, v := range row {\n            if\
    \ v == x {\n                result = append(result, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return result\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, item := range row {\n         \
    \   if item == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, v := range row {\n            if\
    \ v == x {\n                result = append(result, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return result\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, col := range row {\n          \
    \  if col == x {\n                res = append(res, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return res\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, value := range row {\n        \
    \    if value == x {\n                result = append(result, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return result\n}\n", "    var result\
    \ [][]interface{}\n    for i, row := range lst {\n        for j, col := range\
    \ row {\n            if col == x {\n                result = append(result, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return result\n}\n", "    var result\
    \ [][]interface{}\n    for i, row := range lst {\n        for j, item := range\
    \ row {\n            if item == x {\n                result = append(result, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return result\n}\n", "    var res\
    \ [][]interface{}\n    for i, row := range lst {\n        for j, col := range\
    \ row {\n            if col == x {\n                res = append(res, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return res\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, val := range row {\n          \
    \  if val == x {\n                res = append(res, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return res\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, item := range row {\n         \
    \   if item == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, val := range row {\n          \
    \  if val == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, item := range row {\n         \
    \   if item == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, column := range row {\n       \
    \     if column == x {\n                result = append(result, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return result\n}\n", "    var result\
    \ [][]interface{}\n    for i, row := range lst {\n        for j, item := range\
    \ row {\n            if item == x {\n                result = append(result, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return result\n}\n", "    var result\
    \ [][]interface{}\n    for i, row := range lst {\n        for j, value := range\
    \ row {\n            if value == x {\n                result = append(result,\
    \ []interface{}{i, j})\n            }\n        }\n    }\n    return result\n}\n",
  "    var result [][]interface{}\n    for i, row := range lst {\n        for j, v\
    \ := range row {\n            if v == x {\n                result = append(result,\
    \ []interface{}{i, j})\n            }\n        }\n    }\n    return result\n}\n",
  "    var result [][]interface{}\n    for i, row := range lst {\n        for j, item\
    \ := range row {\n            if item == x {\n                result = append(result,\
    \ []interface{}{i, j})\n            }\n        }\n    }\n    return result\n}\n",
  "    var result [][]interface{}\n    for i, row := range lst {\n        for j, item\
    \ := range row {\n            if item == x {\n                result = append(result,\
    \ []interface{}{i, j})\n            }\n        }\n    }\n    return result\n}\n",
  "    result := [][]interface{}{}\n    for i, row := range lst {\n        for j,\
    \ item := range row {\n            if item == x {\n                result = append(result,\
    \ []interface{}{i, j})\n            }\n        }\n    }\n    return result\n}\n",
  "    var res [][]interface{}\n    for i, row := range lst {\n        for j, val\
    \ := range row {\n            if val == x {\n                res = append(res,\
    \ []interface{}{i, j})\n            }\n        }\n    }\n    return res\n}\n",
  "    var res [][]interface{}\n    for i, row := range lst {\n        for j, v :=\
    \ range row {\n            if v == x {\n                res = append(res, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return res\n}\n", "    var result\
    \ [][]interface{}\n    for i, row := range lst {\n        for j, item := range\
    \ row {\n            if item == x {\n                result = append(result, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return result\n}\n", "    var result\
    \ [][]interface{}\n    for i, row := range lst {\n        for j, value := range\
    \ row {\n            if value == x {\n                result = append(result,\
    \ []interface{}{i, j})\n            }\n        }\n    }\n    return result\n}\n",
  "    var result [][]interface{}\n    for i, row := range lst {\n        for j, v\
    \ := range row {\n            if v == x {\n                result = append(result,\
    \ []interface{}{i, j})\n            }\n        }\n    }\n    return result\n}\n",
  "    var result [][]interface{}\n    for i, row := range lst {\n        for j, item\
    \ := range row {\n            if item == x {\n                result = append(result,\
    \ []interface{}{i, j})\n            }\n        }\n    }\n    return result\n}\n",
  "    var result [][]interface{}\n    for i, row := range lst {\n        for j, value\
    \ := range row {\n            if value == x {\n                result = append(result,\
    \ []interface{}{i, j})\n            }\n        }\n    }\n    return result\n}\n",
  "    var res [][]interface{}\n    for i, row := range lst {\n        for j, val\
    \ := range row {\n            if val == x {\n                res = append(res,\
    \ []interface{}{i, j})\n            }\n        }\n    }\n    return res\n}\n",
  "    var result [][]interface{}\n    for i, row := range lst {\n        for j, item\
    \ := range row {\n            if item == x {\n                result = append(result,\
    \ []interface{}{i, j})\n            }\n        }\n    }\n    return result\n}\n",
  "    var res [][]interface{}\n    for i, row := range lst {\n        for j, e :=\
    \ range row {\n            if e == x {\n                res = append(res, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return res\n}\n", "    var result\
    \ [][]interface{}\n    for i, row := range lst {\n        for j, col := range\
    \ row {\n            if col == x {\n                result = append(result, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return result\n}\n", "    var result\
    \ [][]interface{}\n    for i, row := range lst {\n        for j, col := range\
    \ row {\n            if col == x {\n                result = append(result, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return result\n}\n", "    var res\
    \ [][]interface{}\n    for i, row := range lst {\n        for j, v := range row\
    \ {\n            if v == x {\n                res = append(res, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return res\n}\n", "    var result\
    \ [][]interface{}\n    for i, row := range lst {\n        for j, item := range\
    \ row {\n            if item == x {\n                result = append(result, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return result\n}\n", "    var result\
    \ [][]interface{}\n    for i, row := range lst {\n        for j, item := range\
    \ row {\n            if item == x {\n                result = append(result, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return result\n}\n", "    var res\
    \ [][]interface{}\n    for i, row := range lst {\n        for j, val := range\
    \ row {\n            if val == x {\n                res = append(res, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return res\n}\n", "    var result\
    \ [][]interface{}\n    for i, row := range lst {\n        for j, item := range\
    \ row {\n            if item == x {\n                result = append(result, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return result\n}\n", "    var result\
    \ [][]interface{}\n    for i, row := range lst {\n        for j, col := range\
    \ row {\n            if col == x {\n                result = append(result, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return result\n}\n", "    var result\
    \ [][]interface{}\n    for i, row := range lst {\n        for j, value := range\
    \ row {\n            if value == x {\n                result = append(result,\
    \ []interface{}{i, j})\n            }\n        }\n    }\n    return result\n}\n",
  "    var result [][]interface{}\n    for i, row := range lst {\n        for j, col\
    \ := range row {\n            if col == x {\n                result = append(result,\
    \ []interface{}{i, j})\n            }\n        }\n    }\n    return result\n}\n",
  "    var res [][]interface{}\n    for i, row := range lst {\n        for j, col\
    \ := range row {\n            if col == x {\n                res = append(res,\
    \ []interface{}{i, j})\n            }\n        }\n    }\n    return res\n}\n",
  "    var res [][]interface{}\n    for i, row := range lst {\n        for j, col\
    \ := range row {\n            if col == x {\n                res = append(res,\
    \ []interface{}{i, j})\n            }\n        }\n    }\n    return res\n}\n",
  "    var res [][]interface{}\n    for i, row := range lst {\n        for j, val\
    \ := range row {\n            if val == x {\n                res = append(res,\
    \ []interface{}{i, j})\n            }\n        }\n    }\n    return res\n}\n",
  "    var result [][]interface{}\n    for i, row := range lst {\n        for j, val\
    \ := range row {\n            if val == x {\n                result = append(result,\
    \ []interface{}{i, j})\n            }\n        }\n    }\n    return result\n}\n",
  "    var res [][]interface{}\n    for i, row := range lst {\n        for j, val\
    \ := range row {\n            if val == x {\n                res = append(res,\
    \ []interface{}{i, j})\n            }\n        }\n    }\n    return res\n}\n",
  "    var res [][]interface{}\n    for i, row := range lst {\n        for j, col\
    \ := range row {\n            if col == x {\n                res = append(res,\
    \ []interface{}{i, j})\n            }\n        }\n    }\n    return res\n}\n",
  "    var result [][]interface{}\n    for i, row := range lst {\n        for j, col\
    \ := range row {\n            if col == x {\n                result = append(result,\
    \ []interface{}{i, j})\n            }\n        }\n    }\n    return result\n}\n",
  "    result := [][]interface{}{}\n    for i, row := range lst {\n        for j,\
    \ item := range row {\n            if item == x {\n                result = append(result,\
    \ []interface{}{i, j})\n            }\n        }\n    }\n    return result\n}\n",
  "    var result [][]interface{}\n    for i, row := range lst {\n        for j, item\
    \ := range row {\n            if item == x {\n                result = append(result,\
    \ []interface{}{i, j})\n            }\n        }\n    }\n    return result\n}\n",
  "    var res [][]interface{}\n    for i, row := range lst {\n        for j, v :=\
    \ range row {\n            if v == x {\n                res = append(res, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return res\n}\n", "    var result\
    \ [][]interface{}\n    for i, row := range lst {\n        for j, val := range\
    \ row {\n            if val == x {\n                result = append(result, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return result\n}\n", "    var res\
    \ [][]interface{}\n    for i, row := range lst {\n        for j, elem := range\
    \ row {\n            if elem == x {\n                res = append(res, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return res\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, item := range row {\n         \
    \   if item == x {\n                res = append(res, []interface{}{i, j})\n \
    \           }\n        }\n    }\n    return res\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, val := range row {\n          \
    \  if val == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, item := range row {\n         \
    \   if item == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, val := range row {\n          \
    \  if val == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, val := range row {\n          \
    \  if val == x {\n                res = append(res, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return res\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, item := range row {\n         \
    \   if item == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, value := range row {\n        \
    \    if value == x {\n                result = append(result, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return result\n}\n", "    var result\
    \ [][]interface{}\n    for i, row := range lst {\n        for j, v := range row\
    \ {\n            if v == x {\n                result = append(result, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return result\n}\n", "    var res\
    \ [][]interface{}\n    for i, row := range lst {\n        for j, e := range row\
    \ {\n            if e == x {\n                res = append(res, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return res\n}\n", "    var result\
    \ [][]interface{}\n    for i, row := range lst {\n        for j, item := range\
    \ row {\n            if item == x {\n                result = append(result, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return result\n}\n", "    var result\
    \ [][]interface{}\n    for i, row := range lst {\n        for j, item := range\
    \ row {\n            if item == x {\n                result = append(result, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return result\n}\n", "    var res\
    \ [][]interface{}\n    for i, row := range lst {\n        for j, val := range\
    \ row {\n            if val == x {\n                res = append(res, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return res\n}\n", "    var result\
    \ [][]interface{}\n    for i, row := range lst {\n        for j, item := range\
    \ row {\n            if item == x {\n                result = append(result, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return result\n}\n", "    var result\
    \ [][]interface{}\n    for i, row := range lst {\n        for j, item := range\
    \ row {\n            if item == x {\n                result = append(result, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return result\n}\n", "    var result\
    \ [][]interface{}\n    for i, row := range lst {\n        for j, col := range\
    \ row {\n            if col == x {\n                result = append(result, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return result\n}\n", "    var result\
    \ [][]interface{}\n    for i, row := range lst {\n        for j, item := range\
    \ row {\n            if item == x {\n                result = append(result, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return result\n}\n", "    var res\
    \ [][]interface{}\n    for i, row := range lst {\n        for j, col := range\
    \ row {\n            if col == x {\n                res = append(res, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return res\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, val := range row {\n          \
    \  if val == x {\n                res = append(res, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return res\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, v := range row {\n            if\
    \ v == x {\n                result = append(result, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return result\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, item := range row {\n         \
    \   if item == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, item := range row {\n         \
    \   if item == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, cell := range row {\n         \
    \   if cell == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, col := range row {\n          \
    \  if col == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, v := range row {\n            if\
    \ v == x {\n                res = append(res, []interface{}{i, j})\n         \
    \   }\n        }\n    }\n    return res\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, val := range row {\n          \
    \  if val == x {\n                res = append(res, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return res\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, item := range row {\n         \
    \   if item == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, item := range row {\n         \
    \   if item == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, val := range row {\n          \
    \  if val == x {\n                res = append(res, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return res\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, col := range row {\n          \
    \  if col == x {\n                res = append(res, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return res\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, item := range row {\n         \
    \   if item == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, val := range row {\n          \
    \  if val == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, item := range row {\n         \
    \   if item == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, item := range row {\n         \
    \   if item == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, val := range row {\n          \
    \  if val == x {\n                res = append(res, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return res\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, item := range row {\n         \
    \   if item == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, v := range row {\n            if\
    \ v == x {\n                res = append(res, []interface{}{i, j})\n         \
    \   }\n        }\n    }\n    return res\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, val := range row {\n          \
    \  if val == x {\n                res = append(res, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return res\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, col := range row {\n          \
    \  if col == x {\n                res = append(res, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return res\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, val := range row {\n          \
    \  if val == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, col := range row {\n          \
    \  if col == x {\n                res = append(res, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return res\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, val := range row {\n          \
    \  if val == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    res := [][]interface{}{}\n\
    \    for i, row := range lst {\n        for j, col := range row {\n          \
    \  if col == x {\n                res = append(res, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return res\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, value := range row {\n        \
    \    if value == x {\n                result = append(result, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return result\n}\n", "    var res\
    \ [][]interface{}\n    for i, row := range lst {\n        for j, val := range\
    \ row {\n            if val == x {\n                res = append(res, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return res\n}\n", "    var result\
    \ [][]interface{}\n    for i, row := range lst {\n        for j, val := range\
    \ row {\n            if val == x {\n                result = append(result, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return result\n}\n", "    var result\
    \ [][]interface{}\n    for i, row := range lst {\n        for j, cell := range\
    \ row {\n            if cell == x {\n                result = append(result, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return result\n}\n", "    res := [][]interface{}{}\n\
    \    for i, row := range lst {\n        for j, val := range row {\n          \
    \  if val == x {\n                res = append(res, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return res\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, val := range row {\n          \
    \  if val == x {\n                res = append(res, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return res\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, val := range row {\n          \
    \  if val == x {\n                res = append(res, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return res\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, v := range row {\n            if\
    \ v == x {\n                res = append(res, []interface{}{i, j})\n         \
    \   }\n        }\n    }\n    return res\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, val := range row {\n          \
    \  if val == x {\n                res = append(res, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return res\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, e := range row {\n            if\
    \ e == x {\n                res = append(res, []interface{}{i, j})\n         \
    \   }\n        }\n    }\n    return res\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, val := range row {\n          \
    \  if val == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, val := range row {\n          \
    \  if val == x {\n                res = append(res, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return res\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, val := range row {\n          \
    \  if val == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, val := range row {\n          \
    \  if val == x {\n                res = append(res, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return res\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, col := range row {\n          \
    \  if col == x {\n                res = append(res, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return res\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, val := range row {\n          \
    \  if val == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, val := range row {\n          \
    \  if val == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, val := range row {\n          \
    \  if val == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, col := range row {\n          \
    \  if col == x {\n                res = append(res, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return res\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, v := range row {\n            if\
    \ v == x {\n                res = append(res, []interface{}{i, j})\n         \
    \   }\n        }\n    }\n    return res\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, col := range row {\n          \
    \  if col == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, v := range row {\n            if\
    \ v == x {\n                res = append(res, []interface{}{i, j})\n         \
    \   }\n        }\n    }\n    return res\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, val := range row {\n          \
    \  if val == x {\n                res = append(res, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return res\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, val := range row {\n          \
    \  if val == x {\n                res = append(res, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return res\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, val := range row {\n          \
    \  if val == x {\n                res = append(res, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return res\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, val := range row {\n          \
    \  if val == x {\n                res = append(res, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return res\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, item := range row {\n         \
    \   if item == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, e := range row {\n            if\
    \ e == x {\n                res = append(res, []interface{}{i, j})\n         \
    \   }\n        }\n    }\n    return res\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, col := range row {\n          \
    \  if col == x {\n                res = append(res, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return res\n}\n", "    res := [][]interface{}{}\n\
    \    for i, row := range lst {\n        for j, v := range row {\n            if\
    \ v == x {\n                res = append(res, []interface{}{i, j})\n         \
    \   }\n        }\n    }\n    return res\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, v := range row {\n            if\
    \ v == x {\n                res = append(res, []interface{}{i, j})\n         \
    \   }\n        }\n    }\n    return res\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, v := range row {\n            if\
    \ v == x {\n                res = append(res, []interface{}{i, j})\n         \
    \   }\n        }\n    }\n    return res\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, item := range row {\n         \
    \   if item == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, item := range row {\n         \
    \   if item == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, val := range row {\n          \
    \  if val == x {\n                res = append(res, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return res\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, col := range row {\n          \
    \  if col == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, v := range row {\n            if\
    \ v == x {\n                result = append(result, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return result\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, val := range row {\n          \
    \  if val == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, item := range row {\n         \
    \   if item == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, col := range row {\n          \
    \  if col == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, item := range row {\n         \
    \   if item == x {\n                res = append(res, []interface{}{i, j})\n \
    \           }\n        }\n    }\n    return res\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, item := range row {\n         \
    \   if item == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, val := range row {\n          \
    \  if val == x {\n                res = append(res, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return res\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, item := range row {\n         \
    \   if item == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, item := range row {\n         \
    \   if item == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, col := range row {\n          \
    \  if col == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var ret [][]interface{}\n\
    \    for i, row := range lst {\n        for j, v := range row {\n            if\
    \ v == x {\n                ret = append(ret, []interface{}{i, j})\n         \
    \   }\n        }\n    }\n    return ret\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, val := range row {\n          \
    \  if val == x {\n                res = append(res, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return res\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, item := range row {\n         \
    \   if item == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, value := range row {\n        \
    \    if value == x {\n                result = append(result, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return result\n}\n", "    var res\
    \ [][]interface{}\n    for i, row := range lst {\n        for j, col := range\
    \ row {\n            if col == x {\n                res = append(res, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return res\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, col := range row {\n          \
    \  if col == x {\n                res = append(res, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return res\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, item := range row {\n         \
    \   if item == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, col := range row {\n          \
    \  if col == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, item := range row {\n         \
    \   if item == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, col := range row {\n          \
    \  if col == x {\n                res = append(res, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return res\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, col := range row {\n          \
    \  if col == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, col := range row {\n          \
    \  if col == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, val := range row {\n          \
    \  if val == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, item := range row {\n         \
    \   if item == x {\n                res = append(res, []interface{}{i, j})\n \
    \           }\n        }\n    }\n    return res\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, v := range row {\n            if\
    \ v == x {\n                res = append(res, []interface{}{i, j})\n         \
    \   }\n        }\n    }\n    return res\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, val := range row {\n          \
    \  if val == x {\n                res = append(res, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return res\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, elem := range row {\n         \
    \   if elem == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, item := range row {\n         \
    \   if item == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, val := range row {\n          \
    \  if val == x {\n                res = append(res, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return res\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, item := range row {\n         \
    \   if item == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, item := range row {\n         \
    \   if item == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, item := range row {\n         \
    \   if item == x {\n                res = append(res, []interface{}{i, j})\n \
    \           }\n        }\n    }\n    return res\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, item := range row {\n         \
    \   if item == x {\n                result = append(result, []interface{}{i, j})\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result [][]interface{}\n\
    \    for i, row := range lst {\n        for j, value := range row {\n        \
    \    if value == x {\n                result = append(result, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return result\n}\n", "    var res\
    \ [][]interface{}\n    for i, row := range lst {\n        for j, val := range\
    \ row {\n            if val == x {\n                res = append(res, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return res\n}\n", "    var result\
    \ [][]interface{}\n    for i, row := range lst {\n        for j, val := range\
    \ row {\n            if val == x {\n                result = append(result, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return result\n}\n", "    var res\
    \ [][]interface{}\n    for i, row := range lst {\n        for j, val := range\
    \ row {\n            if val == x {\n                res = append(res, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return res\n}\n", "    var result\
    \ [][]interface{}\n    for i, row := range lst {\n        for j, item := range\
    \ row {\n            if item == x {\n                result = append(result, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return result\n}\n", "    var result\
    \ [][]interface{}\n    for i, row := range lst {\n        for j, item := range\
    \ row {\n            if item == x {\n                result = append(result, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return result\n}\n", "    var result\
    \ [][]interface{}\n    for i, row := range lst {\n        for j, val := range\
    \ row {\n            if val == x {\n                result = append(result, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return result\n}\n", "    var result\
    \ [][]interface{}\n    for i, row := range lst {\n        for j, item := range\
    \ row {\n            if item == x {\n                result = append(result, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return result\n}\n", "    var result\
    \ [][]interface{}\n    for i, row := range lst {\n        for j, item := range\
    \ row {\n            if item == x {\n                result = append(result, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return result\n}\n", "    var res\
    \ [][]interface{}\n    for i, row := range lst {\n        for j, val := range\
    \ row {\n            if val == x {\n                res = append(res, []interface{}{i,\
    \ j})\n            }\n        }\n    }\n    return res\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, val := range row {\n          \
    \  if val == x {\n                res = append(res, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return res\n}\n", "    var res [][]interface{}\n\
    \    for i, row := range lst {\n        for j, col := range row {\n          \
    \  if col == x {\n                res = append(res, []interface{}{i, j})\n   \
    \         }\n        }\n    }\n    return res\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
