language: go_test.go
name: HumanEval_105_by_length
results:
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    // sort the array\n    for i := 0; i < len(arr); i++ {\n        for j :=\
    \ i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n             \
    \   arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    //\
    \ reverse the array\n    for i := 0; i < len(arr) / 2; i++ {\n        arr[i],\
    \ arr[len(arr) - 1 - i] = arr[len(arr) - 1 - i], arr[i]\n    }\n\n    // replace\
    \ each digit by its corresponding name\n    for i := 0; i < len(arr); i++ {\n\
    \        switch arr[i] {\n        case 1:\n            arr[i] = \"One\"\n    \
    \    case 2:\n            arr[i] = \"Two\"\n        case 3:\n            arr[i]\
    \ = \"Three\"\n        case 4:\n            arr[i] = \"Four\"\n        case 5:\n\
    \            arr[i] = \"Five\"\n        case 6:\n            arr[i] = \"Six\"\n\
    \        case 7:\n            arr[i] = \"Seven\"\n        case 8:\n          \
    \  arr[i] = \"Eight\"\n        case 9:\n            arr[i] = \"Nine\"\n      \
    \  default:\n            arr[i] = \"\"\n        }\n    }\n\n    return arr\n}\n\
    \nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgytci0d8_test.go:43:22: cannot use "One" (untyped string constant) as
    int value in assignment

    /tmp/tmpgytci0d8_test.go:45:22: cannot use "Two" (untyped string constant) as
    int value in assignment

    /tmp/tmpgytci0d8_test.go:47:22: cannot use "Three" (untyped string constant) as
    int value in assignment

    /tmp/tmpgytci0d8_test.go:49:22: cannot use "Four" (untyped string constant) as
    int value in assignment

    /tmp/tmpgytci0d8_test.go:51:22: cannot use "Five" (untyped string constant) as
    int value in assignment

    /tmp/tmpgytci0d8_test.go:53:22: cannot use "Six" (untyped string constant) as
    int value in assignment

    /tmp/tmpgytci0d8_test.go:55:22: cannot use "Seven" (untyped string constant) as
    int value in assignment

    /tmp/tmpgytci0d8_test.go:57:22: cannot use "Eight" (untyped string constant) as
    int value in assignment

    /tmp/tmpgytci0d8_test.go:59:22: cannot use "Nine" (untyped string constant) as
    int value in assignment

    /tmp/tmpgytci0d8_test.go:61:22: cannot use "" (untyped string constant) as int
    value in assignment

    /tmp/tmpgytci0d8_test.go:61:22: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v > 0 && v < 10 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpgw4iv6m9_test.go:47: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpgw4iv6m9_test.go:47: expected '[One]', got '[1]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpgw4iv6m9_test.go:47: expected\
    \ '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmpgw4iv6m9_test.go:47: expected '[Nine Eight Four]', got '[9 4 8]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v > 0 && v < 10 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpgw4iv6m9_test.go:47: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpgw4iv6m9_test.go:47: expected '[One]', got '[1]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpgw4iv6m9_test.go:47: expected\
    \ '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmpgw4iv6m9_test.go:47: expected '[Nine Eight Four]', got '[9 4 8]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var sorted []int\n    for _,\
    \ v := range arr {\n        if v > 0 && v < 10 {\n            sorted = append(sorted,\
    \ v)\n        }\n    }\n    sort.Ints(sorted)\n    for i := len(sorted) - 1; i\
    \ >= 0; i-- {\n        switch sorted[i] {\n        case 1:\n            result\
    \ = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppr8cp3tx_test.go:28:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var numbers = map[int]string{\n\
    \        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"\
    Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n  \
    \      8: \"Eight\",\n        9: \"Nine\",\n    }\n    for _, v := range arr {\n\
    \        if v >= 1 && v <= 9 {\n            result = append(result, numbers[v])\n\
    \        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1, j-1 {\n\
    \        result[i], result[j] = result[j], result[i]\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp_0eo3rdo_test.go:61: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp_0eo3rdo_test.go:61: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp_0eo3rdo_test.go:61: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpjsd_9xxo_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpjsd_9xxo_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpjsd_9xxo_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpjsd_9xxo_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpjsd_9xxo_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpjsd_9xxo_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var nums []int\n    for _, v\
    \ := range arr {\n        if v >= 1 && v <= 9 {\n            nums = append(nums,\
    \ v)\n        }\n    }\n    for i := len(nums) - 1; i >= 0; i-- {\n        switch\
    \ nums[i] {\n        case 1:\n            result = append(result, \"One\")\n \
    \       case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpx61uergr_test.go:70: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpx61uergr_test.go:70: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpx61uergr_test.go:70: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var res []string\n    for _, v := range arr {\n     \
    \   if v < 1 || v > 9 {\n            continue\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"%d\", v))\n    }\n    return res\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpiatr1tkc_test.go:48: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpiatr1tkc_test.go:48: expected '[One]', got '[1]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpiatr1tkc_test.go:48: expected\
    \ '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmpiatr1tkc_test.go:48: expected '[Nine Eight Four]', got '[9 4 8]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpjsd_9xxo_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpjsd_9xxo_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var numbers = map[int]string{\n\
    \        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"\
    Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n  \
    \      8: \"Eight\",\n        9: \"Nine\",\n    }\n    for _, v := range arr {\n\
    \        if v >= 1 && v <= 9 {\n            result = append(result, numbers[v])\n\
    \        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1, j-1 {\n\
    \        result[i], result[j] = result[j], result[i]\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp_0eo3rdo_test.go:61: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp_0eo3rdo_test.go:61: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp_0eo3rdo_test.go:61: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    res := []string{}\n    for _, v := range arr {\n    \
    \    if v >= 1 && v <= 9 {\n            res = append(res, fmt.Sprintf(\"%d\",\
    \ v))\n        }\n    }\n    for i, j := 0, len(res)-1; i < j; i, j = i+1, j-1\
    \ {\n        res[i], res[j] = res[j], res[i]\n    }\n    for i, v := range res\
    \ {\n        switch v {\n        case \"1\":\n            res[i] = \"One\"\n \
    \       case \"2\":\n            res[i] = \"Two\"\n        case \"3\":\n     \
    \       res[i] = \"Three\"\n        case \"4\":\n            res[i] = \"Four\"\
    \n        case \"5\":\n            res[i] = \"Five\"\n        case \"6\":\n  \
    \          res[i] = \"Six\"\n        case \"7\":\n            res[i] = \"Seven\"\
    \n        case \"8\":\n            res[i] = \"Eight\"\n        case \"9\":\n \
    \           res[i] = \"Nine\"\n        }\n    }\n    return res\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpd1wv5jh6_test.go:72: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpd1wv5jh6_test.go:72: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpd1wv5jh6_test.go:72: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpjsd_9xxo_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpjsd_9xxo_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfvfe0hjx_test.go:47: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpfvfe0hjx_test.go:47: expected '[One]', got '[1]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpfvfe0hjx_test.go:47: expected\
    \ '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmpfvfe0hjx_test.go:47: expected '[Nine Eight Four]', got '[9 4 8]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmppxgydlqe_test.go:41: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmppxgydlqe_test.go:41: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmppxgydlqe_test.go:41: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmppxgydlqe_test.go:41:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmppxgydlqe_test.go:41: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmppxgydlqe_test.go:41: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmppxgydlqe_test.go:41: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmppxgydlqe_test.go:41:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    // sort\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j\
    \ < len(arr); j++ {\n            if arr[i] > arr[j] {\n                arr[i],\
    \ arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    // reverse\n\
    \    for i := 0; i < len(arr) / 2; i++ {\n        arr[i], arr[len(arr) - 1 - i]\
    \ = arr[len(arr) - 1 - i], arr[i]\n    }\n\n    // replace\n    for i := 0; i\
    \ < len(arr); i++ {\n        switch arr[i] {\n        case 1:\n            arr[i]\
    \ = \"One\"\n        case 2:\n            arr[i] = \"Two\"\n        case 3:\n\
    \            arr[i] = \"Three\"\n        case 4:\n            arr[i] = \"Four\"\
    \n        case 5:\n            arr[i] = \"Five\"\n        case 6:\n          \
    \  arr[i] = \"Six\"\n        case 7:\n            arr[i] = \"Seven\"\n       \
    \ case 8:\n            arr[i] = \"Eight\"\n        case 9:\n            arr[i]\
    \ = \"Nine\"\n        default:\n            arr[i] = \"\"\n        }\n    }\n\n\
    \    // remove empty string\n    for i := 0; i < len(arr); i++ {\n        if arr[i]\
    \ == \"\" {\n            arr = append(arr[:i], arr[i+1:]...)\n            i--\n\
    \        }\n    }\n\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3fs2gp_a_test.go:43:22: cannot use "One" (untyped string constant) as
    int value in assignment

    /tmp/tmp3fs2gp_a_test.go:45:22: cannot use "Two" (untyped string constant) as
    int value in assignment

    /tmp/tmp3fs2gp_a_test.go:47:22: cannot use "Three" (untyped string constant) as
    int value in assignment

    /tmp/tmp3fs2gp_a_test.go:49:22: cannot use "Four" (untyped string constant) as
    int value in assignment

    /tmp/tmp3fs2gp_a_test.go:51:22: cannot use "Five" (untyped string constant) as
    int value in assignment

    /tmp/tmp3fs2gp_a_test.go:53:22: cannot use "Six" (untyped string constant) as
    int value in assignment

    /tmp/tmp3fs2gp_a_test.go:55:22: cannot use "Seven" (untyped string constant) as
    int value in assignment

    /tmp/tmp3fs2gp_a_test.go:57:22: cannot use "Eight" (untyped string constant) as
    int value in assignment

    /tmp/tmp3fs2gp_a_test.go:59:22: cannot use "Nine" (untyped string constant) as
    int value in assignment

    /tmp/tmp3fs2gp_a_test.go:61:22: cannot use "" (untyped string constant) as int
    value in assignment

    /tmp/tmp3fs2gp_a_test.go:61:22: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075028
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    // Sort the array\n    for i := 0; i < len(arr); i++ {\n        for j :=\
    \ i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n             \
    \   arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    //\
    \ Reverse the array\n    for i := 0; i < len(arr) / 2; i++ {\n        arr[i],\
    \ arr[len(arr) - i - 1] = arr[len(arr) - i - 1], arr[i]\n    }\n\n    // Replace\
    \ each digit by its corresponding name\n    for i := 0; i < len(arr); i++ {\n\
    \        switch arr[i] {\n        case 1:\n            arr[i] = \"One\"\n    \
    \    case 2:\n            arr[i] = \"Two\"\n        case 3:\n            arr[i]\
    \ = \"Three\"\n        case 4:\n            arr[i] = \"Four\"\n        case 5:\n\
    \            arr[i] = \"Five\"\n        case 6:\n            arr[i] = \"Six\"\n\
    \        case 7:\n            arr[i] = \"Seven\"\n        case 8:\n          \
    \  arr[i] = \"Eight\"\n        case 9:\n            arr[i] = \"Nine\"\n      \
    \  default:\n            arr[i] = \"\"\n        }\n    }\n\n    return arr\n}\n\
    \nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdod2unfn_test.go:43:22: cannot use "One" (untyped string constant) as
    int value in assignment

    /tmp/tmpdod2unfn_test.go:45:22: cannot use "Two" (untyped string constant) as
    int value in assignment

    /tmp/tmpdod2unfn_test.go:47:22: cannot use "Three" (untyped string constant) as
    int value in assignment

    /tmp/tmpdod2unfn_test.go:49:22: cannot use "Four" (untyped string constant) as
    int value in assignment

    /tmp/tmpdod2unfn_test.go:51:22: cannot use "Five" (untyped string constant) as
    int value in assignment

    /tmp/tmpdod2unfn_test.go:53:22: cannot use "Six" (untyped string constant) as
    int value in assignment

    /tmp/tmpdod2unfn_test.go:55:22: cannot use "Seven" (untyped string constant) as
    int value in assignment

    /tmp/tmpdod2unfn_test.go:57:22: cannot use "Eight" (untyped string constant) as
    int value in assignment

    /tmp/tmpdod2unfn_test.go:59:22: cannot use "Nine" (untyped string constant) as
    int value in assignment

    /tmp/tmpdod2unfn_test.go:61:22: cannot use "" (untyped string constant) as int
    value in assignment

    /tmp/tmpdod2unfn_test.go:61:22: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpjsd_9xxo_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpjsd_9xxo_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var sorted []int\n    for _,\
    \ v := range arr {\n        if v > 0 && v < 10 {\n            sorted = append(sorted,\
    \ v)\n        }\n    }\n    sort.Ints(sorted)\n    for i := len(sorted) - 1; i\
    \ >= 0; i-- {\n        switch sorted[i] {\n        case 1:\n            result\
    \ = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppr8cp3tx_test.go:28:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075028
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    var result []string\n    var sorted []int\n    for _, v := range arr {\n\
    \        if v >= 1 && v <= 9 {\n            sorted = append(sorted, v)\n     \
    \   }\n    }\n    sort(sorted)\n    for _, v := range sorted {\n        result\
    \ = append(result, to_string(v))\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjd_zd5q2_test.go:32:5: undefined: sort

    /tmp/tmpjd_zd5q2_test.go:34:33: undefined: to_string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var sorted []int\n    for _,\
    \ v := range arr {\n        if v >= 1 && v <= 9 {\n            sorted = append(sorted,\
    \ v)\n        }\n    }\n    for i := len(sorted) - 1; i >= 0; i-- {\n        switch\
    \ sorted[i] {\n        case 1:\n            result = append(result, \"One\")\n\
    \        case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpgxdddhdz_test.go:70: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpgxdddhdz_test.go:70: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpgxdddhdz_test.go:70: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmphon669za_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmphon669za_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 0
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    var result []string\n    var one, two, three, four, five, six, seven, eight,\
    \ nine int\n\n    for _, v := range arr {\n        switch v {\n        case 1:\n\
    \            one++\n        case 2:\n            two++\n        case 3:\n    \
    \        three++\n        case 4:\n            four++\n        case 5:\n     \
    \       five++\n        case 6:\n            six++\n        case 7:\n        \
    \    seven++\n        case 8:\n            eight++\n        case 9:\n        \
    \    nine++\n        }\n    }\n\n    for i := 0; i < nine; i++ {\n        result\
    \ = append(result, \"Nine\")\n    }\n    for i := 0; i < eight; i++ {\n      \
    \  result = append(result, \"Eight\")\n    }\n    for i := 0; i < seven; i++ {\n\
    \        result = append(result, \"Seven\")\n    }\n    for i := 0; i < six; i++\
    \ {\n        result = append(result, \"Six\")\n    }\n    for i := 0; i < five;\
    \ i++ {\n        result = append(result, \"Five\")\n    }\n    for i := 0; i <\
    \ four; i++ {\n        result = append(result, \"Four\")\n    }\n    for i :=\
    \ 0; i < three; i++ {\n        result = append(result, \"Three\")\n    }\n   \
    \ for i := 0; i < two; i++ {\n        result = append(result, \"Two\")\n    }\n\
    \    for i := 0; i < one; i++ {\n        result = append(result, \"One\")\n  \
    \  }\n\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // Write your code here\n    return []string{}\n}\n\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpyb167drt_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpyb167drt_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpyb167drt_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpyb167drt_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfvfe0hjx_test.go:47: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpfvfe0hjx_test.go:47: expected '[One]', got '[1]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpfvfe0hjx_test.go:47: expected\
    \ '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmpfvfe0hjx_test.go:47: expected '[Nine Eight Four]', got '[9 4 8]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v > 0 && v < 10 {\n            result = append(result, get_name(v))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqrkp_pc1_test.go:24:37: undefined: get_name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpjsd_9xxo_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpjsd_9xxo_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpjsd_9xxo_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpjsd_9xxo_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var sorted []int\n    for _,\
    \ v := range arr {\n        if v > 0 && v < 10 {\n            sorted = append(sorted,\
    \ v)\n        }\n    }\n    sort.Ints(sorted)\n    for i := len(sorted) - 1; i\
    \ >= 0; i-- {\n        switch sorted[i] {\n        case 1:\n            result\
    \ = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppr8cp3tx_test.go:28:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmppxgydlqe_test.go:41: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmppxgydlqe_test.go:41: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmppxgydlqe_test.go:41: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmppxgydlqe_test.go:41:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var temp []int\n    for _, v\
    \ := range arr {\n        if v >= 1 && v <= 9 {\n            temp = append(temp,\
    \ v)\n        }\n    }\n    for i := len(temp) - 1; i >= 0; i-- {\n        switch\
    \ temp[i] {\n        case 1:\n            result = append(result, \"One\")\n \
    \       case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp3mtj4thd_test.go:70: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp3mtj4thd_test.go:70: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp3mtj4thd_test.go:70: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // TODO: Implement me\n    return []string{}\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpln339zol_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpln339zol_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpln339zol_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpln339zol_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var temp []int\n    for _, v\
    \ := range arr {\n        if v > 0 && v < 10 {\n            temp = append(temp,\
    \ v)\n        }\n    }\n    for i := len(temp) - 1; i >= 0; i-- {\n        switch\
    \ temp[i] {\n        case 1:\n            result = append(result, \"One\")\n \
    \       case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp65st8pbp_test.go:70: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp65st8pbp_test.go:70: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp65st8pbp_test.go:70: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpjsd_9xxo_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpjsd_9xxo_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 0
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    // sort the array\n    for i := 0; i < len(arr); i++ {\n        for j :=\
    \ i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n             \
    \   arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    //\
    \ reverse the array\n    for i := 0; i < len(arr) / 2; i++ {\n        arr[i],\
    \ arr[len(arr) - 1 - i] = arr[len(arr) - 1 - i], arr[i]\n    }\n\n    // replace\
    \ each digit by its corresponding name\n    var result []string\n    for _, v\
    \ := range arr {\n        switch v {\n        case 1:\n            result = append(result,\
    \ \"One\")\n        case 2:\n            result = append(result, \"Two\")\n  \
    \      case 3:\n            result = append(result, \"Three\")\n        case 4:\n\
    \            result = append(result, \"Four\")\n        case 5:\n            result\
    \ = append(result, \"Five\")\n        case 6:\n            result = append(result,\
    \ \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n\
    \        case 8:\n            result = append(result, \"Eight\")\n        case\
    \ 9:\n            result = append(result, \"Nine\")\n        }\n    }\n\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmphon669za_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmphon669za_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpjsd_9xxo_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpjsd_9xxo_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmppxgydlqe_test.go:41: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmppxgydlqe_test.go:41: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmppxgydlqe_test.go:41: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmppxgydlqe_test.go:41:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfvfe0hjx_test.go:47: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpfvfe0hjx_test.go:47: expected '[One]', got '[1]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpfvfe0hjx_test.go:47: expected\
    \ '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmpfvfe0hjx_test.go:47: expected '[Nine Eight Four]', got '[9 4 8]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, get_name(v))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp87n2_hh9_test.go:24:37: undefined: get_name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var temp []int\n    for _, v\
    \ := range arr {\n        if v >= 1 && v <= 9 {\n            temp = append(temp,\
    \ v)\n        }\n    }\n    for i := len(temp) - 1; i >= 0; i-- {\n        switch\
    \ temp[i] {\n        case 1:\n            result = append(result, \"One\")\n \
    \       case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp3mtj4thd_test.go:70: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp3mtj4thd_test.go:70: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp3mtj4thd_test.go:70: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    // sort\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j\
    \ < len(arr); j++ {\n            if arr[i] > arr[j] {\n                arr[i],\
    \ arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    // reverse\n\
    \    for i := 0; i < len(arr)/2; i++ {\n        arr[i], arr[len(arr)-1-i] = arr[len(arr)-1-i],\
    \ arr[i]\n    }\n\n    // replace\n    for i := 0; i < len(arr); i++ {\n     \
    \   switch arr[i] {\n        case 1:\n            arr[i] = \"One\"\n        case\
    \ 2:\n            arr[i] = \"Two\"\n        case 3:\n            arr[i] = \"Three\"\
    \n        case 4:\n            arr[i] = \"Four\"\n        case 5:\n          \
    \  arr[i] = \"Five\"\n        case 6:\n            arr[i] = \"Six\"\n        case\
    \ 7:\n            arr[i] = \"Seven\"\n        case 8:\n            arr[i] = \"\
    Eight\"\n        case 9:\n            arr[i] = \"Nine\"\n        default:\n  \
    \          arr[i] = \"\"\n        }\n    }\n\n    return arr\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa6h4ey88_test.go:43:22: cannot use "One" (untyped string constant) as
    int value in assignment

    /tmp/tmpa6h4ey88_test.go:45:22: cannot use "Two" (untyped string constant) as
    int value in assignment

    /tmp/tmpa6h4ey88_test.go:47:22: cannot use "Three" (untyped string constant) as
    int value in assignment

    /tmp/tmpa6h4ey88_test.go:49:22: cannot use "Four" (untyped string constant) as
    int value in assignment

    /tmp/tmpa6h4ey88_test.go:51:22: cannot use "Five" (untyped string constant) as
    int value in assignment

    /tmp/tmpa6h4ey88_test.go:53:22: cannot use "Six" (untyped string constant) as
    int value in assignment

    /tmp/tmpa6h4ey88_test.go:55:22: cannot use "Seven" (untyped string constant) as
    int value in assignment

    /tmp/tmpa6h4ey88_test.go:57:22: cannot use "Eight" (untyped string constant) as
    int value in assignment

    /tmp/tmpa6h4ey88_test.go:59:22: cannot use "Nine" (untyped string constant) as
    int value in assignment

    /tmp/tmpa6h4ey88_test.go:61:22: cannot use "" (untyped string constant) as int
    value in assignment

    /tmp/tmpa6h4ey88_test.go:61:22: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075030
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var sorted []int\n    var sorted_reversed\
    \ []int\n    var sorted_reversed_str []string\n\n    for _, v := range arr {\n\
    \        if v > 0 && v < 10 {\n            sorted = append(sorted, v)\n      \
    \  }\n    }\n\n    for i := len(sorted) - 1; i >= 0; i-- {\n        sorted_reversed\
    \ = append(sorted_reversed, sorted[i])\n    }\n\n    for _, v := range sorted_reversed\
    \ {\n        switch v {\n        case 1:\n            sorted_reversed_str = append(sorted_reversed_str,\
    \ \"One\")\n        case 2:\n            sorted_reversed_str = append(sorted_reversed_str,\
    \ \"Two\")\n        case 3:\n            sorted_reversed_str = append(sorted_reversed_str,\
    \ \"Three\")\n        case 4:\n            sorted_reversed_str = append(sorted_reversed_str,\
    \ \"Four\")\n        case 5:\n            sorted_reversed_str = append(sorted_reversed_str,\
    \ \"Five\")\n        case 6:\n            sorted_reversed_str = append(sorted_reversed_str,\
    \ \"Six\")\n        case 7:\n            sorted_reversed_str = append(sorted_reversed_str,\
    \ \"Seven\")\n        case 8:\n            sorted_reversed_str = append(sorted_reversed_str,\
    \ \"Eight\")\n        case 9:\n            sorted_reversed_str = append(sorted_reversed_str,\
    \ \"Nine\")\n        }\n    }\n\n    return sorted_reversed_str\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpesp0tzmb_test.go:21:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075030
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var sorted []int\n    for _,\
    \ v := range arr {\n        if v > 0 && v < 10 {\n            sorted = append(sorted,\
    \ v)\n        }\n    }\n    sort.Ints(sorted)\n    for i := len(sorted) - 1; i\
    \ >= 0; i-- {\n        switch sorted[i] {\n        case 1:\n            result\
    \ = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppr8cp3tx_test.go:28:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v > 0 && v < 10 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpgw4iv6m9_test.go:47: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpgw4iv6m9_test.go:47: expected '[One]', got '[1]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpgw4iv6m9_test.go:47: expected\
    \ '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmpgw4iv6m9_test.go:47: expected '[Nine Eight Four]', got '[9 4 8]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var dict = map[int]string{\n\
    \        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"\
    Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n  \
    \      8: \"Eight\",\n        9: \"Nine\",\n    }\n    for _, v := range arr {\n\
    \        if v >= 1 && v <= 9 {\n            result = append(result, dict[v])\n\
    \        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1, j-1 {\n\
    \        result[i], result[j] = result[j], result[i]\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfowkriu2_test.go:61: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpfowkriu2_test.go:61: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpfowkriu2_test.go:61: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075030
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var sorted []int\n    for _,\
    \ v := range arr {\n        if v >= 1 && v <= 9 {\n            sorted = append(sorted,\
    \ v)\n        }\n    }\n    for i := len(sorted) - 1; i >= 0; i-- {\n        switch\
    \ sorted[i] {\n        case 1:\n            result = append(result, \"One\")\n\
    \        case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpgxdddhdz_test.go:70: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpgxdddhdz_test.go:70: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpgxdddhdz_test.go:70: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var res []string\n    for _, v := range arr {\n     \
    \   if v > 0 && v < 10 {\n            res = append(res, fmt.Sprintf(\"%d\", v))\n\
    \        }\n    }\n    return res\n}\n\nfunc TestBy_Length(t *testing.T) {\n \
    \ candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmponkl7ltk_test.go:47: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmponkl7ltk_test.go:47: expected '[One]', got '[1]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmponkl7ltk_test.go:47: expected\
    \ '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmponkl7ltk_test.go:47: expected '[Nine Eight Four]', got '[9 4 8]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075030
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var tmp []int\n    for _, v\
    \ := range arr {\n        if v > 0 && v < 10 {\n            tmp = append(tmp,\
    \ v)\n        }\n    }\n    sort.Ints(tmp)\n    for i := len(tmp) - 1; i >= 0;\
    \ i-- {\n        switch tmp[i] {\n        case 1:\n            result = append(result,\
    \ \"One\")\n        case 2:\n            result = append(result, \"Two\")\n  \
    \      case 3:\n            result = append(result, \"Three\")\n        case 4:\n\
    \            result = append(result, \"Four\")\n        case 5:\n            result\
    \ = append(result, \"Five\")\n        case 6:\n            result = append(result,\
    \ \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n\
    \        case 8:\n            result = append(result, \"Eight\")\n        case\
    \ 9:\n            result = append(result, \"Nine\")\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9oadkeh2_test.go:28:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075030
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var sorted []int\n    for _,\
    \ v := range arr {\n        if v > 0 && v < 10 {\n            sorted = append(sorted,\
    \ v)\n        }\n    }\n    sort.Ints(sorted)\n    for i := len(sorted) - 1; i\
    \ >= 0; i-- {\n        switch sorted[i] {\n        case 1:\n            result\
    \ = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppr8cp3tx_test.go:28:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpjsd_9xxo_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpjsd_9xxo_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var sorted []int\n    for _,\
    \ num := range arr {\n        if num >= 1 && num <= 9 {\n            sorted =\
    \ append(sorted, num)\n        }\n    }\n    for i := len(sorted) - 1; i >= 0;\
    \ i-- {\n        switch sorted[i] {\n        case 1:\n            result = append(result,\
    \ \"One\")\n        case 2:\n            result = append(result, \"Two\")\n  \
    \      case 3:\n            result = append(result, \"Three\")\n        case 4:\n\
    \            result = append(result, \"Four\")\n        case 5:\n            result\
    \ = append(result, \"Five\")\n        case 6:\n            result = append(result,\
    \ \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n\
    \        case 8:\n            result = append(result, \"Eight\")\n        case\
    \ 9:\n            result = append(result, \"Nine\")\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmplipkrweg_test.go:70: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmplipkrweg_test.go:70: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmplipkrweg_test.go:70: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075030
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpjsd_9xxo_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpjsd_9xxo_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmphon669za_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmphon669za_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var sorted []int\n    var sorted_map\
    \ = make(map[int]int)\n    for _, v := range arr {\n        if v >= 1 && v <=\
    \ 9 {\n            sorted_map[v] = v\n        }\n    }\n    for k, _ := range\
    \ sorted_map {\n        sorted = append(sorted, k)\n    }\n    for i := len(sorted)\
    \ - 1; i >= 0; i-- {\n        switch sorted[i] {\n        case 1:\n          \
    \  result = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpad4wzwz6_test.go:74: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Eight Five Four One Two]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpad4wzwz6_test.go:74: expected '[Three Two One]', got '[Three\
    \ One Two]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpad4wzwz6_test.go:74:\
    \ expected '[Nine Eight Four]', got '[Eight Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075030
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // TODO: implement me\n    return []string{}\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp9__009mn_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp9__009mn_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp9__009mn_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp9__009mn_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075030
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var sorted []int\n    for _,\
    \ v := range arr {\n        if v >= 1 && v <= 9 {\n            sorted = append(sorted,\
    \ v)\n        }\n    }\n    for i := len(sorted) - 1; i >= 0; i-- {\n        switch\
    \ sorted[i] {\n        case 1:\n            result = append(result, \"One\")\n\
    \        case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpgxdddhdz_test.go:70: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpgxdddhdz_test.go:70: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpgxdddhdz_test.go:70: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmphon669za_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmphon669za_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    var result []string\n    for _, v := range arr {\n        if v < 1 || v\
    \ > 9 {\n            continue\n        }\n        result = append(result, fmt.Sprintf(\"\
    %d\", v))\n    }\n\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpwn_xnj3r_test.go:53: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpwn_xnj3r_test.go:53: expected '[One]', got '[1]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpwn_xnj3r_test.go:53: expected\
    \ '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmpwn_xnj3r_test.go:53: expected '[Nine Eight Four]', got '[9 4 8]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075030
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var res []string\n    var tmp []int\n    for _, v :=\
    \ range arr {\n        if v >= 1 && v <= 9 {\n            tmp = append(tmp, v)\n\
    \        }\n    }\n    for i := len(tmp) - 1; i >= 0; i-- {\n        res = append(res,\
    \ numToStr(tmp[i]))\n    }\n    return res\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd14oxzif_test.go:29:27: undefined: numToStr

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075030
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var res []string\n    for _, v := range arr {\n     \
    \   if v >= 1 && v <= 9 {\n            res = append(res, fmt.Sprintf(\"%d\", v))\n\
    \        }\n    }\n    return res\n}\n\nfunc TestBy_Length(t *testing.T) {\n \
    \ candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpnxvytu0p_test.go:47: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpnxvytu0p_test.go:47: expected '[One]', got '[1]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpnxvytu0p_test.go:47: expected\
    \ '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmpnxvytu0p_test.go:47: expected '[Nine Eight Four]', got '[9 4 8]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075030
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmphon669za_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmphon669za_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpjsd_9xxo_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpjsd_9xxo_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var res []string\n    var numbers = map[int]string{\n\
    \        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"\
    Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n  \
    \      8: \"Eight\",\n        9: \"Nine\",\n    }\n    for _, v := range arr {\n\
    \        if v > 0 && v < 10 {\n            res = append(res, numbers[v])\n   \
    \     }\n    }\n    for i, j := 0, len(res)-1; i < j; i, j = i+1, j-1 {\n    \
    \    res[i], res[j] = res[j], res[i]\n    }\n    return res\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpeqs0mpnw_test.go:61: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpeqs0mpnw_test.go:61: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpeqs0mpnw_test.go:61: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075030
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v > 0 && v < 10 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpgw4iv6m9_test.go:47: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpgw4iv6m9_test.go:47: expected '[One]', got '[1]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpgw4iv6m9_test.go:47: expected\
    \ '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmpgw4iv6m9_test.go:47: expected '[Nine Eight Four]', got '[9 4 8]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpjsd_9xxo_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpjsd_9xxo_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var sorted []int\n    for _,\
    \ num := range arr {\n        if num > 0 && num < 10 {\n            sorted = append(sorted,\
    \ num)\n        }\n    }\n    if len(sorted) == 0 {\n        return result\n \
    \   }\n    for i := len(sorted) - 1; i >= 0; i-- {\n        switch sorted[i] {\n\
    \        case 1:\n            result = append(result, \"One\")\n        case 2:\n\
    \            result = append(result, \"Two\")\n        case 3:\n            result\
    \ = append(result, \"Three\")\n        case 4:\n            result = append(result,\
    \ \"Four\")\n        case 5:\n            result = append(result, \"Five\")\n\
    \        case 6:\n            result = append(result, \"Six\")\n        case 7:\n\
    \            result = append(result, \"Seven\")\n        case 8:\n           \
    \ result = append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpy_lblzde_test.go:73: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpy_lblzde_test.go:73: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpy_lblzde_test.go:73: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075030
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    // sort the array\n    for i := 0; i < len(arr); i++ {\n        for j :=\
    \ i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n             \
    \   arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    //\
    \ reverse the array\n    for i := 0; i < len(arr) / 2; i++ {\n        arr[i],\
    \ arr[len(arr) - 1 - i] = arr[len(arr) - 1 - i], arr[i]\n    }\n\n    // replace\
    \ each digit by its corresponding name\n    for i := 0; i < len(arr); i++ {\n\
    \        switch arr[i] {\n        case 1:\n            arr[i] = \"One\"\n    \
    \    case 2:\n            arr[i] = \"Two\"\n        case 3:\n            arr[i]\
    \ = \"Three\"\n        case 4:\n            arr[i] = \"Four\"\n        case 5:\n\
    \            arr[i] = \"Five\"\n        case 6:\n            arr[i] = \"Six\"\n\
    \        case 7:\n            arr[i] = \"Seven\"\n        case 8:\n          \
    \  arr[i] = \"Eight\"\n        case 9:\n            arr[i] = \"Nine\"\n      \
    \  default:\n            arr[i] = \"\"\n        }\n    }\n\n    // remove the\
    \ strange number\n    for i := 0; i < len(arr); i++ {\n        if arr[i] == \"\
    \" {\n            arr = append(arr[:i], arr[i+1:]...)\n            i--\n     \
    \   }\n    }\n\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm_5vmw45_test.go:43:22: cannot use "One" (untyped string constant) as
    int value in assignment

    /tmp/tmpm_5vmw45_test.go:45:22: cannot use "Two" (untyped string constant) as
    int value in assignment

    /tmp/tmpm_5vmw45_test.go:47:22: cannot use "Three" (untyped string constant) as
    int value in assignment

    /tmp/tmpm_5vmw45_test.go:49:22: cannot use "Four" (untyped string constant) as
    int value in assignment

    /tmp/tmpm_5vmw45_test.go:51:22: cannot use "Five" (untyped string constant) as
    int value in assignment

    /tmp/tmpm_5vmw45_test.go:53:22: cannot use "Six" (untyped string constant) as
    int value in assignment

    /tmp/tmpm_5vmw45_test.go:55:22: cannot use "Seven" (untyped string constant) as
    int value in assignment

    /tmp/tmpm_5vmw45_test.go:57:22: cannot use "Eight" (untyped string constant) as
    int value in assignment

    /tmp/tmpm_5vmw45_test.go:59:22: cannot use "Nine" (untyped string constant) as
    int value in assignment

    /tmp/tmpm_5vmw45_test.go:61:22: cannot use "" (untyped string constant) as int
    value in assignment

    /tmp/tmpm_5vmw45_test.go:61:22: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075030
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var sorted []int\n    for _,\
    \ v := range arr {\n        if v > 0 && v < 10 {\n            sorted = append(sorted,\
    \ v)\n        }\n    }\n    for i := len(sorted) - 1; i >= 0; i-- {\n        switch\
    \ sorted[i] {\n        case 1:\n            result = append(result, \"One\")\n\
    \        case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp1bk4ffqn_test.go:70: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp1bk4ffqn_test.go:70: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp1bk4ffqn_test.go:70: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075030
- exit_code: 0
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var res []string\n    var nums []int\n    for _, v :=\
    \ range arr {\n        if v > 0 && v < 10 {\n            nums = append(nums, v)\n\
    \        }\n    }\n    if len(nums) == 0 {\n        return res\n    }\n    for\
    \ i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n\
    \            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j],\
    \ nums[i]\n            }\n        }\n    }\n    for i := len(nums) - 1; i >= 0;\
    \ i-- {\n        switch nums[i] {\n        case 1:\n            res = append(res,\
    \ \"One\")\n        case 2:\n            res = append(res, \"Two\")\n        case\
    \ 3:\n            res = append(res, \"Three\")\n        case 4:\n            res\
    \ = append(res, \"Four\")\n        case 5:\n            res = append(res, \"Five\"\
    )\n        case 6:\n            res = append(res, \"Six\")\n        case 7:\n\
    \            res = append(res, \"Seven\")\n        case 8:\n            res =\
    \ append(res, \"Eight\")\n        case 9:\n            res = append(res, \"Nine\"\
    )\n        }\n    }\n    return res\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075030
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // TODO: implement this function\n    return []string{}\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmps_b08waq_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmps_b08waq_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmps_b08waq_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmps_b08waq_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075030
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var numbers = map[int]string{\n\
    \        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"\
    Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n  \
    \      8: \"Eight\",\n        9: \"Nine\",\n    }\n    for _, v := range arr {\n\
    \        if v >= 1 && v <= 9 {\n            result = append(result, numbers[v])\n\
    \        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1, j-1 {\n\
    \        result[i], result[j] = result[j], result[i]\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp_0eo3rdo_test.go:61: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp_0eo3rdo_test.go:61: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp_0eo3rdo_test.go:61: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpjsd_9xxo_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpjsd_9xxo_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    // sort the array\n    for i := 0; i < len(arr); i++ {\n        for j :=\
    \ i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n             \
    \   arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    //\
    \ reverse the array\n    for i := 0; i < len(arr) / 2; i++ {\n        arr[i],\
    \ arr[len(arr) - 1 - i] = arr[len(arr) - 1 - i], arr[i]\n    }\n\n    // replace\
    \ each digit by its corresponding name\n    for i := 0; i < len(arr); i++ {\n\
    \        switch arr[i] {\n        case 1:\n            arr[i] = \"One\"\n    \
    \    case 2:\n            arr[i] = \"Two\"\n        case 3:\n            arr[i]\
    \ = \"Three\"\n        case 4:\n            arr[i] = \"Four\"\n        case 5:\n\
    \            arr[i] = \"Five\"\n        case 6:\n            arr[i] = \"Six\"\n\
    \        case 7:\n            arr[i] = \"Seven\"\n        case 8:\n          \
    \  arr[i] = \"Eight\"\n        case 9:\n            arr[i] = \"Nine\"\n      \
    \  default:\n            arr[i] = \"\"\n        }\n    }\n\n    return arr\n}\n\
    \nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgytci0d8_test.go:43:22: cannot use "One" (untyped string constant) as
    int value in assignment

    /tmp/tmpgytci0d8_test.go:45:22: cannot use "Two" (untyped string constant) as
    int value in assignment

    /tmp/tmpgytci0d8_test.go:47:22: cannot use "Three" (untyped string constant) as
    int value in assignment

    /tmp/tmpgytci0d8_test.go:49:22: cannot use "Four" (untyped string constant) as
    int value in assignment

    /tmp/tmpgytci0d8_test.go:51:22: cannot use "Five" (untyped string constant) as
    int value in assignment

    /tmp/tmpgytci0d8_test.go:53:22: cannot use "Six" (untyped string constant) as
    int value in assignment

    /tmp/tmpgytci0d8_test.go:55:22: cannot use "Seven" (untyped string constant) as
    int value in assignment

    /tmp/tmpgytci0d8_test.go:57:22: cannot use "Eight" (untyped string constant) as
    int value in assignment

    /tmp/tmpgytci0d8_test.go:59:22: cannot use "Nine" (untyped string constant) as
    int value in assignment

    /tmp/tmpgytci0d8_test.go:61:22: cannot use "" (untyped string constant) as int
    value in assignment

    /tmp/tmpgytci0d8_test.go:61:22: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // TODO: implement this function\n    return []string{}\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmps_b08waq_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmps_b08waq_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmps_b08waq_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmps_b08waq_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075030
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var tmp []int\n    for _, v\
    \ := range arr {\n        if v > 0 && v < 10 {\n            tmp = append(tmp,\
    \ v)\n        }\n    }\n    for i := len(tmp) - 1; i >= 0; i-- {\n        switch\
    \ tmp[i] {\n        case 1:\n            result = append(result, \"One\")\n  \
    \      case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp07cdsb0w_test.go:70: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp07cdsb0w_test.go:70: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp07cdsb0w_test.go:70: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075030
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmphon669za_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmphon669za_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      switch v {\n        case 1:\n            result = append(result, \"One\"\
    )\n        case 2:\n            result = append(result, \"Two\")\n        case\
    \ 3:\n            result = append(result, \"Three\")\n        case 4:\n      \
    \      result = append(result, \"Four\")\n        case 5:\n            result\
    \ = append(result, \"Five\")\n        case 6:\n            result = append(result,\
    \ \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n\
    \        case 8:\n            result = append(result, \"Eight\")\n        case\
    \ 9:\n            result = append(result, \"Nine\")\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpm91yhqo__test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Two One One Four Five Eight Two Three]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpm91yhqo__test.go:64: expected\
    \ '[Three Two One]', got '[One Three Two]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpm91yhqo__test.go:64: expected '[Nine Eight Four]', got '[Nine\
    \ Four Eight]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075030
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpjsd_9xxo_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpjsd_9xxo_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var sorted []int\n    for _,\
    \ v := range arr {\n        if v > 0 && v < 10 {\n            sorted = append(sorted,\
    \ v)\n        }\n    }\n    sort.Ints(sorted)\n    for i := len(sorted) - 1; i\
    \ >= 0; i-- {\n        switch sorted[i] {\n        case 1:\n            result\
    \ = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppr8cp3tx_test.go:28:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpkrk8gaq3_test.go:41: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpkrk8gaq3_test.go:41: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpkrk8gaq3_test.go:41: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpkrk8gaq3_test.go:41:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075030
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmphon669za_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmphon669za_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmphon669za_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmphon669za_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpjsd_9xxo_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpjsd_9xxo_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var nums []int\n    for _, v\
    \ := range arr {\n        if v >= 1 && v <= 9 {\n            nums = append(nums,\
    \ v)\n        }\n    }\n    for i := len(nums) - 1; i >= 0; i-- {\n        switch\
    \ nums[i] {\n        case 1:\n            result = append(result, \"One\")\n \
    \       case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpx61uergr_test.go:70: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpx61uergr_test.go:70: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpx61uergr_test.go:70: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v > 0 && v < 10 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpgw4iv6m9_test.go:47: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpgw4iv6m9_test.go:47: expected '[One]', got '[1]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpgw4iv6m9_test.go:47: expected\
    \ '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmpgw4iv6m9_test.go:47: expected '[Nine Eight Four]', got '[9 4 8]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var temp []int\n    for _, v\
    \ := range arr {\n        if v > 0 && v < 10 {\n            temp = append(temp,\
    \ v)\n        }\n    }\n    if len(temp) == 0 {\n        return result\n    }\n\
    \    for i := len(temp) - 1; i >= 0; i-- {\n        switch temp[i] {\n       \
    \ case 1:\n            result = append(result, \"One\")\n        case 2:\n   \
    \         result = append(result, \"Two\")\n        case 3:\n            result\
    \ = append(result, \"Three\")\n        case 4:\n            result = append(result,\
    \ \"Four\")\n        case 5:\n            result = append(result, \"Five\")\n\
    \        case 6:\n            result = append(result, \"Six\")\n        case 7:\n\
    \            result = append(result, \"Seven\")\n        case 8:\n           \
    \ result = append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpe7ok0941_test.go:73: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpe7ok0941_test.go:73: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpe7ok0941_test.go:73: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075030
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v > 0 && v < 10 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpgw4iv6m9_test.go:47: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpgw4iv6m9_test.go:47: expected '[One]', got '[1]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpgw4iv6m9_test.go:47: expected\
    \ '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmpgw4iv6m9_test.go:47: expected '[Nine Eight Four]', got '[9 4 8]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmphon669za_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmphon669za_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v > 0 && v < 10 {\n            result = append(result, numToString(v))\n\
    \        }\n    }\n    return reverse(result)\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp739bluc9_test.go:24:37: undefined: numToString

    /tmp/tmp739bluc9_test.go:27:12: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075030
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    // sort the array\n    for i := 0; i < len(arr); i++ {\n        for j :=\
    \ i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n             \
    \   arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    //\
    \ reverse the array\n    for i := 0; i < len(arr) / 2; i++ {\n        arr[i],\
    \ arr[len(arr) - 1 - i] = arr[len(arr) - 1 - i], arr[i]\n    }\n\n    // replace\
    \ each digit by its corresponding name\n    for i := 0; i < len(arr); i++ {\n\
    \        switch arr[i] {\n        case 1:\n            arr[i] = \"One\"\n    \
    \    case 2:\n            arr[i] = \"Two\"\n        case 3:\n            arr[i]\
    \ = \"Three\"\n        case 4:\n            arr[i] = \"Four\"\n        case 5:\n\
    \            arr[i] = \"Five\"\n        case 6:\n            arr[i] = \"Six\"\n\
    \        case 7:\n            arr[i] = \"Seven\"\n        case 8:\n          \
    \  arr[i] = \"Eight\"\n        case 9:\n            arr[i] = \"Nine\"\n      \
    \  default:\n            arr[i] = \"\"\n        }\n    }\n\n    // remove the\
    \ empty string\n    for i := 0; i < len(arr); i++ {\n        if arr[i] == \"\"\
    \ {\n            arr = append(arr[:i], arr[i+1:]...)\n            i--\n      \
    \  }\n    }\n\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprjp3qryv_test.go:43:22: cannot use "One" (untyped string constant) as
    int value in assignment

    /tmp/tmprjp3qryv_test.go:45:22: cannot use "Two" (untyped string constant) as
    int value in assignment

    /tmp/tmprjp3qryv_test.go:47:22: cannot use "Three" (untyped string constant) as
    int value in assignment

    /tmp/tmprjp3qryv_test.go:49:22: cannot use "Four" (untyped string constant) as
    int value in assignment

    /tmp/tmprjp3qryv_test.go:51:22: cannot use "Five" (untyped string constant) as
    int value in assignment

    /tmp/tmprjp3qryv_test.go:53:22: cannot use "Six" (untyped string constant) as
    int value in assignment

    /tmp/tmprjp3qryv_test.go:55:22: cannot use "Seven" (untyped string constant) as
    int value in assignment

    /tmp/tmprjp3qryv_test.go:57:22: cannot use "Eight" (untyped string constant) as
    int value in assignment

    /tmp/tmprjp3qryv_test.go:59:22: cannot use "Nine" (untyped string constant) as
    int value in assignment

    /tmp/tmprjp3qryv_test.go:61:22: cannot use "" (untyped string constant) as int
    value in assignment

    /tmp/tmprjp3qryv_test.go:61:22: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075030
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmphon669za_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmphon669za_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    // sort\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j\
    \ < len(arr); j++ {\n            if arr[i] > arr[j] {\n                arr[i],\
    \ arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    // reverse\n\
    \    for i := 0; i < len(arr) / 2; i++ {\n        arr[i], arr[len(arr) - 1 - i]\
    \ = arr[len(arr) - 1 - i], arr[i]\n    }\n\n    // replace\n    for i := 0; i\
    \ < len(arr); i++ {\n        switch arr[i] {\n        case 1:\n            arr[i]\
    \ = \"One\"\n        case 2:\n            arr[i] = \"Two\"\n        case 3:\n\
    \            arr[i] = \"Three\"\n        case 4:\n            arr[i] = \"Four\"\
    \n        case 5:\n            arr[i] = \"Five\"\n        case 6:\n          \
    \  arr[i] = \"Six\"\n        case 7:\n            arr[i] = \"Seven\"\n       \
    \ case 8:\n            arr[i] = \"Eight\"\n        case 9:\n            arr[i]\
    \ = \"Nine\"\n        default:\n            arr[i] = \"\"\n        }\n    }\n\n\
    \    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpixi00e8l_test.go:43:22: cannot use "One" (untyped string constant) as
    int value in assignment

    /tmp/tmpixi00e8l_test.go:45:22: cannot use "Two" (untyped string constant) as
    int value in assignment

    /tmp/tmpixi00e8l_test.go:47:22: cannot use "Three" (untyped string constant) as
    int value in assignment

    /tmp/tmpixi00e8l_test.go:49:22: cannot use "Four" (untyped string constant) as
    int value in assignment

    /tmp/tmpixi00e8l_test.go:51:22: cannot use "Five" (untyped string constant) as
    int value in assignment

    /tmp/tmpixi00e8l_test.go:53:22: cannot use "Six" (untyped string constant) as
    int value in assignment

    /tmp/tmpixi00e8l_test.go:55:22: cannot use "Seven" (untyped string constant) as
    int value in assignment

    /tmp/tmpixi00e8l_test.go:57:22: cannot use "Eight" (untyped string constant) as
    int value in assignment

    /tmp/tmpixi00e8l_test.go:59:22: cannot use "Nine" (untyped string constant) as
    int value in assignment

    /tmp/tmpixi00e8l_test.go:61:22: cannot use "" (untyped string constant) as int
    value in assignment

    /tmp/tmpixi00e8l_test.go:61:22: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075031
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var sorted []int\n    for _,\
    \ num := range arr {\n        if num >= 1 && num <= 9 {\n            sorted =\
    \ append(sorted, num)\n        }\n    }\n    for i := len(sorted) - 1; i >= 0;\
    \ i-- {\n        switch sorted[i] {\n        case 1:\n            result = append(result,\
    \ \"One\")\n        case 2:\n            result = append(result, \"Two\")\n  \
    \      case 3:\n            result = append(result, \"Three\")\n        case 4:\n\
    \            result = append(result, \"Four\")\n        case 5:\n            result\
    \ = append(result, \"Five\")\n        case 6:\n            result = append(result,\
    \ \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n\
    \        case 8:\n            result = append(result, \"Eight\")\n        case\
    \ 9:\n            result = append(result, \"Nine\")\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmplipkrweg_test.go:70: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmplipkrweg_test.go:70: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmplipkrweg_test.go:70: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075030
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmphon669za_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmphon669za_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    // sort the integers that are between 1 and 9 inclusive\n    var sorted\
    \ []int\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n        \
    \    sorted = append(sorted, v)\n        }\n    }\n    fmt.Println(sorted)\n\n\
    \    // reverse the resulting array\n    for i, j := 0, len(sorted)-1; i < j;\
    \ i, j = i+1, j-1 {\n        sorted[i], sorted[j] = sorted[j], sorted[i]\n   \
    \ }\n    fmt.Println(sorted)\n\n    // replace each digit by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    var result []string\n    for _, v := range sorted {\n\
    \        switch v {\n        case 1:\n            result = append(result, \"One\"\
    )\n        case 2:\n            result = append(result, \"Two\")\n        case\
    \ 3:\n            result = append(result, \"Three\")\n        case 4:\n      \
    \      result = append(result, \"Four\")\n        case 5:\n            result\
    \ = append(result, \"Five\")\n        case 6:\n            result = append(result,\
    \ \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n\
    \        case 8:\n            result = append(result, \"Eight\")\n        case\
    \ 9:\n            result = append(result, \"Nine\")\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[2 1 1 4 5 8 2 3]\n[3 2 8 5 4 1 1 2]\n[1]\n[1]\n[1 3 2]\n[2 3 1]\n[9 4\
    \ 8]\n[8 4 9]\n--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpmnguo34c_test.go:84: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpmnguo34c_test.go:84: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpmnguo34c_test.go:84: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075032
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    // sort the array\n    for i := 0; i < len(arr); i++ {\n        for j :=\
    \ i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n             \
    \   arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    //\
    \ reverse the array\n    for i := 0; i < len(arr) / 2; i++ {\n        arr[i],\
    \ arr[len(arr) - 1 - i] = arr[len(arr) - 1 - i], arr[i]\n    }\n\n    // replace\
    \ each digit by its corresponding name\n    for i := 0; i < len(arr); i++ {\n\
    \        switch arr[i] {\n        case 1:\n            arr[i] = \"One\"\n    \
    \    case 2:\n            arr[i] = \"Two\"\n        case 3:\n            arr[i]\
    \ = \"Three\"\n        case 4:\n            arr[i] = \"Four\"\n        case 5:\n\
    \            arr[i] = \"Five\"\n        case 6:\n            arr[i] = \"Six\"\n\
    \        case 7:\n            arr[i] = \"Seven\"\n        case 8:\n          \
    \  arr[i] = \"Eight\"\n        case 9:\n            arr[i] = \"Nine\"\n      \
    \  default:\n            arr[i] = \"\"\n        }\n    }\n\n    // remove empty\
    \ string\n    var result []string\n    for _, v := range arr {\n        if v !=\
    \ \"\" {\n            result = append(result, v)\n        }\n    }\n\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwkq574_z_test.go:43:22: cannot use "One" (untyped string constant) as
    int value in assignment

    /tmp/tmpwkq574_z_test.go:45:22: cannot use "Two" (untyped string constant) as
    int value in assignment

    /tmp/tmpwkq574_z_test.go:47:22: cannot use "Three" (untyped string constant) as
    int value in assignment

    /tmp/tmpwkq574_z_test.go:49:22: cannot use "Four" (untyped string constant) as
    int value in assignment

    /tmp/tmpwkq574_z_test.go:51:22: cannot use "Five" (untyped string constant) as
    int value in assignment

    /tmp/tmpwkq574_z_test.go:53:22: cannot use "Six" (untyped string constant) as
    int value in assignment

    /tmp/tmpwkq574_z_test.go:55:22: cannot use "Seven" (untyped string constant) as
    int value in assignment

    /tmp/tmpwkq574_z_test.go:57:22: cannot use "Eight" (untyped string constant) as
    int value in assignment

    /tmp/tmpwkq574_z_test.go:59:22: cannot use "Nine" (untyped string constant) as
    int value in assignment

    /tmp/tmpwkq574_z_test.go:61:22: cannot use "" (untyped string constant) as int
    value in assignment

    /tmp/tmpwkq574_z_test.go:61:22: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075031
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // TODO: implement this function\n    return nil\n}\n\
    \nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp9e43ix_t_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp9e43ix_t_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp9e43ix_t_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp9e43ix_t_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075032
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v > 0 && v < 10 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpgw4iv6m9_test.go:47: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpgw4iv6m9_test.go:47: expected '[One]', got '[1]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpgw4iv6m9_test.go:47: expected\
    \ '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmpgw4iv6m9_test.go:47: expected '[Nine Eight Four]', got '[9 4 8]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // TODO: implement me\n    return []string{}\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp9__009mn_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp9__009mn_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp9__009mn_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp9__009mn_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075030
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpjsd_9xxo_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpjsd_9xxo_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 0
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var sorted []int\n    var sorted_map\
    \ = make(map[int]string)\n    sorted_map[1] = \"One\"\n    sorted_map[2] = \"\
    Two\"\n    sorted_map[3] = \"Three\"\n    sorted_map[4] = \"Four\"\n    sorted_map[5]\
    \ = \"Five\"\n    sorted_map[6] = \"Six\"\n    sorted_map[7] = \"Seven\"\n   \
    \ sorted_map[8] = \"Eight\"\n    sorted_map[9] = \"Nine\"\n\n    for _, v := range\
    \ arr {\n        if v >= 1 && v <= 9 {\n            sorted = append(sorted, v)\n\
    \        }\n    }\n    if len(sorted) == 0 {\n        return result\n    }\n \
    \   for i := 0; i < len(sorted); i++ {\n        for j := i + 1; j < len(sorted);\
    \ j++ {\n            if sorted[i] > sorted[j] {\n                sorted[i], sorted[j]\
    \ = sorted[j], sorted[i]\n            }\n        }\n    }\n    for i := len(sorted)\
    \ - 1; i >= 0; i-- {\n        result = append(result, sorted_map[sorted[i]])\n\
    \    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075032
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var sorted []int\n    for _,\
    \ v := range arr {\n        if v > 0 && v < 10 {\n            sorted = append(sorted,\
    \ v)\n        }\n    }\n    sort.Ints(sorted)\n    for i := len(sorted) - 1; i\
    \ >= 0; i-- {\n        result = append(result, int_to_string(sorted[i]))\n   \
    \ }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate :=\
    \ by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx_nfv6v4_test.go:28:5: undefined: sort

    /tmp/tmpx_nfv6v4_test.go:30:33: undefined: int_to_string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075032
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var sorted []int\n    var sorted_map\
    \ = make(map[int]int)\n    for _, value := range arr {\n        if value >= 1\
    \ && value <= 9 {\n            sorted_map[value] += 1\n        }\n    }\n    for\
    \ key, _ := range sorted_map {\n        sorted = append(sorted, key)\n    }\n\
    \    for i := len(sorted) - 1; i >= 0; i-- {\n        for j := 0; j < sorted_map[sorted[i]];\
    \ j++ {\n            switch sorted[i] {\n            case 1:\n               \
    \ result = append(result, \"One\")\n            case 2:\n                result\
    \ = append(result, \"Two\")\n            case 3:\n                result = append(result,\
    \ \"Three\")\n            case 4:\n                result = append(result, \"\
    Four\")\n            case 5:\n                result = append(result, \"Five\"\
    )\n            case 6:\n                result = append(result, \"Six\")\n   \
    \         case 7:\n                result = append(result, \"Seven\")\n      \
    \      case 8:\n                result = append(result, \"Eight\")\n         \
    \   case 9:\n                result = append(result, \"Nine\")\n            }\n\
    \        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpio09fui7_test.go:76: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[One One Two Two Three Eight Five Four]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpio09fui7_test.go:76: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpio09fui7_test.go:76: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075032
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v > 0 && v < 10 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpgw4iv6m9_test.go:47: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpgw4iv6m9_test.go:47: expected '[One]', got '[1]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpgw4iv6m9_test.go:47: expected\
    \ '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmpgw4iv6m9_test.go:47: expected '[Nine Eight Four]', got '[9 4 8]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 0
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var sorted []int\n    for _,\
    \ v := range arr {\n        if v > 0 && v < 10 {\n            sorted = append(sorted,\
    \ v)\n        }\n    }\n    if len(sorted) == 0 {\n        return result\n   \
    \ }\n    for i := 0; i < len(sorted); i++ {\n        for j := i + 1; j < len(sorted);\
    \ j++ {\n            if sorted[i] > sorted[j] {\n                sorted[i], sorted[j]\
    \ = sorted[j], sorted[i]\n            }\n        }\n    }\n    for i := len(sorted)\
    \ - 1; i >= 0; i-- {\n        switch sorted[i] {\n        case 1:\n          \
    \  result = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075032
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // TODO: implement this function\n    return []string{}\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmps_b08waq_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmps_b08waq_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmps_b08waq_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmps_b08waq_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075030
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var sorted []int\n    for _,\
    \ v := range arr {\n        if v > 0 && v < 10 {\n            sorted = append(sorted,\
    \ v)\n        }\n    }\n    for i := len(sorted) - 1; i >= 0; i-- {\n        switch\
    \ sorted[i] {\n        case 1:\n            result = append(result, \"One\")\n\
    \        case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp1bk4ffqn_test.go:70: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp1bk4ffqn_test.go:70: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp1bk4ffqn_test.go:70: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075030
- exit_code: 0
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var one, two, three, four, five,\
    \ six, seven, eight, nine int\n    for _, v := range arr {\n        switch v {\n\
    \        case 1:\n            one++\n        case 2:\n            two++\n    \
    \    case 3:\n            three++\n        case 4:\n            four++\n     \
    \   case 5:\n            five++\n        case 6:\n            six++\n        case\
    \ 7:\n            seven++\n        case 8:\n            eight++\n        case\
    \ 9:\n            nine++\n        }\n    }\n    for i := 0; i < nine; i++ {\n\
    \        result = append(result, \"Nine\")\n    }\n    for i := 0; i < eight;\
    \ i++ {\n        result = append(result, \"Eight\")\n    }\n    for i := 0; i\
    \ < seven; i++ {\n        result = append(result, \"Seven\")\n    }\n    for i\
    \ := 0; i < six; i++ {\n        result = append(result, \"Six\")\n    }\n    for\
    \ i := 0; i < five; i++ {\n        result = append(result, \"Five\")\n    }\n\
    \    for i := 0; i < four; i++ {\n        result = append(result, \"Four\")\n\
    \    }\n    for i := 0; i < three; i++ {\n        result = append(result, \"Three\"\
    )\n    }\n    for i := 0; i < two; i++ {\n        result = append(result, \"Two\"\
    )\n    }\n    for i := 0; i < one; i++ {\n        result = append(result, \"One\"\
    )\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075032
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v > 0 && v < 10 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpgw4iv6m9_test.go:47: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpgw4iv6m9_test.go:47: expected '[One]', got '[1]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpgw4iv6m9_test.go:47: expected\
    \ '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmpgw4iv6m9_test.go:47: expected '[Nine Eight Four]', got '[9 4 8]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    res := []string{}\n    for _, v := range arr {\n    \
    \    if v >= 1 && v <= 9 {\n            res = append(res, fmt.Sprintf(\"%d\",\
    \ v))\n        }\n    }\n    return res\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpaah2sfku_test.go:47: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpaah2sfku_test.go:47: expected '[One]', got '[1]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpaah2sfku_test.go:47: expected\
    \ '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmpaah2sfku_test.go:47: expected '[Nine Eight Four]', got '[9 4 8]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075032
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      switch v {\n        case 1:\n            result = append(result, \"One\"\
    )\n        case 2:\n            result = append(result, \"Two\")\n        case\
    \ 3:\n            result = append(result, \"Three\")\n        case 4:\n      \
    \      result = append(result, \"Four\")\n        case 5:\n            result\
    \ = append(result, \"Five\")\n        case 6:\n            result = append(result,\
    \ \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n\
    \        case 8:\n            result = append(result, \"Eight\")\n        case\
    \ 9:\n            result = append(result, \"Nine\")\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpm91yhqo__test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Two One One Four Five Eight Two Three]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpm91yhqo__test.go:64: expected\
    \ '[Three Two One]', got '[One Three Two]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpm91yhqo__test.go:64: expected '[Nine Eight Four]', got '[Nine\
    \ Four Eight]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075030
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var nums []int\n    for _, v\
    \ := range arr {\n        if v > 0 && v < 10 {\n            nums = append(nums,\
    \ v)\n        }\n    }\n    if len(nums) == 0 {\n        return result\n    }\n\
    \    sort(nums)\n    for _, v := range nums {\n        result = append(result,\
    \ numToString(v))\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpusr9_5b7_test.go:31:5: undefined: sort

    /tmp/tmpusr9_5b7_test.go:33:33: undefined: numToString

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075032
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1,\
    \ j-1 {\n        result[i], result[j] = result[j], result[i]\n    }\n    for i,\
    \ v := range result {\n        switch v {\n        case \"1\":\n            result[i]\
    \ = \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp7j_zyp11_test.go:72: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp7j_zyp11_test.go:72: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp7j_zyp11_test.go:72: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075033
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpkrk8gaq3_test.go:41: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpkrk8gaq3_test.go:41: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpkrk8gaq3_test.go:41: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpkrk8gaq3_test.go:41:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075030
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // TODO: implement this function\n    return nil\n}\n\
    \nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp9e43ix_t_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp9e43ix_t_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp9e43ix_t_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp9e43ix_t_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075032
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var tmp []int\n    for _, v\
    \ := range arr {\n        if v > 0 && v < 10 {\n            tmp = append(tmp,\
    \ v)\n        }\n    }\n    for i := len(tmp) - 1; i >= 0; i-- {\n        switch\
    \ tmp[i] {\n        case 1:\n            result = append(result, \"One\")\n  \
    \      case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp07cdsb0w_test.go:70: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp07cdsb0w_test.go:70: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp07cdsb0w_test.go:70: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075030
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var sorted []int\n    for _,\
    \ v := range arr {\n        if v > 0 && v < 10 {\n            sorted = append(sorted,\
    \ v)\n        }\n    }\n    for i := len(sorted) - 1; i >= 0; i-- {\n        switch\
    \ sorted[i] {\n        case 1:\n            result = append(result, \"One\")\n\
    \        case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp1bk4ffqn_test.go:70: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp1bk4ffqn_test.go:70: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp1bk4ffqn_test.go:70: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075030
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmphon669za_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmphon669za_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var sorted []int\n    for _,\
    \ v := range arr {\n        if v > 0 && v < 10 {\n            sorted = append(sorted,\
    \ v)\n        }\n    }\n    for i := len(sorted) - 1; i >= 0; i-- {\n        switch\
    \ sorted[i] {\n        case 1:\n            result = append(result, \"One\")\n\
    \        case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp1bk4ffqn_test.go:70: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp1bk4ffqn_test.go:70: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp1bk4ffqn_test.go:70: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075030
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpkrk8gaq3_test.go:41: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpkrk8gaq3_test.go:41: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpkrk8gaq3_test.go:41: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpkrk8gaq3_test.go:41:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075030
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpjsd_9xxo_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpjsd_9xxo_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfvfe0hjx_test.go:47: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpfvfe0hjx_test.go:47: expected '[One]', got '[1]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpfvfe0hjx_test.go:47: expected\
    \ '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmpfvfe0hjx_test.go:47: expected '[Nine Eight Four]', got '[9 4 8]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpjsd_9xxo_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpjsd_9xxo_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpjsd_9xxo_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpjsd_9xxo_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpjsd_9xxo_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpjsd_9xxo_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // Your code goes here\n    return []string{}\n}\n\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpbcko_yb2_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpbcko_yb2_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpbcko_yb2_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpbcko_yb2_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075033
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpkrk8gaq3_test.go:41: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpkrk8gaq3_test.go:41: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpkrk8gaq3_test.go:41: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpkrk8gaq3_test.go:41:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075030
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // TODO: implement this function\n    return []string{}\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmps_b08waq_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmps_b08waq_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmps_b08waq_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmps_b08waq_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075030
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1,\
    \ j-1 {\n        result[i], result[j] = result[j], result[i]\n    }\n    for i,\
    \ v := range result {\n        switch v {\n        case \"1\":\n            result[i]\
    \ = \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp7j_zyp11_test.go:72: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp7j_zyp11_test.go:72: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp7j_zyp11_test.go:72: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075033
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var sorted_arr []int\n    var\
    \ sorted_arr_map = make(map[int]int)\n    for _, v := range arr {\n        if\
    \ v > 0 && v < 10 {\n            sorted_arr = append(sorted_arr, v)\n        \
    \    sorted_arr_map[v] = v\n        }\n    }\n    sort(sorted_arr)\n    for i\
    \ := len(sorted_arr) - 1; i >= 0; i-- {\n        result = append(result, get_string(sorted_arr[i]))\n\
    \    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzjubo9k4_test.go:30:5: undefined: sort

    /tmp/tmpzjubo9k4_test.go:32:33: undefined: get_string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075032
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v > 0 && v < 10 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpgw4iv6m9_test.go:47: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpgw4iv6m9_test.go:47: expected '[One]', got '[1]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpgw4iv6m9_test.go:47: expected\
    \ '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmpgw4iv6m9_test.go:47: expected '[Nine Eight Four]', got '[9 4 8]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpjsd_9xxo_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpjsd_9xxo_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, i := range arr {\n  \
    \      if i > 0 && i < 10 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", i))\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp5ujo7aoc_test.go:47: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmp5ujo7aoc_test.go:47: expected '[One]', got '[1]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmp5ujo7aoc_test.go:47: expected\
    \ '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmp5ujo7aoc_test.go:47: expected '[Nine Eight Four]', got '[9 4 8]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075033
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpkrk8gaq3_test.go:41: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpkrk8gaq3_test.go:41: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpkrk8gaq3_test.go:41: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpkrk8gaq3_test.go:41:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075030
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v < 1 || v > 9 {\n            continue\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"%d\", v))\n    }\n    return result\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpz3sdir51_test.go:48: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpz3sdir51_test.go:48: expected '[One]', got '[1]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpz3sdir51_test.go:48: expected\
    \ '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmpz3sdir51_test.go:48: expected '[Nine Eight Four]', got '[9 4 8]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075033
- exit_code: 0
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var temp []int\n    for _, v\
    \ := range arr {\n        if v > 0 && v < 10 {\n            temp = append(temp,\
    \ v)\n        }\n    }\n    if len(temp) == 0 {\n        return result\n    }\n\
    \    for i := 0; i < len(temp); i++ {\n        for j := i + 1; j < len(temp);\
    \ j++ {\n            if temp[i] > temp[j] {\n                temp[i], temp[j]\
    \ = temp[j], temp[i]\n            }\n        }\n    }\n    for i := len(temp)\
    \ - 1; i >= 0; i-- {\n        switch temp[i] {\n        case 1:\n            result\
    \ = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075033
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    // sort\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j\
    \ < len(arr); j++ {\n            if arr[i] > arr[j] {\n                arr[i],\
    \ arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    // reverse\n\
    \    for i := 0; i < len(arr) / 2; i++ {\n        arr[i], arr[len(arr) - 1 - i]\
    \ = arr[len(arr) - 1 - i], arr[i]\n    }\n\n    // replace\n    for i := 0; i\
    \ < len(arr); i++ {\n        switch arr[i] {\n        case 1:\n            arr[i]\
    \ = \"One\"\n        case 2:\n            arr[i] = \"Two\"\n        case 3:\n\
    \            arr[i] = \"Three\"\n        case 4:\n            arr[i] = \"Four\"\
    \n        case 5:\n            arr[i] = \"Five\"\n        case 6:\n          \
    \  arr[i] = \"Six\"\n        case 7:\n            arr[i] = \"Seven\"\n       \
    \ case 8:\n            arr[i] = \"Eight\"\n        case 9:\n            arr[i]\
    \ = \"Nine\"\n        default:\n            arr[i] = \"\"\n        }\n    }\n\n\
    \    // filter\n    var result []string\n    for _, v := range arr {\n       \
    \ if v != \"\" {\n            result = append(result, v)\n        }\n    }\n\n\
    \    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5ww1qxpn_test.go:43:22: cannot use "One" (untyped string constant) as
    int value in assignment

    /tmp/tmp5ww1qxpn_test.go:45:22: cannot use "Two" (untyped string constant) as
    int value in assignment

    /tmp/tmp5ww1qxpn_test.go:47:22: cannot use "Three" (untyped string constant) as
    int value in assignment

    /tmp/tmp5ww1qxpn_test.go:49:22: cannot use "Four" (untyped string constant) as
    int value in assignment

    /tmp/tmp5ww1qxpn_test.go:51:22: cannot use "Five" (untyped string constant) as
    int value in assignment

    /tmp/tmp5ww1qxpn_test.go:53:22: cannot use "Six" (untyped string constant) as
    int value in assignment

    /tmp/tmp5ww1qxpn_test.go:55:22: cannot use "Seven" (untyped string constant) as
    int value in assignment

    /tmp/tmp5ww1qxpn_test.go:57:22: cannot use "Eight" (untyped string constant) as
    int value in assignment

    /tmp/tmp5ww1qxpn_test.go:59:22: cannot use "Nine" (untyped string constant) as
    int value in assignment

    /tmp/tmp5ww1qxpn_test.go:61:22: cannot use "" (untyped string constant) as int
    value in assignment

    /tmp/tmp5ww1qxpn_test.go:61:22: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075032
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var tmp []int\n    for _, v\
    \ := range arr {\n        if v > 0 && v < 10 {\n            tmp = append(tmp,\
    \ v)\n        }\n    }\n    for i := len(tmp) - 1; i >= 0; i-- {\n        switch\
    \ tmp[i] {\n        case 1:\n            result = append(result, \"One\")\n  \
    \      case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp07cdsb0w_test.go:70: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp07cdsb0w_test.go:70: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp07cdsb0w_test.go:70: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075030
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpjsd_9xxo_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpjsd_9xxo_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpjsd_9xxo_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpjsd_9xxo_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmphon669za_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmphon669za_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var sorted []int\n    for _,\
    \ v := range arr {\n        if v > 0 && v < 10 {\n            sorted = append(sorted,\
    \ v)\n        }\n    }\n    for i := len(sorted) - 1; i >= 0; i-- {\n        switch\
    \ sorted[i] {\n        case 1:\n            result = append(result, \"One\")\n\
    \        case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp1bk4ffqn_test.go:70: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp1bk4ffqn_test.go:70: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp1bk4ffqn_test.go:70: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075030
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmphon669za_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmphon669za_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var sorted_arr []int\n    for\
    \ _, v := range arr {\n        if v > 0 && v < 10 {\n            sorted_arr =\
    \ append(sorted_arr, v)\n        }\n    }\n    sort.Ints(sorted_arr)\n    for\
    \ i := len(sorted_arr) - 1; i >= 0; i-- {\n        switch sorted_arr[i] {\n  \
    \      case 1:\n            result = append(result, \"One\")\n        case 2:\n\
    \            result = append(result, \"Two\")\n        case 3:\n            result\
    \ = append(result, \"Three\")\n        case 4:\n            result = append(result,\
    \ \"Four\")\n        case 5:\n            result = append(result, \"Five\")\n\
    \        case 6:\n            result = append(result, \"Six\")\n        case 7:\n\
    \            result = append(result, \"Seven\")\n        case 8:\n           \
    \ result = append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsq3d3sop_test.go:28:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075032
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmphon669za_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmphon669za_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmphon669za_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmphon669za_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmphon669za_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmphon669za_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpjsd_9xxo_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpjsd_9xxo_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, numToString(v))\n\
    \        }\n    }\n    return reverse(result)\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmeecl0yl_test.go:24:37: undefined: numToString

    /tmp/tmpmeecl0yl_test.go:27:12: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075032
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var sorted_arr []int\n    for\
    \ _, v := range arr {\n        if v > 0 && v < 10 {\n            sorted_arr =\
    \ append(sorted_arr, v)\n        }\n    }\n    sort.Ints(sorted_arr)\n    for\
    \ i := len(sorted_arr) - 1; i >= 0; i-- {\n        switch sorted_arr[i] {\n  \
    \      case 1:\n            result = append(result, \"One\")\n        case 2:\n\
    \            result = append(result, \"Two\")\n        case 3:\n            result\
    \ = append(result, \"Three\")\n        case 4:\n            result = append(result,\
    \ \"Four\")\n        case 5:\n            result = append(result, \"Five\")\n\
    \        case 6:\n            result = append(result, \"Six\")\n        case 7:\n\
    \            result = append(result, \"Seven\")\n        case 8:\n           \
    \ result = append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsq3d3sop_test.go:28:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075032
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var res []string\n    for _, v := range arr {\n     \
    \   if v >= 1 && v <= 9 {\n            res = append(res, fmt.Sprintf(\"%d\", v))\n\
    \        }\n    }\n    return res\n}\n\nfunc TestBy_Length(t *testing.T) {\n \
    \ candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpnxvytu0p_test.go:47: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpnxvytu0p_test.go:47: expected '[One]', got '[1]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpnxvytu0p_test.go:47: expected\
    \ '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmpnxvytu0p_test.go:47: expected '[Nine Eight Four]', got '[9 4 8]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075030
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var sorted []int\n    for _,\
    \ v := range arr {\n        if v >= 1 && v <= 9 {\n            sorted = append(sorted,\
    \ v)\n        }\n    }\n    for i := len(sorted) - 1; i >= 0; i-- {\n        switch\
    \ sorted[i] {\n        case 1:\n            result = append(result, \"One\")\n\
    \        case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpgxdddhdz_test.go:70: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpgxdddhdz_test.go:70: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpgxdddhdz_test.go:70: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmphon669za_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmphon669za_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpjsd_9xxo_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpjsd_9xxo_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    // Sort the array\n    for i := 0; i < len(arr); i++ {\n        for j :=\
    \ i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n             \
    \   arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    //\
    \ Reverse the array\n    for i := 0; i < len(arr) / 2; i++ {\n        arr[i],\
    \ arr[len(arr) - i - 1] = arr[len(arr) - i - 1], arr[i]\n    }\n\n    // Replace\
    \ each digit by its corresponding name\n    for i := 0; i < len(arr); i++ {\n\
    \        switch arr[i] {\n        case 1:\n            arr[i] = \"One\"\n    \
    \    case 2:\n            arr[i] = \"Two\"\n        case 3:\n            arr[i]\
    \ = \"Three\"\n        case 4:\n            arr[i] = \"Four\"\n        case 5:\n\
    \            arr[i] = \"Five\"\n        case 6:\n            arr[i] = \"Six\"\n\
    \        case 7:\n            arr[i] = \"Seven\"\n        case 8:\n          \
    \  arr[i] = \"Eight\"\n        case 9:\n            arr[i] = \"Nine\"\n      \
    \  default:\n            arr[i] = \"\"\n        }\n    }\n\n    return arr\n}\n\
    \nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdod2unfn_test.go:43:22: cannot use "One" (untyped string constant) as
    int value in assignment

    /tmp/tmpdod2unfn_test.go:45:22: cannot use "Two" (untyped string constant) as
    int value in assignment

    /tmp/tmpdod2unfn_test.go:47:22: cannot use "Three" (untyped string constant) as
    int value in assignment

    /tmp/tmpdod2unfn_test.go:49:22: cannot use "Four" (untyped string constant) as
    int value in assignment

    /tmp/tmpdod2unfn_test.go:51:22: cannot use "Five" (untyped string constant) as
    int value in assignment

    /tmp/tmpdod2unfn_test.go:53:22: cannot use "Six" (untyped string constant) as
    int value in assignment

    /tmp/tmpdod2unfn_test.go:55:22: cannot use "Seven" (untyped string constant) as
    int value in assignment

    /tmp/tmpdod2unfn_test.go:57:22: cannot use "Eight" (untyped string constant) as
    int value in assignment

    /tmp/tmpdod2unfn_test.go:59:22: cannot use "Nine" (untyped string constant) as
    int value in assignment

    /tmp/tmpdod2unfn_test.go:61:22: cannot use "" (untyped string constant) as int
    value in assignment

    /tmp/tmpdod2unfn_test.go:61:22: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075028
- exit_code: 0
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var sorted []int\n    var sorted_map\
    \ = make(map[int]int)\n    for _, v := range arr {\n        if v > 0 && v < 10\
    \ {\n            sorted_map[v]++\n        }\n    }\n    for i := 1; i < 10; i++\
    \ {\n        for j := 0; j < sorted_map[i]; j++ {\n            sorted = append(sorted,\
    \ i)\n        }\n    }\n    for i := len(sorted) - 1; i >= 0; i-- {\n        switch\
    \ sorted[i] {\n        case 1:\n            result = append(result, \"One\")\n\
    \        case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075033
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var res []string\n    for _, v := range arr {\n     \
    \   if v < 1 || v > 9 {\n            continue\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"%d\", v))\n    }\n    return res\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpiatr1tkc_test.go:48: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpiatr1tkc_test.go:48: expected '[One]', got '[1]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpiatr1tkc_test.go:48: expected\
    \ '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmpiatr1tkc_test.go:48: expected '[Nine Eight Four]', got '[9 4 8]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmppxgydlqe_test.go:41: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmppxgydlqe_test.go:41: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmppxgydlqe_test.go:41: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmppxgydlqe_test.go:41:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmphon669za_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmphon669za_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // TODO: Implement me\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmphovc67hb_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmphovc67hb_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmphovc67hb_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmphovc67hb_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075033
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v > 0 && v < 10 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpgw4iv6m9_test.go:47: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpgw4iv6m9_test.go:47: expected '[One]', got '[1]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpgw4iv6m9_test.go:47: expected\
    \ '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmpgw4iv6m9_test.go:47: expected '[Nine Eight Four]', got '[9 4 8]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpjsd_9xxo_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpjsd_9xxo_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v > 0 && v < 10 {\n            result = append(result, convert(v))\n\
    \        }\n    }\n    reverse(result)\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpymz2_n48_test.go:24:37: undefined: convert

    /tmp/tmpymz2_n48_test.go:27:5: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075032
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmphon669za_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmphon669za_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var temp []int\n    for _, v\
    \ := range arr {\n        if v >= 1 && v <= 9 {\n            temp = append(temp,\
    \ v)\n        }\n    }\n    for i := len(temp) - 1; i >= 0; i-- {\n        result\
    \ = append(result, get_name(temp[i]))\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptzhcstpn_test.go:29:33: undefined: get_name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075033
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmphon669za_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmphon669za_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpjsd_9xxo_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpjsd_9xxo_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var sorted []int\n    for _,\
    \ v := range arr {\n        if v >= 1 && v <= 9 {\n            sorted = append(sorted,\
    \ v)\n        }\n    }\n    if len(sorted) == 0 {\n        return result\n   \
    \ }\n    for i := len(sorted) - 1; i >= 0; i-- {\n        switch sorted[i] {\n\
    \        case 1:\n            result = append(result, \"One\")\n        case 2:\n\
    \            result = append(result, \"Two\")\n        case 3:\n            result\
    \ = append(result, \"Three\")\n        case 4:\n            result = append(result,\
    \ \"Four\")\n        case 5:\n            result = append(result, \"Five\")\n\
    \        case 6:\n            result = append(result, \"Six\")\n        case 7:\n\
    \            result = append(result, \"Seven\")\n        case 8:\n           \
    \ result = append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpprhkgh7w_test.go:73: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpprhkgh7w_test.go:73: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpprhkgh7w_test.go:73: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075033
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    // sort the array\n    for i := 0; i < len(arr); i++ {\n        for j :=\
    \ i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n             \
    \   arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    //\
    \ reverse the array\n    for i := 0; i < len(arr) / 2; i++ {\n        arr[i],\
    \ arr[len(arr) - 1 - i] = arr[len(arr) - 1 - i], arr[i]\n    }\n\n    // replace\
    \ each digit by its corresponding name\n    for i := 0; i < len(arr); i++ {\n\
    \        switch arr[i] {\n        case 1:\n            arr[i] = \"One\"\n    \
    \    case 2:\n            arr[i] = \"Two\"\n        case 3:\n            arr[i]\
    \ = \"Three\"\n        case 4:\n            arr[i] = \"Four\"\n        case 5:\n\
    \            arr[i] = \"Five\"\n        case 6:\n            arr[i] = \"Six\"\n\
    \        case 7:\n            arr[i] = \"Seven\"\n        case 8:\n          \
    \  arr[i] = \"Eight\"\n        case 9:\n            arr[i] = \"Nine\"\n      \
    \  default:\n            arr[i] = \"\"\n        }\n    }\n\n    // remove empty\
    \ string\n    for i := 0; i < len(arr); i++ {\n        if arr[i] == \"\" {\n \
    \           arr = append(arr[:i], arr[i+1:]...)\n            i--\n        }\n\
    \    }\n\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmel8e_wr_test.go:43:22: cannot use "One" (untyped string constant) as
    int value in assignment

    /tmp/tmpmel8e_wr_test.go:45:22: cannot use "Two" (untyped string constant) as
    int value in assignment

    /tmp/tmpmel8e_wr_test.go:47:22: cannot use "Three" (untyped string constant) as
    int value in assignment

    /tmp/tmpmel8e_wr_test.go:49:22: cannot use "Four" (untyped string constant) as
    int value in assignment

    /tmp/tmpmel8e_wr_test.go:51:22: cannot use "Five" (untyped string constant) as
    int value in assignment

    /tmp/tmpmel8e_wr_test.go:53:22: cannot use "Six" (untyped string constant) as
    int value in assignment

    /tmp/tmpmel8e_wr_test.go:55:22: cannot use "Seven" (untyped string constant) as
    int value in assignment

    /tmp/tmpmel8e_wr_test.go:57:22: cannot use "Eight" (untyped string constant) as
    int value in assignment

    /tmp/tmpmel8e_wr_test.go:59:22: cannot use "Nine" (untyped string constant) as
    int value in assignment

    /tmp/tmpmel8e_wr_test.go:61:22: cannot use "" (untyped string constant) as int
    value in assignment

    /tmp/tmpmel8e_wr_test.go:61:22: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075033
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpjsd_9xxo_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpjsd_9xxo_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmphon669za_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmphon669za_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 0
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var sorted []int\n    for _,\
    \ v := range arr {\n        if v > 0 && v < 10 {\n            sorted = append(sorted,\
    \ v)\n        }\n    }\n    if len(sorted) == 0 {\n        return result\n   \
    \ }\n    for i := 0; i < len(sorted); i++ {\n        for j := i + 1; j < len(sorted);\
    \ j++ {\n            if sorted[i] > sorted[j] {\n                sorted[i], sorted[j]\
    \ = sorted[j], sorted[i]\n            }\n        }\n    }\n    for i := len(sorted)\
    \ - 1; i >= 0; i-- {\n        switch sorted[i] {\n        case 1:\n          \
    \  result = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075032
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmppxgydlqe_test.go:41: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmppxgydlqe_test.go:41: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmppxgydlqe_test.go:41: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmppxgydlqe_test.go:41:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    var result []string\n    var sorted []int\n    for _, v := range arr {\n\
    \        if v > 0 && v < 10 {\n            sorted = append(sorted, v)\n      \
    \  }\n    }\n    sort(sorted)\n    for i := len(sorted) - 1; i >= 0; i-- {\n \
    \       result = append(result, to_string(sorted[i]))\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprnekxdld_test.go:32:5: undefined: sort

    /tmp/tmprnekxdld_test.go:34:33: undefined: to_string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075033
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var numbers = map[int]string{\n\
    \        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"\
    Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n  \
    \      8: \"Eight\",\n        9: \"Nine\",\n    }\n    for _, v := range arr {\n\
    \        if v >= 1 && v <= 9 {\n            result = append(result, numbers[v])\n\
    \        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1, j-1 {\n\
    \        result[i], result[j] = result[j], result[i]\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp_0eo3rdo_test.go:61: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp_0eo3rdo_test.go:61: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp_0eo3rdo_test.go:61: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var temp []int\n    for _, v\
    \ := range arr {\n        if v >= 1 && v <= 9 {\n            temp = append(temp,\
    \ v)\n        }\n    }\n    for i := len(temp) - 1; i >= 0; i-- {\n        switch\
    \ temp[i] {\n        case 1:\n            result = append(result, \"One\")\n \
    \       case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp3mtj4thd_test.go:70: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp3mtj4thd_test.go:70: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp3mtj4thd_test.go:70: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v > 0 && v < 10 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpgw4iv6m9_test.go:47: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpgw4iv6m9_test.go:47: expected '[One]', got '[1]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpgw4iv6m9_test.go:47: expected\
    \ '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmpgw4iv6m9_test.go:47: expected '[Nine Eight Four]', got '[9 4 8]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmppxgydlqe_test.go:41: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmppxgydlqe_test.go:41: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmppxgydlqe_test.go:41: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmppxgydlqe_test.go:41:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var nums []int\n    for _, num\
    \ := range arr {\n        if num > 0 && num < 10 {\n            nums = append(nums,\
    \ num)\n        }\n    }\n    if len(nums) == 0 {\n        return result\n   \
    \ }\n    for i := len(nums) - 1; i >= 0; i-- {\n        switch nums[i] {\n   \
    \     case 1:\n            result = append(result, \"One\")\n        case 2:\n\
    \            result = append(result, \"Two\")\n        case 3:\n            result\
    \ = append(result, \"Three\")\n        case 4:\n            result = append(result,\
    \ \"Four\")\n        case 5:\n            result = append(result, \"Five\")\n\
    \        case 6:\n            result = append(result, \"Six\")\n        case 7:\n\
    \            result = append(result, \"Seven\")\n        case 8:\n           \
    \ result = append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmplgbynlde_test.go:73: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmplgbynlde_test.go:73: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmplgbynlde_test.go:73: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075033
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    // sort\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j\
    \ < len(arr); j++ {\n            if arr[i] > arr[j] {\n                arr[i],\
    \ arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    // reverse\n\
    \    for i := 0; i < len(arr) / 2; i++ {\n        arr[i], arr[len(arr) - 1 - i]\
    \ = arr[len(arr) - 1 - i], arr[i]\n    }\n\n    // replace\n    for i := 0; i\
    \ < len(arr); i++ {\n        switch arr[i] {\n        case 1:\n            arr[i]\
    \ = \"One\"\n        case 2:\n            arr[i] = \"Two\"\n        case 3:\n\
    \            arr[i] = \"Three\"\n        case 4:\n            arr[i] = \"Four\"\
    \n        case 5:\n            arr[i] = \"Five\"\n        case 6:\n          \
    \  arr[i] = \"Six\"\n        case 7:\n            arr[i] = \"Seven\"\n       \
    \ case 8:\n            arr[i] = \"Eight\"\n        case 9:\n            arr[i]\
    \ = \"Nine\"\n        default:\n            arr[i] = \"\"\n        }\n    }\n\n\
    \    // filter\n    var result []string\n    for _, v := range arr {\n       \
    \ if v != \"\" {\n            result = append(result, v)\n        }\n    }\n\n\
    \    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5ww1qxpn_test.go:43:22: cannot use "One" (untyped string constant) as
    int value in assignment

    /tmp/tmp5ww1qxpn_test.go:45:22: cannot use "Two" (untyped string constant) as
    int value in assignment

    /tmp/tmp5ww1qxpn_test.go:47:22: cannot use "Three" (untyped string constant) as
    int value in assignment

    /tmp/tmp5ww1qxpn_test.go:49:22: cannot use "Four" (untyped string constant) as
    int value in assignment

    /tmp/tmp5ww1qxpn_test.go:51:22: cannot use "Five" (untyped string constant) as
    int value in assignment

    /tmp/tmp5ww1qxpn_test.go:53:22: cannot use "Six" (untyped string constant) as
    int value in assignment

    /tmp/tmp5ww1qxpn_test.go:55:22: cannot use "Seven" (untyped string constant) as
    int value in assignment

    /tmp/tmp5ww1qxpn_test.go:57:22: cannot use "Eight" (untyped string constant) as
    int value in assignment

    /tmp/tmp5ww1qxpn_test.go:59:22: cannot use "Nine" (untyped string constant) as
    int value in assignment

    /tmp/tmp5ww1qxpn_test.go:61:22: cannot use "" (untyped string constant) as int
    value in assignment

    /tmp/tmp5ww1qxpn_test.go:61:22: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075032
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    var numbers = map[int]string{\n        1: \"One\"\
    ,\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5:\
    \ \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\"\
    ,\n        9: \"Nine\",\n    }\n    for _, v := range arr {\n        if v >= 1\
    \ && v <= 9 {\n            result = append(result, numbers[v])\n        }\n  \
    \  }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1, j-1 {\n        result[i],\
    \ result[j] = result[j], result[i]\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpzuu8wugt_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpzuu8wugt_test.go:64: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpzuu8wugt_test.go:64: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075033
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var temp []int\n    for _, v\
    \ := range arr {\n        if v > 0 && v < 10 {\n            temp = append(temp,\
    \ v)\n        }\n    }\n    sort.Ints(temp)\n    for i := len(temp) - 1; i >=\
    \ 0; i-- {\n        switch temp[i] {\n        case 1:\n            result = append(result,\
    \ \"One\")\n        case 2:\n            result = append(result, \"Two\")\n  \
    \      case 3:\n            result = append(result, \"Three\")\n        case 4:\n\
    \            result = append(result, \"Four\")\n        case 5:\n            result\
    \ = append(result, \"Five\")\n        case 6:\n            result = append(result,\
    \ \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n\
    \        case 8:\n            result = append(result, \"Eight\")\n        case\
    \ 9:\n            result = append(result, \"Nine\")\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwm83hp6x_test.go:28:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075033
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, num := range arr {\n\
    \        if num < 1 || num > 9 {\n            continue\n        }\n        switch\
    \ num {\n        case 1:\n            result = append(result, \"One\")\n     \
    \   case 2:\n            result = append(result, \"Two\")\n        case 3:\n \
    \           result = append(result, \"Three\")\n        case 4:\n            result\
    \ = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    for i, j := 0,\
    \ len(result)-1; i < j; i, j = i+1, j-1 {\n        result[i], result[j] = result[j],\
    \ result[i]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxo238m91_test.go:70: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpxo238m91_test.go:70: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpxo238m91_test.go:70: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075033
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpjsd_9xxo_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpjsd_9xxo_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var sorted_arr []int\n    for\
    \ _, v := range arr {\n        if v > 0 && v < 10 {\n            sorted_arr =\
    \ append(sorted_arr, v)\n        }\n    }\n    sort.Ints(sorted_arr)\n    for\
    \ i := len(sorted_arr) - 1; i >= 0; i-- {\n        switch sorted_arr[i] {\n  \
    \      case 1:\n            result = append(result, \"One\")\n        case 2:\n\
    \            result = append(result, \"Two\")\n        case 3:\n            result\
    \ = append(result, \"Three\")\n        case 4:\n            result = append(result,\
    \ \"Four\")\n        case 5:\n            result = append(result, \"Five\")\n\
    \        case 6:\n            result = append(result, \"Six\")\n        case 7:\n\
    \            result = append(result, \"Seven\")\n        case 8:\n           \
    \ result = append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsq3d3sop_test.go:28:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075032
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmphon669za_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmphon669za_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfvfe0hjx_test.go:47: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpfvfe0hjx_test.go:47: expected '[One]', got '[1]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpfvfe0hjx_test.go:47: expected\
    \ '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmpfvfe0hjx_test.go:47: expected '[Nine Eight Four]', got '[9 4 8]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpjsd_9xxo_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpjsd_9xxo_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpjsd_9xxo_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // TODO: implement me\n    return []string{}\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp9__009mn_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp9__009mn_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp9__009mn_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp9__009mn_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075030
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var sorted []int\n    var dict\
    \ = map[int]string{\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\"\
    ,\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7:\
    \ \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n\n    for _,\
    \ v := range arr {\n        if v >= 1 && v <= 9 {\n            sorted = append(sorted,\
    \ v)\n        }\n    }\n\n    for i := len(sorted) - 1; i >= 0; i-- {\n      \
    \  result = append(result, dict[sorted[i]])\n    }\n\n    return result\n}\n\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpone10sr8_test.go:65: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpone10sr8_test.go:65: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpone10sr8_test.go:65: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075033
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var sorted []int\n    for _,\
    \ v := range arr {\n        if v > 0 && v < 10 {\n            sorted = append(sorted,\
    \ v)\n        }\n    }\n    sort.Ints(sorted)\n    for i := len(sorted) - 1; i\
    \ >= 0; i-- {\n        result = append(result, numToString(sorted[i]))\n    }\n\
    \    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprdloew8p_test.go:28:5: undefined: sort

    /tmp/tmprdloew8p_test.go:30:33: undefined: numToString

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075033
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v < 1 || v > 9 {\n            continue\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"%d\", v))\n    }\n    return result\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpz3sdir51_test.go:48: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpz3sdir51_test.go:48: expected '[One]', got '[1]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpz3sdir51_test.go:48: expected\
    \ '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmpz3sdir51_test.go:48: expected '[Nine Eight Four]', got '[9 4 8]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075033
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfvfe0hjx_test.go:47: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpfvfe0hjx_test.go:47: expected '[One]', got '[1]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpfvfe0hjx_test.go:47: expected\
    \ '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmpfvfe0hjx_test.go:47: expected '[Nine Eight Four]', got '[9 4 8]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // TODO: implement\n    return []string{}\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpdgktifq7_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpdgktifq7_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpdgktifq7_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpdgktifq7_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075033
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfvfe0hjx_test.go:47: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpfvfe0hjx_test.go:47: expected '[One]', got '[1]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpfvfe0hjx_test.go:47: expected\
    \ '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmpfvfe0hjx_test.go:47: expected '[Nine Eight Four]', got '[9 4 8]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075028
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v < 1 || v > 9 {\n            continue\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"%d\", v))\n    }\n    return result\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpz3sdir51_test.go:48: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpz3sdir51_test.go:48: expected '[One]', got '[1]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpz3sdir51_test.go:48: expected\
    \ '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmpz3sdir51_test.go:48: expected '[Nine Eight Four]', got '[9 4 8]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075033
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmphon669za_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmphon669za_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmphon669za_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075028
