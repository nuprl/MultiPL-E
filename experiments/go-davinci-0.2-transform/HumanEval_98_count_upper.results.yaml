language: go_test.go
name: HumanEval_98_count_upper
results:
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpqeu8793w_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpqeu8793w_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpqeu8793w_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, r := range s {\n        if i % 2 == 0 && r >= 'A'\
    \ && r <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpj6aeirrt_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpj6aeirrt_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpj6aeirrt_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, v := range s {\n        if i % 2 == 0 && v >= 'A'\
    \ && v <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpela99vby_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpela99vby_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpela99vby_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, r := range s {\n        if i % 2 == 0 && r >= 'A'\
    \ && r <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpj6aeirrt_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpj6aeirrt_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpj6aeirrt_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && (c == 'A'\
    \ || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            count++\n  \
    \      }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpqeu8793w_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpqeu8793w_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpqeu8793w_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, r := range s {\n        if i % 2 == 0 && r >= 'A'\
    \ && r <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpj6aeirrt_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpj6aeirrt_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpj6aeirrt_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpqeu8793w_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpqeu8793w_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpqeu8793w_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, v := range s {\n        if i % 2 == 0 && v >= 'A'\
    \ && v <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpela99vby_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpela99vby_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpela99vby_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, r := range s {\n        if i % 2 == 0 && r >= 'A'\
    \ && r <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpycg1auix_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpycg1auix_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpycg1auix_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpqeu8793w_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpqeu8793w_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpqeu8793w_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpqeu8793w_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpqeu8793w_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpqeu8793w_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, r := range s {\n        if i % 2 == 0 && r >= 'A'\
    \ && r <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpj6aeirrt_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpj6aeirrt_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpj6aeirrt_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, v := range s {\n        if i % 2 == 0 && v >= 'A'\
    \ && v <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpyvcsbt6a_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpyvcsbt6a_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpyvcsbt6a_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int = 0\n    for i, c := range s {\n        if i % 2 == 0 && c\
    \ >= 'A' && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpgvom5qjq_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpgvom5qjq_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpgvom5qjq_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073210
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, r := range s {\n        if i % 2 == 0 && r >= 'A'\
    \ && r <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpycg1auix_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpycg1auix_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpycg1auix_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpqeu8793w_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpqeu8793w_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpqeu8793w_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, v := range s {\n        if i % 2 == 0 && v >= 'A'\
    \ && v <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpyvcsbt6a_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpyvcsbt6a_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpyvcsbt6a_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, char := range s {\n        if i % 2 == 0 && char >=\
    \ 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpijdhdvj9_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpijdhdvj9_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpijdhdvj9_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpqeu8793w_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpqeu8793w_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpqeu8793w_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, v := range s {\n        if i % 2 == 0 && v >= 'A'\
    \ && v <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpyvcsbt6a_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpyvcsbt6a_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpyvcsbt6a_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
