language: go_test.go
name: HumanEval_161_solve
results:
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    if len(s) == 1 {\n   \
    \     if s[0] >= 'a' && s[0] <= 'z' {\n            return string(s[0] - 32)\n\
    \        } else if s[0] >= 'A' && s[0] <= 'Z' {\n            return string(s[0]\
    \ + 32)\n        } else {\n            return s\n        }\n    }\n    var r []rune\n\
    \    for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            r =\
    \ append(r, c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            r =\
    \ append(r, c + 32)\n        } else {\n            r = append(r, c)\n        }\n\
    \    }\n    return string(r)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpr13d5915_test.go:66: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpr13d5915_test.go:66: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var res string\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            res += string(c\
    \ - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            res += string(c\
    \ + 32)\n        } else {\n            res += string(c)\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n    \
    \ { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp1fcnnx6z_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp1fcnnx6z_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    runes := []rune(s)\n \
    \   for i, r := range runes {\n        if r >= 'a' && r <= 'z' {\n           \
    \ runes[i] = r - 32\n        } else if r >= 'A' && r <= 'Z' {\n            runes[i]\
    \ = r + 32\n        }\n    }\n    return string(runes)\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp02bg9_8p_test.go:55: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp02bg9_8p_test.go:55: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp6k0gpyd9_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp6k0gpyd9_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var res string\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            res += string(c\
    \ - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            res += string(c\
    \ + 32)\n        } else {\n            res += string(c)\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n    \
    \ { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp1fcnnx6z_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp1fcnnx6z_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var newS string\n    for _, c := range s {\n        if c >= 'a' && c\
    \ <= 'z' {\n            newS += string(c - 32)\n        } else if c >= 'A' &&\
    \ c <= 'Z' {\n            newS += string(c + 32)\n        } else {\n         \
    \   newS += string(c)\n        }\n    }\n    if len(newS) == len(s) {\n      \
    \  return newS\n    }\n    return reverse(newS)\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"\
    ), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected: \"4321\"\
    \ },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"\
    #a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected:\
    \ \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n\
    \     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_pcedwbk_test.go:34:12: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073305
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var res string\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            res += string(c\
    \ - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            res += string(c\
    \ + 32)\n        } else {\n            res += string(c)\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n    \
    \ { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp1fcnnx6z_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp1fcnnx6z_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var result string\n    if len(s) == 0 {\n        return result\n    }\n\
    \    for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp0ofjv_lw_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp0ofjv_lw_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp6k0gpyd9_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp6k0gpyd9_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var res string\n    for _, c := range s {\n        if c >= 'a' && c <=\
    \ 'z' {\n            res += string(c - 'a' + 'A')\n        } else if c >= 'A'\
    \ && c <= 'Z' {\n            res += string(c - 'A' + 'a')\n        } else {\n\
    \            res += string(c)\n        }\n    }\n    return res\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpx6e6swut_test.go:54: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpx6e6swut_test.go:54: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp6k0gpyd9_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp6k0gpyd9_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 'a' + 'A')\n        } else if c >= 'A' && c <= 'Z' {\n       \
    \     result += string(c - 'A' + 'a')\n        } else {\n            result +=\
    \ string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"\
    ), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected: \"4321\"\
    \ },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"\
    #a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected:\
    \ \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n\
    \     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpfytjb7wl_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpfytjb7wl_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var result string\n    for _, c := range s {\n        if c >= 'a' &&\
    \ c <= 'z' {\n            result += string(c - 32)\n        } else if c >= 'A'\
    \ && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n    \
    \        result += string(c)\n        }\n    }\n    if len(result) == len(s) {\n\
    \        return result\n    }\n    for i, j := 0, len(result) - 1; i < j; i, j\
    \ = i + 1, j - 1 {\n        result[i], result[j] = result[j], result[i]\n    }\n\
    \    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n\
    \     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5p46ruu9_test.go:35:9: cannot assign to result[i] (value of type byte)

    /tmp/tmp5p46ruu9_test.go:35:20: cannot assign to result[j] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var result string\n    for _, c := range s {\n        if c >= 'a' &&\
    \ c <= 'z' {\n            result += string(c - 'a' + 'A')\n        } else if c\
    \ >= 'A' && c <= 'Z' {\n            result += string(c - 'A' + 'a')\n        }\
    \ else {\n            result += string(c)\n        }\n    }\n    return result\n\
    }\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"\
    1234\"), expected: \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"\
    AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual:\
    \ candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"\
    #6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected:\
    \ \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpxq96uxhd_test.go:54: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpxq96uxhd_test.go:54: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073215
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var result string\n    for _, v := range s {\n        if v >= 'a' &&\
    \ v <= 'z' {\n            result += string(v - 32)\n        } else if v >= 'A'\
    \ && v <= 'Z' {\n            result += string(v + 32)\n        } else {\n    \
    \        result += string(v)\n        }\n    }\n    if len(result) == len(s) {\n\
    \        return reverse(result)\n    }\n    return result\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv2_ydt_n_test.go:32:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073305
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    b := []byte(s)\n    for\
    \ i := 0; i < len(b); i++ {\n        if b[i] >= 'a' && b[i] <= 'z' {\n       \
    \     b[i] -= 32\n        } else if b[i] >= 'A' && b[i] <= 'Z' {\n           \
    \ b[i] += 32\n        }\n    }\n    return string(b)\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"\
    ), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected: \"4321\"\
    \ },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"\
    #a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected:\
    \ \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n\
    \     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpp9ab7p9q_test.go:55: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpp9ab7p9q_test.go:55: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    r := []rune(s)\n    for\
    \ i := 0; i < len(r); i++ {\n        if r[i] >= 'a' && r[i] <= 'z' {\n       \
    \     r[i] = r[i] - 32\n        } else if r[i] >= 'A' && r[i] <= 'Z' {\n     \
    \       r[i] = r[i] + 32\n        }\n    }\n    return string(r)\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpnqbzql_2_test.go:55: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpnqbzql_2_test.go:55: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var res string\n    for _, c := range s {\n        if c >= 'a' && c <=\
    \ 'z' {\n            res += string(c - 32)\n        } else if c >= 'A' && c <=\
    \ 'Z' {\n            res += string(c + 32)\n        } else {\n            res\
    \ += string(c)\n        }\n    }\n    if len(res) == len(s) {\n        return\
    \ res\n    }\n    return reverse(res)\n}\n\nfunc TestSolve(t *testing.T) {\n \
    \ candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected:\
    \ \"aSdF\" },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n   \
    \  { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"\
    #a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected:\
    \ \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n\
    \     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpemt4k_vw_test.go:34:12: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp6k0gpyd9_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp6k0gpyd9_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var res string\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            res += string(c\
    \ - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            res += string(c\
    \ + 32)\n        } else {\n            res += string(c)\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n    \
    \ { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp1fcnnx6z_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp1fcnnx6z_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var r []rune\n    for _, c := range s {\n        if c >= 'a' && c <=\
    \ 'z' {\n            r = append(r, c - 32)\n        } else if c >= 'A' && c <=\
    \ 'Z' {\n            r = append(r, c + 32)\n        } else {\n            r =\
    \ append(r, c)\n        }\n    }\n    return string(r)\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpbzwt5xaj_test.go:54: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpbzwt5xaj_test.go:54: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp6k0gpyd9_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp6k0gpyd9_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var result string\n    for _, c := range s {\n        if c >= 'a' &&\
    \ c <= 'z' {\n            result += string(c - 32)\n        } else if c >= 'A'\
    \ && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n    \
    \        result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp0xle4i2g_test.go:54: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp0xle4i2g_test.go:54: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var result string\n    for _, c := range s {\n        if c >= 'a' &&\
    \ c <= 'z' {\n            result += string(c - 32)\n        } else if c >= 'A'\
    \ && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n    \
    \        result += string(c)\n        }\n    }\n    if len(result) == len(s) {\n\
    \        return reverse(result)\n    }\n    return result\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy33tjuhn_test.go:32:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073213
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var res string\n    for _, c := range s {\n        if c >= 'a' && c <=\
    \ 'z' {\n            res += string(c - 32)\n        } else if c >= 'A' && c <=\
    \ 'Z' {\n            res += string(c + 32)\n        } else {\n            res\
    \ += string(c)\n        }\n    }\n    if len(res) == len(s) {\n        return\
    \ res\n    }\n    for i, j := 0, len(res) - 1; i < j; i, j = i + 1, j - 1 {\n\
    \        res[i], res[j] = res[j], res[i]\n    }\n    return res\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqnnfwlr_test.go:35:9: cannot assign to res[i] (value of type byte)

    /tmp/tmpfqnnfwlr_test.go:35:17: cannot assign to res[j] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var res string\n    for _, c := range s {\n        if c >= 'a' && c <=\
    \ 'z' {\n            res += string(c - 32)\n        } else if c >= 'A' && c <=\
    \ 'Z' {\n            res += string(c + 32)\n        } else {\n            res\
    \ += string(c)\n        }\n    }\n    return res\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"\
    ), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected: \"4321\"\
    \ },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"\
    #a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected:\
    \ \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n\
    \     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpce_lc5_n_test.go:54: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpce_lc5_n_test.go:54: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result []byte\n  \
    \  for i := 0; i < len(s); i++ {\n        if s[i] >= 'a' && s[i] <= 'z' {\n  \
    \          result = append(result, s[i] - 32)\n        } else if s[i] >= 'A' &&\
    \ s[i] <= 'Z' {\n            result = append(result, s[i] + 32)\n        } else\
    \ {\n            result = append(result, s[i])\n        }\n    }\n    return string(result)\n\
    }\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"\
    1234\"), expected: \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"\
    AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual:\
    \ candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"\
    #6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected:\
    \ \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpbpdbuo1v_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpbpdbuo1v_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp6k0gpyd9_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp6k0gpyd9_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp6k0gpyd9_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp6k0gpyd9_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var res string\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            res += string(c\
    \ - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            res += string(c\
    \ + 32)\n        } else {\n            res += string(c)\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n    \
    \ { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp1fcnnx6z_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp1fcnnx6z_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var res string\n    for _, c := range s {\n        if c >= 'a' && c <=\
    \ 'z' {\n            res += string(c - 32)\n        } else if c >= 'A' && c <=\
    \ 'Z' {\n            res += string(c + 32)\n        } else {\n            res\
    \ += string(c)\n        }\n    }\n    if len(res) == len(s) {\n        return\
    \ res\n    }\n    for i, j := 0, len(res) - 1; i < j; i, j = i + 1, j - 1 {\n\
    \        res[i], res[j] = res[j], res[i]\n    }\n    return res\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqnnfwlr_test.go:35:9: cannot assign to res[i] (value of type byte)

    /tmp/tmpfqnnfwlr_test.go:35:17: cannot assign to res[j] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, r := range s {\n        if r >= 'a' && r <= 'z' {\n            result\
    \ += string(r - 32)\n        } else if r >= 'A' && r <= 'Z' {\n            result\
    \ += string(r + 32)\n        } else {\n            result += string(r)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmprqk_luoa_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmprqk_luoa_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    if len(s) == 1 {\n   \
    \     if s[0] >= 'a' && s[0] <= 'z' {\n            return string(s[0] - 32)\n\
    \        } else if s[0] >= 'A' && s[0] <= 'Z' {\n            return string(s[0]\
    \ + 32)\n        } else {\n            return s\n        }\n    }\n    var result\
    \ string\n    for i := 0; i < len(s); i++ {\n        if s[i] >= 'a' && s[i] <=\
    \ 'z' {\n            result += string(s[i] - 32)\n        } else if s[i] >= 'A'\
    \ && s[i] <= 'Z' {\n            result += string(s[i] + 32)\n        } else {\n\
    \            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\
    func TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"\
    1234\"), expected: \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"\
    AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual:\
    \ candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"\
    #6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected:\
    \ \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpvaszjpeu_test.go:66: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpvaszjpeu_test.go:66: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    // your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"\
    ), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected: \"4321\"\
    \ },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"\
    #a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected:\
    \ \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n\
    \     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp7iqcwyhb_test.go:45: expected 'aSdF', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmp7iqcwyhb_test.go:45: expected '4321', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmp7iqcwyhb_test.go:45: expected 'AB',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmp7iqcwyhb_test.go:45:\
    \ expected '#A@c', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmp7iqcwyhb_test.go:45: expected '#aSDFw^45', got ''\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp7iqcwyhb_test.go:45: expected '2@6#', got ''\n    --- FAIL:\
    \ TestSolve/test_num__6 (0.00s)\n        tmp7iqcwyhb_test.go:45: expected '#$A^d',\
    \ got ''\n    --- FAIL: TestSolve/test_num__7 (0.00s)\n        tmp7iqcwyhb_test.go:45:\
    \ expected '#CCC', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var res string\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            res += string(c\
    \ - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            res += string(c\
    \ + 32)\n        } else {\n            res += string(c)\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n    \
    \ { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp1fcnnx6z_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp1fcnnx6z_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp6k0gpyd9_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp6k0gpyd9_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp6k0gpyd9_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp6k0gpyd9_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var r []rune\n    for _, c := range s {\n        if c >= 'a' && c <=\
    \ 'z' {\n            r = append(r, c - 32)\n        } else if c >= 'A' && c <=\
    \ 'Z' {\n            r = append(r, c + 32)\n        } else {\n            r =\
    \ append(r, c)\n        }\n    }\n    return string(r)\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpbzwt5xaj_test.go:54: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpbzwt5xaj_test.go:54: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp6k0gpyd9_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp6k0gpyd9_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp6k0gpyd9_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp6k0gpyd9_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var res string\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            res += string(c\
    \ - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            res += string(c\
    \ + 32)\n        } else {\n            res += string(c)\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n    \
    \ { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp1fcnnx6z_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp1fcnnx6z_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var res string\n    for _, c := range s {\n        if c >= 'a' && c <=\
    \ 'z' {\n            res += string(c - 32)\n        } else if c >= 'A' && c <=\
    \ 'Z' {\n            res += string(c + 32)\n        } else {\n            res\
    \ += string(c)\n        }\n    }\n    if len(res) == len(s) {\n        return\
    \ reverse(res)\n    }\n    return res\n}\n\nfunc TestSolve(t *testing.T) {\n \
    \ candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected:\
    \ \"aSdF\" },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n   \
    \  { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"\
    #a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected:\
    \ \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n\
    \     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpghznctbk_test.go:32:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073213
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var result string\n    for _, c := range s {\n        if c >= 'a' &&\
    \ c <= 'z' {\n            result += string(c - 32)\n        } else if c >= 'A'\
    \ && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n    \
    \        result += string(c)\n        }\n    }\n    if len(result) == len(s) {\n\
    \        return reverse(result)\n    }\n    return result\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy33tjuhn_test.go:32:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp6k0gpyd9_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp6k0gpyd9_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var result string\n    for _, c := range s {\n        if c >= 'a' &&\
    \ c <= 'z' {\n            result += string(c - 32)\n        } else if c >= 'A'\
    \ && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n    \
    \        result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp0xle4i2g_test.go:54: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp0xle4i2g_test.go:54: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var res string\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            res += string(c\
    \ - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            res += string(c\
    \ + 32)\n        } else {\n            res += string(c)\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n    \
    \ { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp1fcnnx6z_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp1fcnnx6z_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var res string\n    for _, c := range s {\n        if c >= 'a' && c <=\
    \ 'z' {\n            res += string(c - 32)\n        } else if c >= 'A' && c <=\
    \ 'Z' {\n            res += string(c + 32)\n        } else {\n            res\
    \ += string(c)\n        }\n    }\n    if len(res) == len(s) {\n        return\
    \ res\n    }\n    return reverse(res)\n}\n\nfunc TestSolve(t *testing.T) {\n \
    \ candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected:\
    \ \"aSdF\" },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n   \
    \  { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"\
    #a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected:\
    \ \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n\
    \     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpemt4k_vw_test.go:34:12: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var r string\n    for _, c := range s {\n        if c >= 'a' && c <=\
    \ 'z' {\n            r = fmt.Sprintf(\"%s%c\", r, c-32)\n        } else if c >=\
    \ 'A' && c <= 'Z' {\n            r = fmt.Sprintf(\"%s%c\", r, c+32)\n        }\
    \ else {\n            r = fmt.Sprintf(\"%s%c\", r, c)\n        }\n    }\n    return\
    \ r\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"\
    1234\"), expected: \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"\
    AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual:\
    \ candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"\
    #6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected:\
    \ \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpmheueg7v_test.go:54: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpmheueg7v_test.go:54: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result []byte\n  \
    \  for i := 0; i < len(s); i++ {\n        if s[i] >= 'a' && s[i] <= 'z' {\n  \
    \          result = append(result, s[i] - 32)\n        } else if s[i] >= 'A' &&\
    \ s[i] <= 'Z' {\n            result = append(result, s[i] + 32)\n        } else\
    \ {\n            result = append(result, s[i])\n        }\n    }\n    return string(result)\n\
    }\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"\
    1234\"), expected: \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"\
    AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual:\
    \ candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"\
    #6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected:\
    \ \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpbpdbuo1v_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpbpdbuo1v_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    if len(s) == 1 {\n   \
    \     if s[0] >= 'a' && s[0] <= 'z' {\n            return string(s[0] - 'a' +\
    \ 'A')\n        } else if s[0] >= 'A' && s[0] <= 'Z' {\n            return string(s[0]\
    \ - 'A' + 'a')\n        } else {\n            return s\n        }\n    }\n   \
    \ var result string\n    for i := 0; i < len(s); i++ {\n        if s[i] >= 'a'\
    \ && s[i] <= 'z' {\n            result += string(s[i] - 'a' + 'A')\n        }\
    \ else if s[i] >= 'A' && s[i] <= 'Z' {\n            result += string(s[i] - 'A'\
    \ + 'a')\n        } else {\n            result += string(s[i])\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n\
    \     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpfdv7g3_8_test.go:66: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpfdv7g3_8_test.go:66: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 'a' + 'A')\n        } else if c >= 'A' && c <= 'Z' {\n       \
    \     result += string(c - 'A' + 'a')\n        } else {\n            result +=\
    \ string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"\
    ), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected: \"4321\"\
    \ },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"\
    #a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected:\
    \ \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n\
    \     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpfytjb7wl_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpfytjb7wl_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var res string\n    for _, c := range s {\n        if c >= 'a' && c <=\
    \ 'z' {\n            res += string(c - 32)\n        } else if c >= 'A' && c <=\
    \ 'Z' {\n            res += string(c + 32)\n        } else {\n            res\
    \ += string(c)\n        }\n    }\n    if len(res) == len(s) {\n        return\
    \ res\n    }\n    return reverse(res)\n}\n\nfunc TestSolve(t *testing.T) {\n \
    \ candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected:\
    \ \"aSdF\" },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n   \
    \  { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"\
    #a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected:\
    \ \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n\
    \     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpemt4k_vw_test.go:34:12: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var res string\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            res += string(c\
    \ - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            res += string(c\
    \ + 32)\n        } else {\n            res += string(c)\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n    \
    \ { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp1fcnnx6z_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp1fcnnx6z_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var res string\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            res += string(c\
    \ - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            res += string(c\
    \ + 32)\n        } else {\n            res += string(c)\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n    \
    \ { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp1fcnnx6z_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp1fcnnx6z_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var res string\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            res += string(c\
    \ - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            res += string(c\
    \ + 32)\n        } else {\n            res += string(c)\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n    \
    \ { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp1fcnnx6z_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp1fcnnx6z_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var res string\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            res += string(c\
    \ - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            res += string(c\
    \ + 32)\n        } else {\n            res += string(c)\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n    \
    \ { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp1fcnnx6z_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp1fcnnx6z_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result []byte\n  \
    \  for i := 0; i < len(s); i++ {\n        if s[i] >= 'a' && s[i] <= 'z' {\n  \
    \          result = append(result, s[i] - 32)\n        } else if s[i] >= 'A' &&\
    \ s[i] <= 'Z' {\n            result = append(result, s[i] + 32)\n        } else\
    \ {\n            result = append(result, s[i])\n        }\n    }\n    return string(result)\n\
    }\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"\
    1234\"), expected: \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"\
    AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual:\
    \ candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"\
    #6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected:\
    \ \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpbpdbuo1v_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpbpdbuo1v_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp6k0gpyd9_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp6k0gpyd9_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp6k0gpyd9_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp6k0gpyd9_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var res string\n    for _, c := range s {\n        if c >= 'a' && c <=\
    \ 'z' {\n            res += string(c - 32)\n        } else if c >= 'A' && c <=\
    \ 'Z' {\n            res += string(c + 32)\n        } else {\n            res\
    \ += string(c)\n        }\n    }\n    return res\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"\
    ), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected: \"4321\"\
    \ },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"\
    #a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected:\
    \ \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n\
    \     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpce_lc5_n_test.go:54: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpce_lc5_n_test.go:54: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result []byte\n  \
    \  for i := 0; i < len(s); i++ {\n        if s[i] >= 'a' && s[i] <= 'z' {\n  \
    \          result = append(result, s[i] - 32)\n        } else if s[i] >= 'A' &&\
    \ s[i] <= 'Z' {\n            result = append(result, s[i] + 32)\n        } else\
    \ {\n            result = append(result, s[i])\n        }\n    }\n    return string(result)\n\
    }\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"\
    1234\"), expected: \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"\
    AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual:\
    \ candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"\
    #6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected:\
    \ \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpbpdbuo1v_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpbpdbuo1v_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    // your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"\
    ), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected: \"4321\"\
    \ },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"\
    #a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected:\
    \ \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n\
    \     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp7iqcwyhb_test.go:45: expected 'aSdF', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmp7iqcwyhb_test.go:45: expected '4321', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmp7iqcwyhb_test.go:45: expected 'AB',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmp7iqcwyhb_test.go:45:\
    \ expected '#A@c', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmp7iqcwyhb_test.go:45: expected '#aSDFw^45', got ''\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp7iqcwyhb_test.go:45: expected '2@6#', got ''\n    --- FAIL:\
    \ TestSolve/test_num__6 (0.00s)\n        tmp7iqcwyhb_test.go:45: expected '#$A^d',\
    \ got ''\n    --- FAIL: TestSolve/test_num__7 (0.00s)\n        tmp7iqcwyhb_test.go:45:\
    \ expected '#CCC', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    if len(s) == 1 {\n   \
    \     if s[0] >= 'a' && s[0] <= 'z' {\n            return string(s[0] - 32)\n\
    \        } else if s[0] >= 'A' && s[0] <= 'Z' {\n            return string(s[0]\
    \ + 32)\n        } else {\n            return s\n        }\n    }\n    var r []rune\n\
    \    for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            r =\
    \ append(r, c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            r =\
    \ append(r, c + 32)\n        } else {\n            r = append(r, c)\n        }\n\
    \    }\n    return string(r)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpr13d5915_test.go:66: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpr13d5915_test.go:66: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] >= 'a' && s[i] <= 'z' {\n            s = s[:i] + string(s[i]\
    \ - 32) + s[i+1:]\n        } else if s[i] >= 'A' && s[i] <= 'Z' {\n          \
    \  s = s[:i] + string(s[i] + 32) + s[i+1:]\n        }\n    }\n    return s\n}\n\
    \nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"\
    1234\"), expected: \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"\
    AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual:\
    \ candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"\
    #6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected:\
    \ \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpzc3tqasr_test.go:54: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpzc3tqasr_test.go:54: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073215
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var res string\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            res += string(c\
    \ - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            res += string(c\
    \ + 32)\n        } else {\n            res += string(c)\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n    \
    \ { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp1fcnnx6z_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp1fcnnx6z_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var result string\n    for _, c := range s {\n        if c >= 'a' &&\
    \ c <= 'z' {\n            result += string(c - 32)\n        } else if c >= 'A'\
    \ && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n    \
    \        result += string(c)\n        }\n    }\n    if len(result) == len(s) {\n\
    \        return reverse(result)\n    }\n    return result\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy33tjuhn_test.go:32:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp6k0gpyd9_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp6k0gpyd9_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var res string\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            res += string(c\
    \ - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            res += string(c\
    \ + 32)\n        } else {\n            res += string(c)\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n    \
    \ { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp1fcnnx6z_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp1fcnnx6z_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var res string\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            res += string(c\
    \ - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            res += string(c\
    \ + 32)\n        } else {\n            res += string(c)\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n    \
    \ { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp1fcnnx6z_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp1fcnnx6z_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var res string\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            res += string(c\
    \ - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            res += string(c\
    \ + 32)\n        } else {\n            res += string(c)\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n    \
    \ { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp1fcnnx6z_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp1fcnnx6z_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, v := range s {\n        if v >= 'a' && v <= 'z' {\n            result\
    \ += string(v - 32)\n        } else if v >= 'A' && v <= 'Z' {\n            result\
    \ += string(v + 32)\n        } else {\n            result += string(v)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp5uyedvrj_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp5uyedvrj_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073215
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    runes := []rune(s)\n \
    \   for i, r := range runes {\n        if r >= 'a' && r <= 'z' {\n           \
    \ runes[i] = r - 32\n        } else if r >= 'A' && r <= 'Z' {\n            runes[i]\
    \ = r + 32\n        }\n    }\n    return string(runes)\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp02bg9_8p_test.go:55: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp02bg9_8p_test.go:55: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp6k0gpyd9_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp6k0gpyd9_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    if len(s) == 1 {\n   \
    \     if s[0] >= 'a' && s[0] <= 'z' {\n            return string(s[0] - 32)\n\
    \        } else if s[0] >= 'A' && s[0] <= 'Z' {\n            return string(s[0]\
    \ + 32)\n        } else {\n            return s\n        }\n    }\n    var result\
    \ string\n    for i := 0; i < len(s); i++ {\n        if s[i] >= 'a' && s[i] <=\
    \ 'z' {\n            result += string(s[i] - 32)\n        } else if s[i] >= 'A'\
    \ && s[i] <= 'Z' {\n            result += string(s[i] + 32)\n        } else {\n\
    \            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\
    func TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"\
    1234\"), expected: \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"\
    AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual:\
    \ candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"\
    #6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected:\
    \ \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpvaszjpeu_test.go:66: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpvaszjpeu_test.go:66: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp6k0gpyd9_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp6k0gpyd9_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var res string\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            res += string(c\
    \ - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            res += string(c\
    \ + 32)\n        } else {\n            res += string(c)\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n    \
    \ { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp1fcnnx6z_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp1fcnnx6z_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var result string\n    for _, c := range s {\n        if c >= 'a' &&\
    \ c <= 'z' {\n            result += string(c - 32)\n        } else if c >= 'A'\
    \ && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n    \
    \        result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp0xle4i2g_test.go:54: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp0xle4i2g_test.go:54: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var result string\n    for _, c := range s {\n        if c >= 'a' &&\
    \ c <= 'z' {\n            result += string(c - 32)\n        } else if c >= 'A'\
    \ && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n    \
    \        result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp0xle4i2g_test.go:54: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp0xle4i2g_test.go:54: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp6k0gpyd9_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp6k0gpyd9_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var r []rune\n    for _, c := range s {\n        if c >= 'a' && c <=\
    \ 'z' {\n            r = append(r, c - 32)\n        } else if c >= 'A' && c <=\
    \ 'Z' {\n            r = append(r, c + 32)\n        } else {\n            r =\
    \ append(r, c)\n        }\n    }\n    if len(r) == 0 {\n        return s\n   \
    \ }\n    return string(r)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpiq6uze12_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpiq6uze12_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var res string\n    for _, c := range s {\n        if c >= 'a' && c <=\
    \ 'z' {\n            res += string(c - 32)\n        } else if c >= 'A' && c <=\
    \ 'Z' {\n            res += string(c + 32)\n        } else {\n            res\
    \ += string(c)\n        }\n    }\n    if len(res) == len(s) {\n        return\
    \ res\n    }\n    return reverse(res)\n}\n\nfunc TestSolve(t *testing.T) {\n \
    \ candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected:\
    \ \"aSdF\" },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n   \
    \  { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"\
    #a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected:\
    \ \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n\
    \     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpemt4k_vw_test.go:34:12: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var r []rune\n    for _, c := range s {\n        if c >= 'a' && c <=\
    \ 'z' {\n            r = append(r, c - 32)\n        } else if c >= 'A' && c <=\
    \ 'Z' {\n            r = append(r, c + 32)\n        } else {\n            r =\
    \ append(r, c)\n        }\n    }\n    return string(r)\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpbzwt5xaj_test.go:54: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpbzwt5xaj_test.go:54: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp6k0gpyd9_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp6k0gpyd9_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var res string\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            res += string(c\
    \ - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            res += string(c\
    \ + 32)\n        } else {\n            res += string(c)\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n    \
    \ { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp1fcnnx6z_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp1fcnnx6z_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var res string\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            res += string(c\
    \ - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            res += string(c\
    \ + 32)\n        } else {\n            res += string(c)\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n    \
    \ { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp1fcnnx6z_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp1fcnnx6z_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp6k0gpyd9_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp6k0gpyd9_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var res string\n    for _, c := range s {\n        if c >= 'a' && c <=\
    \ 'z' {\n            res += string(c - 32)\n        } else if c >= 'A' && c <=\
    \ 'Z' {\n            res += string(c + 32)\n        } else {\n            res\
    \ += string(c)\n        }\n    }\n    return res\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"\
    ), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected: \"4321\"\
    \ },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"\
    #a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected:\
    \ \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n\
    \     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpce_lc5_n_test.go:54: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpce_lc5_n_test.go:54: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var res string\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            res += string(c\
    \ - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            res += string(c\
    \ + 32)\n        } else {\n            res += string(c)\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n    \
    \ { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp1fcnnx6z_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp1fcnnx6z_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var result string\n    for _, c := range s {\n        if c >= 'a' &&\
    \ c <= 'z' {\n            result += string(c - 32)\n        } else if c >= 'A'\
    \ && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n    \
    \        result += string(c)\n        }\n    }\n    if len(result) == len(s) {\n\
    \        return result\n    }\n    for i, j := 0, len(result) - 1; i < j; i, j\
    \ = i + 1, j - 1 {\n        result[i], result[j] = result[j], result[i]\n    }\n\
    \    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n\
    \     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5p46ruu9_test.go:35:9: cannot assign to result[i] (value of type byte)

    /tmp/tmp5p46ruu9_test.go:35:20: cannot assign to result[j] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var res string\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            res += string(c\
    \ - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            res += string(c\
    \ + 32)\n        } else {\n            res += string(c)\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n    \
    \ { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp1fcnnx6z_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp1fcnnx6z_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var r []rune\n    for _, v := range s {\n        if v >= 'a' && v <=\
    \ 'z' {\n            r = append(r, v - 32)\n        } else if v >= 'A' && v <=\
    \ 'Z' {\n            r = append(r, v + 32)\n        } else {\n            r =\
    \ append(r, v)\n        }\n    }\n    return string(r)\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpyylytavg_test.go:54: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpyylytavg_test.go:54: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp6k0gpyd9_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp6k0gpyd9_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    if len(s) == 1 {\n   \
    \     if s[0] >= 'a' && s[0] <= 'z' {\n            return string(s[0] - 32)\n\
    \        } else if s[0] >= 'A' && s[0] <= 'Z' {\n            return string(s[0]\
    \ + 32)\n        } else {\n            return s\n        }\n    }\n    var res\
    \ string\n    for i := 0; i < len(s); i++ {\n        if s[i] >= 'a' && s[i] <=\
    \ 'z' {\n            res += string(s[i] - 32)\n        } else if s[i] >= 'A' &&\
    \ s[i] <= 'Z' {\n            res += string(s[i] + 32)\n        } else {\n    \
    \        res += string(s[i])\n        }\n    }\n    return res\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmprq6q8s0v_test.go:66: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmprq6q8s0v_test.go:66: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var res string\n    for _, c := range s {\n        if c >= 'a' && c <=\
    \ 'z' {\n            res += string(c - 32)\n        } else if c >= 'A' && c <=\
    \ 'Z' {\n            res += string(c + 32)\n        } else {\n            res\
    \ += string(c)\n        }\n    }\n    if len(res) == len(s) {\n        return\
    \ res\n    }\n    for i, j := 0, len(res) - 1; i < j; i, j = i + 1, j - 1 {\n\
    \        res[i], res[j] = res[j], res[i]\n    }\n    return res\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqnnfwlr_test.go:35:9: cannot assign to res[i] (value of type byte)

    /tmp/tmpfqnnfwlr_test.go:35:17: cannot assign to res[j] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp6k0gpyd9_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp6k0gpyd9_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var result string\n    for _, c := range s {\n        if c >= 'a' &&\
    \ c <= 'z' {\n            result += string(c - 32)\n        } else if c >= 'A'\
    \ && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n    \
    \        result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp0xle4i2g_test.go:54: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp0xle4i2g_test.go:54: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var r []rune\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            r = append(r,\
    \ c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            r = append(r,\
    \ c + 32)\n        } else {\n            r = append(r, c)\n        }\n    }\n\
    \    return string(r)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n\
    \     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpfg0tjuj6_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpfg0tjuj6_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var result string\n    for _, c := range s {\n        if c >= 'a' &&\
    \ c <= 'z' {\n            result += string(c - 32)\n        } else if c >= 'A'\
    \ && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n    \
    \        result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp0xle4i2g_test.go:54: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp0xle4i2g_test.go:54: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp6k0gpyd9_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp6k0gpyd9_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp6k0gpyd9_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp6k0gpyd9_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp6k0gpyd9_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp6k0gpyd9_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] >= 'a' && s[i] <= 'z' {\n            s = s[:i] + string(s[i]\
    \ - 32) + s[i+1:]\n        } else if s[i] >= 'A' && s[i] <= 'Z' {\n          \
    \  s = s[:i] + string(s[i] + 32) + s[i+1:]\n        }\n    }\n    return s\n}\n\
    \nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"\
    1234\"), expected: \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"\
    AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual:\
    \ candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"\
    #6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected:\
    \ \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpzc3tqasr_test.go:54: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpzc3tqasr_test.go:54: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073215
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var res string\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            res += string(c\
    \ - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            res += string(c\
    \ + 32)\n        } else {\n            res += string(c)\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n    \
    \ { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp1fcnnx6z_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp1fcnnx6z_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    r := make([]rune, len(s))\n\
    \    for i, c := range s {\n        if c >= 'a' && c <= 'z' {\n            r[i]\
    \ = c - 32\n        } else if c >= 'A' && c <= 'Z' {\n            r[i] = c + 32\n\
    \        } else {\n            r[i] = c\n        }\n    }\n    return string(r)\n\
    }\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"\
    1234\"), expected: \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"\
    AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual:\
    \ candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"\
    #6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected:\
    \ \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp_gih77ot_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp_gih77ot_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var r string\n    for _, c := range s {\n        if c >= 'a' && c <=\
    \ 'z' {\n            r += string(c - 32)\n        } else if c >= 'A' && c <= 'Z'\
    \ {\n            r += string(c + 32)\n        } else {\n            r += string(c)\n\
    \        }\n    }\n    if len(r) == len(s) {\n        return reverse(r)\n    }\n\
    \    return r\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n    \
    \ { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2y7ehw6o_test.go:32:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var res string\n    for _, c := range s {\n        if c >= 'a' && c <=\
    \ 'z' {\n            res += string(c - 32)\n        } else if c >= 'A' && c <=\
    \ 'Z' {\n            res += string(c + 32)\n        } else {\n            res\
    \ += string(c)\n        }\n    }\n    return res\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"\
    ), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected: \"4321\"\
    \ },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"\
    #a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected:\
    \ \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n\
    \     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpce_lc5_n_test.go:54: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpce_lc5_n_test.go:54: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var res string\n    for _, c := range s {\n        if c >= 'a' && c <=\
    \ 'z' {\n            res += string(c - 32)\n        } else if c >= 'A' && c <=\
    \ 'Z' {\n            res += string(c + 32)\n        } else {\n            res\
    \ += string(c)\n        }\n    }\n    if len(res) == len(s) {\n        return\
    \ res\n    }\n    for i, j := 0, len(res) - 1; i < j; i, j = i + 1, j - 1 {\n\
    \        res[i], res[j] = res[j], res[i]\n    }\n    return res\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqnnfwlr_test.go:35:9: cannot assign to res[i] (value of type byte)

    /tmp/tmpfqnnfwlr_test.go:35:17: cannot assign to res[j] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var r string\n    for _, c := range s {\n        if c >= 'a' && c <=\
    \ 'z' {\n            r += string(c - 32)\n        } else if c >= 'A' && c <= 'Z'\
    \ {\n            r += string(c + 32)\n        } else {\n            r += string(c)\n\
    \        }\n    }\n    return r\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp9vbshhsi_test.go:54: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp9vbshhsi_test.go:54: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073215
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var r []rune\n    for _, c := range s {\n        if c >= 'a' && c <=\
    \ 'z' {\n            r = append(r, c - 32)\n        } else if c >= 'A' && c <=\
    \ 'Z' {\n            r = append(r, c + 32)\n        } else {\n            r =\
    \ append(r, c)\n        }\n    }\n    return string(r)\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpbzwt5xaj_test.go:54: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpbzwt5xaj_test.go:54: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    if len(s) == 1 {\n   \
    \     if s[0] >= 'a' && s[0] <= 'z' {\n            return string(s[0] - 32)\n\
    \        } else if s[0] >= 'A' && s[0] <= 'Z' {\n            return string(s[0]\
    \ + 32)\n        } else {\n            return s\n        }\n    }\n    var res\
    \ string\n    for i := 0; i < len(s); i++ {\n        if s[i] >= 'a' && s[i] <=\
    \ 'z' {\n            res += string(s[i] - 32)\n        } else if s[i] >= 'A' &&\
    \ s[i] <= 'Z' {\n            res += string(s[i] + 32)\n        } else {\n    \
    \        res += string(s[i])\n        }\n    }\n    return res\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmprq6q8s0v_test.go:66: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmprq6q8s0v_test.go:66: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var result string\n    for _, v := range s {\n        if v >= 'a' &&\
    \ v <= 'z' {\n            result += string(v - 32)\n        } else if v >= 'A'\
    \ && v <= 'Z' {\n            result += string(v + 32)\n        } else {\n    \
    \        result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpehczpfhq_test.go:54: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpehczpfhq_test.go:54: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    if len(s) == 1 {\n   \
    \     if s[0] >= 'a' && s[0] <= 'z' {\n            return string(s[0] - 32)\n\
    \        } else if s[0] >= 'A' && s[0] <= 'Z' {\n            return string(s[0]\
    \ + 32)\n        } else {\n            return s\n        }\n    }\n    var result\
    \ string\n    for i := 0; i < len(s); i++ {\n        if s[i] >= 'a' && s[i] <=\
    \ 'z' {\n            result += string(s[i] - 32)\n        } else if s[i] >= 'A'\
    \ && s[i] <= 'Z' {\n            result += string(s[i] + 32)\n        } else {\n\
    \            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\
    func TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"\
    1234\"), expected: \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"\
    AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual:\
    \ candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"\
    #6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected:\
    \ \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpvaszjpeu_test.go:66: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpvaszjpeu_test.go:66: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result []byte\n  \
    \  for i := 0; i < len(s); i++ {\n        if s[i] >= 'a' && s[i] <= 'z' {\n  \
    \          result = append(result, s[i] - 32)\n        } else if s[i] >= 'A' &&\
    \ s[i] <= 'Z' {\n            result = append(result, s[i] + 32)\n        } else\
    \ {\n            result = append(result, s[i])\n        }\n    }\n    return string(result)\n\
    }\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"\
    1234\"), expected: \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"\
    AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual:\
    \ candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"\
    #6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected:\
    \ \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpbpdbuo1v_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpbpdbuo1v_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp6k0gpyd9_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp6k0gpyd9_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp6k0gpyd9_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp6k0gpyd9_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var res string\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            res += string(c\
    \ - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            res += string(c\
    \ + 32)\n        } else {\n            res += string(c)\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n    \
    \ { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp1fcnnx6z_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp1fcnnx6z_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var result string\n    for _, c := range s {\n        if c >= 'a' &&\
    \ c <= 'z' {\n            result += string(c - 32)\n        } else if c >= 'A'\
    \ && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n    \
    \        result += string(c)\n        }\n    }\n    if len(result) == len(s) {\n\
    \        return reverse(result)\n    }\n    return result\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy33tjuhn_test.go:32:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var res string\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            res += string(c\
    \ - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            res += string(c\
    \ + 32)\n        } else {\n            res += string(c)\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n    \
    \ { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp1fcnnx6z_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp1fcnnx6z_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var res string\n    for _, c := range s {\n        if c >= 'a' && c <=\
    \ 'z' {\n            res += string(c - 32)\n        } else if c >= 'A' && c <=\
    \ 'Z' {\n            res += string(c + 32)\n        } else {\n            res\
    \ += string(c)\n        }\n    }\n    return res\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"\
    ), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected: \"4321\"\
    \ },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"\
    #a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected:\
    \ \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n\
    \     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpce_lc5_n_test.go:54: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpce_lc5_n_test.go:54: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var res string\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            res += string(c\
    \ - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            res += string(c\
    \ + 32)\n        } else {\n            res += string(c)\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n    \
    \ { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp1fcnnx6z_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp1fcnnx6z_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var result string\n    for _, c := range s {\n        if c >= 'a' &&\
    \ c <= 'z' {\n            result += string(c - 32)\n        } else if c >= 'A'\
    \ && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n    \
    \        result += string(c)\n        }\n    }\n    if len(result) == len(s) {\n\
    \        return reverse(result)\n    }\n    return result\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy33tjuhn_test.go:32:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    runes := []rune(s)\n \
    \   for i, r := range runes {\n        if r >= 'a' && r <= 'z' {\n           \
    \ runes[i] = r - 32\n        } else if r >= 'A' && r <= 'Z' {\n            runes[i]\
    \ = r + 32\n        }\n    }\n    return string(runes)\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp02bg9_8p_test.go:55: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp02bg9_8p_test.go:55: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var res string\n    for _, c := range s {\n        if c >= 'a' && c <=\
    \ 'z' {\n            res += string(c - 32)\n        } else if c >= 'A' && c <=\
    \ 'Z' {\n            res += string(c + 32)\n        } else {\n            res\
    \ += string(c)\n        }\n    }\n    if len(res) == len(s) {\n        return\
    \ res\n    }\n    for i, j := 0, len(res) - 1; i < j; i, j = i + 1, j - 1 {\n\
    \        res[i], res[j] = res[j], res[i]\n    }\n    return res\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqnnfwlr_test.go:35:9: cannot assign to res[i] (value of type byte)

    /tmp/tmpfqnnfwlr_test.go:35:17: cannot assign to res[j] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073213
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var result string\n    for _, c := range s {\n        if c >= 'a' &&\
    \ c <= 'z' {\n            result += string(c - 32)\n        } else if c >= 'A'\
    \ && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n    \
    \        result += string(c)\n        }\n    }\n    if len(result) == len(s) {\n\
    \        return reverse(result)\n    }\n    return result\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy33tjuhn_test.go:32:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var result string\n    for _, c := range s {\n        if c >= 'a' &&\
    \ c <= 'z' {\n            result += string(c - 32)\n        } else if c >= 'A'\
    \ && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n    \
    \        result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp0xle4i2g_test.go:54: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp0xle4i2g_test.go:54: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp6k0gpyd9_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp6k0gpyd9_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp6k0gpyd9_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp6k0gpyd9_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp6k0gpyd9_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp6k0gpyd9_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var res string\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            res += string(c\
    \ - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            res += string(c\
    \ + 32)\n        } else {\n            res += string(c)\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n    \
    \ { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp1fcnnx6z_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp1fcnnx6z_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    // your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"\
    ), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected: \"4321\"\
    \ },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"\
    #a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected:\
    \ \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n\
    \     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp7iqcwyhb_test.go:45: expected 'aSdF', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmp7iqcwyhb_test.go:45: expected '4321', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmp7iqcwyhb_test.go:45: expected 'AB',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmp7iqcwyhb_test.go:45:\
    \ expected '#A@c', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmp7iqcwyhb_test.go:45: expected '#aSDFw^45', got ''\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp7iqcwyhb_test.go:45: expected '2@6#', got ''\n    --- FAIL:\
    \ TestSolve/test_num__6 (0.00s)\n        tmp7iqcwyhb_test.go:45: expected '#$A^d',\
    \ got ''\n    --- FAIL: TestSolve/test_num__7 (0.00s)\n        tmp7iqcwyhb_test.go:45:\
    \ expected '#CCC', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp6k0gpyd9_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp6k0gpyd9_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp6k0gpyd9_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp6k0gpyd9_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp6k0gpyd9_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp6k0gpyd9_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    if len(s) == 1 {\n   \
    \     if s[0] >= 'a' && s[0] <= 'z' {\n            return string(s[0] - 32)\n\
    \        } else if s[0] >= 'A' && s[0] <= 'Z' {\n            return string(s[0]\
    \ + 32)\n        } else {\n            return s\n        }\n    }\n    var res\
    \ string\n    for i := 0; i < len(s); i++ {\n        if s[i] >= 'a' && s[i] <=\
    \ 'z' {\n            res += string(s[i] - 32)\n        } else if s[i] >= 'A' &&\
    \ s[i] <= 'Z' {\n            res += string(s[i] + 32)\n        } else {\n    \
    \        res += string(s[i])\n        }\n    }\n    return res\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmprq6q8s0v_test.go:66: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmprq6q8s0v_test.go:66: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var res string\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            res += string(c\
    \ - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            res += string(c\
    \ + 32)\n        } else {\n            res += string(c)\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n    \
    \ { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp1fcnnx6z_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp1fcnnx6z_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var res string\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            res += string(c\
    \ - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            res += string(c\
    \ + 32)\n        } else {\n            res += string(c)\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n    \
    \ { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp1fcnnx6z_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp1fcnnx6z_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 'a' + 'A')\n        } else if c >= 'A' && c <= 'Z' {\n       \
    \     result += string(c - 'A' + 'a')\n        } else {\n            result +=\
    \ string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"\
    ), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected: \"4321\"\
    \ },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"\
    #a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected:\
    \ \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n\
    \     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpfytjb7wl_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpfytjb7wl_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var res string\n    for\
    \ _, r := range s {\n        if r >= 'a' && r <= 'z' {\n            res += string(r\
    \ - 32)\n        } else if r >= 'A' && r <= 'Z' {\n            res += string(r\
    \ + 32)\n        } else {\n            res += string(r)\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n    \
    \ { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp0jgd41i1_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp0jgd41i1_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var res string\n    for _, c := range s {\n        if c >= 'a' && c <=\
    \ 'z' {\n            res += string(c - 32)\n        } else if c >= 'A' && c <=\
    \ 'Z' {\n            res += string(c + 32)\n        } else {\n            res\
    \ += string(c)\n        }\n    }\n    if len(res) == len(s) {\n        return\
    \ res\n    }\n    return reverse(res)\n}\n\nfunc TestSolve(t *testing.T) {\n \
    \ candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected:\
    \ \"aSdF\" },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n   \
    \  { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"\
    #a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected:\
    \ \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n\
    \     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpemt4k_vw_test.go:34:12: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var res string\n    for _, c := range s {\n        if c >= 'a' && c <=\
    \ 'z' {\n            res += string(c - 32)\n        } else if c >= 'A' && c <=\
    \ 'Z' {\n            res += string(c + 32)\n        } else {\n            res\
    \ += string(c)\n        }\n    }\n    return res\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"\
    ), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected: \"4321\"\
    \ },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"\
    #a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected:\
    \ \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n\
    \     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpce_lc5_n_test.go:54: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpce_lc5_n_test.go:54: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var result string\n    for _, c := range s {\n        if c >= 'a' &&\
    \ c <= 'z' {\n            result += string(c - 32)\n        } else if c >= 'A'\
    \ && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n    \
    \        result += string(c)\n        }\n    }\n    if len(result) == len(s) {\n\
    \        return result\n    }\n    return reverse(result)\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqink1zw6_test.go:34:12: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var res string\n    for _, c := range s {\n        if c >= 'a' && c <=\
    \ 'z' {\n            res += string(c - 32)\n        } else if c >= 'A' && c <=\
    \ 'Z' {\n            res += string(c + 32)\n        } else {\n            res\
    \ += string(c)\n        }\n    }\n    return res\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"\
    ), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected: \"4321\"\
    \ },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"\
    #a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected:\
    \ \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n\
    \     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpce_lc5_n_test.go:54: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpce_lc5_n_test.go:54: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var res string\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            res += string(c\
    \ - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            res += string(c\
    \ + 32)\n        } else {\n            res += string(c)\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n    \
    \ { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp1fcnnx6z_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp1fcnnx6z_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var result string\n    for _, c := range s {\n        if c >= 'a' &&\
    \ c <= 'z' {\n            result += string(c - 32)\n        } else if c >= 'A'\
    \ && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n    \
    \        result += string(c)\n        }\n    }\n    if result == s {\n       \
    \ return reverse(s)\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"\
    ), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected: \"4321\"\
    \ },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"\
    #a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected:\
    \ \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n\
    \     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_mn9fvhg_test.go:32:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073305
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var result []byte\n    for i := len(s) - 1; i >= 0; i-- {\n        if\
    \ s[i] >= 'a' && s[i] <= 'z' {\n            result = append(result, s[i] - 32)\n\
    \        } else if s[i] >= 'A' && s[i] <= 'Z' {\n            result = append(result,\
    \ s[i] + 32)\n        } else {\n            result = append(result, s[i])\n  \
    \      }\n    }\n    return string(result)\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"\
    ), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected: \"4321\"\
    \ },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"\
    #a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected:\
    \ \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n\
    \     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpnr95vzcd_test.go:54: expected 'aSdF', got 'FdSa'\n    --- FAIL: TestSolve/test_num__2\
    \ (0.00s)\n        tmpnr95vzcd_test.go:54: expected 'AB', got 'BA'\n    --- FAIL:\
    \ TestSolve/test_num__3 (0.00s)\n        tmpnr95vzcd_test.go:54: expected '#A@c',\
    \ got 'c@A#'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n        tmpnr95vzcd_test.go:54:\
    \ expected '#aSDFw^45', got '54^wFDSa#'\n    --- FAIL: TestSolve/test_num__6 (0.00s)\n\
    \        tmpnr95vzcd_test.go:54: expected '#$A^d', got 'd^A$#'\n    --- FAIL:\
    \ TestSolve/test_num__7 (0.00s)\n        tmpnr95vzcd_test.go:54: expected '#CCC',\
    \ got 'CCC#'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var res string\n    for _, c := range s {\n        if c >= 'a' && c <=\
    \ 'z' {\n            res += string(c - 32)\n        } else if c >= 'A' && c <=\
    \ 'Z' {\n            res += string(c + 32)\n        } else {\n            res\
    \ += string(c)\n        }\n    }\n    if len(res) == len(s) {\n        return\
    \ res\n    }\n    for i, j := 0, len(res) - 1; i < j; i, j = i + 1, j - 1 {\n\
    \        res[i], res[j] = res[j], res[i]\n    }\n    return res\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqnnfwlr_test.go:35:9: cannot assign to res[i] (value of type byte)

    /tmp/tmpfqnnfwlr_test.go:35:17: cannot assign to res[j] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp6k0gpyd9_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp6k0gpyd9_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var result string\n    for _, c := range s {\n        if c >= 'a' &&\
    \ c <= 'z' {\n            result += string(c - 'a' + 'A')\n        } else if c\
    \ >= 'A' && c <= 'Z' {\n            result += string(c - 'A' + 'a')\n        }\
    \ else {\n            result += string(c)\n        }\n    }\n    if result ==\
    \ s {\n        return reverse(s)\n    }\n    return result\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj7_6j5tt_test.go:32:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073305
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var res string\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            res += string(c\
    \ - 'a' + 'A')\n        } else if c >= 'A' && c <= 'Z' {\n            res += string(c\
    \ - 'A' + 'a')\n        } else {\n            res += string(c)\n        }\n  \
    \  }\n    return res\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n\
    \     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpha_xx4ir_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpha_xx4ir_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var res string\n    for _, c := range s {\n        if c >= 'a' && c <=\
    \ 'z' {\n            res += string(c - 32)\n        } else if c >= 'A' && c <=\
    \ 'Z' {\n            res += string(c + 32)\n        } else {\n            res\
    \ += string(c)\n        }\n    }\n    if len(res) == len(s) {\n        return\
    \ reverse(res)\n    }\n    return res\n}\n\nfunc TestSolve(t *testing.T) {\n \
    \ candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected:\
    \ \"aSdF\" },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n   \
    \  { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"\
    #a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected:\
    \ \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n\
    \     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpghznctbk_test.go:32:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    // if s[0] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    if s[0] >= 'a' && s[0] <= 'z' {\n        s = string(s[0] -\
    \ 32) + s[1:]\n    } else if s[0] >= 'A' && s[0] <= 'Z' {\n        s = string(s[0]\
    \ + 32) + s[1:]\n    }\n    return s[0:1] + solve(s[1:])\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp56orrb14_test.go:54: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp56orrb14_test.go:54: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    if len(s) == 1 {\n   \
    \     if s[0] >= 'a' && s[0] <= 'z' {\n            return string(s[0] - 32)\n\
    \        } else if s[0] >= 'A' && s[0] <= 'Z' {\n            return string(s[0]\
    \ + 32)\n        } else {\n            return s\n        }\n    }\n    var res\
    \ string\n    for i := 0; i < len(s); i++ {\n        if s[i] >= 'a' && s[i] <=\
    \ 'z' {\n            res += string(s[i] - 32)\n        } else if s[i] >= 'A' &&\
    \ s[i] <= 'Z' {\n            res += string(s[i] + 32)\n        } else {\n    \
    \        res += string(s[i])\n        }\n    }\n    return res\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmprq6q8s0v_test.go:66: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmprq6q8s0v_test.go:66: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    runes := []rune(s)\n \
    \   for i, r := range runes {\n        if r >= 'a' && r <= 'z' {\n           \
    \ runes[i] = r - 32\n        } else if r >= 'A' && r <= 'Z' {\n            runes[i]\
    \ = r + 32\n        }\n    }\n    return string(runes)\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp02bg9_8p_test.go:55: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp02bg9_8p_test.go:55: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var result string\n    for _, c := range s {\n        if c >= 'a' &&\
    \ c <= 'z' {\n            result += string(c - 32)\n        } else if c >= 'A'\
    \ && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n    \
    \        result += string(c)\n        }\n    }\n    if len(result) == len(s) {\n\
    \        return result\n    }\n    return reverse(result)\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqink1zw6_test.go:34:12: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var result string\n    for _, c := range s {\n        if c >= 'a' &&\
    \ c <= 'z' {\n            result += string(c - 32)\n        } else if c >= 'A'\
    \ && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n    \
    \        result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp0xle4i2g_test.go:54: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp0xle4i2g_test.go:54: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if s == \"\" {\n        return s\n    }\n    var r []rune\n    for _,\
    \ c := range s {\n        if c >= 'a' && c <= 'z' {\n            r = append(r,\
    \ c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            r = append(r,\
    \ c + 32)\n        } else {\n            r = append(r, c)\n        }\n    }\n\
    \    return string(r)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n\
    \     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmppwb8619y_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmppwb8619y_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var res string\n    for _, c := range s {\n        if c >= 'a' && c <=\
    \ 'z' {\n            res += string(c - 32)\n        } else if c >= 'A' && c <=\
    \ 'Z' {\n            res += string(c + 32)\n        } else {\n            res\
    \ += string(c)\n        }\n    }\n    if len(res) == len(s) {\n        return\
    \ res\n    }\n    return reverse(res)\n}\n\nfunc TestSolve(t *testing.T) {\n \
    \ candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected:\
    \ \"aSdF\" },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n   \
    \  { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"\
    #a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected:\
    \ \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n\
    \     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpemt4k_vw_test.go:34:12: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var res string\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            res += string(c\
    \ - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            res += string(c\
    \ + 32)\n        } else {\n            res += string(c)\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n    \
    \ { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp1fcnnx6z_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp1fcnnx6z_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var res string\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            res += string(c\
    \ - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            res += string(c\
    \ + 32)\n        } else {\n            res += string(c)\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n    \
    \ { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp1fcnnx6z_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp1fcnnx6z_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var res string\n    for _, c := range s {\n        if c >= 'a' && c <=\
    \ 'z' {\n            res += string(c - 32)\n        } else if c >= 'A' && c <=\
    \ 'Z' {\n            res += string(c + 32)\n        } else {\n            res\
    \ += string(c)\n        }\n    }\n    return res\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"\
    ), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected: \"4321\"\
    \ },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"\
    #a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected:\
    \ \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n\
    \     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpce_lc5_n_test.go:54: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpce_lc5_n_test.go:54: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var res string\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            res += string(c\
    \ - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            res += string(c\
    \ + 32)\n        } else {\n            res += string(c)\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n    \
    \ { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp1fcnnx6z_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp1fcnnx6z_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var res string\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            res += string(c\
    \ - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            res += string(c\
    \ + 32)\n        } else {\n            res += string(c)\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n    \
    \ { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp1fcnnx6z_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp1fcnnx6z_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var r string\n    for _, c := range s {\n        if c >= 'a' && c <=\
    \ 'z' {\n            r += string(c - 32)\n        } else if c >= 'A' && c <= 'Z'\
    \ {\n            r += string(c + 32)\n        } else {\n            r += string(c)\n\
    \        }\n    }\n    return r\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp9vbshhsi_test.go:54: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp9vbshhsi_test.go:54: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073215
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var res string\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            res += string(c\
    \ - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            res += string(c\
    \ + 32)\n        } else {\n            res += string(c)\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n    \
    \ { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp1fcnnx6z_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp1fcnnx6z_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var res string\n    for _, c := range s {\n        if c >= 'a' && c <=\
    \ 'z' {\n            res += string(c - 32)\n        } else if c >= 'A' && c <=\
    \ 'Z' {\n            res += string(c + 32)\n        } else {\n            res\
    \ += string(c)\n        }\n    }\n    return res\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"\
    ), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected: \"4321\"\
    \ },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"\
    #a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected:\
    \ \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n\
    \     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpce_lc5_n_test.go:54: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpce_lc5_n_test.go:54: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var result string\n    for _, c := range s {\n        if c >= 'a' &&\
    \ c <= 'z' {\n            result += string(c - 32)\n        } else if c >= 'A'\
    \ && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n    \
    \        result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp0xle4i2g_test.go:54: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp0xle4i2g_test.go:54: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var res string\n    for _, c := range s {\n        if c >= 'a' && c <=\
    \ 'z' {\n            res += string(c - 32)\n        } else if c >= 'A' && c <=\
    \ 'Z' {\n            res += string(c + 32)\n        } else {\n            res\
    \ += string(c)\n        }\n    }\n    return res\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"\
    ), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected: \"4321\"\
    \ },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"\
    #a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected:\
    \ \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n\
    \     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpce_lc5_n_test.go:54: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpce_lc5_n_test.go:54: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp6k0gpyd9_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp6k0gpyd9_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp6k0gpyd9_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp6k0gpyd9_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    if len(s) == 1 {\n   \
    \     if s[0] >= 'a' && s[0] <= 'z' {\n            return string(s[0] - 32)\n\
    \        } else if s[0] >= 'A' && s[0] <= 'Z' {\n            return string(s[0]\
    \ + 32)\n        } else {\n            return s\n        }\n    }\n    var result\
    \ string\n    for i := 0; i < len(s); i++ {\n        if s[i] >= 'a' && s[i] <=\
    \ 'z' {\n            result += string(s[i] - 32)\n        } else if s[i] >= 'A'\
    \ && s[i] <= 'Z' {\n            result += string(s[i] + 32)\n        } else {\n\
    \            result += string(s[i])\n        }\n    }\n    if len(result) == len(s)\
    \ {\n        return result\n    }\n    return reverse(result)\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5tcd4kx7_test.go:46:12: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073215
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp6k0gpyd9_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp6k0gpyd9_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp6k0gpyd9_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp6k0gpyd9_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    runes := []rune(s)\n \
    \   for i, r := range runes {\n        if r >= 'a' && r <= 'z' {\n           \
    \ runes[i] = r - 32\n        } else if r >= 'A' && r <= 'Z' {\n            runes[i]\
    \ = r + 32\n        }\n    }\n    return string(runes)\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp02bg9_8p_test.go:55: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp02bg9_8p_test.go:55: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var res string\n    for _, c := range s {\n        if c >= 'a' && c <=\
    \ 'z' {\n            res += string(c - 32)\n        } else if c >= 'A' && c <=\
    \ 'Z' {\n            res += string(c + 32)\n        } else {\n            res\
    \ += string(c)\n        }\n    }\n    if len(res) == len(s) {\n        return\
    \ res\n    }\n    return reverse(res)\n}\n\nfunc TestSolve(t *testing.T) {\n \
    \ candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected:\
    \ \"aSdF\" },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n   \
    \  { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"\
    #a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected:\
    \ \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n\
    \     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpemt4k_vw_test.go:34:12: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073213
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var res string\n    for _, c := range s {\n        if c >= 'a' && c <=\
    \ 'z' {\n            res += string(c - 32)\n        } else if c >= 'A' && c <=\
    \ 'Z' {\n            res += string(c + 32)\n        } else {\n            res\
    \ += string(c)\n        }\n    }\n    if len(res) == len(s) {\n        return\
    \ res\n    }\n    for i, j := 0, len(res) - 1; i < j; i, j = i + 1, j - 1 {\n\
    \        res[i], res[j] = res[j], res[i]\n    }\n    return res\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqnnfwlr_test.go:35:9: cannot assign to res[i] (value of type byte)

    /tmp/tmpfqnnfwlr_test.go:35:17: cannot assign to res[j] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp6k0gpyd9_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp6k0gpyd9_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var res string\n    for _, c := range s {\n        if c >= 'a' && c <=\
    \ 'z' {\n            res += string(c - 32)\n        } else if c >= 'A' && c <=\
    \ 'Z' {\n            res += string(c + 32)\n        } else {\n            res\
    \ += string(c)\n        }\n    }\n    if len(res) == len(s) {\n        return\
    \ res\n    }\n    return Reverse(res)\n}\n\nfunc TestSolve(t *testing.T) {\n \
    \ candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected:\
    \ \"aSdF\" },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n   \
    \  { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"\
    #a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected:\
    \ \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n\
    \     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnbw7x09o_test.go:34:12: undefined: Reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073305
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    if len(s) == 1 {\n   \
    \     if s[0] >= 'a' && s[0] <= 'z' {\n            return string(s[0] - 32)\n\
    \        } else if s[0] >= 'A' && s[0] <= 'Z' {\n            return string(s[0]\
    \ + 32)\n        } else {\n            return s\n        }\n    }\n    var res\
    \ string\n    for i := 0; i < len(s); i++ {\n        if s[i] >= 'a' && s[i] <=\
    \ 'z' {\n            res += string(s[i] - 32)\n        } else if s[i] >= 'A' &&\
    \ s[i] <= 'Z' {\n            res += string(s[i] + 32)\n        } else {\n    \
    \        res += string(s[i])\n        }\n    }\n    return res\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmprq6q8s0v_test.go:66: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmprq6q8s0v_test.go:66: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var res string\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            res += string(c\
    \ - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            res += string(c\
    \ + 32)\n        } else {\n            res += string(c)\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n    \
    \ { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp1fcnnx6z_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp1fcnnx6z_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    if len(s) == 1 {\n   \
    \     if s[0] >= 'a' && s[0] <= 'z' {\n            return string(s[0] - 32)\n\
    \        } else if s[0] >= 'A' && s[0] <= 'Z' {\n            return string(s[0]\
    \ + 32)\n        } else {\n            return s\n        }\n    }\n    var result\
    \ string\n    for i := 0; i < len(s); i++ {\n        if s[i] >= 'a' && s[i] <=\
    \ 'z' {\n            result += string(s[i] - 32)\n        } else if s[i] >= 'A'\
    \ && s[i] <= 'Z' {\n            result += string(s[i] + 32)\n        } else {\n\
    \            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\
    func TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"\
    1234\"), expected: \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"\
    AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual:\
    \ candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"\
    #6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected:\
    \ \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpvaszjpeu_test.go:66: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpvaszjpeu_test.go:66: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var res string\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            res += string(c\
    \ - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            res += string(c\
    \ + 32)\n        } else {\n            res += string(c)\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n    \
    \ { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp1fcnnx6z_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp1fcnnx6z_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var r []rune\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            r = append(r,\
    \ c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            r = append(r,\
    \ c + 32)\n        } else {\n            r = append(r, c)\n        }\n    }\n\
    \    return string(r)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n\
    \     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpfg0tjuj6_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpfg0tjuj6_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result []rune\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ = append(result, c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n       \
    \     result = append(result, c + 32)\n        } else {\n            result =\
    \ append(result, c)\n        }\n    }\n    return string(result)\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpwthak9e1_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpwthak9e1_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073215
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp6k0gpyd9_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp6k0gpyd9_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var res string\n    for _, c := range s {\n        if c >= 'a' && c <=\
    \ 'z' {\n            res += string(c - 32)\n        } else if c >= 'A' && c <=\
    \ 'Z' {\n            res += string(c + 32)\n        } else {\n            res\
    \ += string(c)\n        }\n    }\n    if len(res) == len(s) {\n        return\
    \ res\n    }\n    return reverse(res)\n}\n\nfunc TestSolve(t *testing.T) {\n \
    \ candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected:\
    \ \"aSdF\" },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n   \
    \  { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"\
    #a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected:\
    \ \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n\
    \     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpemt4k_vw_test.go:34:12: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073213
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var res string\n    for _, c := range s {\n        if c >= 'a' && c <=\
    \ 'z' {\n            res += string(c - 32)\n        } else if c >= 'A' && c <=\
    \ 'Z' {\n            res += string(c + 32)\n        } else {\n            res\
    \ += string(c)\n        }\n    }\n    if len(res) == len(s) {\n        return\
    \ res\n    }\n    for i, j := 0, len(res) - 1; i < j; i, j = i + 1, j - 1 {\n\
    \        res[i], res[j] = res[j], res[i]\n    }\n    return res\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqnnfwlr_test.go:35:9: cannot assign to res[i] (value of type byte)

    /tmp/tmpfqnnfwlr_test.go:35:17: cannot assign to res[j] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var res string\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            res += string(c\
    \ - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            res += string(c\
    \ + 32)\n        } else {\n            res += string(c)\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n    \
    \ { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp1fcnnx6z_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp1fcnnx6z_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var res string\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            res += string(c\
    \ - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            res += string(c\
    \ + 32)\n        } else {\n            res += string(c)\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n    \
    \ { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp1fcnnx6z_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp1fcnnx6z_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    r := []rune(s)\n    for\
    \ i, c := range r {\n        if c >= 'a' && c <= 'z' {\n            r[i] = c -\
    \ 32\n        } else if c >= 'A' && c <= 'Z' {\n            r[i] = c + 32\n  \
    \      }\n    }\n    return string(r)\n}\n\nfunc TestSolve(t *testing.T) {\n \
    \ candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected:\
    \ \"aSdF\" },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n   \
    \  { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"\
    #a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected:\
    \ \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n\
    \     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpw3ng2l3p_test.go:55: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpw3ng2l3p_test.go:55: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073215
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    runes := []rune(s)\n \
    \   for i, r := range runes {\n        if r >= 'a' && r <= 'z' {\n           \
    \ runes[i] = r - 32\n        } else if r >= 'A' && r <= 'Z' {\n            runes[i]\
    \ = r + 32\n        }\n    }\n    return string(runes)\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp02bg9_8p_test.go:55: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp02bg9_8p_test.go:55: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    if len(s) == 1 {\n   \
    \     return s\n    }\n    var r []rune\n    for _, c := range s {\n        if\
    \ c >= 'a' && c <= 'z' {\n            r = append(r, c - 32)\n        } else if\
    \ c >= 'A' && c <= 'Z' {\n            r = append(r, c + 32)\n        } else {\n\
    \            r = append(r, c)\n        }\n    }\n    return string(r)\n}\n\nfunc\
    \ TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"\
    1234\"), expected: \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"\
    AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual:\
    \ candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"\
    #6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected:\
    \ \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpm4n9asfj_test.go:60: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpm4n9asfj_test.go:60: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073215
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var res string\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            res += string(c\
    \ - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            res += string(c\
    \ + 32)\n        } else {\n            res += string(c)\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n    \
    \ { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp1fcnnx6z_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp1fcnnx6z_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp6k0gpyd9_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp6k0gpyd9_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp6k0gpyd9_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp6k0gpyd9_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var r []rune\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            r = append(r,\
    \ c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            r = append(r,\
    \ c + 32)\n        } else {\n            r = append(r, c)\n        }\n    }\n\
    \    return string(r)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n\
    \     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpfg0tjuj6_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpfg0tjuj6_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    var res string\n    for _, c := range s {\n        if c >= 'a' && c <=\
    \ 'z' {\n            res += string(c - 32)\n        } else if c >= 'A' && c <=\
    \ 'Z' {\n            res += string(c + 32)\n        } else {\n            res\
    \ += string(c)\n        }\n    }\n    if len(res) == len(s) {\n        return\
    \ res\n    }\n    for i, j := 0, len(res) - 1; i < j; i, j = i + 1, j - 1 {\n\
    \        res[i], res[j] = res[j], res[i]\n    }\n    return res\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected:\
    \ \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual:\
    \ candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"\
    ), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"\
    2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     {\
    \ actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqnnfwlr_test.go:35:9: cannot assign to res[i] (value of type byte)

    /tmp/tmpfqnnfwlr_test.go:35:17: cannot assign to res[j] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var result string\n  \
    \  for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\"\
    \ },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual:\
    \ candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"),\
    \ expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"\
    #aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n  \
    \   { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp6k0gpyd9_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp6k0gpyd9_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    // your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"\
    ), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected: \"4321\"\
    \ },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"\
    #a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected:\
    \ \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n\
    \     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"\
    #ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp7iqcwyhb_test.go:45: expected 'aSdF', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmp7iqcwyhb_test.go:45: expected '4321', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmp7iqcwyhb_test.go:45: expected 'AB',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmp7iqcwyhb_test.go:45:\
    \ expected '#A@c', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmp7iqcwyhb_test.go:45: expected '#aSDFw^45', got ''\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp7iqcwyhb_test.go:45: expected '2@6#', got ''\n    --- FAIL:\
    \ TestSolve/test_num__6 (0.00s)\n        tmp7iqcwyhb_test.go:45: expected '#$A^d',\
    \ got ''\n    --- FAIL: TestSolve/test_num__7 (0.00s)\n        tmp7iqcwyhb_test.go:45:\
    \ expected '#CCC', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var res string\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            res += string(c\
    \ - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            res += string(c\
    \ + 32)\n        } else {\n            res += string(c)\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n    \
    \ { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmp1fcnnx6z_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmp1fcnnx6z_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a string s.\n// if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
    \ no letters, reverse the string.\n// The function should return the resulted\
    \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
    )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string\
    \ {\n    if len(s) == 0 {\n        return s\n    }\n    var r []rune\n    for\
    \ _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            r = append(r,\
    \ c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            r = append(r,\
    \ c + 32)\n        } else {\n            r = append(r, c)\n        }\n    }\n\
    \    return string(r)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n\
    \     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"\
    ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\"\
    \ },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n  \
    \   { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"\
    #$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected:\
    \ \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpfg0tjuj6_test.go:57: expected '4321', got '1234'\n    --- FAIL: TestSolve/test_num__5\
    \ (0.00s)\n        tmpfg0tjuj6_test.go:57: expected '2@6#', got '#6@2'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073213
